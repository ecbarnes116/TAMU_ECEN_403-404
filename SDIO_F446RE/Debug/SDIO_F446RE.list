
SDIO_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c30  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08008e00  08008e00  00018e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090e8  080090e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080090e8  080090e8  000190e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090f0  080090f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090f0  080090f0  000190f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090f4  080090f4  000190f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080090f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022e8  20000070  08009168  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002358  08009168  00022358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136c3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f01  00000000  00000000  00033763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00036668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec0  00000000  00000000  00037670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004bc5  00000000  00000000  00038530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015cbd  00000000  00000000  0003d0f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd631  00000000  00000000  00052db2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001303e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004960  00000000  00000000  00130434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008de8 	.word	0x08008de8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08008de8 	.word	0x08008de8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005c4:	f003 0301 	and.w	r3, r3, #1
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d013      	beq.n	80005f4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005d4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d00b      	beq.n	80005f4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005dc:	e000      	b.n	80005e0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005de:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d0f9      	beq.n	80005de <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	b2d2      	uxtb	r2, r2
 80005f2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005f4:	687b      	ldr	r3, [r7, #4]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr

08000602 <_write>:
UINT br, bw;
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

int _write(int file, char *ptr, int length) {
 8000602:	b580      	push	{r7, lr}
 8000604:	b086      	sub	sp, #24
 8000606:	af00      	add	r7, sp, #0
 8000608:	60f8      	str	r0, [r7, #12]
 800060a:	60b9      	str	r1, [r7, #8]
 800060c:	607a      	str	r2, [r7, #4]
	int i = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]

	for(i = 0; i < length; i++) {
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
 8000616:	e009      	b.n	800062c <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	60ba      	str	r2, [r7, #8]
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff ffc7 	bl	80005b4 <ITM_SendChar>
	for(i = 0; i < length; i++) {
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	3301      	adds	r3, #1
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	697a      	ldr	r2, [r7, #20]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	429a      	cmp	r2, r3
 8000632:	dbf1      	blt.n	8000618 <_write+0x16>
	}

	return length;
 8000634:	687b      	ldr	r3, [r7, #4]
}
 8000636:	4618      	mov	r0, r3
 8000638:	3718      	adds	r7, #24
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <bufsize>:

int bufsize (char *buf)
{
 800063e:	b480      	push	{r7}
 8000640:	b085      	sub	sp, #20
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
	int i=0;
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 800064a:	e002      	b.n	8000652 <bufsize+0x14>
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3301      	adds	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	607a      	str	r2, [r7, #4]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d1f6      	bne.n	800064c <bufsize+0xe>
	return i;
 800065e:	68fb      	ldr	r3, [r7, #12]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b5b0      	push	{r4, r5, r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000672:	f000 fd21 	bl	80010b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000676:	f000 f8cd 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067a:	f000 f9f9 	bl	8000a70 <MX_GPIO_Init>
  MX_DMA_Init();
 800067e:	f000 f9d7 	bl	8000a30 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000682:	f000 f9ab 	bl	80009dc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000686:	f000 f937 	bl	80008f8 <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 800068a:	f000 f987 	bl	800099c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800068e:	f004 febd 	bl	800540c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  // Mount SD card
  fresult = f_mount(&fs, "", 0);
 8000692:	2200      	movs	r2, #0
 8000694:	494a      	ldr	r1, [pc, #296]	; (80007c0 <main+0x154>)
 8000696:	484b      	ldr	r0, [pc, #300]	; (80007c4 <main+0x158>)
 8000698:	f006 fe8c 	bl	80073b4 <f_mount>
 800069c:	4603      	mov	r3, r0
 800069e:	461a      	mov	r2, r3
 80006a0:	4b49      	ldr	r3, [pc, #292]	; (80007c8 <main+0x15c>)
 80006a2:	701a      	strb	r2, [r3, #0]

  BSP_SD_IsDetected();
 80006a4:	f004 ff3e 	bl	8005524 <BSP_SD_IsDetected>

  if(fresult != FR_OK){
 80006a8:	4b47      	ldr	r3, [pc, #284]	; (80007c8 <main+0x15c>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d003      	beq.n	80006b8 <main+0x4c>
	  printf("ERROR in mounting SD card...\n");
 80006b0:	4846      	ldr	r0, [pc, #280]	; (80007cc <main+0x160>)
 80006b2:	f007 fc1b 	bl	8007eec <puts>
 80006b6:	e002      	b.n	80006be <main+0x52>
  }
  else {
	  printf("SD card mounted successfully...\n");
 80006b8:	4845      	ldr	r0, [pc, #276]	; (80007d0 <main+0x164>)
 80006ba:	f007 fc17 	bl	8007eec <puts>
  }

  char *name = "file_1.txt";
 80006be:	4b45      	ldr	r3, [pc, #276]	; (80007d4 <main+0x168>)
 80006c0:	607b      	str	r3, [r7, #4]

  fresult = f_stat (name, &fno);
 80006c2:	4945      	ldr	r1, [pc, #276]	; (80007d8 <main+0x16c>)
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f007 fac3 	bl	8007c50 <f_stat>
 80006ca:	4603      	mov	r3, r0
 80006cc:	461a      	mov	r2, r3
 80006ce:	4b3e      	ldr	r3, [pc, #248]	; (80007c8 <main+0x15c>)
 80006d0:	701a      	strb	r2, [r3, #0]

  if (fresult == FR_OK) {
 80006d2:	4b3d      	ldr	r3, [pc, #244]	; (80007c8 <main+0x15c>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d104      	bne.n	80006e4 <main+0x78>
	  printf("*%s* already exists!!!!\n",name);
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	483f      	ldr	r0, [pc, #252]	; (80007dc <main+0x170>)
 80006de:	f007 fb7f 	bl	8007de0 <iprintf>
 80006e2:	e044      	b.n	800076e <main+0x102>
  }
  else {
	  fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80006e4:	220b      	movs	r2, #11
 80006e6:	6879      	ldr	r1, [r7, #4]
 80006e8:	483d      	ldr	r0, [pc, #244]	; (80007e0 <main+0x174>)
 80006ea:	f006 fea9 	bl	8007440 <f_open>
 80006ee:	4603      	mov	r3, r0
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b35      	ldr	r3, [pc, #212]	; (80007c8 <main+0x15c>)
 80006f4:	701a      	strb	r2, [r3, #0]
	  if(fresult != FR_OK) {
 80006f6:	4b34      	ldr	r3, [pc, #208]	; (80007c8 <main+0x15c>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d007      	beq.n	800070e <main+0xa2>
		  printf ("error no %d in creating file *%s*\n", fresult, name);
 80006fe:	4b32      	ldr	r3, [pc, #200]	; (80007c8 <main+0x15c>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	4619      	mov	r1, r3
 8000706:	4837      	ldr	r0, [pc, #220]	; (80007e4 <main+0x178>)
 8000708:	f007 fb6a 	bl	8007de0 <iprintf>
 800070c:	e003      	b.n	8000716 <main+0xaa>
	  }
	  else {
		  printf ("*%s* created successfully\n",name);
 800070e:	6879      	ldr	r1, [r7, #4]
 8000710:	4835      	ldr	r0, [pc, #212]	; (80007e8 <main+0x17c>)
 8000712:	f007 fb65 	bl	8007de0 <iprintf>
	  }

	  strcpy(buffer, "This is file 1 and it says 'Hello from Ethan!'\n");
 8000716:	4a35      	ldr	r2, [pc, #212]	; (80007ec <main+0x180>)
 8000718:	4b35      	ldr	r3, [pc, #212]	; (80007f0 <main+0x184>)
 800071a:	4614      	mov	r4, r2
 800071c:	461d      	mov	r5, r3
 800071e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000722:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000726:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800072a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	  // I THINK THIS IS THE BUFFER AARON WAS TALKING ABOUT
	  fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 800072e:	482f      	ldr	r0, [pc, #188]	; (80007ec <main+0x180>)
 8000730:	f7ff ff85 	bl	800063e <bufsize>
 8000734:	4603      	mov	r3, r0
 8000736:	461a      	mov	r2, r3
 8000738:	4b2e      	ldr	r3, [pc, #184]	; (80007f4 <main+0x188>)
 800073a:	492c      	ldr	r1, [pc, #176]	; (80007ec <main+0x180>)
 800073c:	4828      	ldr	r0, [pc, #160]	; (80007e0 <main+0x174>)
 800073e:	f007 f84b 	bl	80077d8 <f_write>
 8000742:	4603      	mov	r3, r0
 8000744:	461a      	mov	r2, r3
 8000746:	4b20      	ldr	r3, [pc, #128]	; (80007c8 <main+0x15c>)
 8000748:	701a      	strb	r2, [r3, #0]

	  fresult = f_close(&fil);
 800074a:	4825      	ldr	r0, [pc, #148]	; (80007e0 <main+0x174>)
 800074c:	f007 fa56 	bl	8007bfc <f_close>
 8000750:	4603      	mov	r3, r0
 8000752:	461a      	mov	r2, r3
 8000754:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <main+0x15c>)
 8000756:	701a      	strb	r2, [r3, #0]

	  if (fresult != FR_OK) {
 8000758:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <main+0x15c>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d006      	beq.n	800076e <main+0x102>
		  printf ("error no %d in closing file *%s*\n", fresult, name);
 8000760:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <main+0x15c>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	4619      	mov	r1, r3
 8000768:	4823      	ldr	r0, [pc, #140]	; (80007f8 <main+0x18c>)
 800076a:	f007 fb39 	bl	8007de0 <iprintf>
	  }
  }

  //unmount_sd();
  fresult = f_mount(NULL, "/", 1);
 800076e:	2201      	movs	r2, #1
 8000770:	4922      	ldr	r1, [pc, #136]	; (80007fc <main+0x190>)
 8000772:	2000      	movs	r0, #0
 8000774:	f006 fe1e 	bl	80073b4 <f_mount>
 8000778:	4603      	mov	r3, r0
 800077a:	461a      	mov	r2, r3
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <main+0x15c>)
 800077e:	701a      	strb	r2, [r3, #0]
  if (fresult == FR_OK) {
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <main+0x15c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d103      	bne.n	8000790 <main+0x124>
	  printf("SD CARD UNMOUNTED successfully...\n");
 8000788:	481d      	ldr	r0, [pc, #116]	; (8000800 <main+0x194>)
 800078a:	f007 fbaf 	bl	8007eec <puts>
 800078e:	e002      	b.n	8000796 <main+0x12a>
  }
  else {
	  printf("error!!! in UNMOUNTING SD CARD\n");
 8000790:	481c      	ldr	r0, [pc, #112]	; (8000804 <main+0x198>)
 8000792:	f007 fbab 	bl	8007eec <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // ***************** Testing debugging *****************
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000796:	2120      	movs	r1, #32
 8000798:	481b      	ldr	r0, [pc, #108]	; (8000808 <main+0x19c>)
 800079a:	f001 fd3e 	bl	800221a <HAL_GPIO_TogglePin>
	  count++;
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <main+0x1a0>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	3301      	adds	r3, #1
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <main+0x1a0>)
 80007a8:	701a      	strb	r2, [r3, #0]
	  printf("count = %d \n", count);
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <main+0x1a0>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	4619      	mov	r1, r3
 80007b0:	4817      	ldr	r0, [pc, #92]	; (8000810 <main+0x1a4>)
 80007b2:	f007 fb15 	bl	8007de0 <iprintf>
	  HAL_Delay(250);
 80007b6:	20fa      	movs	r0, #250	; 0xfa
 80007b8:	f000 fcf0 	bl	800119c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007bc:	e7eb      	b.n	8000796 <main+0x12a>
 80007be:	bf00      	nop
 80007c0:	08008e00 	.word	0x08008e00
 80007c4:	2000027c 	.word	0x2000027c
 80007c8:	200022f8 	.word	0x200022f8
 80007cc:	08008e04 	.word	0x08008e04
 80007d0:	08008e24 	.word	0x08008e24
 80007d4:	08008e44 	.word	0x08008e44
 80007d8:	200022e0 	.word	0x200022e0
 80007dc:	08008e50 	.word	0x08008e50
 80007e0:	200012b0 	.word	0x200012b0
 80007e4:	08008e6c 	.word	0x08008e6c
 80007e8:	08008e90 	.word	0x08008e90
 80007ec:	200001fc 	.word	0x200001fc
 80007f0:	08008eac 	.word	0x08008eac
 80007f4:	200022fc 	.word	0x200022fc
 80007f8:	08008edc 	.word	0x08008edc
 80007fc:	08008f00 	.word	0x08008f00
 8000800:	08008f04 	.word	0x08008f04
 8000804:	08008f28 	.word	0x08008f28
 8000808:	40020000 	.word	0x40020000
 800080c:	20002300 	.word	0x20002300
 8000810:	08008f48 	.word	0x08008f48

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	; 0x50
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2234      	movs	r2, #52	; 0x34
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f007 fad4 	bl	8007dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <SystemClock_Config+0xdc>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	4a2b      	ldr	r2, [pc, #172]	; (80008f0 <SystemClock_Config+0xdc>)
 8000842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000846:	6413      	str	r3, [r2, #64]	; 0x40
 8000848:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <SystemClock_Config+0xdc>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000854:	2300      	movs	r3, #0
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <SystemClock_Config+0xe0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a25      	ldr	r2, [pc, #148]	; (80008f4 <SystemClock_Config+0xe0>)
 800085e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <SystemClock_Config+0xe0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000870:	2302      	movs	r3, #2
 8000872:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000874:	2301      	movs	r3, #1
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000878:	2310      	movs	r3, #16
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087c:	2302      	movs	r3, #2
 800087e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000880:	2300      	movs	r3, #0
 8000882:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000884:	2308      	movs	r3, #8
 8000886:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000888:	23b4      	movs	r3, #180	; 0xb4
 800088a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800088c:	2302      	movs	r3, #2
 800088e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000890:	2309      	movs	r3, #9
 8000892:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000894:	2302      	movs	r3, #2
 8000896:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4618      	mov	r0, r3
 800089e:	f002 fb9b 	bl	8002fd8 <HAL_RCC_OscConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008a8:	f000 f95e 	bl	8000b68 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008ac:	f001 fcd0 	bl	8002250 <HAL_PWREx_EnableOverDrive>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008b6:	f000 f957 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ba:	230f      	movs	r3, #15
 80008bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008be:	2302      	movs	r3, #2
 80008c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	2105      	movs	r1, #5
 80008d8:	4618      	mov	r0, r3
 80008da:	f001 fd09 	bl	80022f0 <HAL_RCC_ClockConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008e4:	f000 f940 	bl	8000b68 <Error_Handler>
  }
}
 80008e8:	bf00      	nop
 80008ea:	3750      	adds	r7, #80	; 0x50
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40007000 	.word	0x40007000

080008f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008fe:	463b      	mov	r3, r7
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800090a:	4b21      	ldr	r3, [pc, #132]	; (8000990 <MX_ADC1_Init+0x98>)
 800090c:	4a21      	ldr	r2, [pc, #132]	; (8000994 <MX_ADC1_Init+0x9c>)
 800090e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000910:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <MX_ADC1_Init+0x98>)
 8000912:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000916:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000918:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <MX_ADC1_Init+0x98>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <MX_ADC1_Init+0x98>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000924:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_ADC1_Init+0x98>)
 8000926:	2200      	movs	r2, #0
 8000928:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <MX_ADC1_Init+0x98>)
 800092c:	2200      	movs	r2, #0
 800092e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_ADC1_Init+0x98>)
 8000934:	2200      	movs	r2, #0
 8000936:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_ADC1_Init+0x98>)
 800093a:	4a17      	ldr	r2, [pc, #92]	; (8000998 <MX_ADC1_Init+0xa0>)
 800093c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_ADC1_Init+0x98>)
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_ADC1_Init+0x98>)
 8000946:	2201      	movs	r2, #1
 8000948:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_ADC1_Init+0x98>)
 800094c:	2200      	movs	r2, #0
 800094e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_ADC1_Init+0x98>)
 8000954:	2201      	movs	r2, #1
 8000956:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000958:	480d      	ldr	r0, [pc, #52]	; (8000990 <MX_ADC1_Init+0x98>)
 800095a:	f000 fc43 	bl	80011e4 <HAL_ADC_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000964:	f000 f900 	bl	8000b68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000968:	2300      	movs	r3, #0
 800096a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800096c:	2301      	movs	r3, #1
 800096e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000970:	2300      	movs	r3, #0
 8000972:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000974:	463b      	mov	r3, r7
 8000976:	4619      	mov	r1, r3
 8000978:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_ADC1_Init+0x98>)
 800097a:	f000 fc77 	bl	800126c <HAL_ADC_ConfigChannel>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000984:	f000 f8f0 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	2000008c 	.word	0x2000008c
 8000994:	40012000 	.word	0x40012000
 8000998:	0f000001 	.word	0x0f000001

0800099c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_SDIO_SD_Init+0x38>)
 80009a2:	4a0d      	ldr	r2, [pc, #52]	; (80009d8 <MX_SDIO_SD_Init+0x3c>)
 80009a4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_SDIO_SD_Init+0x38>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_SDIO_SD_Init+0x38>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_SDIO_SD_Init+0x38>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_SDIO_SD_Init+0x38>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80009be:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <MX_SDIO_SD_Init+0x38>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 18;
 80009c4:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <MX_SDIO_SD_Init+0x38>)
 80009c6:	2212      	movs	r2, #18
 80009c8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	20000134 	.word	0x20000134
 80009d8:	40012c00 	.word	0x40012c00

080009dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <MX_USART2_UART_Init+0x50>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 80009e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 8000a14:	f003 fd06 	bl	8004424 <HAL_UART_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a1e:	f000 f8a3 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200001b8 	.word	0x200001b8
 8000a2c:	40004400 	.word	0x40004400

08000a30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_DMA_Init+0x3c>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <MX_DMA_Init+0x3c>)
 8000a40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_DMA_Init+0x3c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	2038      	movs	r0, #56	; 0x38
 8000a58:	f000 ff11 	bl	800187e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a5c:	2038      	movs	r0, #56	; 0x38
 8000a5e:	f000 ff2a 	bl	80018b6 <HAL_NVIC_EnableIRQ>

}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	4b34      	ldr	r3, [pc, #208]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a33      	ldr	r2, [pc, #204]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000a90:	f043 0304 	orr.w	r3, r3, #4
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b31      	ldr	r3, [pc, #196]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b2d      	ldr	r3, [pc, #180]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a2c      	ldr	r2, [pc, #176]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b2a      	ldr	r3, [pc, #168]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a25      	ldr	r2, [pc, #148]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b23      	ldr	r3, [pc, #140]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a1e      	ldr	r2, [pc, #120]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a17      	ldr	r2, [pc, #92]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000b00:	f043 0308 	orr.w	r3, r3, #8
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0308 	and.w	r3, r3, #8
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2120      	movs	r1, #32
 8000b16:	4812      	ldr	r0, [pc, #72]	; (8000b60 <MX_GPIO_Init+0xf0>)
 8000b18:	f001 fb66 	bl	80021e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b22:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	480c      	ldr	r0, [pc, #48]	; (8000b64 <MX_GPIO_Init+0xf4>)
 8000b34:	f001 f9c4 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b38:	2320      	movs	r3, #32
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4804      	ldr	r0, [pc, #16]	; (8000b60 <MX_GPIO_Init+0xf0>)
 8000b50:	f001 f9b6 	bl	8001ec0 <HAL_GPIO_Init>

}
 8000b54:	bf00      	nop
 8000b56:	3728      	adds	r7, #40	; 0x28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020000 	.word	0x40020000
 8000b64:	40020800 	.word	0x40020800

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <Error_Handler+0x8>
	...

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	4a0f      	ldr	r2, [pc, #60]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b88:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bb2:	2007      	movs	r0, #7
 8000bb4:	f000 fe58 	bl	8001868 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a3c      	ldr	r2, [pc, #240]	; (8000cd4 <HAL_ADC_MspInit+0x110>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d171      	bne.n	8000cca <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	4b3b      	ldr	r3, [pc, #236]	; (8000cd8 <HAL_ADC_MspInit+0x114>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	4a3a      	ldr	r2, [pc, #232]	; (8000cd8 <HAL_ADC_MspInit+0x114>)
 8000bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf6:	4b38      	ldr	r3, [pc, #224]	; (8000cd8 <HAL_ADC_MspInit+0x114>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_ADC_MspInit+0x114>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a33      	ldr	r2, [pc, #204]	; (8000cd8 <HAL_ADC_MspInit+0x114>)
 8000c0c:	f043 0304 	orr.w	r3, r3, #4
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b31      	ldr	r3, [pc, #196]	; (8000cd8 <HAL_ADC_MspInit+0x114>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	4b2d      	ldr	r3, [pc, #180]	; (8000cd8 <HAL_ADC_MspInit+0x114>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a2c      	ldr	r2, [pc, #176]	; (8000cd8 <HAL_ADC_MspInit+0x114>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <HAL_ADC_MspInit+0x114>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c3a:	230c      	movs	r3, #12
 8000c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4823      	ldr	r0, [pc, #140]	; (8000cdc <HAL_ADC_MspInit+0x118>)
 8000c4e:	f001 f937 	bl	8001ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000c52:	2313      	movs	r3, #19
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c56:	2303      	movs	r3, #3
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	481e      	ldr	r0, [pc, #120]	; (8000ce0 <HAL_ADC_MspInit+0x11c>)
 8000c66:	f001 f92b 	bl	8001ec0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <HAL_ADC_MspInit+0x120>)
 8000c6c:	4a1e      	ldr	r2, [pc, #120]	; (8000ce8 <HAL_ADC_MspInit+0x124>)
 8000c6e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c70:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <HAL_ADC_MspInit+0x120>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c76:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <HAL_ADC_MspInit+0x120>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c7c:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <HAL_ADC_MspInit+0x120>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_ADC_MspInit+0x120>)
 8000c84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c88:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <HAL_ADC_MspInit+0x120>)
 8000c8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c90:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <HAL_ADC_MspInit+0x120>)
 8000c94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c98:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_ADC_MspInit+0x120>)
 8000c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ca0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <HAL_ADC_MspInit+0x120>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_ADC_MspInit+0x120>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cae:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <HAL_ADC_MspInit+0x120>)
 8000cb0:	f000 fe1c 	bl	80018ec <HAL_DMA_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000cba:	f7ff ff55 	bl	8000b68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a08      	ldr	r2, [pc, #32]	; (8000ce4 <HAL_ADC_MspInit+0x120>)
 8000cc2:	639a      	str	r2, [r3, #56]	; 0x38
 8000cc4:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <HAL_ADC_MspInit+0x120>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40012000 	.word	0x40012000
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020800 	.word	0x40020800
 8000ce0:	40020000 	.word	0x40020000
 8000ce4:	200000d4 	.word	0x200000d4
 8000ce8:	40026410 	.word	0x40026410

08000cec <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b0a2      	sub	sp, #136	; 0x88
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d04:	f107 0318 	add.w	r3, r7, #24
 8000d08:	225c      	movs	r2, #92	; 0x5c
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f007 f85f 	bl	8007dd0 <memset>
  if(hsd->Instance==SDIO)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a43      	ldr	r2, [pc, #268]	; (8000e24 <HAL_SD_MspInit+0x138>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d17f      	bne.n	8000e1c <HAL_SD_MspInit+0x130>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8000d1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d20:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000d22:	2300      	movs	r3, #0
 8000d24:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000d26:	2300      	movs	r3, #0
 8000d28:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d2a:	f107 0318 	add.w	r3, r7, #24
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 fbf8 	bl	8002524 <HAL_RCCEx_PeriphCLKConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8000d3a:	f7ff ff15 	bl	8000b68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	4b39      	ldr	r3, [pc, #228]	; (8000e28 <HAL_SD_MspInit+0x13c>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	4a38      	ldr	r2, [pc, #224]	; (8000e28 <HAL_SD_MspInit+0x13c>)
 8000d48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4e:	4b36      	ldr	r3, [pc, #216]	; (8000e28 <HAL_SD_MspInit+0x13c>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	4b32      	ldr	r3, [pc, #200]	; (8000e28 <HAL_SD_MspInit+0x13c>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a31      	ldr	r2, [pc, #196]	; (8000e28 <HAL_SD_MspInit+0x13c>)
 8000d64:	f043 0302 	orr.w	r3, r3, #2
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <HAL_SD_MspInit+0x13c>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b2b      	ldr	r3, [pc, #172]	; (8000e28 <HAL_SD_MspInit+0x13c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a2a      	ldr	r2, [pc, #168]	; (8000e28 <HAL_SD_MspInit+0x13c>)
 8000d80:	f043 0304 	orr.w	r3, r3, #4
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b28      	ldr	r3, [pc, #160]	; (8000e28 <HAL_SD_MspInit+0x13c>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0304 	and.w	r3, r3, #4
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	4b24      	ldr	r3, [pc, #144]	; (8000e28 <HAL_SD_MspInit+0x13c>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a23      	ldr	r2, [pc, #140]	; (8000e28 <HAL_SD_MspInit+0x13c>)
 8000d9c:	f043 0308 	orr.w	r3, r3, #8
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <HAL_SD_MspInit+0x13c>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0308 	and.w	r3, r3, #8
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dae:	2304      	movs	r3, #4
 8000db0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4817      	ldr	r0, [pc, #92]	; (8000e2c <HAL_SD_MspInit+0x140>)
 8000dce:	f001 f877 	bl	8001ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000de6:	230c      	movs	r3, #12
 8000de8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000df0:	4619      	mov	r1, r3
 8000df2:	480f      	ldr	r0, [pc, #60]	; (8000e30 <HAL_SD_MspInit+0x144>)
 8000df4:	f001 f864 	bl	8001ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000df8:	2304      	movs	r3, #4
 8000dfa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e04:	2303      	movs	r3, #3
 8000e06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e0a:	230c      	movs	r3, #12
 8000e0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e10:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e14:	4619      	mov	r1, r3
 8000e16:	4807      	ldr	r0, [pc, #28]	; (8000e34 <HAL_SD_MspInit+0x148>)
 8000e18:	f001 f852 	bl	8001ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000e1c:	bf00      	nop
 8000e1e:	3788      	adds	r7, #136	; 0x88
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40012c00 	.word	0x40012c00
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020400 	.word	0x40020400
 8000e30:	40020800 	.word	0x40020800
 8000e34:	40020c00 	.word	0x40020c00

08000e38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a19      	ldr	r2, [pc, #100]	; (8000ebc <HAL_UART_MspInit+0x84>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d12b      	bne.n	8000eb2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_UART_MspInit+0x88>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	4a17      	ldr	r2, [pc, #92]	; (8000ec0 <HAL_UART_MspInit+0x88>)
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e68:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_UART_MspInit+0x88>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_UART_MspInit+0x88>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a10      	ldr	r2, [pc, #64]	; (8000ec0 <HAL_UART_MspInit+0x88>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_UART_MspInit+0x88>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e92:	230c      	movs	r3, #12
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea2:	2307      	movs	r3, #7
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <HAL_UART_MspInit+0x8c>)
 8000eae:	f001 f807 	bl	8001ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3728      	adds	r7, #40	; 0x28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40004400 	.word	0x40004400
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020000 	.word	0x40020000

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <NMI_Handler+0x4>

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler+0x4>

08000eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f14:	f000 f922 	bl	800115c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <DMA2_Stream0_IRQHandler+0x10>)
 8000f22:	f000 fd91 	bl	8001a48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200000d4 	.word	0x200000d4

08000f30 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	e00a      	b.n	8000f58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f42:	f3af 8000 	nop.w
 8000f46:	4601      	mov	r1, r0
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	1c5a      	adds	r2, r3, #1
 8000f4c:	60ba      	str	r2, [r7, #8]
 8000f4e:	b2ca      	uxtb	r2, r1
 8000f50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3301      	adds	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	dbf0      	blt.n	8000f42 <_read+0x12>
  }

  return len;
 8000f60:	687b      	ldr	r3, [r7, #4]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f92:	605a      	str	r2, [r3, #4]
  return 0;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <_isatty>:

int _isatty(int file)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fdc:	4a14      	ldr	r2, [pc, #80]	; (8001030 <_sbrk+0x5c>)
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <_sbrk+0x60>)
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d102      	bne.n	8000ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <_sbrk+0x64>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <_sbrk+0x68>)
 8000ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	429a      	cmp	r2, r3
 8001002:	d207      	bcs.n	8001014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001004:	f006 feba 	bl	8007d7c <__errno>
 8001008:	4603      	mov	r3, r0
 800100a:	220c      	movs	r2, #12
 800100c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	e009      	b.n	8001028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	4a05      	ldr	r2, [pc, #20]	; (8001038 <_sbrk+0x64>)
 8001024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001026:	68fb      	ldr	r3, [r7, #12]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20020000 	.word	0x20020000
 8001034:	00000400 	.word	0x00000400
 8001038:	20002304 	.word	0x20002304
 800103c:	20002358 	.word	0x20002358

08001040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <SystemInit+0x20>)
 8001046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104a:	4a05      	ldr	r2, [pc, #20]	; (8001060 <SystemInit+0x20>)
 800104c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800109c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001068:	480d      	ldr	r0, [pc, #52]	; (80010a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800106a:	490e      	ldr	r1, [pc, #56]	; (80010a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800106c:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001070:	e002      	b.n	8001078 <LoopCopyDataInit>

08001072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001076:	3304      	adds	r3, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800107c:	d3f9      	bcc.n	8001072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107e:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001080:	4c0b      	ldr	r4, [pc, #44]	; (80010b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001084:	e001      	b.n	800108a <LoopFillZerobss>

08001086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001088:	3204      	adds	r2, #4

0800108a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800108c:	d3fb      	bcc.n	8001086 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800108e:	f7ff ffd7 	bl	8001040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001092:	f006 fe79 	bl	8007d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001096:	f7ff fae9 	bl	800066c <main>
  bx  lr    
 800109a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800109c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010a8:	080090f8 	.word	0x080090f8
  ldr r2, =_sbss
 80010ac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010b0:	20002358 	.word	0x20002358

080010b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC_IRQHandler>
	...

080010b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <HAL_Init+0x40>)
 80010c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <HAL_Init+0x40>)
 80010ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <HAL_Init+0x40>)
 80010da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e0:	2003      	movs	r0, #3
 80010e2:	f000 fbc1 	bl	8001868 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 f808 	bl	80010fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ec:	f7ff fd42 	bl	8000b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023c00 	.word	0x40023c00

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_InitTick+0x54>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_InitTick+0x58>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001112:	fbb3 f3f1 	udiv	r3, r3, r1
 8001116:	fbb2 f3f3 	udiv	r3, r2, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fbd9 	bl	80018d2 <HAL_SYSTICK_Config>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e00e      	b.n	8001148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d80a      	bhi.n	8001146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001130:	2200      	movs	r2, #0
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f000 fba1 	bl	800187e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800113c:	4a06      	ldr	r2, [pc, #24]	; (8001158 <HAL_InitTick+0x5c>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000000 	.word	0x20000000
 8001154:	20000008 	.word	0x20000008
 8001158:	20000004 	.word	0x20000004

0800115c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x20>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x24>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <HAL_IncTick+0x24>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008
 8001180:	20002308 	.word	0x20002308

08001184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <HAL_GetTick+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20002308 	.word	0x20002308

0800119c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff ffee 	bl	8001184 <HAL_GetTick>
 80011a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b4:	d005      	beq.n	80011c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_Delay+0x44>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011c2:	bf00      	nop
 80011c4:	f7ff ffde 	bl	8001184 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d8f7      	bhi.n	80011c4 <HAL_Delay+0x28>
  {
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008

080011e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e033      	b.n	8001262 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d109      	bne.n	8001216 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff fcde 	bl	8000bc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f003 0310 	and.w	r3, r3, #16
 800121e:	2b00      	cmp	r3, #0
 8001220:	d118      	bne.n	8001254 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800122a:	f023 0302 	bic.w	r3, r3, #2
 800122e:	f043 0202 	orr.w	r2, r3, #2
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 f94a 	bl	80014d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f023 0303 	bic.w	r3, r3, #3
 800124a:	f043 0201 	orr.w	r2, r3, #1
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	641a      	str	r2, [r3, #64]	; 0x40
 8001252:	e001      	b.n	8001258 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001260:	7bfb      	ldrb	r3, [r7, #15]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001280:	2b01      	cmp	r3, #1
 8001282:	d101      	bne.n	8001288 <HAL_ADC_ConfigChannel+0x1c>
 8001284:	2302      	movs	r3, #2
 8001286:	e113      	b.n	80014b0 <HAL_ADC_ConfigChannel+0x244>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2201      	movs	r2, #1
 800128c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b09      	cmp	r3, #9
 8001296:	d925      	bls.n	80012e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	68d9      	ldr	r1, [r3, #12]
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	461a      	mov	r2, r3
 80012a6:	4613      	mov	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	4413      	add	r3, r2
 80012ac:	3b1e      	subs	r3, #30
 80012ae:	2207      	movs	r2, #7
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43da      	mvns	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	400a      	ands	r2, r1
 80012bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	68d9      	ldr	r1, [r3, #12]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	4603      	mov	r3, r0
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4403      	add	r3, r0
 80012d6:	3b1e      	subs	r3, #30
 80012d8:	409a      	lsls	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	e022      	b.n	800132a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6919      	ldr	r1, [r3, #16]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	461a      	mov	r2, r3
 80012f2:	4613      	mov	r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4413      	add	r3, r2
 80012f8:	2207      	movs	r2, #7
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	400a      	ands	r2, r1
 8001306:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6919      	ldr	r1, [r3, #16]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	b29b      	uxth	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	4603      	mov	r3, r0
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4403      	add	r3, r0
 8001320:	409a      	lsls	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	430a      	orrs	r2, r1
 8001328:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b06      	cmp	r3, #6
 8001330:	d824      	bhi.n	800137c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	3b05      	subs	r3, #5
 8001344:	221f      	movs	r2, #31
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43da      	mvns	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	400a      	ands	r2, r1
 8001352:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	b29b      	uxth	r3, r3
 8001360:	4618      	mov	r0, r3
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	3b05      	subs	r3, #5
 800136e:	fa00 f203 	lsl.w	r2, r0, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	635a      	str	r2, [r3, #52]	; 0x34
 800137a:	e04c      	b.n	8001416 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b0c      	cmp	r3, #12
 8001382:	d824      	bhi.n	80013ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	3b23      	subs	r3, #35	; 0x23
 8001396:	221f      	movs	r2, #31
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43da      	mvns	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	400a      	ands	r2, r1
 80013a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	3b23      	subs	r3, #35	; 0x23
 80013c0:	fa00 f203 	lsl.w	r2, r0, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	631a      	str	r2, [r3, #48]	; 0x30
 80013cc:	e023      	b.n	8001416 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	3b41      	subs	r3, #65	; 0x41
 80013e0:	221f      	movs	r2, #31
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43da      	mvns	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	400a      	ands	r2, r1
 80013ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	3b41      	subs	r3, #65	; 0x41
 800140a:	fa00 f203 	lsl.w	r2, r0, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001416:	4b29      	ldr	r3, [pc, #164]	; (80014bc <HAL_ADC_ConfigChannel+0x250>)
 8001418:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a28      	ldr	r2, [pc, #160]	; (80014c0 <HAL_ADC_ConfigChannel+0x254>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d10f      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x1d8>
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b12      	cmp	r3, #18
 800142a:	d10b      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a1d      	ldr	r2, [pc, #116]	; (80014c0 <HAL_ADC_ConfigChannel+0x254>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d12b      	bne.n	80014a6 <HAL_ADC_ConfigChannel+0x23a>
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a1c      	ldr	r2, [pc, #112]	; (80014c4 <HAL_ADC_ConfigChannel+0x258>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d003      	beq.n	8001460 <HAL_ADC_ConfigChannel+0x1f4>
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b11      	cmp	r3, #17
 800145e:	d122      	bne.n	80014a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a11      	ldr	r2, [pc, #68]	; (80014c4 <HAL_ADC_ConfigChannel+0x258>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d111      	bne.n	80014a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <HAL_ADC_ConfigChannel+0x25c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a11      	ldr	r2, [pc, #68]	; (80014cc <HAL_ADC_ConfigChannel+0x260>)
 8001488:	fba2 2303 	umull	r2, r3, r2, r3
 800148c:	0c9a      	lsrs	r2, r3, #18
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001498:	e002      	b.n	80014a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	3b01      	subs	r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f9      	bne.n	800149a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	40012300 	.word	0x40012300
 80014c0:	40012000 	.word	0x40012000
 80014c4:	10000012 	.word	0x10000012
 80014c8:	20000000 	.word	0x20000000
 80014cc:	431bde83 	.word	0x431bde83

080014d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014d8:	4b79      	ldr	r3, [pc, #484]	; (80016c0 <ADC_Init+0x1f0>)
 80014da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	431a      	orrs	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001504:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6859      	ldr	r1, [r3, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	021a      	lsls	r2, r3, #8
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001528:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6859      	ldr	r1, [r3, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	430a      	orrs	r2, r1
 800153a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800154a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6899      	ldr	r1, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001562:	4a58      	ldr	r2, [pc, #352]	; (80016c4 <ADC_Init+0x1f4>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d022      	beq.n	80015ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001576:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6899      	ldr	r1, [r3, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001598:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6899      	ldr	r1, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	e00f      	b.n	80015ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 0202 	bic.w	r2, r2, #2
 80015dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6899      	ldr	r1, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7e1b      	ldrb	r3, [r3, #24]
 80015e8:	005a      	lsls	r2, r3, #1
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d01b      	beq.n	8001634 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800160a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800161a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6859      	ldr	r1, [r3, #4]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001626:	3b01      	subs	r3, #1
 8001628:	035a      	lsls	r2, r3, #13
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	e007      	b.n	8001644 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001642:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001652:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	3b01      	subs	r3, #1
 8001660:	051a      	lsls	r2, r3, #20
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001678:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6899      	ldr	r1, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001686:	025a      	lsls	r2, r3, #9
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	430a      	orrs	r2, r1
 800168e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800169e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6899      	ldr	r1, [r3, #8]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	029a      	lsls	r2, r3, #10
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	609a      	str	r2, [r3, #8]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	40012300 	.word	0x40012300
 80016c4:	0f000001 	.word	0x0f000001

080016c8 <__NVIC_SetPriorityGrouping>:
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e4:	4013      	ands	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fa:	4a04      	ldr	r2, [pc, #16]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	60d3      	str	r3, [r2, #12]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_GetPriorityGrouping>:
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <__NVIC_GetPriorityGrouping+0x18>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	f003 0307 	and.w	r3, r3, #7
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_EnableIRQ>:
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	2b00      	cmp	r3, #0
 800173c:	db0b      	blt.n	8001756 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	f003 021f 	and.w	r2, r3, #31
 8001744:	4907      	ldr	r1, [pc, #28]	; (8001764 <__NVIC_EnableIRQ+0x38>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	2001      	movs	r0, #1
 800174e:	fa00 f202 	lsl.w	r2, r0, r2
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000e100 	.word	0xe000e100

08001768 <__NVIC_SetPriority>:
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	6039      	str	r1, [r7, #0]
 8001772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	2b00      	cmp	r3, #0
 800177a:	db0a      	blt.n	8001792 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	b2da      	uxtb	r2, r3
 8001780:	490c      	ldr	r1, [pc, #48]	; (80017b4 <__NVIC_SetPriority+0x4c>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	0112      	lsls	r2, r2, #4
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	440b      	add	r3, r1
 800178c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001790:	e00a      	b.n	80017a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	b2da      	uxtb	r2, r3
 8001796:	4908      	ldr	r1, [pc, #32]	; (80017b8 <__NVIC_SetPriority+0x50>)
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	3b04      	subs	r3, #4
 80017a0:	0112      	lsls	r2, r2, #4
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	440b      	add	r3, r1
 80017a6:	761a      	strb	r2, [r3, #24]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000e100 	.word	0xe000e100
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <NVIC_EncodePriority>:
{
 80017bc:	b480      	push	{r7}
 80017be:	b089      	sub	sp, #36	; 0x24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f1c3 0307 	rsb	r3, r3, #7
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	bf28      	it	cs
 80017da:	2304      	movcs	r3, #4
 80017dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3304      	adds	r3, #4
 80017e2:	2b06      	cmp	r3, #6
 80017e4:	d902      	bls.n	80017ec <NVIC_EncodePriority+0x30>
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3b03      	subs	r3, #3
 80017ea:	e000      	b.n	80017ee <NVIC_EncodePriority+0x32>
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	f04f 32ff 	mov.w	r2, #4294967295
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43da      	mvns	r2, r3
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	401a      	ands	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001804:	f04f 31ff 	mov.w	r1, #4294967295
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	43d9      	mvns	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	4313      	orrs	r3, r2
}
 8001816:	4618      	mov	r0, r3
 8001818:	3724      	adds	r7, #36	; 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <SysTick_Config>:
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b01      	subs	r3, #1
 8001830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001834:	d301      	bcc.n	800183a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001836:	2301      	movs	r3, #1
 8001838:	e00f      	b.n	800185a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <SysTick_Config+0x40>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001842:	210f      	movs	r1, #15
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f7ff ff8e 	bl	8001768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <SysTick_Config+0x40>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001852:	4b04      	ldr	r3, [pc, #16]	; (8001864 <SysTick_Config+0x40>)
 8001854:	2207      	movs	r2, #7
 8001856:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	e000e010 	.word	0xe000e010

08001868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ff29 	bl	80016c8 <__NVIC_SetPriorityGrouping>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	4603      	mov	r3, r0
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001890:	f7ff ff3e 	bl	8001710 <__NVIC_GetPriorityGrouping>
 8001894:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	68b9      	ldr	r1, [r7, #8]
 800189a:	6978      	ldr	r0, [r7, #20]
 800189c:	f7ff ff8e 	bl	80017bc <NVIC_EncodePriority>
 80018a0:	4602      	mov	r2, r0
 80018a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a6:	4611      	mov	r1, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff5d 	bl	8001768 <__NVIC_SetPriority>
}
 80018ae:	bf00      	nop
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	4603      	mov	r3, r0
 80018be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff31 	bl	800172c <__NVIC_EnableIRQ>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ffa2 	bl	8001824 <SysTick_Config>
 80018e0:	4603      	mov	r3, r0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018f8:	f7ff fc44 	bl	8001184 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e099      	b.n	8001a3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2202      	movs	r2, #2
 800190c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0201 	bic.w	r2, r2, #1
 8001926:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001928:	e00f      	b.n	800194a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800192a:	f7ff fc2b 	bl	8001184 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b05      	cmp	r3, #5
 8001936:	d908      	bls.n	800194a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2220      	movs	r2, #32
 800193c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2203      	movs	r2, #3
 8001942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e078      	b.n	8001a3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1e8      	bne.n	800192a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	4b38      	ldr	r3, [pc, #224]	; (8001a44 <HAL_DMA_Init+0x158>)
 8001964:	4013      	ands	r3, r2
 8001966:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001976:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001982:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800198e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	4313      	orrs	r3, r2
 800199a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d107      	bne.n	80019b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ac:	4313      	orrs	r3, r2
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f023 0307 	bic.w	r3, r3, #7
 80019ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d117      	bne.n	8001a0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00e      	beq.n	8001a0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f9e9 	bl	8001dc8 <DMA_CheckFifoParam>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d008      	beq.n	8001a0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2240      	movs	r2, #64	; 0x40
 8001a00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e016      	b.n	8001a3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f9a0 	bl	8001d5c <DMA_CalcBaseAndBitshift>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a24:	223f      	movs	r2, #63	; 0x3f
 8001a26:	409a      	lsls	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	f010803f 	.word	0xf010803f

08001a48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a54:	4b8e      	ldr	r3, [pc, #568]	; (8001c90 <HAL_DMA_IRQHandler+0x248>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a8e      	ldr	r2, [pc, #568]	; (8001c94 <HAL_DMA_IRQHandler+0x24c>)
 8001a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5e:	0a9b      	lsrs	r3, r3, #10
 8001a60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a72:	2208      	movs	r2, #8
 8001a74:	409a      	lsls	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d01a      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d013      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0204 	bic.w	r2, r2, #4
 8001a9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aac:	f043 0201 	orr.w	r2, r3, #1
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab8:	2201      	movs	r2, #1
 8001aba:	409a      	lsls	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d012      	beq.n	8001aea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00b      	beq.n	8001aea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	409a      	lsls	r2, r3
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae2:	f043 0202 	orr.w	r2, r3, #2
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aee:	2204      	movs	r2, #4
 8001af0:	409a      	lsls	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d012      	beq.n	8001b20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00b      	beq.n	8001b20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	409a      	lsls	r2, r3
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b18:	f043 0204 	orr.w	r2, r3, #4
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b24:	2210      	movs	r2, #16
 8001b26:	409a      	lsls	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d043      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d03c      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b42:	2210      	movs	r2, #16
 8001b44:	409a      	lsls	r2, r3
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d018      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d108      	bne.n	8001b78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d024      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	4798      	blx	r3
 8001b76:	e01f      	b.n	8001bb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d01b      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	4798      	blx	r3
 8001b88:	e016      	b.n	8001bb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d107      	bne.n	8001ba8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0208 	bic.w	r2, r2, #8
 8001ba6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 808f 	beq.w	8001ce8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 8087 	beq.w	8001ce8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bde:	2220      	movs	r2, #32
 8001be0:	409a      	lsls	r2, r3
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b05      	cmp	r3, #5
 8001bf0:	d136      	bne.n	8001c60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0216 	bic.w	r2, r2, #22
 8001c00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	695a      	ldr	r2, [r3, #20]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d103      	bne.n	8001c22 <HAL_DMA_IRQHandler+0x1da>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d007      	beq.n	8001c32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0208 	bic.w	r2, r2, #8
 8001c30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c36:	223f      	movs	r2, #63	; 0x3f
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d07e      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	4798      	blx	r3
        }
        return;
 8001c5e:	e079      	b.n	8001d54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d01d      	beq.n	8001caa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10d      	bne.n	8001c98 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d031      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	4798      	blx	r3
 8001c8c:	e02c      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x2a0>
 8001c8e:	bf00      	nop
 8001c90:	20000000 	.word	0x20000000
 8001c94:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d023      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	4798      	blx	r3
 8001ca8:	e01e      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10f      	bne.n	8001cd8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0210 	bic.w	r2, r2, #16
 8001cc6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d032      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d022      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2205      	movs	r2, #5
 8001d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0201 	bic.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	3301      	adds	r3, #1
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d307      	bcc.n	8001d30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f2      	bne.n	8001d14 <HAL_DMA_IRQHandler+0x2cc>
 8001d2e:	e000      	b.n	8001d32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d005      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	4798      	blx	r3
 8001d52:	e000      	b.n	8001d56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d54:	bf00      	nop
    }
  }
}
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	3b10      	subs	r3, #16
 8001d6c:	4a14      	ldr	r2, [pc, #80]	; (8001dc0 <DMA_CalcBaseAndBitshift+0x64>)
 8001d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d72:	091b      	lsrs	r3, r3, #4
 8001d74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d76:	4a13      	ldr	r2, [pc, #76]	; (8001dc4 <DMA_CalcBaseAndBitshift+0x68>)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d909      	bls.n	8001d9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d92:	f023 0303 	bic.w	r3, r3, #3
 8001d96:	1d1a      	adds	r2, r3, #4
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	659a      	str	r2, [r3, #88]	; 0x58
 8001d9c:	e007      	b.n	8001dae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001da6:	f023 0303 	bic.w	r3, r3, #3
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	aaaaaaab 	.word	0xaaaaaaab
 8001dc4:	08008fb4 	.word	0x08008fb4

08001dc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d11f      	bne.n	8001e22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d856      	bhi.n	8001e96 <DMA_CheckFifoParam+0xce>
 8001de8:	a201      	add	r2, pc, #4	; (adr r2, 8001df0 <DMA_CheckFifoParam+0x28>)
 8001dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dee:	bf00      	nop
 8001df0:	08001e01 	.word	0x08001e01
 8001df4:	08001e13 	.word	0x08001e13
 8001df8:	08001e01 	.word	0x08001e01
 8001dfc:	08001e97 	.word	0x08001e97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d046      	beq.n	8001e9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e10:	e043      	b.n	8001e9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e1a:	d140      	bne.n	8001e9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e20:	e03d      	b.n	8001e9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e2a:	d121      	bne.n	8001e70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	d837      	bhi.n	8001ea2 <DMA_CheckFifoParam+0xda>
 8001e32:	a201      	add	r2, pc, #4	; (adr r2, 8001e38 <DMA_CheckFifoParam+0x70>)
 8001e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e38:	08001e49 	.word	0x08001e49
 8001e3c:	08001e4f 	.word	0x08001e4f
 8001e40:	08001e49 	.word	0x08001e49
 8001e44:	08001e61 	.word	0x08001e61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e4c:	e030      	b.n	8001eb0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d025      	beq.n	8001ea6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e5e:	e022      	b.n	8001ea6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e68:	d11f      	bne.n	8001eaa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e6e:	e01c      	b.n	8001eaa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d903      	bls.n	8001e7e <DMA_CheckFifoParam+0xb6>
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d003      	beq.n	8001e84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e7c:	e018      	b.n	8001eb0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	73fb      	strb	r3, [r7, #15]
      break;
 8001e82:	e015      	b.n	8001eb0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00e      	beq.n	8001eae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	73fb      	strb	r3, [r7, #15]
      break;
 8001e94:	e00b      	b.n	8001eae <DMA_CheckFifoParam+0xe6>
      break;
 8001e96:	bf00      	nop
 8001e98:	e00a      	b.n	8001eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8001e9a:	bf00      	nop
 8001e9c:	e008      	b.n	8001eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8001e9e:	bf00      	nop
 8001ea0:	e006      	b.n	8001eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8001ea2:	bf00      	nop
 8001ea4:	e004      	b.n	8001eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8001ea6:	bf00      	nop
 8001ea8:	e002      	b.n	8001eb0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001eaa:	bf00      	nop
 8001eac:	e000      	b.n	8001eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8001eae:	bf00      	nop
    }
  } 
  
  return status; 
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop

08001ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	; 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	e165      	b.n	80021a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001edc:	2201      	movs	r2, #1
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	f040 8154 	bne.w	80021a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d005      	beq.n	8001f12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d130      	bne.n	8001f74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f48:	2201      	movs	r2, #1
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	f003 0201 	and.w	r2, r3, #1
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d017      	beq.n	8001fb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d123      	bne.n	8002004 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	08da      	lsrs	r2, r3, #3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3208      	adds	r2, #8
 8001fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	220f      	movs	r2, #15
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	08da      	lsrs	r2, r3, #3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3208      	adds	r2, #8
 8001ffe:	69b9      	ldr	r1, [r7, #24]
 8002000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	2203      	movs	r2, #3
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 0203 	and.w	r2, r3, #3
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 80ae 	beq.w	80021a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	4b5d      	ldr	r3, [pc, #372]	; (80021c0 <HAL_GPIO_Init+0x300>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	4a5c      	ldr	r2, [pc, #368]	; (80021c0 <HAL_GPIO_Init+0x300>)
 8002050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002054:	6453      	str	r3, [r2, #68]	; 0x44
 8002056:	4b5a      	ldr	r3, [pc, #360]	; (80021c0 <HAL_GPIO_Init+0x300>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002062:	4a58      	ldr	r2, [pc, #352]	; (80021c4 <HAL_GPIO_Init+0x304>)
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	3302      	adds	r3, #2
 800206a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	220f      	movs	r2, #15
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4f      	ldr	r2, [pc, #316]	; (80021c8 <HAL_GPIO_Init+0x308>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d025      	beq.n	80020da <HAL_GPIO_Init+0x21a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4e      	ldr	r2, [pc, #312]	; (80021cc <HAL_GPIO_Init+0x30c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d01f      	beq.n	80020d6 <HAL_GPIO_Init+0x216>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4d      	ldr	r2, [pc, #308]	; (80021d0 <HAL_GPIO_Init+0x310>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d019      	beq.n	80020d2 <HAL_GPIO_Init+0x212>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4c      	ldr	r2, [pc, #304]	; (80021d4 <HAL_GPIO_Init+0x314>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d013      	beq.n	80020ce <HAL_GPIO_Init+0x20e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4b      	ldr	r2, [pc, #300]	; (80021d8 <HAL_GPIO_Init+0x318>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00d      	beq.n	80020ca <HAL_GPIO_Init+0x20a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a4a      	ldr	r2, [pc, #296]	; (80021dc <HAL_GPIO_Init+0x31c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d007      	beq.n	80020c6 <HAL_GPIO_Init+0x206>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a49      	ldr	r2, [pc, #292]	; (80021e0 <HAL_GPIO_Init+0x320>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d101      	bne.n	80020c2 <HAL_GPIO_Init+0x202>
 80020be:	2306      	movs	r3, #6
 80020c0:	e00c      	b.n	80020dc <HAL_GPIO_Init+0x21c>
 80020c2:	2307      	movs	r3, #7
 80020c4:	e00a      	b.n	80020dc <HAL_GPIO_Init+0x21c>
 80020c6:	2305      	movs	r3, #5
 80020c8:	e008      	b.n	80020dc <HAL_GPIO_Init+0x21c>
 80020ca:	2304      	movs	r3, #4
 80020cc:	e006      	b.n	80020dc <HAL_GPIO_Init+0x21c>
 80020ce:	2303      	movs	r3, #3
 80020d0:	e004      	b.n	80020dc <HAL_GPIO_Init+0x21c>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e002      	b.n	80020dc <HAL_GPIO_Init+0x21c>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_GPIO_Init+0x21c>
 80020da:	2300      	movs	r3, #0
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	f002 0203 	and.w	r2, r2, #3
 80020e2:	0092      	lsls	r2, r2, #2
 80020e4:	4093      	lsls	r3, r2
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020ec:	4935      	ldr	r1, [pc, #212]	; (80021c4 <HAL_GPIO_Init+0x304>)
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	089b      	lsrs	r3, r3, #2
 80020f2:	3302      	adds	r3, #2
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020fa:	4b3a      	ldr	r3, [pc, #232]	; (80021e4 <HAL_GPIO_Init+0x324>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800211e:	4a31      	ldr	r2, [pc, #196]	; (80021e4 <HAL_GPIO_Init+0x324>)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002124:	4b2f      	ldr	r3, [pc, #188]	; (80021e4 <HAL_GPIO_Init+0x324>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002148:	4a26      	ldr	r2, [pc, #152]	; (80021e4 <HAL_GPIO_Init+0x324>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800214e:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <HAL_GPIO_Init+0x324>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002172:	4a1c      	ldr	r2, [pc, #112]	; (80021e4 <HAL_GPIO_Init+0x324>)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002178:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <HAL_GPIO_Init+0x324>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800219c:	4a11      	ldr	r2, [pc, #68]	; (80021e4 <HAL_GPIO_Init+0x324>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3301      	adds	r3, #1
 80021a6:	61fb      	str	r3, [r7, #28]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	2b0f      	cmp	r3, #15
 80021ac:	f67f ae96 	bls.w	8001edc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	3724      	adds	r7, #36	; 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40013800 	.word	0x40013800
 80021c8:	40020000 	.word	0x40020000
 80021cc:	40020400 	.word	0x40020400
 80021d0:	40020800 	.word	0x40020800
 80021d4:	40020c00 	.word	0x40020c00
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40021400 	.word	0x40021400
 80021e0:	40021800 	.word	0x40021800
 80021e4:	40013c00 	.word	0x40013c00

080021e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	807b      	strh	r3, [r7, #2]
 80021f4:	4613      	mov	r3, r2
 80021f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021f8:	787b      	ldrb	r3, [r7, #1]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021fe:	887a      	ldrh	r2, [r7, #2]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002204:	e003      	b.n	800220e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002206:	887b      	ldrh	r3, [r7, #2]
 8002208:	041a      	lsls	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	619a      	str	r2, [r3, #24]
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800221a:	b480      	push	{r7}
 800221c:	b085      	sub	sp, #20
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	460b      	mov	r3, r1
 8002224:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800222c:	887a      	ldrh	r2, [r7, #2]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4013      	ands	r3, r2
 8002232:	041a      	lsls	r2, r3, #16
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	43d9      	mvns	r1, r3
 8002238:	887b      	ldrh	r3, [r7, #2]
 800223a:	400b      	ands	r3, r1
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	619a      	str	r2, [r3, #24]
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	4a1f      	ldr	r2, [pc, #124]	; (80022e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002268:	6413      	str	r3, [r2, #64]	; 0x40
 800226a:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002272:	603b      	str	r3, [r7, #0]
 8002274:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002276:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002278:	2201      	movs	r2, #1
 800227a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800227c:	f7fe ff82 	bl	8001184 <HAL_GetTick>
 8002280:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002282:	e009      	b.n	8002298 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002284:	f7fe ff7e 	bl	8001184 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002292:	d901      	bls.n	8002298 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e01f      	b.n	80022d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002298:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a4:	d1ee      	bne.n	8002284 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80022a6:	4b11      	ldr	r3, [pc, #68]	; (80022ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022ac:	f7fe ff6a 	bl	8001184 <HAL_GetTick>
 80022b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022b2:	e009      	b.n	80022c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80022b4:	f7fe ff66 	bl	8001184 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022c2:	d901      	bls.n	80022c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e007      	b.n	80022d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022c8:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022d4:	d1ee      	bne.n	80022b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40023800 	.word	0x40023800
 80022e4:	420e0040 	.word	0x420e0040
 80022e8:	40007000 	.word	0x40007000
 80022ec:	420e0044 	.word	0x420e0044

080022f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0cc      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002304:	4b68      	ldr	r3, [pc, #416]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 030f 	and.w	r3, r3, #15
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d90c      	bls.n	800232c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b65      	ldr	r3, [pc, #404]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231a:	4b63      	ldr	r3, [pc, #396]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0b8      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d020      	beq.n	800237a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002344:	4b59      	ldr	r3, [pc, #356]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4a58      	ldr	r2, [pc, #352]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800234e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800235c:	4b53      	ldr	r3, [pc, #332]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	4a52      	ldr	r2, [pc, #328]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002366:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002368:	4b50      	ldr	r3, [pc, #320]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	494d      	ldr	r1, [pc, #308]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	4313      	orrs	r3, r2
 8002378:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d044      	beq.n	8002410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d107      	bne.n	800239e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238e:	4b47      	ldr	r3, [pc, #284]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d119      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e07f      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d003      	beq.n	80023ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	d107      	bne.n	80023be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ae:	4b3f      	ldr	r3, [pc, #252]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e06f      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023be:	4b3b      	ldr	r3, [pc, #236]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e067      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ce:	4b37      	ldr	r3, [pc, #220]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f023 0203 	bic.w	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4934      	ldr	r1, [pc, #208]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e0:	f7fe fed0 	bl	8001184 <HAL_GetTick>
 80023e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e8:	f7fe fecc 	bl	8001184 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e04f      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fe:	4b2b      	ldr	r3, [pc, #172]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 020c 	and.w	r2, r3, #12
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	429a      	cmp	r2, r3
 800240e:	d1eb      	bne.n	80023e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002410:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d20c      	bcs.n	8002438 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241e:	4b22      	ldr	r3, [pc, #136]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e032      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002444:	4b19      	ldr	r3, [pc, #100]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4916      	ldr	r1, [pc, #88]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	490e      	ldr	r1, [pc, #56]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002476:	f000 fb7f 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 800247a:	4602      	mov	r2, r0
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	490a      	ldr	r1, [pc, #40]	; (80024b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	5ccb      	ldrb	r3, [r1, r3]
 800248a:	fa22 f303 	lsr.w	r3, r2, r3
 800248e:	4a09      	ldr	r2, [pc, #36]	; (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe fe30 	bl	80010fc <HAL_InitTick>

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40023c00 	.word	0x40023c00
 80024ac:	40023800 	.word	0x40023800
 80024b0:	08008f9c 	.word	0x08008f9c
 80024b4:	20000000 	.word	0x20000000
 80024b8:	20000004 	.word	0x20000004

080024bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024c0:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024c2:	681b      	ldr	r3, [r3, #0]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000000 	.word	0x20000000

080024d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024d8:	f7ff fff0 	bl	80024bc <HAL_RCC_GetHCLKFreq>
 80024dc:	4602      	mov	r2, r0
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	0a9b      	lsrs	r3, r3, #10
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	4903      	ldr	r1, [pc, #12]	; (80024f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ea:	5ccb      	ldrb	r3, [r1, r3]
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40023800 	.word	0x40023800
 80024f8:	08008fac 	.word	0x08008fac

080024fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002500:	f7ff ffdc 	bl	80024bc <HAL_RCC_GetHCLKFreq>
 8002504:	4602      	mov	r2, r0
 8002506:	4b05      	ldr	r3, [pc, #20]	; (800251c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	0b5b      	lsrs	r3, r3, #13
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	4903      	ldr	r1, [pc, #12]	; (8002520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002512:	5ccb      	ldrb	r3, [r1, r3]
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002518:	4618      	mov	r0, r3
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40023800 	.word	0x40023800
 8002520:	08008fac 	.word	0x08008fac

08002524 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08c      	sub	sp, #48	; 0x30
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d010      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800255c:	4b6f      	ldr	r3, [pc, #444]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800255e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002562:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256a:	496c      	ldr	r1, [pc, #432]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800257a:	2301      	movs	r3, #1
 800257c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d010      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800258a:	4b64      	ldr	r3, [pc, #400]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800258c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002590:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002598:	4960      	ldr	r1, [pc, #384]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80025a8:	2301      	movs	r3, #1
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d017      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025b8:	4b58      	ldr	r3, [pc, #352]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	4955      	ldr	r1, [pc, #340]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025d6:	d101      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80025d8:	2301      	movs	r3, #1
 80025da:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80025e4:	2301      	movs	r3, #1
 80025e6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d017      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025f4:	4b49      	ldr	r3, [pc, #292]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002602:	4946      	ldr	r1, [pc, #280]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002612:	d101      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002614:	2301      	movs	r3, #1
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002620:	2301      	movs	r3, #1
 8002622:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0320 	and.w	r3, r3, #32
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 808a 	beq.w	8002746 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	4b39      	ldr	r3, [pc, #228]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	4a38      	ldr	r2, [pc, #224]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800263c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002640:	6413      	str	r3, [r2, #64]	; 0x40
 8002642:	4b36      	ldr	r3, [pc, #216]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800264e:	4b34      	ldr	r3, [pc, #208]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a33      	ldr	r2, [pc, #204]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002658:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800265a:	f7fe fd93 	bl	8001184 <HAL_GetTick>
 800265e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002662:	f7fe fd8f 	bl	8001184 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e278      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002674:	4b2a      	ldr	r3, [pc, #168]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0f0      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002680:	4b26      	ldr	r3, [pc, #152]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002688:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d02f      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002698:	6a3a      	ldr	r2, [r7, #32]
 800269a:	429a      	cmp	r2, r3
 800269c:	d028      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800269e:	4b1f      	ldr	r3, [pc, #124]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026a6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026a8:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026ae:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80026b4:	4a19      	ldr	r2, [pc, #100]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026ba:	4b18      	ldr	r3, [pc, #96]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d114      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80026c6:	f7fe fd5d 	bl	8001184 <HAL_GetTick>
 80026ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026cc:	e00a      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ce:	f7fe fd59 	bl	8001184 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026dc:	4293      	cmp	r3, r2
 80026de:	d901      	bls.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e240      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e4:	4b0d      	ldr	r3, [pc, #52]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0ee      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026fc:	d114      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80026fe:	4b07      	ldr	r3, [pc, #28]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800270e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002712:	4902      	ldr	r1, [pc, #8]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002714:	4313      	orrs	r3, r2
 8002716:	608b      	str	r3, [r1, #8]
 8002718:	e00c      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800
 8002720:	40007000 	.word	0x40007000
 8002724:	42470e40 	.word	0x42470e40
 8002728:	4b4a      	ldr	r3, [pc, #296]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	4a49      	ldr	r2, [pc, #292]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800272e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002732:	6093      	str	r3, [r2, #8]
 8002734:	4b47      	ldr	r3, [pc, #284]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002736:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002740:	4944      	ldr	r1, [pc, #272]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002742:	4313      	orrs	r3, r2
 8002744:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0310 	and.w	r3, r3, #16
 800274e:	2b00      	cmp	r3, #0
 8002750:	d004      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002758:	4b3f      	ldr	r3, [pc, #252]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800275a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002768:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800276a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800276e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002776:	4937      	ldr	r1, [pc, #220]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800278a:	4b32      	ldr	r3, [pc, #200]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800278c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002790:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002798:	492e      	ldr	r1, [pc, #184]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d011      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80027ac:	4b29      	ldr	r3, [pc, #164]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027b2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ba:	4926      	ldr	r1, [pc, #152]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027ca:	d101      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80027cc:	2301      	movs	r3, #1
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00a      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80027dc:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	491a      	ldr	r1, [pc, #104]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d011      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002804:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280c:	4911      	ldr	r1, [pc, #68]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800281c:	d101      	bne.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800281e:	2301      	movs	r3, #1
 8002820:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002824:	2b01      	cmp	r3, #1
 8002826:	d005      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002830:	f040 80ff 	bne.w	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002834:	4b09      	ldr	r3, [pc, #36]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800283a:	f7fe fca3 	bl	8001184 <HAL_GetTick>
 800283e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002840:	e00e      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002842:	f7fe fc9f 	bl	8001184 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d907      	bls.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e188      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002854:	40023800 	.word	0x40023800
 8002858:	424711e0 	.word	0x424711e0
 800285c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002860:	4b7e      	ldr	r3, [pc, #504]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1ea      	bne.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287c:	2b00      	cmp	r3, #0
 800287e:	d009      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002888:	2b00      	cmp	r3, #0
 800288a:	d028      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002890:	2b00      	cmp	r3, #0
 8002892:	d124      	bne.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002894:	4b71      	ldr	r3, [pc, #452]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800289a:	0c1b      	lsrs	r3, r3, #16
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	3301      	adds	r3, #1
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028a6:	4b6d      	ldr	r3, [pc, #436]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ac:	0e1b      	lsrs	r3, r3, #24
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	019b      	lsls	r3, r3, #6
 80028be:	431a      	orrs	r2, r3
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	085b      	lsrs	r3, r3, #1
 80028c4:	3b01      	subs	r3, #1
 80028c6:	041b      	lsls	r3, r3, #16
 80028c8:	431a      	orrs	r2, r3
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	061b      	lsls	r3, r3, #24
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	071b      	lsls	r3, r3, #28
 80028d6:	4961      	ldr	r1, [pc, #388]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d004      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028f2:	d00a      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d035      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002904:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002908:	d130      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800290a:	4b54      	ldr	r3, [pc, #336]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800290c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002910:	0c1b      	lsrs	r3, r3, #16
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	3301      	adds	r3, #1
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800291c:	4b4f      	ldr	r3, [pc, #316]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800291e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002922:	0f1b      	lsrs	r3, r3, #28
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	019b      	lsls	r3, r3, #6
 8002934:	431a      	orrs	r2, r3
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	085b      	lsrs	r3, r3, #1
 800293a:	3b01      	subs	r3, #1
 800293c:	041b      	lsls	r3, r3, #16
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	061b      	lsls	r3, r3, #24
 8002946:	431a      	orrs	r2, r3
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	071b      	lsls	r3, r3, #28
 800294c:	4943      	ldr	r1, [pc, #268]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002954:	4b41      	ldr	r3, [pc, #260]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002956:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800295a:	f023 021f 	bic.w	r2, r3, #31
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002962:	3b01      	subs	r3, #1
 8002964:	493d      	ldr	r1, [pc, #244]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002974:	2b00      	cmp	r3, #0
 8002976:	d029      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800297c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002980:	d124      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002982:	4b36      	ldr	r3, [pc, #216]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002988:	0c1b      	lsrs	r3, r3, #16
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	3301      	adds	r3, #1
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002994:	4b31      	ldr	r3, [pc, #196]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800299a:	0f1b      	lsrs	r3, r3, #28
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	019b      	lsls	r3, r3, #6
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	085b      	lsrs	r3, r3, #1
 80029b4:	3b01      	subs	r3, #1
 80029b6:	041b      	lsls	r3, r3, #16
 80029b8:	431a      	orrs	r2, r3
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	061b      	lsls	r3, r3, #24
 80029be:	431a      	orrs	r2, r3
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	071b      	lsls	r3, r3, #28
 80029c4:	4925      	ldr	r1, [pc, #148]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d016      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	019b      	lsls	r3, r3, #6
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	085b      	lsrs	r3, r3, #1
 80029ea:	3b01      	subs	r3, #1
 80029ec:	041b      	lsls	r3, r3, #16
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	061b      	lsls	r3, r3, #24
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	071b      	lsls	r3, r3, #28
 80029fe:	4917      	ldr	r1, [pc, #92]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a06:	4b16      	ldr	r3, [pc, #88]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a0c:	f7fe fbba 	bl	8001184 <HAL_GetTick>
 8002a10:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a14:	f7fe fbb6 	bl	8001184 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e09f      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a26:	4b0d      	ldr	r3, [pc, #52]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	f040 8095 	bne.w	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a3a:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a40:	f7fe fba0 	bl	8001184 <HAL_GetTick>
 8002a44:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a46:	e00f      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002a48:	f7fe fb9c 	bl	8001184 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d908      	bls.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e085      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	42470068 	.word	0x42470068
 8002a64:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a68:	4b41      	ldr	r3, [pc, #260]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a74:	d0e8      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d009      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d02b      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d127      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002a9e:	4b34      	ldr	r3, [pc, #208]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa4:	0c1b      	lsrs	r3, r3, #16
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	3301      	adds	r3, #1
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699a      	ldr	r2, [r3, #24]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	019b      	lsls	r3, r3, #6
 8002aba:	431a      	orrs	r2, r3
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	085b      	lsrs	r3, r3, #1
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	041b      	lsls	r3, r3, #16
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	061b      	lsls	r3, r3, #24
 8002acc:	4928      	ldr	r1, [pc, #160]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002ad4:	4b26      	ldr	r3, [pc, #152]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ada:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	021b      	lsls	r3, r3, #8
 8002ae6:	4922      	ldr	r1, [pc, #136]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d01d      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b02:	d118      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b04:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0a:	0e1b      	lsrs	r3, r3, #24
 8002b0c:	f003 030f 	and.w	r3, r3, #15
 8002b10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699a      	ldr	r2, [r3, #24]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	019b      	lsls	r3, r3, #6
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	085b      	lsrs	r3, r3, #1
 8002b24:	3b01      	subs	r3, #1
 8002b26:	041b      	lsls	r3, r3, #16
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	061b      	lsls	r3, r3, #24
 8002b2e:	4910      	ldr	r1, [pc, #64]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b36:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b3c:	f7fe fb22 	bl	8001184 <HAL_GetTick>
 8002b40:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002b44:	f7fe fb1e 	bl	8001184 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e007      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b56:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b62:	d1ef      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3730      	adds	r7, #48	; 0x30
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800
 8002b74:	42470070 	.word	0x42470070

08002b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b7c:	b0ae      	sub	sp, #184	; 0xb8
 8002b7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b9e:	4bcb      	ldr	r3, [pc, #812]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x354>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	2b0c      	cmp	r3, #12
 8002ba8:	f200 8206 	bhi.w	8002fb8 <HAL_RCC_GetSysClockFreq+0x440>
 8002bac:	a201      	add	r2, pc, #4	; (adr r2, 8002bb4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb2:	bf00      	nop
 8002bb4:	08002be9 	.word	0x08002be9
 8002bb8:	08002fb9 	.word	0x08002fb9
 8002bbc:	08002fb9 	.word	0x08002fb9
 8002bc0:	08002fb9 	.word	0x08002fb9
 8002bc4:	08002bf1 	.word	0x08002bf1
 8002bc8:	08002fb9 	.word	0x08002fb9
 8002bcc:	08002fb9 	.word	0x08002fb9
 8002bd0:	08002fb9 	.word	0x08002fb9
 8002bd4:	08002bf9 	.word	0x08002bf9
 8002bd8:	08002fb9 	.word	0x08002fb9
 8002bdc:	08002fb9 	.word	0x08002fb9
 8002be0:	08002fb9 	.word	0x08002fb9
 8002be4:	08002de9 	.word	0x08002de9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002be8:	4bb9      	ldr	r3, [pc, #740]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002bea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002bee:	e1e7      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bf0:	4bb8      	ldr	r3, [pc, #736]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002bf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002bf6:	e1e3      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bf8:	4bb4      	ldr	r3, [pc, #720]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x354>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c04:	4bb1      	ldr	r3, [pc, #708]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x354>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d071      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c10:	4bae      	ldr	r3, [pc, #696]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x354>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	099b      	lsrs	r3, r3, #6
 8002c16:	2200      	movs	r2, #0
 8002c18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c1c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002c20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c36:	4622      	mov	r2, r4
 8002c38:	462b      	mov	r3, r5
 8002c3a:	f04f 0000 	mov.w	r0, #0
 8002c3e:	f04f 0100 	mov.w	r1, #0
 8002c42:	0159      	lsls	r1, r3, #5
 8002c44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c48:	0150      	lsls	r0, r2, #5
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4621      	mov	r1, r4
 8002c50:	1a51      	subs	r1, r2, r1
 8002c52:	6439      	str	r1, [r7, #64]	; 0x40
 8002c54:	4629      	mov	r1, r5
 8002c56:	eb63 0301 	sbc.w	r3, r3, r1
 8002c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002c68:	4649      	mov	r1, r9
 8002c6a:	018b      	lsls	r3, r1, #6
 8002c6c:	4641      	mov	r1, r8
 8002c6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c72:	4641      	mov	r1, r8
 8002c74:	018a      	lsls	r2, r1, #6
 8002c76:	4641      	mov	r1, r8
 8002c78:	1a51      	subs	r1, r2, r1
 8002c7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c7c:	4649      	mov	r1, r9
 8002c7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002c90:	4649      	mov	r1, r9
 8002c92:	00cb      	lsls	r3, r1, #3
 8002c94:	4641      	mov	r1, r8
 8002c96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c9a:	4641      	mov	r1, r8
 8002c9c:	00ca      	lsls	r2, r1, #3
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4622      	mov	r2, r4
 8002ca6:	189b      	adds	r3, r3, r2
 8002ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8002caa:	462b      	mov	r3, r5
 8002cac:	460a      	mov	r2, r1
 8002cae:	eb42 0303 	adc.w	r3, r2, r3
 8002cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002cc0:	4629      	mov	r1, r5
 8002cc2:	024b      	lsls	r3, r1, #9
 8002cc4:	4621      	mov	r1, r4
 8002cc6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cca:	4621      	mov	r1, r4
 8002ccc:	024a      	lsls	r2, r1, #9
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002cdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ce0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002ce4:	f7fd fae4 	bl	80002b0 <__aeabi_uldivmod>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4613      	mov	r3, r2
 8002cee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cf2:	e067      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf4:	4b75      	ldr	r3, [pc, #468]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x354>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d00:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002d04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d0e:	2300      	movs	r3, #0
 8002d10:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d12:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002d16:	4622      	mov	r2, r4
 8002d18:	462b      	mov	r3, r5
 8002d1a:	f04f 0000 	mov.w	r0, #0
 8002d1e:	f04f 0100 	mov.w	r1, #0
 8002d22:	0159      	lsls	r1, r3, #5
 8002d24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d28:	0150      	lsls	r0, r2, #5
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	4621      	mov	r1, r4
 8002d30:	1a51      	subs	r1, r2, r1
 8002d32:	62b9      	str	r1, [r7, #40]	; 0x28
 8002d34:	4629      	mov	r1, r5
 8002d36:	eb63 0301 	sbc.w	r3, r3, r1
 8002d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002d48:	4649      	mov	r1, r9
 8002d4a:	018b      	lsls	r3, r1, #6
 8002d4c:	4641      	mov	r1, r8
 8002d4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d52:	4641      	mov	r1, r8
 8002d54:	018a      	lsls	r2, r1, #6
 8002d56:	4641      	mov	r1, r8
 8002d58:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d5c:	4649      	mov	r1, r9
 8002d5e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d6e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d76:	4692      	mov	sl, r2
 8002d78:	469b      	mov	fp, r3
 8002d7a:	4623      	mov	r3, r4
 8002d7c:	eb1a 0303 	adds.w	r3, sl, r3
 8002d80:	623b      	str	r3, [r7, #32]
 8002d82:	462b      	mov	r3, r5
 8002d84:	eb4b 0303 	adc.w	r3, fp, r3
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002d96:	4629      	mov	r1, r5
 8002d98:	028b      	lsls	r3, r1, #10
 8002d9a:	4621      	mov	r1, r4
 8002d9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002da0:	4621      	mov	r1, r4
 8002da2:	028a      	lsls	r2, r1, #10
 8002da4:	4610      	mov	r0, r2
 8002da6:	4619      	mov	r1, r3
 8002da8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dac:	2200      	movs	r2, #0
 8002dae:	673b      	str	r3, [r7, #112]	; 0x70
 8002db0:	677a      	str	r2, [r7, #116]	; 0x74
 8002db2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002db6:	f7fd fa7b 	bl	80002b0 <__aeabi_uldivmod>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dc4:	4b41      	ldr	r3, [pc, #260]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x354>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	0c1b      	lsrs	r3, r3, #16
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	3301      	adds	r3, #1
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002dd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002dda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002de6:	e0eb      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002de8:	4b38      	ldr	r3, [pc, #224]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x354>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002df0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002df4:	4b35      	ldr	r3, [pc, #212]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x354>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d06b      	beq.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e00:	4b32      	ldr	r3, [pc, #200]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x354>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	099b      	lsrs	r3, r3, #6
 8002e06:	2200      	movs	r2, #0
 8002e08:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e12:	663b      	str	r3, [r7, #96]	; 0x60
 8002e14:	2300      	movs	r3, #0
 8002e16:	667b      	str	r3, [r7, #100]	; 0x64
 8002e18:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002e1c:	4622      	mov	r2, r4
 8002e1e:	462b      	mov	r3, r5
 8002e20:	f04f 0000 	mov.w	r0, #0
 8002e24:	f04f 0100 	mov.w	r1, #0
 8002e28:	0159      	lsls	r1, r3, #5
 8002e2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e2e:	0150      	lsls	r0, r2, #5
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4621      	mov	r1, r4
 8002e36:	1a51      	subs	r1, r2, r1
 8002e38:	61b9      	str	r1, [r7, #24]
 8002e3a:	4629      	mov	r1, r5
 8002e3c:	eb63 0301 	sbc.w	r3, r3, r1
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002e4e:	4659      	mov	r1, fp
 8002e50:	018b      	lsls	r3, r1, #6
 8002e52:	4651      	mov	r1, sl
 8002e54:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e58:	4651      	mov	r1, sl
 8002e5a:	018a      	lsls	r2, r1, #6
 8002e5c:	4651      	mov	r1, sl
 8002e5e:	ebb2 0801 	subs.w	r8, r2, r1
 8002e62:	4659      	mov	r1, fp
 8002e64:	eb63 0901 	sbc.w	r9, r3, r1
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e7c:	4690      	mov	r8, r2
 8002e7e:	4699      	mov	r9, r3
 8002e80:	4623      	mov	r3, r4
 8002e82:	eb18 0303 	adds.w	r3, r8, r3
 8002e86:	613b      	str	r3, [r7, #16]
 8002e88:	462b      	mov	r3, r5
 8002e8a:	eb49 0303 	adc.w	r3, r9, r3
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002e9c:	4629      	mov	r1, r5
 8002e9e:	024b      	lsls	r3, r1, #9
 8002ea0:	4621      	mov	r1, r4
 8002ea2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ea6:	4621      	mov	r1, r4
 8002ea8:	024a      	lsls	r2, r1, #9
 8002eaa:	4610      	mov	r0, r2
 8002eac:	4619      	mov	r1, r3
 8002eae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002eb6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002eb8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ebc:	f7fd f9f8 	bl	80002b0 <__aeabi_uldivmod>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002eca:	e065      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x420>
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	00f42400 	.word	0x00f42400
 8002ed4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed8:	4b3d      	ldr	r3, [pc, #244]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	099b      	lsrs	r3, r3, #6
 8002ede:	2200      	movs	r2, #0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ee8:	653b      	str	r3, [r7, #80]	; 0x50
 8002eea:	2300      	movs	r3, #0
 8002eec:	657b      	str	r3, [r7, #84]	; 0x54
 8002eee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002ef2:	4642      	mov	r2, r8
 8002ef4:	464b      	mov	r3, r9
 8002ef6:	f04f 0000 	mov.w	r0, #0
 8002efa:	f04f 0100 	mov.w	r1, #0
 8002efe:	0159      	lsls	r1, r3, #5
 8002f00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f04:	0150      	lsls	r0, r2, #5
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4641      	mov	r1, r8
 8002f0c:	1a51      	subs	r1, r2, r1
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	4649      	mov	r1, r9
 8002f12:	eb63 0301 	sbc.w	r3, r3, r1
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002f24:	4659      	mov	r1, fp
 8002f26:	018b      	lsls	r3, r1, #6
 8002f28:	4651      	mov	r1, sl
 8002f2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f2e:	4651      	mov	r1, sl
 8002f30:	018a      	lsls	r2, r1, #6
 8002f32:	4651      	mov	r1, sl
 8002f34:	1a54      	subs	r4, r2, r1
 8002f36:	4659      	mov	r1, fp
 8002f38:	eb63 0501 	sbc.w	r5, r3, r1
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	00eb      	lsls	r3, r5, #3
 8002f46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f4a:	00e2      	lsls	r2, r4, #3
 8002f4c:	4614      	mov	r4, r2
 8002f4e:	461d      	mov	r5, r3
 8002f50:	4643      	mov	r3, r8
 8002f52:	18e3      	adds	r3, r4, r3
 8002f54:	603b      	str	r3, [r7, #0]
 8002f56:	464b      	mov	r3, r9
 8002f58:	eb45 0303 	adc.w	r3, r5, r3
 8002f5c:	607b      	str	r3, [r7, #4]
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f6a:	4629      	mov	r1, r5
 8002f6c:	028b      	lsls	r3, r1, #10
 8002f6e:	4621      	mov	r1, r4
 8002f70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f74:	4621      	mov	r1, r4
 8002f76:	028a      	lsls	r2, r1, #10
 8002f78:	4610      	mov	r0, r2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f80:	2200      	movs	r2, #0
 8002f82:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f84:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002f86:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f8a:	f7fd f991 	bl	80002b0 <__aeabi_uldivmod>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4613      	mov	r3, r2
 8002f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f98:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	0f1b      	lsrs	r3, r3, #28
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002fa6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002faa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002fb6:	e003      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fb8:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002fba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002fbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	37b8      	adds	r7, #184	; 0xb8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fce:	bf00      	nop
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	00f42400 	.word	0x00f42400

08002fd8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e28d      	b.n	8003506 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 8083 	beq.w	80030fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ff8:	4b94      	ldr	r3, [pc, #592]	; (800324c <HAL_RCC_OscConfig+0x274>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 030c 	and.w	r3, r3, #12
 8003000:	2b04      	cmp	r3, #4
 8003002:	d019      	beq.n	8003038 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003004:	4b91      	ldr	r3, [pc, #580]	; (800324c <HAL_RCC_OscConfig+0x274>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800300c:	2b08      	cmp	r3, #8
 800300e:	d106      	bne.n	800301e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003010:	4b8e      	ldr	r3, [pc, #568]	; (800324c <HAL_RCC_OscConfig+0x274>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003018:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800301c:	d00c      	beq.n	8003038 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800301e:	4b8b      	ldr	r3, [pc, #556]	; (800324c <HAL_RCC_OscConfig+0x274>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003026:	2b0c      	cmp	r3, #12
 8003028:	d112      	bne.n	8003050 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800302a:	4b88      	ldr	r3, [pc, #544]	; (800324c <HAL_RCC_OscConfig+0x274>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003032:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003036:	d10b      	bne.n	8003050 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003038:	4b84      	ldr	r3, [pc, #528]	; (800324c <HAL_RCC_OscConfig+0x274>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d05b      	beq.n	80030fc <HAL_RCC_OscConfig+0x124>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d157      	bne.n	80030fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e25a      	b.n	8003506 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003058:	d106      	bne.n	8003068 <HAL_RCC_OscConfig+0x90>
 800305a:	4b7c      	ldr	r3, [pc, #496]	; (800324c <HAL_RCC_OscConfig+0x274>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a7b      	ldr	r2, [pc, #492]	; (800324c <HAL_RCC_OscConfig+0x274>)
 8003060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	e01d      	b.n	80030a4 <HAL_RCC_OscConfig+0xcc>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003070:	d10c      	bne.n	800308c <HAL_RCC_OscConfig+0xb4>
 8003072:	4b76      	ldr	r3, [pc, #472]	; (800324c <HAL_RCC_OscConfig+0x274>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a75      	ldr	r2, [pc, #468]	; (800324c <HAL_RCC_OscConfig+0x274>)
 8003078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	4b73      	ldr	r3, [pc, #460]	; (800324c <HAL_RCC_OscConfig+0x274>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a72      	ldr	r2, [pc, #456]	; (800324c <HAL_RCC_OscConfig+0x274>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e00b      	b.n	80030a4 <HAL_RCC_OscConfig+0xcc>
 800308c:	4b6f      	ldr	r3, [pc, #444]	; (800324c <HAL_RCC_OscConfig+0x274>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a6e      	ldr	r2, [pc, #440]	; (800324c <HAL_RCC_OscConfig+0x274>)
 8003092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4b6c      	ldr	r3, [pc, #432]	; (800324c <HAL_RCC_OscConfig+0x274>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a6b      	ldr	r2, [pc, #428]	; (800324c <HAL_RCC_OscConfig+0x274>)
 800309e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d013      	beq.n	80030d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fe f86a 	bl	8001184 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b4:	f7fe f866 	bl	8001184 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	; 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e21f      	b.n	8003506 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	4b61      	ldr	r3, [pc, #388]	; (800324c <HAL_RCC_OscConfig+0x274>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0xdc>
 80030d2:	e014      	b.n	80030fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d4:	f7fe f856 	bl	8001184 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030dc:	f7fe f852 	bl	8001184 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	; 0x64
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e20b      	b.n	8003506 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ee:	4b57      	ldr	r3, [pc, #348]	; (800324c <HAL_RCC_OscConfig+0x274>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0x104>
 80030fa:	e000      	b.n	80030fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d06f      	beq.n	80031ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800310a:	4b50      	ldr	r3, [pc, #320]	; (800324c <HAL_RCC_OscConfig+0x274>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b00      	cmp	r3, #0
 8003114:	d017      	beq.n	8003146 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003116:	4b4d      	ldr	r3, [pc, #308]	; (800324c <HAL_RCC_OscConfig+0x274>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800311e:	2b08      	cmp	r3, #8
 8003120:	d105      	bne.n	800312e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003122:	4b4a      	ldr	r3, [pc, #296]	; (800324c <HAL_RCC_OscConfig+0x274>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800312e:	4b47      	ldr	r3, [pc, #284]	; (800324c <HAL_RCC_OscConfig+0x274>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003136:	2b0c      	cmp	r3, #12
 8003138:	d11c      	bne.n	8003174 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800313a:	4b44      	ldr	r3, [pc, #272]	; (800324c <HAL_RCC_OscConfig+0x274>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d116      	bne.n	8003174 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003146:	4b41      	ldr	r3, [pc, #260]	; (800324c <HAL_RCC_OscConfig+0x274>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_RCC_OscConfig+0x186>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d001      	beq.n	800315e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e1d3      	b.n	8003506 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315e:	4b3b      	ldr	r3, [pc, #236]	; (800324c <HAL_RCC_OscConfig+0x274>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4937      	ldr	r1, [pc, #220]	; (800324c <HAL_RCC_OscConfig+0x274>)
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003172:	e03a      	b.n	80031ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d020      	beq.n	80031be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800317c:	4b34      	ldr	r3, [pc, #208]	; (8003250 <HAL_RCC_OscConfig+0x278>)
 800317e:	2201      	movs	r2, #1
 8003180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003182:	f7fd ffff 	bl	8001184 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800318a:	f7fd fffb 	bl	8001184 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e1b4      	b.n	8003506 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319c:	4b2b      	ldr	r3, [pc, #172]	; (800324c <HAL_RCC_OscConfig+0x274>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a8:	4b28      	ldr	r3, [pc, #160]	; (800324c <HAL_RCC_OscConfig+0x274>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4925      	ldr	r1, [pc, #148]	; (800324c <HAL_RCC_OscConfig+0x274>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	600b      	str	r3, [r1, #0]
 80031bc:	e015      	b.n	80031ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031be:	4b24      	ldr	r3, [pc, #144]	; (8003250 <HAL_RCC_OscConfig+0x278>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7fd ffde 	bl	8001184 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031cc:	f7fd ffda 	bl	8001184 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e193      	b.n	8003506 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031de:	4b1b      	ldr	r3, [pc, #108]	; (800324c <HAL_RCC_OscConfig+0x274>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d036      	beq.n	8003264 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d016      	beq.n	800322c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031fe:	4b15      	ldr	r3, [pc, #84]	; (8003254 <HAL_RCC_OscConfig+0x27c>)
 8003200:	2201      	movs	r2, #1
 8003202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003204:	f7fd ffbe 	bl	8001184 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800320c:	f7fd ffba 	bl	8001184 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e173      	b.n	8003506 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321e:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_RCC_OscConfig+0x274>)
 8003220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x234>
 800322a:	e01b      	b.n	8003264 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800322c:	4b09      	ldr	r3, [pc, #36]	; (8003254 <HAL_RCC_OscConfig+0x27c>)
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003232:	f7fd ffa7 	bl	8001184 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003238:	e00e      	b.n	8003258 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800323a:	f7fd ffa3 	bl	8001184 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d907      	bls.n	8003258 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e15c      	b.n	8003506 <HAL_RCC_OscConfig+0x52e>
 800324c:	40023800 	.word	0x40023800
 8003250:	42470000 	.word	0x42470000
 8003254:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003258:	4b8a      	ldr	r3, [pc, #552]	; (8003484 <HAL_RCC_OscConfig+0x4ac>)
 800325a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1ea      	bne.n	800323a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 8097 	beq.w	80033a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003272:	2300      	movs	r3, #0
 8003274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003276:	4b83      	ldr	r3, [pc, #524]	; (8003484 <HAL_RCC_OscConfig+0x4ac>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10f      	bne.n	80032a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	4b7f      	ldr	r3, [pc, #508]	; (8003484 <HAL_RCC_OscConfig+0x4ac>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	4a7e      	ldr	r2, [pc, #504]	; (8003484 <HAL_RCC_OscConfig+0x4ac>)
 800328c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003290:	6413      	str	r3, [r2, #64]	; 0x40
 8003292:	4b7c      	ldr	r3, [pc, #496]	; (8003484 <HAL_RCC_OscConfig+0x4ac>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329e:	2301      	movs	r3, #1
 80032a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a2:	4b79      	ldr	r3, [pc, #484]	; (8003488 <HAL_RCC_OscConfig+0x4b0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d118      	bne.n	80032e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ae:	4b76      	ldr	r3, [pc, #472]	; (8003488 <HAL_RCC_OscConfig+0x4b0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a75      	ldr	r2, [pc, #468]	; (8003488 <HAL_RCC_OscConfig+0x4b0>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ba:	f7fd ff63 	bl	8001184 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c2:	f7fd ff5f 	bl	8001184 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e118      	b.n	8003506 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d4:	4b6c      	ldr	r3, [pc, #432]	; (8003488 <HAL_RCC_OscConfig+0x4b0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d106      	bne.n	80032f6 <HAL_RCC_OscConfig+0x31e>
 80032e8:	4b66      	ldr	r3, [pc, #408]	; (8003484 <HAL_RCC_OscConfig+0x4ac>)
 80032ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ec:	4a65      	ldr	r2, [pc, #404]	; (8003484 <HAL_RCC_OscConfig+0x4ac>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	6713      	str	r3, [r2, #112]	; 0x70
 80032f4:	e01c      	b.n	8003330 <HAL_RCC_OscConfig+0x358>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2b05      	cmp	r3, #5
 80032fc:	d10c      	bne.n	8003318 <HAL_RCC_OscConfig+0x340>
 80032fe:	4b61      	ldr	r3, [pc, #388]	; (8003484 <HAL_RCC_OscConfig+0x4ac>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	4a60      	ldr	r2, [pc, #384]	; (8003484 <HAL_RCC_OscConfig+0x4ac>)
 8003304:	f043 0304 	orr.w	r3, r3, #4
 8003308:	6713      	str	r3, [r2, #112]	; 0x70
 800330a:	4b5e      	ldr	r3, [pc, #376]	; (8003484 <HAL_RCC_OscConfig+0x4ac>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330e:	4a5d      	ldr	r2, [pc, #372]	; (8003484 <HAL_RCC_OscConfig+0x4ac>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	6713      	str	r3, [r2, #112]	; 0x70
 8003316:	e00b      	b.n	8003330 <HAL_RCC_OscConfig+0x358>
 8003318:	4b5a      	ldr	r3, [pc, #360]	; (8003484 <HAL_RCC_OscConfig+0x4ac>)
 800331a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331c:	4a59      	ldr	r2, [pc, #356]	; (8003484 <HAL_RCC_OscConfig+0x4ac>)
 800331e:	f023 0301 	bic.w	r3, r3, #1
 8003322:	6713      	str	r3, [r2, #112]	; 0x70
 8003324:	4b57      	ldr	r3, [pc, #348]	; (8003484 <HAL_RCC_OscConfig+0x4ac>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003328:	4a56      	ldr	r2, [pc, #344]	; (8003484 <HAL_RCC_OscConfig+0x4ac>)
 800332a:	f023 0304 	bic.w	r3, r3, #4
 800332e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d015      	beq.n	8003364 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7fd ff24 	bl	8001184 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333e:	e00a      	b.n	8003356 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003340:	f7fd ff20 	bl	8001184 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	; 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e0d7      	b.n	8003506 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003356:	4b4b      	ldr	r3, [pc, #300]	; (8003484 <HAL_RCC_OscConfig+0x4ac>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0ee      	beq.n	8003340 <HAL_RCC_OscConfig+0x368>
 8003362:	e014      	b.n	800338e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003364:	f7fd ff0e 	bl	8001184 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336a:	e00a      	b.n	8003382 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800336c:	f7fd ff0a 	bl	8001184 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	; 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e0c1      	b.n	8003506 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003382:	4b40      	ldr	r3, [pc, #256]	; (8003484 <HAL_RCC_OscConfig+0x4ac>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1ee      	bne.n	800336c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800338e:	7dfb      	ldrb	r3, [r7, #23]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d105      	bne.n	80033a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003394:	4b3b      	ldr	r3, [pc, #236]	; (8003484 <HAL_RCC_OscConfig+0x4ac>)
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	4a3a      	ldr	r2, [pc, #232]	; (8003484 <HAL_RCC_OscConfig+0x4ac>)
 800339a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800339e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 80ad 	beq.w	8003504 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033aa:	4b36      	ldr	r3, [pc, #216]	; (8003484 <HAL_RCC_OscConfig+0x4ac>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d060      	beq.n	8003478 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d145      	bne.n	800344a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033be:	4b33      	ldr	r3, [pc, #204]	; (800348c <HAL_RCC_OscConfig+0x4b4>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fd fede 	bl	8001184 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033cc:	f7fd feda 	bl	8001184 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e093      	b.n	8003506 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033de:	4b29      	ldr	r3, [pc, #164]	; (8003484 <HAL_RCC_OscConfig+0x4ac>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69da      	ldr	r2, [r3, #28]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	019b      	lsls	r3, r3, #6
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	085b      	lsrs	r3, r3, #1
 8003402:	3b01      	subs	r3, #1
 8003404:	041b      	lsls	r3, r3, #16
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	061b      	lsls	r3, r3, #24
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	071b      	lsls	r3, r3, #28
 8003416:	491b      	ldr	r1, [pc, #108]	; (8003484 <HAL_RCC_OscConfig+0x4ac>)
 8003418:	4313      	orrs	r3, r2
 800341a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800341c:	4b1b      	ldr	r3, [pc, #108]	; (800348c <HAL_RCC_OscConfig+0x4b4>)
 800341e:	2201      	movs	r2, #1
 8003420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003422:	f7fd feaf 	bl	8001184 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800342a:	f7fd feab 	bl	8001184 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e064      	b.n	8003506 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343c:	4b11      	ldr	r3, [pc, #68]	; (8003484 <HAL_RCC_OscConfig+0x4ac>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCC_OscConfig+0x452>
 8003448:	e05c      	b.n	8003504 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344a:	4b10      	ldr	r3, [pc, #64]	; (800348c <HAL_RCC_OscConfig+0x4b4>)
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003450:	f7fd fe98 	bl	8001184 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003458:	f7fd fe94 	bl	8001184 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e04d      	b.n	8003506 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346a:	4b06      	ldr	r3, [pc, #24]	; (8003484 <HAL_RCC_OscConfig+0x4ac>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0x480>
 8003476:	e045      	b.n	8003504 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d107      	bne.n	8003490 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e040      	b.n	8003506 <HAL_RCC_OscConfig+0x52e>
 8003484:	40023800 	.word	0x40023800
 8003488:	40007000 	.word	0x40007000
 800348c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003490:	4b1f      	ldr	r3, [pc, #124]	; (8003510 <HAL_RCC_OscConfig+0x538>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d030      	beq.n	8003500 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d129      	bne.n	8003500 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d122      	bne.n	8003500 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034c0:	4013      	ands	r3, r2
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d119      	bne.n	8003500 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d6:	085b      	lsrs	r3, r3, #1
 80034d8:	3b01      	subs	r3, #1
 80034da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034dc:	429a      	cmp	r2, r3
 80034de:	d10f      	bne.n	8003500 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d107      	bne.n	8003500 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d001      	beq.n	8003504 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	40023800 	.word	0x40023800

08003514 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e022      	b.n	800356c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d105      	bne.n	800353e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7fd fbd7 	bl	8000cec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2203      	movs	r2, #3
 8003542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f814 	bl	8003574 <HAL_SD_InitCard>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e00a      	b.n	800356c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003574:	b5b0      	push	{r4, r5, r7, lr}
 8003576:	b08e      	sub	sp, #56	; 0x38
 8003578:	af04      	add	r7, sp, #16
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800357c:	2300      	movs	r3, #0
 800357e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003580:	2300      	movs	r3, #0
 8003582:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003584:	2300      	movs	r3, #0
 8003586:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800358c:	2300      	movs	r3, #0
 800358e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003590:	2376      	movs	r3, #118	; 0x76
 8003592:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681d      	ldr	r5, [r3, #0]
 8003598:	466c      	mov	r4, sp
 800359a:	f107 0314 	add.w	r3, r7, #20
 800359e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80035a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80035a6:	f107 0308 	add.w	r3, r7, #8
 80035aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035ac:	4628      	mov	r0, r5
 80035ae:	f001 f9fb 	bl	80049a8 <SDIO_Init>
 80035b2:	4603      	mov	r3, r0
 80035b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80035b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e04f      	b.n	8003664 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80035c4:	4b29      	ldr	r3, [pc, #164]	; (800366c <HAL_SD_InitCard+0xf8>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f001 fa33 	bl	8004a3a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80035d4:	4b25      	ldr	r3, [pc, #148]	; (800366c <HAL_SD_InitCard+0xf8>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80035da:	2002      	movs	r0, #2
 80035dc:	f7fd fdde 	bl	800119c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fe69 	bl	80042b8 <SD_PowerON>
 80035e6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00b      	beq.n	8003606 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e02e      	b.n	8003664 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fd88 	bl	800411c <SD_InitCard>
 800360c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00b      	beq.n	800362c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e01b      	b.n	8003664 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003634:	4618      	mov	r0, r3
 8003636:	f001 fa92 	bl	8004b5e <SDMMC_CmdBlockLength>
 800363a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00f      	beq.n	8003662 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a0a      	ldr	r2, [pc, #40]	; (8003670 <HAL_SD_InitCard+0xfc>)
 8003648:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	431a      	orrs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3728      	adds	r7, #40	; 0x28
 8003668:	46bd      	mov	sp, r7
 800366a:	bdb0      	pop	{r4, r5, r7, pc}
 800366c:	422580a0 	.word	0x422580a0
 8003670:	004005ff 	.word	0x004005ff

08003674 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b092      	sub	sp, #72	; 0x48
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003682:	f7fd fd7f 	bl	8001184 <HAL_GetTick>
 8003686:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d107      	bne.n	80036a6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e1bd      	b.n	8003a22 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	f040 81b0 	bne.w	8003a14 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80036ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	441a      	add	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d907      	bls.n	80036d8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036cc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e1a4      	b.n	8003a22 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2203      	movs	r2, #3
 80036dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2200      	movs	r2, #0
 80036e6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d002      	beq.n	80036f6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80036f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f2:	025b      	lsls	r3, r3, #9
 80036f4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80036f6:	f04f 33ff 	mov.w	r3, #4294967295
 80036fa:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	025b      	lsls	r3, r3, #9
 8003700:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003702:	2390      	movs	r3, #144	; 0x90
 8003704:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003706:	2302      	movs	r3, #2
 8003708:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800370a:	2300      	movs	r3, #0
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800370e:	2301      	movs	r3, #1
 8003710:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f107 0214 	add.w	r2, r7, #20
 800371a:	4611      	mov	r1, r2
 800371c:	4618      	mov	r0, r3
 800371e:	f001 f9f2 	bl	8004b06 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d90a      	bls.n	800373e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2202      	movs	r2, #2
 800372c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003734:	4618      	mov	r0, r3
 8003736:	f001 fa56 	bl	8004be6 <SDMMC_CmdReadMultiBlock>
 800373a:	6478      	str	r0, [r7, #68]	; 0x44
 800373c:	e009      	b.n	8003752 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2201      	movs	r2, #1
 8003742:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800374a:	4618      	mov	r0, r3
 800374c:	f001 fa29 	bl	8004ba2 <SDMMC_CmdReadSingleBlock>
 8003750:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003754:	2b00      	cmp	r3, #0
 8003756:	d012      	beq.n	800377e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a7a      	ldr	r2, [pc, #488]	; (8003948 <HAL_SD_ReadBlocks+0x2d4>)
 800375e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003766:	431a      	orrs	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e151      	b.n	8003a22 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003782:	e061      	b.n	8003848 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d03c      	beq.n	800380c <HAL_SD_ReadBlocks+0x198>
 8003792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003794:	2b00      	cmp	r3, #0
 8003796:	d039      	beq.n	800380c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003798:	2300      	movs	r3, #0
 800379a:	643b      	str	r3, [r7, #64]	; 0x40
 800379c:	e033      	b.n	8003806 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f001 f92b 	bl	80049fe <SDIO_ReadFIFO>
 80037a8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80037aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80037b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b4:	3301      	adds	r3, #1
 80037b6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80037b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ba:	3b01      	subs	r3, #1
 80037bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80037be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c0:	0a1b      	lsrs	r3, r3, #8
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80037c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ca:	3301      	adds	r3, #1
 80037cc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80037ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d0:	3b01      	subs	r3, #1
 80037d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80037d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d6:	0c1b      	lsrs	r3, r3, #16
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037dc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80037de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e0:	3301      	adds	r3, #1
 80037e2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80037e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037e6:	3b01      	subs	r3, #1
 80037e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80037ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ec:	0e1b      	lsrs	r3, r3, #24
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80037f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f6:	3301      	adds	r3, #1
 80037f8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80037fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037fc:	3b01      	subs	r3, #1
 80037fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003802:	3301      	adds	r3, #1
 8003804:	643b      	str	r3, [r7, #64]	; 0x40
 8003806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003808:	2b07      	cmp	r3, #7
 800380a:	d9c8      	bls.n	800379e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800380c:	f7fd fcba 	bl	8001184 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003818:	429a      	cmp	r2, r3
 800381a:	d902      	bls.n	8003822 <HAL_SD_ReadBlocks+0x1ae>
 800381c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800381e:	2b00      	cmp	r3, #0
 8003820:	d112      	bne.n	8003848 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a48      	ldr	r2, [pc, #288]	; (8003948 <HAL_SD_ReadBlocks+0x2d4>)
 8003828:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e0ec      	b.n	8003a22 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003852:	2b00      	cmp	r3, #0
 8003854:	d096      	beq.n	8003784 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d022      	beq.n	80038aa <HAL_SD_ReadBlocks+0x236>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d91f      	bls.n	80038aa <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	2b03      	cmp	r3, #3
 8003870:	d01b      	beq.n	80038aa <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f001 fa1c 	bl	8004cb4 <SDMMC_CmdStopTransfer>
 800387c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800387e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003880:	2b00      	cmp	r3, #0
 8003882:	d012      	beq.n	80038aa <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a2f      	ldr	r2, [pc, #188]	; (8003948 <HAL_SD_ReadBlocks+0x2d4>)
 800388a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003892:	431a      	orrs	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e0bb      	b.n	8003a22 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d012      	beq.n	80038de <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a22      	ldr	r2, [pc, #136]	; (8003948 <HAL_SD_ReadBlocks+0x2d4>)
 80038be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c4:	f043 0208 	orr.w	r2, r3, #8
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e0a1      	b.n	8003a22 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d012      	beq.n	8003912 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a15      	ldr	r2, [pc, #84]	; (8003948 <HAL_SD_ReadBlocks+0x2d4>)
 80038f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	f043 0202 	orr.w	r2, r3, #2
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e087      	b.n	8003a22 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b00      	cmp	r3, #0
 800391e:	d064      	beq.n	80039ea <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a08      	ldr	r2, [pc, #32]	; (8003948 <HAL_SD_ReadBlocks+0x2d4>)
 8003926:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392c:	f043 0220 	orr.w	r2, r3, #32
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e06d      	b.n	8003a22 <HAL_SD_ReadBlocks+0x3ae>
 8003946:	bf00      	nop
 8003948:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f001 f854 	bl	80049fe <SDIO_ReadFIFO>
 8003956:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395a:	b2da      	uxtb	r2, r3
 800395c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003962:	3301      	adds	r3, #1
 8003964:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003968:	3b01      	subs	r3, #1
 800396a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800396c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396e:	0a1b      	lsrs	r3, r3, #8
 8003970:	b2da      	uxtb	r2, r3
 8003972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003974:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003978:	3301      	adds	r3, #1
 800397a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800397c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800397e:	3b01      	subs	r3, #1
 8003980:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003984:	0c1b      	lsrs	r3, r3, #16
 8003986:	b2da      	uxtb	r2, r3
 8003988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800398a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800398c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800398e:	3301      	adds	r3, #1
 8003990:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003994:	3b01      	subs	r3, #1
 8003996:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399a:	0e1b      	lsrs	r3, r3, #24
 800399c:	b2da      	uxtb	r2, r3
 800399e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80039a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a4:	3301      	adds	r3, #1
 80039a6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80039a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039aa:	3b01      	subs	r3, #1
 80039ac:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80039ae:	f7fd fbe9 	bl	8001184 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d902      	bls.n	80039c4 <HAL_SD_ReadBlocks+0x350>
 80039be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d112      	bne.n	80039ea <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a18      	ldr	r2, [pc, #96]	; (8003a2c <HAL_SD_ReadBlocks+0x3b8>)
 80039ca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e01b      	b.n	8003a22 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <HAL_SD_ReadBlocks+0x38a>
 80039f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1a6      	bne.n	800394c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f240 523a 	movw	r2, #1338	; 0x53a
 8003a06:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	e006      	b.n	8003a22 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a18:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
  }
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3748      	adds	r7, #72	; 0x48
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	004005ff 	.word	0x004005ff

08003a30 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b092      	sub	sp, #72	; 0x48
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003a3e:	f7fd fba1 	bl	8001184 <HAL_GetTick>
 8003a42:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d107      	bne.n	8003a62 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e165      	b.n	8003d2e <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	f040 8158 	bne.w	8003d20 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003a76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	441a      	add	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d907      	bls.n	8003a94 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e14c      	b.n	8003d2e <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2203      	movs	r2, #3
 8003a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d002      	beq.n	8003ab2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aae:	025b      	lsls	r3, r3, #9
 8003ab0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	025b      	lsls	r3, r3, #9
 8003abc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003abe:	2390      	movs	r3, #144	; 0x90
 8003ac0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003aca:	2301      	movs	r3, #1
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f107 0218 	add.w	r2, r7, #24
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f001 f814 	bl	8004b06 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d90a      	bls.n	8003afa <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003af0:	4618      	mov	r0, r3
 8003af2:	f001 f8bc 	bl	8004c6e <SDMMC_CmdWriteMultiBlock>
 8003af6:	6478      	str	r0, [r7, #68]	; 0x44
 8003af8:	e009      	b.n	8003b0e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2210      	movs	r2, #16
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b06:	4618      	mov	r0, r3
 8003b08:	f001 f88f 	bl	8004c2a <SDMMC_CmdWriteSingleBlock>
 8003b0c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d012      	beq.n	8003b3a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a87      	ldr	r2, [pc, #540]	; (8003d38 <HAL_SD_WriteBlocks+0x308>)
 8003b1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b22:	431a      	orrs	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e0f9      	b.n	8003d2e <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003b3e:	e065      	b.n	8003c0c <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d040      	beq.n	8003bd0 <HAL_SD_WriteBlocks+0x1a0>
 8003b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d03d      	beq.n	8003bd0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003b54:	2300      	movs	r3, #0
 8003b56:	643b      	str	r3, [r7, #64]	; 0x40
 8003b58:	e037      	b.n	8003bca <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b62:	3301      	adds	r3, #1
 8003b64:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	021a      	lsls	r2, r3, #8
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b80:	3b01      	subs	r3, #1
 8003b82:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	041a      	lsls	r2, r3, #16
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b92:	3301      	adds	r3, #1
 8003b94:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	061a      	lsls	r2, r3, #24
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003baa:	3301      	adds	r3, #1
 8003bac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f107 0214 	add.w	r2, r7, #20
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 ff2a 	bl	8004a18 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	643b      	str	r3, [r7, #64]	; 0x40
 8003bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bcc:	2b07      	cmp	r3, #7
 8003bce:	d9c4      	bls.n	8003b5a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003bd0:	f7fd fad8 	bl	8001184 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d902      	bls.n	8003be6 <HAL_SD_WriteBlocks+0x1b6>
 8003be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d112      	bne.n	8003c0c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a53      	ldr	r2, [pc, #332]	; (8003d38 <HAL_SD_WriteBlocks+0x308>)
 8003bec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e090      	b.n	8003d2e <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c12:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d092      	beq.n	8003b40 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d022      	beq.n	8003c6e <HAL_SD_WriteBlocks+0x23e>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d91f      	bls.n	8003c6e <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d01b      	beq.n	8003c6e <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f001 f83a 	bl	8004cb4 <SDMMC_CmdStopTransfer>
 8003c40:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d012      	beq.n	8003c6e <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a3a      	ldr	r2, [pc, #232]	; (8003d38 <HAL_SD_WriteBlocks+0x308>)
 8003c4e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c56:	431a      	orrs	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e05f      	b.n	8003d2e <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d012      	beq.n	8003ca2 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a2d      	ldr	r2, [pc, #180]	; (8003d38 <HAL_SD_WriteBlocks+0x308>)
 8003c82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	f043 0208 	orr.w	r2, r3, #8
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e045      	b.n	8003d2e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d012      	beq.n	8003cd6 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a20      	ldr	r2, [pc, #128]	; (8003d38 <HAL_SD_WriteBlocks+0x308>)
 8003cb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbc:	f043 0202 	orr.w	r2, r3, #2
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e02b      	b.n	8003d2e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d012      	beq.n	8003d0a <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a13      	ldr	r2, [pc, #76]	; (8003d38 <HAL_SD_WriteBlocks+0x308>)
 8003cea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf0:	f043 0210 	orr.w	r2, r3, #16
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e011      	b.n	8003d2e <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003d12:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	e006      	b.n	8003d2e <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d24:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
  }
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3748      	adds	r7, #72	; 0x48
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	004005ff 	.word	0x004005ff

08003d3c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d4a:	0f9b      	lsrs	r3, r3, #30
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d56:	0e9b      	lsrs	r3, r3, #26
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d68:	0e1b      	lsrs	r3, r3, #24
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d7a:	0c1b      	lsrs	r3, r3, #16
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d86:	0a1b      	lsrs	r3, r3, #8
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d9c:	0d1b      	lsrs	r3, r3, #20
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003da8:	0c1b      	lsrs	r3, r3, #16
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	f003 030f 	and.w	r3, r3, #15
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dba:	0bdb      	lsrs	r3, r3, #15
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dcc:	0b9b      	lsrs	r3, r3, #14
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dde:	0b5b      	lsrs	r3, r3, #13
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003df0:	0b1b      	lsrs	r3, r3, #12
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2200      	movs	r2, #0
 8003e02:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d163      	bne.n	8003ed4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e10:	009a      	lsls	r2, r3, #2
 8003e12:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e16:	4013      	ands	r3, r2
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003e1c:	0f92      	lsrs	r2, r2, #30
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e28:	0edb      	lsrs	r3, r3, #27
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e3a:	0e1b      	lsrs	r3, r3, #24
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e4c:	0d5b      	lsrs	r3, r3, #21
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e5e:	0c9b      	lsrs	r3, r3, #18
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e70:	0bdb      	lsrs	r3, r3, #15
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	7e1b      	ldrb	r3, [r3, #24]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	3302      	adds	r3, #2
 8003e94:	2201      	movs	r2, #1
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003e9e:	fb03 f202 	mul.w	r2, r3, r2
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	7a1b      	ldrb	r3, [r3, #8]
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	f003 030f 	and.w	r3, r3, #15
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	409a      	lsls	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003ec0:	0a52      	lsrs	r2, r2, #9
 8003ec2:	fb03 f202 	mul.w	r2, r3, r2
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ed0:	661a      	str	r2, [r3, #96]	; 0x60
 8003ed2:	e031      	b.n	8003f38 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d11d      	bne.n	8003f18 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ee0:	041b      	lsls	r3, r3, #16
 8003ee2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eea:	0c1b      	lsrs	r3, r3, #16
 8003eec:	431a      	orrs	r2, r3
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	029a      	lsls	r2, r3, #10
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f0c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	661a      	str	r2, [r3, #96]	; 0x60
 8003f16:	e00f      	b.n	8003f38 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a58      	ldr	r2, [pc, #352]	; (8004080 <HAL_SD_GetCardCSD+0x344>)
 8003f1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e09d      	b.n	8004074 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f3c:	0b9b      	lsrs	r3, r3, #14
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f4e:	09db      	lsrs	r3, r3, #7
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f70:	0fdb      	lsrs	r3, r3, #31
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7c:	0f5b      	lsrs	r3, r3, #29
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8e:	0e9b      	lsrs	r3, r3, #26
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa0:	0d9b      	lsrs	r3, r3, #22
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb2:	0d5b      	lsrs	r3, r3, #21
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fce:	0c1b      	lsrs	r3, r3, #16
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe2:	0bdb      	lsrs	r3, r3, #15
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff6:	0b9b      	lsrs	r3, r3, #14
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400a:	0b5b      	lsrs	r3, r3, #13
 800400c:	b2db      	uxtb	r3, r3
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	b2da      	uxtb	r2, r3
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	0b1b      	lsrs	r3, r3, #12
 8004020:	b2db      	uxtb	r3, r3
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	b2da      	uxtb	r2, r3
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004032:	0a9b      	lsrs	r3, r3, #10
 8004034:	b2db      	uxtb	r3, r3
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	b2da      	uxtb	r2, r3
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004046:	0a1b      	lsrs	r3, r3, #8
 8004048:	b2db      	uxtb	r3, r3
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	b2da      	uxtb	r2, r3
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405a:	085b      	lsrs	r3, r3, #1
 800405c:	b2db      	uxtb	r3, r3
 800405e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004062:	b2da      	uxtb	r2, r3
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	004005ff 	.word	0x004005ff

08004084 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80040e8:	f107 030c 	add.w	r3, r7, #12
 80040ec:	4619      	mov	r1, r3
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f970 	bl	80043d4 <SD_SendStatus>
 80040f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	0a5b      	lsrs	r3, r3, #9
 800410c:	f003 030f 	and.w	r3, r3, #15
 8004110:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004112:	693b      	ldr	r3, [r7, #16]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800411c:	b5b0      	push	{r4, r5, r7, lr}
 800411e:	b094      	sub	sp, #80	; 0x50
 8004120:	af04      	add	r7, sp, #16
 8004122:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004124:	2301      	movs	r3, #1
 8004126:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fc92 	bl	8004a56 <SDIO_GetPowerState>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d102      	bne.n	800413e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004138:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800413c:	e0b8      	b.n	80042b0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004142:	2b03      	cmp	r3, #3
 8004144:	d02f      	beq.n	80041a6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fe79 	bl	8004e42 <SDMMC_CmdSendCID>
 8004150:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <SD_InitCard+0x40>
    {
      return errorstate;
 8004158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800415a:	e0a9      	b.n	80042b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2100      	movs	r1, #0
 8004162:	4618      	mov	r0, r3
 8004164:	f000 fcbc 	bl	8004ae0 <SDIO_GetResponse>
 8004168:	4602      	mov	r2, r0
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2104      	movs	r1, #4
 8004174:	4618      	mov	r0, r3
 8004176:	f000 fcb3 	bl	8004ae0 <SDIO_GetResponse>
 800417a:	4602      	mov	r2, r0
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2108      	movs	r1, #8
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fcaa 	bl	8004ae0 <SDIO_GetResponse>
 800418c:	4602      	mov	r2, r0
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	210c      	movs	r1, #12
 8004198:	4618      	mov	r0, r3
 800419a:	f000 fca1 	bl	8004ae0 <SDIO_GetResponse>
 800419e:	4602      	mov	r2, r0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	d00d      	beq.n	80041ca <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f107 020e 	add.w	r2, r7, #14
 80041b6:	4611      	mov	r1, r2
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 fe7f 	bl	8004ebc <SDMMC_CmdSetRelAdd>
 80041be:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80041c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <SD_InitCard+0xae>
    {
      return errorstate;
 80041c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c8:	e072      	b.n	80042b0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	d036      	beq.n	8004240 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80041d2:	89fb      	ldrh	r3, [r7, #14]
 80041d4:	461a      	mov	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e2:	041b      	lsls	r3, r3, #16
 80041e4:	4619      	mov	r1, r3
 80041e6:	4610      	mov	r0, r2
 80041e8:	f000 fe49 	bl	8004e7e <SDMMC_CmdSendCSD>
 80041ec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80041ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80041f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f6:	e05b      	b.n	80042b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2100      	movs	r1, #0
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fc6e 	bl	8004ae0 <SDIO_GetResponse>
 8004204:	4602      	mov	r2, r0
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2104      	movs	r1, #4
 8004210:	4618      	mov	r0, r3
 8004212:	f000 fc65 	bl	8004ae0 <SDIO_GetResponse>
 8004216:	4602      	mov	r2, r0
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2108      	movs	r1, #8
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fc5c 	bl	8004ae0 <SDIO_GetResponse>
 8004228:	4602      	mov	r2, r0
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	210c      	movs	r1, #12
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fc53 	bl	8004ae0 <SDIO_GetResponse>
 800423a:	4602      	mov	r2, r0
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2104      	movs	r1, #4
 8004246:	4618      	mov	r0, r3
 8004248:	f000 fc4a 	bl	8004ae0 <SDIO_GetResponse>
 800424c:	4603      	mov	r3, r0
 800424e:	0d1a      	lsrs	r2, r3, #20
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004254:	f107 0310 	add.w	r3, r7, #16
 8004258:	4619      	mov	r1, r3
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7ff fd6e 	bl	8003d3c <HAL_SD_GetCardCSD>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004266:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800426a:	e021      	b.n	80042b0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6819      	ldr	r1, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004274:	041b      	lsls	r3, r3, #16
 8004276:	2200      	movs	r2, #0
 8004278:	461c      	mov	r4, r3
 800427a:	4615      	mov	r5, r2
 800427c:	4622      	mov	r2, r4
 800427e:	462b      	mov	r3, r5
 8004280:	4608      	mov	r0, r1
 8004282:	f000 fd39 	bl	8004cf8 <SDMMC_CmdSelDesel>
 8004286:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <SD_InitCard+0x176>
  {
    return errorstate;
 800428e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004290:	e00e      	b.n	80042b0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681d      	ldr	r5, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	466c      	mov	r4, sp
 800429a:	f103 0210 	add.w	r2, r3, #16
 800429e:	ca07      	ldmia	r2, {r0, r1, r2}
 80042a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80042a4:	3304      	adds	r3, #4
 80042a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042a8:	4628      	mov	r0, r5
 80042aa:	f000 fb7d 	bl	80049a8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3740      	adds	r7, #64	; 0x40
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bdb0      	pop	{r4, r5, r7, pc}

080042b8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]
 80042c8:	2300      	movs	r3, #0
 80042ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 fd34 	bl	8004d3e <SDMMC_CmdGoIdleState>
 80042d6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	e072      	b.n	80043c8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fd47 	bl	8004d7a <SDMMC_CmdOperCond>
 80042ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00d      	beq.n	8004310 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 fd1d 	bl	8004d3e <SDMMC_CmdGoIdleState>
 8004304:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d004      	beq.n	8004316 <SD_PowerON+0x5e>
    {
      return errorstate;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	e05b      	b.n	80043c8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800431a:	2b01      	cmp	r3, #1
 800431c:	d137      	bne.n	800438e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2100      	movs	r1, #0
 8004324:	4618      	mov	r0, r3
 8004326:	f000 fd47 	bl	8004db8 <SDMMC_CmdAppCommand>
 800432a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d02d      	beq.n	800438e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004332:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004336:	e047      	b.n	80043c8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2100      	movs	r1, #0
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fd3a 	bl	8004db8 <SDMMC_CmdAppCommand>
 8004344:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <SD_PowerON+0x98>
    {
      return errorstate;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	e03b      	b.n	80043c8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	491e      	ldr	r1, [pc, #120]	; (80043d0 <SD_PowerON+0x118>)
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fd50 	bl	8004dfc <SDMMC_CmdAppOperCommand>
 800435c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004364:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004368:	e02e      	b.n	80043c8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2100      	movs	r1, #0
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fbb5 	bl	8004ae0 <SDIO_GetResponse>
 8004376:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	0fdb      	lsrs	r3, r3, #31
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <SD_PowerON+0xcc>
 8004380:	2301      	movs	r3, #1
 8004382:	e000      	b.n	8004386 <SD_PowerON+0xce>
 8004384:	2300      	movs	r3, #0
 8004386:	613b      	str	r3, [r7, #16]

    count++;
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	3301      	adds	r3, #1
 800438c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004394:	4293      	cmp	r3, r2
 8004396:	d802      	bhi.n	800439e <SD_PowerON+0xe6>
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0cc      	beq.n	8004338 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d902      	bls.n	80043ae <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80043a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043ac:	e00c      	b.n	80043c8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	645a      	str	r2, [r3, #68]	; 0x44
 80043be:	e002      	b.n	80043c6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	c1100000 	.word	0xc1100000

080043d4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d102      	bne.n	80043ea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80043e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043e8:	e018      	b.n	800441c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f2:	041b      	lsls	r3, r3, #16
 80043f4:	4619      	mov	r1, r3
 80043f6:	4610      	mov	r0, r2
 80043f8:	f000 fd81 	bl	8004efe <SDMMC_CmdSendStatus>
 80043fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	e009      	b.n	800441c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2100      	movs	r1, #0
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fb66 	bl	8004ae0 <SDIO_GetResponse>
 8004414:	4602      	mov	r2, r0
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e03f      	b.n	80044b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d106      	bne.n	8004450 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7fc fcf4 	bl	8000e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2224      	movs	r2, #36	; 0x24
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004466:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f829 	bl	80044c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	691a      	ldr	r2, [r3, #16]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800447c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	695a      	ldr	r2, [r3, #20]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800448c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800449c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
	...

080044c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044c4:	b0c0      	sub	sp, #256	; 0x100
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044dc:	68d9      	ldr	r1, [r3, #12]
 80044de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	ea40 0301 	orr.w	r3, r0, r1
 80044e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	431a      	orrs	r2, r3
 80044f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	431a      	orrs	r2, r3
 8004500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800450c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004518:	f021 010c 	bic.w	r1, r1, #12
 800451c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004526:	430b      	orrs	r3, r1
 8004528:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800452a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453a:	6999      	ldr	r1, [r3, #24]
 800453c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	ea40 0301 	orr.w	r3, r0, r1
 8004546:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	4b8f      	ldr	r3, [pc, #572]	; (800478c <UART_SetConfig+0x2cc>)
 8004550:	429a      	cmp	r2, r3
 8004552:	d005      	beq.n	8004560 <UART_SetConfig+0xa0>
 8004554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	4b8d      	ldr	r3, [pc, #564]	; (8004790 <UART_SetConfig+0x2d0>)
 800455c:	429a      	cmp	r2, r3
 800455e:	d104      	bne.n	800456a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004560:	f7fd ffcc 	bl	80024fc <HAL_RCC_GetPCLK2Freq>
 8004564:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004568:	e003      	b.n	8004572 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800456a:	f7fd ffb3 	bl	80024d4 <HAL_RCC_GetPCLK1Freq>
 800456e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800457c:	f040 810c 	bne.w	8004798 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004580:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004584:	2200      	movs	r2, #0
 8004586:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800458a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800458e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004592:	4622      	mov	r2, r4
 8004594:	462b      	mov	r3, r5
 8004596:	1891      	adds	r1, r2, r2
 8004598:	65b9      	str	r1, [r7, #88]	; 0x58
 800459a:	415b      	adcs	r3, r3
 800459c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800459e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045a2:	4621      	mov	r1, r4
 80045a4:	eb12 0801 	adds.w	r8, r2, r1
 80045a8:	4629      	mov	r1, r5
 80045aa:	eb43 0901 	adc.w	r9, r3, r1
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045c2:	4690      	mov	r8, r2
 80045c4:	4699      	mov	r9, r3
 80045c6:	4623      	mov	r3, r4
 80045c8:	eb18 0303 	adds.w	r3, r8, r3
 80045cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045d0:	462b      	mov	r3, r5
 80045d2:	eb49 0303 	adc.w	r3, r9, r3
 80045d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80045ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80045ee:	460b      	mov	r3, r1
 80045f0:	18db      	adds	r3, r3, r3
 80045f2:	653b      	str	r3, [r7, #80]	; 0x50
 80045f4:	4613      	mov	r3, r2
 80045f6:	eb42 0303 	adc.w	r3, r2, r3
 80045fa:	657b      	str	r3, [r7, #84]	; 0x54
 80045fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004600:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004604:	f7fb fe54 	bl	80002b0 <__aeabi_uldivmod>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4b61      	ldr	r3, [pc, #388]	; (8004794 <UART_SetConfig+0x2d4>)
 800460e:	fba3 2302 	umull	r2, r3, r3, r2
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	011c      	lsls	r4, r3, #4
 8004616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800461a:	2200      	movs	r2, #0
 800461c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004620:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004624:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004628:	4642      	mov	r2, r8
 800462a:	464b      	mov	r3, r9
 800462c:	1891      	adds	r1, r2, r2
 800462e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004630:	415b      	adcs	r3, r3
 8004632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004634:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004638:	4641      	mov	r1, r8
 800463a:	eb12 0a01 	adds.w	sl, r2, r1
 800463e:	4649      	mov	r1, r9
 8004640:	eb43 0b01 	adc.w	fp, r3, r1
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004650:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004654:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004658:	4692      	mov	sl, r2
 800465a:	469b      	mov	fp, r3
 800465c:	4643      	mov	r3, r8
 800465e:	eb1a 0303 	adds.w	r3, sl, r3
 8004662:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004666:	464b      	mov	r3, r9
 8004668:	eb4b 0303 	adc.w	r3, fp, r3
 800466c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800467c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004680:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004684:	460b      	mov	r3, r1
 8004686:	18db      	adds	r3, r3, r3
 8004688:	643b      	str	r3, [r7, #64]	; 0x40
 800468a:	4613      	mov	r3, r2
 800468c:	eb42 0303 	adc.w	r3, r2, r3
 8004690:	647b      	str	r3, [r7, #68]	; 0x44
 8004692:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004696:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800469a:	f7fb fe09 	bl	80002b0 <__aeabi_uldivmod>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4611      	mov	r1, r2
 80046a4:	4b3b      	ldr	r3, [pc, #236]	; (8004794 <UART_SetConfig+0x2d4>)
 80046a6:	fba3 2301 	umull	r2, r3, r3, r1
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	2264      	movs	r2, #100	; 0x64
 80046ae:	fb02 f303 	mul.w	r3, r2, r3
 80046b2:	1acb      	subs	r3, r1, r3
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80046ba:	4b36      	ldr	r3, [pc, #216]	; (8004794 <UART_SetConfig+0x2d4>)
 80046bc:	fba3 2302 	umull	r2, r3, r3, r2
 80046c0:	095b      	lsrs	r3, r3, #5
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046c8:	441c      	add	r4, r3
 80046ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046ce:	2200      	movs	r2, #0
 80046d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80046d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80046dc:	4642      	mov	r2, r8
 80046de:	464b      	mov	r3, r9
 80046e0:	1891      	adds	r1, r2, r2
 80046e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80046e4:	415b      	adcs	r3, r3
 80046e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046ec:	4641      	mov	r1, r8
 80046ee:	1851      	adds	r1, r2, r1
 80046f0:	6339      	str	r1, [r7, #48]	; 0x30
 80046f2:	4649      	mov	r1, r9
 80046f4:	414b      	adcs	r3, r1
 80046f6:	637b      	str	r3, [r7, #52]	; 0x34
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004704:	4659      	mov	r1, fp
 8004706:	00cb      	lsls	r3, r1, #3
 8004708:	4651      	mov	r1, sl
 800470a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800470e:	4651      	mov	r1, sl
 8004710:	00ca      	lsls	r2, r1, #3
 8004712:	4610      	mov	r0, r2
 8004714:	4619      	mov	r1, r3
 8004716:	4603      	mov	r3, r0
 8004718:	4642      	mov	r2, r8
 800471a:	189b      	adds	r3, r3, r2
 800471c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004720:	464b      	mov	r3, r9
 8004722:	460a      	mov	r2, r1
 8004724:	eb42 0303 	adc.w	r3, r2, r3
 8004728:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800472c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004738:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800473c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004740:	460b      	mov	r3, r1
 8004742:	18db      	adds	r3, r3, r3
 8004744:	62bb      	str	r3, [r7, #40]	; 0x28
 8004746:	4613      	mov	r3, r2
 8004748:	eb42 0303 	adc.w	r3, r2, r3
 800474c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800474e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004752:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004756:	f7fb fdab 	bl	80002b0 <__aeabi_uldivmod>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	4b0d      	ldr	r3, [pc, #52]	; (8004794 <UART_SetConfig+0x2d4>)
 8004760:	fba3 1302 	umull	r1, r3, r3, r2
 8004764:	095b      	lsrs	r3, r3, #5
 8004766:	2164      	movs	r1, #100	; 0x64
 8004768:	fb01 f303 	mul.w	r3, r1, r3
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	3332      	adds	r3, #50	; 0x32
 8004772:	4a08      	ldr	r2, [pc, #32]	; (8004794 <UART_SetConfig+0x2d4>)
 8004774:	fba2 2303 	umull	r2, r3, r2, r3
 8004778:	095b      	lsrs	r3, r3, #5
 800477a:	f003 0207 	and.w	r2, r3, #7
 800477e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4422      	add	r2, r4
 8004786:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004788:	e105      	b.n	8004996 <UART_SetConfig+0x4d6>
 800478a:	bf00      	nop
 800478c:	40011000 	.word	0x40011000
 8004790:	40011400 	.word	0x40011400
 8004794:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800479c:	2200      	movs	r2, #0
 800479e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80047a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80047aa:	4642      	mov	r2, r8
 80047ac:	464b      	mov	r3, r9
 80047ae:	1891      	adds	r1, r2, r2
 80047b0:	6239      	str	r1, [r7, #32]
 80047b2:	415b      	adcs	r3, r3
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24
 80047b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047ba:	4641      	mov	r1, r8
 80047bc:	1854      	adds	r4, r2, r1
 80047be:	4649      	mov	r1, r9
 80047c0:	eb43 0501 	adc.w	r5, r3, r1
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	f04f 0300 	mov.w	r3, #0
 80047cc:	00eb      	lsls	r3, r5, #3
 80047ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047d2:	00e2      	lsls	r2, r4, #3
 80047d4:	4614      	mov	r4, r2
 80047d6:	461d      	mov	r5, r3
 80047d8:	4643      	mov	r3, r8
 80047da:	18e3      	adds	r3, r4, r3
 80047dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047e0:	464b      	mov	r3, r9
 80047e2:	eb45 0303 	adc.w	r3, r5, r3
 80047e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004806:	4629      	mov	r1, r5
 8004808:	008b      	lsls	r3, r1, #2
 800480a:	4621      	mov	r1, r4
 800480c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004810:	4621      	mov	r1, r4
 8004812:	008a      	lsls	r2, r1, #2
 8004814:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004818:	f7fb fd4a 	bl	80002b0 <__aeabi_uldivmod>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	4b60      	ldr	r3, [pc, #384]	; (80049a4 <UART_SetConfig+0x4e4>)
 8004822:	fba3 2302 	umull	r2, r3, r3, r2
 8004826:	095b      	lsrs	r3, r3, #5
 8004828:	011c      	lsls	r4, r3, #4
 800482a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800482e:	2200      	movs	r2, #0
 8004830:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004834:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004838:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800483c:	4642      	mov	r2, r8
 800483e:	464b      	mov	r3, r9
 8004840:	1891      	adds	r1, r2, r2
 8004842:	61b9      	str	r1, [r7, #24]
 8004844:	415b      	adcs	r3, r3
 8004846:	61fb      	str	r3, [r7, #28]
 8004848:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800484c:	4641      	mov	r1, r8
 800484e:	1851      	adds	r1, r2, r1
 8004850:	6139      	str	r1, [r7, #16]
 8004852:	4649      	mov	r1, r9
 8004854:	414b      	adcs	r3, r1
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	f04f 0300 	mov.w	r3, #0
 8004860:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004864:	4659      	mov	r1, fp
 8004866:	00cb      	lsls	r3, r1, #3
 8004868:	4651      	mov	r1, sl
 800486a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800486e:	4651      	mov	r1, sl
 8004870:	00ca      	lsls	r2, r1, #3
 8004872:	4610      	mov	r0, r2
 8004874:	4619      	mov	r1, r3
 8004876:	4603      	mov	r3, r0
 8004878:	4642      	mov	r2, r8
 800487a:	189b      	adds	r3, r3, r2
 800487c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004880:	464b      	mov	r3, r9
 8004882:	460a      	mov	r2, r1
 8004884:	eb42 0303 	adc.w	r3, r2, r3
 8004888:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800488c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	67bb      	str	r3, [r7, #120]	; 0x78
 8004896:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80048a4:	4649      	mov	r1, r9
 80048a6:	008b      	lsls	r3, r1, #2
 80048a8:	4641      	mov	r1, r8
 80048aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048ae:	4641      	mov	r1, r8
 80048b0:	008a      	lsls	r2, r1, #2
 80048b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80048b6:	f7fb fcfb 	bl	80002b0 <__aeabi_uldivmod>
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
 80048be:	4b39      	ldr	r3, [pc, #228]	; (80049a4 <UART_SetConfig+0x4e4>)
 80048c0:	fba3 1302 	umull	r1, r3, r3, r2
 80048c4:	095b      	lsrs	r3, r3, #5
 80048c6:	2164      	movs	r1, #100	; 0x64
 80048c8:	fb01 f303 	mul.w	r3, r1, r3
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	3332      	adds	r3, #50	; 0x32
 80048d2:	4a34      	ldr	r2, [pc, #208]	; (80049a4 <UART_SetConfig+0x4e4>)
 80048d4:	fba2 2303 	umull	r2, r3, r2, r3
 80048d8:	095b      	lsrs	r3, r3, #5
 80048da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048de:	441c      	add	r4, r3
 80048e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048e4:	2200      	movs	r2, #0
 80048e6:	673b      	str	r3, [r7, #112]	; 0x70
 80048e8:	677a      	str	r2, [r7, #116]	; 0x74
 80048ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80048ee:	4642      	mov	r2, r8
 80048f0:	464b      	mov	r3, r9
 80048f2:	1891      	adds	r1, r2, r2
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	415b      	adcs	r3, r3
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048fe:	4641      	mov	r1, r8
 8004900:	1851      	adds	r1, r2, r1
 8004902:	6039      	str	r1, [r7, #0]
 8004904:	4649      	mov	r1, r9
 8004906:	414b      	adcs	r3, r1
 8004908:	607b      	str	r3, [r7, #4]
 800490a:	f04f 0200 	mov.w	r2, #0
 800490e:	f04f 0300 	mov.w	r3, #0
 8004912:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004916:	4659      	mov	r1, fp
 8004918:	00cb      	lsls	r3, r1, #3
 800491a:	4651      	mov	r1, sl
 800491c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004920:	4651      	mov	r1, sl
 8004922:	00ca      	lsls	r2, r1, #3
 8004924:	4610      	mov	r0, r2
 8004926:	4619      	mov	r1, r3
 8004928:	4603      	mov	r3, r0
 800492a:	4642      	mov	r2, r8
 800492c:	189b      	adds	r3, r3, r2
 800492e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004930:	464b      	mov	r3, r9
 8004932:	460a      	mov	r2, r1
 8004934:	eb42 0303 	adc.w	r3, r2, r3
 8004938:	66fb      	str	r3, [r7, #108]	; 0x6c
 800493a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	663b      	str	r3, [r7, #96]	; 0x60
 8004944:	667a      	str	r2, [r7, #100]	; 0x64
 8004946:	f04f 0200 	mov.w	r2, #0
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004952:	4649      	mov	r1, r9
 8004954:	008b      	lsls	r3, r1, #2
 8004956:	4641      	mov	r1, r8
 8004958:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800495c:	4641      	mov	r1, r8
 800495e:	008a      	lsls	r2, r1, #2
 8004960:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004964:	f7fb fca4 	bl	80002b0 <__aeabi_uldivmod>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4b0d      	ldr	r3, [pc, #52]	; (80049a4 <UART_SetConfig+0x4e4>)
 800496e:	fba3 1302 	umull	r1, r3, r3, r2
 8004972:	095b      	lsrs	r3, r3, #5
 8004974:	2164      	movs	r1, #100	; 0x64
 8004976:	fb01 f303 	mul.w	r3, r1, r3
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	3332      	adds	r3, #50	; 0x32
 8004980:	4a08      	ldr	r2, [pc, #32]	; (80049a4 <UART_SetConfig+0x4e4>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	f003 020f 	and.w	r2, r3, #15
 800498c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4422      	add	r2, r4
 8004994:	609a      	str	r2, [r3, #8]
}
 8004996:	bf00      	nop
 8004998:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800499c:	46bd      	mov	sp, r7
 800499e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049a2:	bf00      	nop
 80049a4:	51eb851f 	.word	0x51eb851f

080049a8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80049a8:	b084      	sub	sp, #16
 80049aa:	b480      	push	{r7}
 80049ac:	b085      	sub	sp, #20
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
 80049b2:	f107 001c 	add.w	r0, r7, #28
 80049b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80049be:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80049c0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80049c2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80049c6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80049c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80049ca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80049cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80049ce:	431a      	orrs	r2, r3
             Init.ClockDiv
 80049d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80049d2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80049e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	b004      	add	sp, #16
 80049fc:	4770      	bx	lr

080049fe <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2203      	movs	r2, #3
 8004a46:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0303 	and.w	r3, r3, #3
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b085      	sub	sp, #20
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004a90:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004a96:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004a9c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004aac:	f023 030f 	bic.w	r3, r3, #15
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	b2db      	uxtb	r3, r3
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3314      	adds	r3, #20
 8004aee:	461a      	mov	r2, r3
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	4413      	add	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
}  
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b085      	sub	sp, #20
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004b2c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004b32:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004b38:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b44:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0

}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b088      	sub	sp, #32
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004b6c:	2310      	movs	r3, #16
 8004b6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b70:	2340      	movs	r3, #64	; 0x40
 8004b72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b74:	2300      	movs	r3, #0
 8004b76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b7e:	f107 0308 	add.w	r3, r7, #8
 8004b82:	4619      	mov	r1, r3
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7ff ff74 	bl	8004a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8e:	2110      	movs	r1, #16
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f9d7 	bl	8004f44 <SDMMC_GetCmdResp1>
 8004b96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b98:	69fb      	ldr	r3, [r7, #28]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3720      	adds	r7, #32
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b088      	sub	sp, #32
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004bb0:	2311      	movs	r3, #17
 8004bb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004bb4:	2340      	movs	r3, #64	; 0x40
 8004bb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bc2:	f107 0308 	add.w	r3, r7, #8
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7ff ff52 	bl	8004a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd2:	2111      	movs	r1, #17
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f9b5 	bl	8004f44 <SDMMC_GetCmdResp1>
 8004bda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bdc:	69fb      	ldr	r3, [r7, #28]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3720      	adds	r7, #32
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b088      	sub	sp, #32
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004bf4:	2312      	movs	r3, #18
 8004bf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004bf8:	2340      	movs	r3, #64	; 0x40
 8004bfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c06:	f107 0308 	add.w	r3, r7, #8
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7ff ff30 	bl	8004a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c16:	2112      	movs	r1, #18
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f993 	bl	8004f44 <SDMMC_GetCmdResp1>
 8004c1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c20:	69fb      	ldr	r3, [r7, #28]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3720      	adds	r7, #32
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b088      	sub	sp, #32
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004c38:	2318      	movs	r3, #24
 8004c3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c3c:	2340      	movs	r3, #64	; 0x40
 8004c3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c40:	2300      	movs	r3, #0
 8004c42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c4a:	f107 0308 	add.w	r3, r7, #8
 8004c4e:	4619      	mov	r1, r3
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7ff ff0e 	bl	8004a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c5a:	2118      	movs	r1, #24
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f971 	bl	8004f44 <SDMMC_GetCmdResp1>
 8004c62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c64:	69fb      	ldr	r3, [r7, #28]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3720      	adds	r7, #32
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b088      	sub	sp, #32
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004c7c:	2319      	movs	r3, #25
 8004c7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c80:	2340      	movs	r3, #64	; 0x40
 8004c82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c84:	2300      	movs	r3, #0
 8004c86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c8e:	f107 0308 	add.w	r3, r7, #8
 8004c92:	4619      	mov	r1, r3
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7ff feec 	bl	8004a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c9e:	2119      	movs	r1, #25
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f94f 	bl	8004f44 <SDMMC_GetCmdResp1>
 8004ca6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ca8:	69fb      	ldr	r3, [r7, #28]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3720      	adds	r7, #32
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
	...

08004cb4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004cc0:	230c      	movs	r3, #12
 8004cc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cc4:	2340      	movs	r3, #64	; 0x40
 8004cc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cd0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004cd2:	f107 0308 	add.w	r3, r7, #8
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff feca 	bl	8004a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004cde:	4a05      	ldr	r2, [pc, #20]	; (8004cf4 <SDMMC_CmdStopTransfer+0x40>)
 8004ce0:	210c      	movs	r1, #12
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f92e 	bl	8004f44 <SDMMC_GetCmdResp1>
 8004ce8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cea:	69fb      	ldr	r3, [r7, #28]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3720      	adds	r7, #32
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	05f5e100 	.word	0x05f5e100

08004cf8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08a      	sub	sp, #40	; 0x28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004d08:	2307      	movs	r3, #7
 8004d0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d0c:	2340      	movs	r3, #64	; 0x40
 8004d0e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d10:	2300      	movs	r3, #0
 8004d12:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d18:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d1a:	f107 0310 	add.w	r3, r7, #16
 8004d1e:	4619      	mov	r1, r3
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f7ff fea6 	bl	8004a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2a:	2107      	movs	r1, #7
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 f909 	bl	8004f44 <SDMMC_GetCmdResp1>
 8004d32:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3728      	adds	r7, #40	; 0x28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b088      	sub	sp, #32
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d52:	2300      	movs	r3, #0
 8004d54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d5c:	f107 0308 	add.w	r3, r7, #8
 8004d60:	4619      	mov	r1, r3
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7ff fe85 	bl	8004a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 fb23 	bl	80053b4 <SDMMC_GetCmdError>
 8004d6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d70:	69fb      	ldr	r3, [r7, #28]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3720      	adds	r7, #32
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b088      	sub	sp, #32
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004d82:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004d86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004d88:	2308      	movs	r3, #8
 8004d8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d8c:	2340      	movs	r3, #64	; 0x40
 8004d8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d90:	2300      	movs	r3, #0
 8004d92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d9a:	f107 0308 	add.w	r3, r7, #8
 8004d9e:	4619      	mov	r1, r3
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f7ff fe66 	bl	8004a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fab6 	bl	8005318 <SDMMC_GetCmdResp7>
 8004dac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004dae:	69fb      	ldr	r3, [r7, #28]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3720      	adds	r7, #32
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b088      	sub	sp, #32
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004dc6:	2337      	movs	r3, #55	; 0x37
 8004dc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004dca:	2340      	movs	r3, #64	; 0x40
 8004dcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dd6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dd8:	f107 0308 	add.w	r3, r7, #8
 8004ddc:	4619      	mov	r1, r3
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7ff fe47 	bl	8004a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de8:	2137      	movs	r1, #55	; 0x37
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f8aa 	bl	8004f44 <SDMMC_GetCmdResp1>
 8004df0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004df2:	69fb      	ldr	r3, [r7, #28]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3720      	adds	r7, #32
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b088      	sub	sp, #32
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004e12:	2329      	movs	r3, #41	; 0x29
 8004e14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e16:	2340      	movs	r3, #64	; 0x40
 8004e18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e24:	f107 0308 	add.w	r3, r7, #8
 8004e28:	4619      	mov	r1, r3
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7ff fe21 	bl	8004a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f9bd 	bl	80051b0 <SDMMC_GetCmdResp3>
 8004e36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e38:	69fb      	ldr	r3, [r7, #28]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3720      	adds	r7, #32
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b088      	sub	sp, #32
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004e4e:	2302      	movs	r3, #2
 8004e50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004e52:	23c0      	movs	r3, #192	; 0xc0
 8004e54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e56:	2300      	movs	r3, #0
 8004e58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e60:	f107 0308 	add.w	r3, r7, #8
 8004e64:	4619      	mov	r1, r3
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff fe03 	bl	8004a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f957 	bl	8005120 <SDMMC_GetCmdResp2>
 8004e72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e74:	69fb      	ldr	r3, [r7, #28]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3720      	adds	r7, #32
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b088      	sub	sp, #32
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004e8c:	2309      	movs	r3, #9
 8004e8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004e90:	23c0      	movs	r3, #192	; 0xc0
 8004e92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e94:	2300      	movs	r3, #0
 8004e96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e9e:	f107 0308 	add.w	r3, r7, #8
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f7ff fde4 	bl	8004a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f938 	bl	8005120 <SDMMC_GetCmdResp2>
 8004eb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004eb2:	69fb      	ldr	r3, [r7, #28]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3720      	adds	r7, #32
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b088      	sub	sp, #32
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ece:	2340      	movs	r3, #64	; 0x40
 8004ed0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004edc:	f107 0308 	add.w	r3, r7, #8
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7ff fdc5 	bl	8004a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	2103      	movs	r1, #3
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f99d 	bl	800522c <SDMMC_GetCmdResp6>
 8004ef2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ef4:	69fb      	ldr	r3, [r7, #28]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3720      	adds	r7, #32
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b088      	sub	sp, #32
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004f0c:	230d      	movs	r3, #13
 8004f0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f10:	2340      	movs	r3, #64	; 0x40
 8004f12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f1e:	f107 0308 	add.w	r3, r7, #8
 8004f22:	4619      	mov	r1, r3
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7ff fda4 	bl	8004a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2e:	210d      	movs	r1, #13
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f807 	bl	8004f44 <SDMMC_GetCmdResp1>
 8004f36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f38:	69fb      	ldr	r3, [r7, #28]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3720      	adds	r7, #32
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
	...

08004f44 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	607a      	str	r2, [r7, #4]
 8004f50:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004f52:	4b70      	ldr	r3, [pc, #448]	; (8005114 <SDMMC_GetCmdResp1+0x1d0>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a70      	ldr	r2, [pc, #448]	; (8005118 <SDMMC_GetCmdResp1+0x1d4>)
 8004f58:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5c:	0a5a      	lsrs	r2, r3, #9
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	fb02 f303 	mul.w	r3, r2, r3
 8004f64:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	1e5a      	subs	r2, r3, #1
 8004f6a:	61fa      	str	r2, [r7, #28]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d102      	bne.n	8004f76 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f74:	e0c9      	b.n	800510a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f7a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0ef      	beq.n	8004f66 <SDMMC_GetCmdResp1+0x22>
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1ea      	bne.n	8004f66 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d004      	beq.n	8004fa6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2204      	movs	r2, #4
 8004fa0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004fa2:	2304      	movs	r3, #4
 8004fa4:	e0b1      	b.n	800510a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d004      	beq.n	8004fbc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e0a6      	b.n	800510a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	22c5      	movs	r2, #197	; 0xc5
 8004fc0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f7ff fd7f 	bl	8004ac6 <SDIO_GetCommandResponse>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	461a      	mov	r2, r3
 8004fcc:	7afb      	ldrb	r3, [r7, #11]
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d001      	beq.n	8004fd6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e099      	b.n	800510a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f7ff fd81 	bl	8004ae0 <SDIO_GetResponse>
 8004fde:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	4b4e      	ldr	r3, [pc, #312]	; (800511c <SDMMC_GetCmdResp1+0x1d8>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004fea:	2300      	movs	r3, #0
 8004fec:	e08d      	b.n	800510a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	da02      	bge.n	8004ffa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004ff4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ff8:	e087      	b.n	800510a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005004:	2340      	movs	r3, #64	; 0x40
 8005006:	e080      	b.n	800510a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005012:	2380      	movs	r3, #128	; 0x80
 8005014:	e079      	b.n	800510a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005020:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005024:	e071      	b.n	800510a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005030:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005034:	e069      	b.n	800510a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d002      	beq.n	8005046 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005044:	e061      	b.n	800510a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005050:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005054:	e059      	b.n	800510a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005064:	e051      	b.n	800510a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005070:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005074:	e049      	b.n	800510a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005080:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005084:	e041      	b.n	800510a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005090:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005094:	e039      	b.n	800510a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80050a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050a4:	e031      	b.n	800510a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80050b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80050b4:	e029      	b.n	800510a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80050c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80050c4:	e021      	b.n	800510a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80050d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80050d4:	e019      	b.n	800510a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80050e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80050e4:	e011      	b.n	800510a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80050f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80050f4:	e009      	b.n	800510a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f003 0308 	and.w	r3, r3, #8
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005100:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005104:	e001      	b.n	800510a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005106:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800510a:	4618      	mov	r0, r3
 800510c:	3720      	adds	r7, #32
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20000000 	.word	0x20000000
 8005118:	10624dd3 	.word	0x10624dd3
 800511c:	fdffe008 	.word	0xfdffe008

08005120 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005128:	4b1f      	ldr	r3, [pc, #124]	; (80051a8 <SDMMC_GetCmdResp2+0x88>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a1f      	ldr	r2, [pc, #124]	; (80051ac <SDMMC_GetCmdResp2+0x8c>)
 800512e:	fba2 2303 	umull	r2, r3, r2, r3
 8005132:	0a5b      	lsrs	r3, r3, #9
 8005134:	f241 3288 	movw	r2, #5000	; 0x1388
 8005138:	fb02 f303 	mul.w	r3, r2, r3
 800513c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	1e5a      	subs	r2, r3, #1
 8005142:	60fa      	str	r2, [r7, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d102      	bne.n	800514e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005148:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800514c:	e026      	b.n	800519c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005152:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0ef      	beq.n	800513e <SDMMC_GetCmdResp2+0x1e>
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1ea      	bne.n	800513e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d004      	beq.n	800517e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2204      	movs	r2, #4
 8005178:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800517a:	2304      	movs	r3, #4
 800517c:	e00e      	b.n	800519c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d004      	beq.n	8005194 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005190:	2301      	movs	r3, #1
 8005192:	e003      	b.n	800519c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	22c5      	movs	r2, #197	; 0xc5
 8005198:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	20000000 	.word	0x20000000
 80051ac:	10624dd3 	.word	0x10624dd3

080051b0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80051b8:	4b1a      	ldr	r3, [pc, #104]	; (8005224 <SDMMC_GetCmdResp3+0x74>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a1a      	ldr	r2, [pc, #104]	; (8005228 <SDMMC_GetCmdResp3+0x78>)
 80051be:	fba2 2303 	umull	r2, r3, r2, r3
 80051c2:	0a5b      	lsrs	r3, r3, #9
 80051c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c8:	fb02 f303 	mul.w	r3, r2, r3
 80051cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	1e5a      	subs	r2, r3, #1
 80051d2:	60fa      	str	r2, [r7, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d102      	bne.n	80051de <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80051d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80051dc:	e01b      	b.n	8005216 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0ef      	beq.n	80051ce <SDMMC_GetCmdResp3+0x1e>
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1ea      	bne.n	80051ce <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b00      	cmp	r3, #0
 8005202:	d004      	beq.n	800520e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2204      	movs	r2, #4
 8005208:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800520a:	2304      	movs	r3, #4
 800520c:	e003      	b.n	8005216 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	22c5      	movs	r2, #197	; 0xc5
 8005212:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	20000000 	.word	0x20000000
 8005228:	10624dd3 	.word	0x10624dd3

0800522c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	460b      	mov	r3, r1
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800523a:	4b35      	ldr	r3, [pc, #212]	; (8005310 <SDMMC_GetCmdResp6+0xe4>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a35      	ldr	r2, [pc, #212]	; (8005314 <SDMMC_GetCmdResp6+0xe8>)
 8005240:	fba2 2303 	umull	r2, r3, r2, r3
 8005244:	0a5b      	lsrs	r3, r3, #9
 8005246:	f241 3288 	movw	r2, #5000	; 0x1388
 800524a:	fb02 f303 	mul.w	r3, r2, r3
 800524e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	1e5a      	subs	r2, r3, #1
 8005254:	61fa      	str	r2, [r7, #28]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d102      	bne.n	8005260 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800525a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800525e:	e052      	b.n	8005306 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005264:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0ef      	beq.n	8005250 <SDMMC_GetCmdResp6+0x24>
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1ea      	bne.n	8005250 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527e:	f003 0304 	and.w	r3, r3, #4
 8005282:	2b00      	cmp	r3, #0
 8005284:	d004      	beq.n	8005290 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2204      	movs	r2, #4
 800528a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800528c:	2304      	movs	r3, #4
 800528e:	e03a      	b.n	8005306 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	d004      	beq.n	80052a6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2201      	movs	r2, #1
 80052a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e02f      	b.n	8005306 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f7ff fc0d 	bl	8004ac6 <SDIO_GetCommandResponse>
 80052ac:	4603      	mov	r3, r0
 80052ae:	461a      	mov	r2, r3
 80052b0:	7afb      	ldrb	r3, [r7, #11]
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d001      	beq.n	80052ba <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e025      	b.n	8005306 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	22c5      	movs	r2, #197	; 0xc5
 80052be:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80052c0:	2100      	movs	r1, #0
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f7ff fc0c 	bl	8004ae0 <SDIO_GetResponse>
 80052c8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d106      	bne.n	80052e2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	0c1b      	lsrs	r3, r3, #16
 80052d8:	b29a      	uxth	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80052de:	2300      	movs	r3, #0
 80052e0:	e011      	b.n	8005306 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d002      	beq.n	80052f2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80052ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052f0:	e009      	b.n	8005306 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80052fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005300:	e001      	b.n	8005306 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005302:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005306:	4618      	mov	r0, r3
 8005308:	3720      	adds	r7, #32
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	20000000 	.word	0x20000000
 8005314:	10624dd3 	.word	0x10624dd3

08005318 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005320:	4b22      	ldr	r3, [pc, #136]	; (80053ac <SDMMC_GetCmdResp7+0x94>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a22      	ldr	r2, [pc, #136]	; (80053b0 <SDMMC_GetCmdResp7+0x98>)
 8005326:	fba2 2303 	umull	r2, r3, r2, r3
 800532a:	0a5b      	lsrs	r3, r3, #9
 800532c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005330:	fb02 f303 	mul.w	r3, r2, r3
 8005334:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	1e5a      	subs	r2, r3, #1
 800533a:	60fa      	str	r2, [r7, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d102      	bne.n	8005346 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005340:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005344:	e02c      	b.n	80053a0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800534a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0ef      	beq.n	8005336 <SDMMC_GetCmdResp7+0x1e>
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1ea      	bne.n	8005336 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d004      	beq.n	8005376 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2204      	movs	r2, #4
 8005370:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005372:	2304      	movs	r3, #4
 8005374:	e014      	b.n	80053a0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d004      	beq.n	800538c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005388:	2301      	movs	r3, #1
 800538a:	e009      	b.n	80053a0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005394:	2b00      	cmp	r3, #0
 8005396:	d002      	beq.n	800539e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2240      	movs	r2, #64	; 0x40
 800539c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800539e:	2300      	movs	r3, #0
  
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	20000000 	.word	0x20000000
 80053b0:	10624dd3 	.word	0x10624dd3

080053b4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80053bc:	4b11      	ldr	r3, [pc, #68]	; (8005404 <SDMMC_GetCmdError+0x50>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a11      	ldr	r2, [pc, #68]	; (8005408 <SDMMC_GetCmdError+0x54>)
 80053c2:	fba2 2303 	umull	r2, r3, r2, r3
 80053c6:	0a5b      	lsrs	r3, r3, #9
 80053c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053cc:	fb02 f303 	mul.w	r3, r2, r3
 80053d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	1e5a      	subs	r2, r3, #1
 80053d6:	60fa      	str	r2, [r7, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d102      	bne.n	80053e2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80053dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053e0:	e009      	b.n	80053f6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0f1      	beq.n	80053d2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	22c5      	movs	r2, #197	; 0xc5
 80053f2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	20000000 	.word	0x20000000
 8005408:	10624dd3 	.word	0x10624dd3

0800540c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005410:	4904      	ldr	r1, [pc, #16]	; (8005424 <MX_FATFS_Init+0x18>)
 8005412:	4805      	ldr	r0, [pc, #20]	; (8005428 <MX_FATFS_Init+0x1c>)
 8005414:	f002 fca2 	bl	8007d5c <FATFS_LinkDriver>
 8005418:	4603      	mov	r3, r0
 800541a:	461a      	mov	r2, r3
 800541c:	4b03      	ldr	r3, [pc, #12]	; (800542c <MX_FATFS_Init+0x20>)
 800541e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005420:	bf00      	nop
 8005422:	bd80      	pop	{r7, pc}
 8005424:	20002310 	.word	0x20002310
 8005428:	08008fbc 	.word	0x08008fbc
 800542c:	2000230c 	.word	0x2000230c

08005430 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005434:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005436:	4618      	mov	r0, r3
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005446:	2300      	movs	r3, #0
 8005448:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800544a:	f000 f86b 	bl	8005524 <BSP_SD_IsDetected>
 800544e:	4603      	mov	r3, r0
 8005450:	2b01      	cmp	r3, #1
 8005452:	d001      	beq.n	8005458 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e005      	b.n	8005464 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005458:	4804      	ldr	r0, [pc, #16]	; (800546c <BSP_SD_Init+0x2c>)
 800545a:	f7fe f85b 	bl	8003514 <HAL_SD_Init>
 800545e:	4603      	mov	r3, r0
 8005460:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005462:	79fb      	ldrb	r3, [r7, #7]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	20000134 	.word	0x20000134

08005470 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af02      	add	r7, sp, #8
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800547e:	2300      	movs	r3, #0
 8005480:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	68f9      	ldr	r1, [r7, #12]
 800548c:	4806      	ldr	r0, [pc, #24]	; (80054a8 <BSP_SD_ReadBlocks+0x38>)
 800548e:	f7fe f8f1 	bl	8003674 <HAL_SD_ReadBlocks>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800549c:	7dfb      	ldrb	r3, [r7, #23]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3718      	adds	r7, #24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20000134 	.word	0x20000134

080054ac <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b088      	sub	sp, #32
 80054b0:	af02      	add	r7, sp, #8
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
 80054b8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80054ba:	2300      	movs	r3, #0
 80054bc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	68f9      	ldr	r1, [r7, #12]
 80054c8:	4806      	ldr	r0, [pc, #24]	; (80054e4 <BSP_SD_WriteBlocks+0x38>)
 80054ca:	f7fe fab1 	bl	8003a30 <HAL_SD_WriteBlocks>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80054d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	20000134 	.word	0x20000134

080054e8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80054ec:	4805      	ldr	r0, [pc, #20]	; (8005504 <BSP_SD_GetCardState+0x1c>)
 80054ee:	f7fe fdf5 	bl	80040dc <HAL_SD_GetCardState>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	bf14      	ite	ne
 80054f8:	2301      	movne	r3, #1
 80054fa:	2300      	moveq	r3, #0
 80054fc:	b2db      	uxtb	r3, r3
}
 80054fe:	4618      	mov	r0, r3
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	20000134 	.word	0x20000134

08005508 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	4803      	ldr	r0, [pc, #12]	; (8005520 <BSP_SD_GetCardInfo+0x18>)
 8005514:	f7fe fdb6 	bl	8004084 <HAL_SD_GetCardInfo>
}
 8005518:	bf00      	nop
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	20000134 	.word	0x20000134

08005524 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800552a:	2301      	movs	r3, #1
 800552c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800552e:	79fb      	ldrb	r3, [r7, #7]
 8005530:	b2db      	uxtb	r3, r3
}
 8005532:	4618      	mov	r0, r3
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
	...

08005540 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	4603      	mov	r3, r0
 8005548:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800554a:	4b0b      	ldr	r3, [pc, #44]	; (8005578 <SD_CheckStatus+0x38>)
 800554c:	2201      	movs	r2, #1
 800554e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005550:	f7ff ffca 	bl	80054e8 <BSP_SD_GetCardState>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d107      	bne.n	800556a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800555a:	4b07      	ldr	r3, [pc, #28]	; (8005578 <SD_CheckStatus+0x38>)
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	b2db      	uxtb	r3, r3
 8005560:	f023 0301 	bic.w	r3, r3, #1
 8005564:	b2da      	uxtb	r2, r3
 8005566:	4b04      	ldr	r3, [pc, #16]	; (8005578 <SD_CheckStatus+0x38>)
 8005568:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800556a:	4b03      	ldr	r3, [pc, #12]	; (8005578 <SD_CheckStatus+0x38>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	b2db      	uxtb	r3, r3
}
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	20000009 	.word	0x20000009

0800557c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	4603      	mov	r3, r0
 8005584:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005586:	4b0b      	ldr	r3, [pc, #44]	; (80055b4 <SD_initialize+0x38>)
 8005588:	2201      	movs	r2, #1
 800558a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800558c:	f7ff ff58 	bl	8005440 <BSP_SD_Init>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d107      	bne.n	80055a6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff ffd1 	bl	8005540 <SD_CheckStatus>
 800559e:	4603      	mov	r3, r0
 80055a0:	461a      	mov	r2, r3
 80055a2:	4b04      	ldr	r3, [pc, #16]	; (80055b4 <SD_initialize+0x38>)
 80055a4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80055a6:	4b03      	ldr	r3, [pc, #12]	; (80055b4 <SD_initialize+0x38>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	b2db      	uxtb	r3, r3
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	20000009 	.word	0x20000009

080055b8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	4603      	mov	r3, r0
 80055c0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff ffbb 	bl	8005540 <SD_CheckStatus>
 80055ca:	4603      	mov	r3, r0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	607a      	str	r2, [r7, #4]
 80055de:	603b      	str	r3, [r7, #0]
 80055e0:	4603      	mov	r3, r0
 80055e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80055e8:	f04f 33ff 	mov.w	r3, #4294967295
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	68b8      	ldr	r0, [r7, #8]
 80055f2:	f7ff ff3d 	bl	8005470 <BSP_SD_ReadBlocks>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d107      	bne.n	800560c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80055fc:	bf00      	nop
 80055fe:	f7ff ff73 	bl	80054e8 <BSP_SD_GetCardState>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1fa      	bne.n	80055fe <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005608:	2300      	movs	r3, #0
 800560a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800560c:	7dfb      	ldrb	r3, [r7, #23]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3718      	adds	r7, #24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b086      	sub	sp, #24
 800561a:	af00      	add	r7, sp, #0
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	603b      	str	r3, [r7, #0]
 8005622:	4603      	mov	r3, r0
 8005624:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800562a:	f04f 33ff 	mov.w	r3, #4294967295
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	68b8      	ldr	r0, [r7, #8]
 8005634:	f7ff ff3a 	bl	80054ac <BSP_SD_WriteBlocks>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d107      	bne.n	800564e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800563e:	bf00      	nop
 8005640:	f7ff ff52 	bl	80054e8 <BSP_SD_GetCardState>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1fa      	bne.n	8005640 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800564a:	2300      	movs	r3, #0
 800564c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800564e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b08c      	sub	sp, #48	; 0x30
 800565c:	af00      	add	r7, sp, #0
 800565e:	4603      	mov	r3, r0
 8005660:	603a      	str	r2, [r7, #0]
 8005662:	71fb      	strb	r3, [r7, #7]
 8005664:	460b      	mov	r3, r1
 8005666:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800566e:	4b25      	ldr	r3, [pc, #148]	; (8005704 <SD_ioctl+0xac>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	b2db      	uxtb	r3, r3
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <SD_ioctl+0x28>
 800567c:	2303      	movs	r3, #3
 800567e:	e03c      	b.n	80056fa <SD_ioctl+0xa2>

  switch (cmd)
 8005680:	79bb      	ldrb	r3, [r7, #6]
 8005682:	2b03      	cmp	r3, #3
 8005684:	d834      	bhi.n	80056f0 <SD_ioctl+0x98>
 8005686:	a201      	add	r2, pc, #4	; (adr r2, 800568c <SD_ioctl+0x34>)
 8005688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568c:	0800569d 	.word	0x0800569d
 8005690:	080056a5 	.word	0x080056a5
 8005694:	080056bd 	.word	0x080056bd
 8005698:	080056d7 	.word	0x080056d7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800569c:	2300      	movs	r3, #0
 800569e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80056a2:	e028      	b.n	80056f6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80056a4:	f107 030c 	add.w	r3, r7, #12
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff ff2d 	bl	8005508 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80056ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80056b4:	2300      	movs	r3, #0
 80056b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80056ba:	e01c      	b.n	80056f6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80056bc:	f107 030c 	add.w	r3, r7, #12
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff ff21 	bl	8005508 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80056c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80056d4:	e00f      	b.n	80056f6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80056d6:	f107 030c 	add.w	r3, r7, #12
 80056da:	4618      	mov	r0, r3
 80056dc:	f7ff ff14 	bl	8005508 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80056e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e2:	0a5a      	lsrs	r2, r3, #9
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80056ee:	e002      	b.n	80056f6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80056f0:	2304      	movs	r3, #4
 80056f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80056f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3730      	adds	r7, #48	; 0x30
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	20000009 	.word	0x20000009

08005708 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	4603      	mov	r3, r0
 8005710:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005712:	79fb      	ldrb	r3, [r7, #7]
 8005714:	4a08      	ldr	r2, [pc, #32]	; (8005738 <disk_status+0x30>)
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	79fa      	ldrb	r2, [r7, #7]
 8005720:	4905      	ldr	r1, [pc, #20]	; (8005738 <disk_status+0x30>)
 8005722:	440a      	add	r2, r1
 8005724:	7a12      	ldrb	r2, [r2, #8]
 8005726:	4610      	mov	r0, r2
 8005728:	4798      	blx	r3
 800572a:	4603      	mov	r3, r0
 800572c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800572e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	2000233c 	.word	0x2000233c

0800573c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	4603      	mov	r3, r0
 8005744:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005746:	2300      	movs	r3, #0
 8005748:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800574a:	79fb      	ldrb	r3, [r7, #7]
 800574c:	4a0d      	ldr	r2, [pc, #52]	; (8005784 <disk_initialize+0x48>)
 800574e:	5cd3      	ldrb	r3, [r2, r3]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d111      	bne.n	8005778 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005754:	79fb      	ldrb	r3, [r7, #7]
 8005756:	4a0b      	ldr	r2, [pc, #44]	; (8005784 <disk_initialize+0x48>)
 8005758:	2101      	movs	r1, #1
 800575a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	4a09      	ldr	r2, [pc, #36]	; (8005784 <disk_initialize+0x48>)
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	79fa      	ldrb	r2, [r7, #7]
 800576a:	4906      	ldr	r1, [pc, #24]	; (8005784 <disk_initialize+0x48>)
 800576c:	440a      	add	r2, r1
 800576e:	7a12      	ldrb	r2, [r2, #8]
 8005770:	4610      	mov	r0, r2
 8005772:	4798      	blx	r3
 8005774:	4603      	mov	r3, r0
 8005776:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005778:	7bfb      	ldrb	r3, [r7, #15]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	2000233c 	.word	0x2000233c

08005788 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005788:	b590      	push	{r4, r7, lr}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	60b9      	str	r1, [r7, #8]
 8005790:	607a      	str	r2, [r7, #4]
 8005792:	603b      	str	r3, [r7, #0]
 8005794:	4603      	mov	r3, r0
 8005796:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005798:	7bfb      	ldrb	r3, [r7, #15]
 800579a:	4a0a      	ldr	r2, [pc, #40]	; (80057c4 <disk_read+0x3c>)
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	689c      	ldr	r4, [r3, #8]
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
 80057a6:	4a07      	ldr	r2, [pc, #28]	; (80057c4 <disk_read+0x3c>)
 80057a8:	4413      	add	r3, r2
 80057aa:	7a18      	ldrb	r0, [r3, #8]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	68b9      	ldr	r1, [r7, #8]
 80057b2:	47a0      	blx	r4
 80057b4:	4603      	mov	r3, r0
 80057b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	371c      	adds	r7, #28
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd90      	pop	{r4, r7, pc}
 80057c2:	bf00      	nop
 80057c4:	2000233c 	.word	0x2000233c

080057c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80057c8:	b590      	push	{r4, r7, lr}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	607a      	str	r2, [r7, #4]
 80057d2:	603b      	str	r3, [r7, #0]
 80057d4:	4603      	mov	r3, r0
 80057d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	4a0a      	ldr	r2, [pc, #40]	; (8005804 <disk_write+0x3c>)
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	68dc      	ldr	r4, [r3, #12]
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
 80057e6:	4a07      	ldr	r2, [pc, #28]	; (8005804 <disk_write+0x3c>)
 80057e8:	4413      	add	r3, r2
 80057ea:	7a18      	ldrb	r0, [r3, #8]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	68b9      	ldr	r1, [r7, #8]
 80057f2:	47a0      	blx	r4
 80057f4:	4603      	mov	r3, r0
 80057f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80057f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	371c      	adds	r7, #28
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd90      	pop	{r4, r7, pc}
 8005802:	bf00      	nop
 8005804:	2000233c 	.word	0x2000233c

08005808 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	4603      	mov	r3, r0
 8005810:	603a      	str	r2, [r7, #0]
 8005812:	71fb      	strb	r3, [r7, #7]
 8005814:	460b      	mov	r3, r1
 8005816:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005818:	79fb      	ldrb	r3, [r7, #7]
 800581a:	4a09      	ldr	r2, [pc, #36]	; (8005840 <disk_ioctl+0x38>)
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	79fa      	ldrb	r2, [r7, #7]
 8005826:	4906      	ldr	r1, [pc, #24]	; (8005840 <disk_ioctl+0x38>)
 8005828:	440a      	add	r2, r1
 800582a:	7a10      	ldrb	r0, [r2, #8]
 800582c:	79b9      	ldrb	r1, [r7, #6]
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	4798      	blx	r3
 8005832:	4603      	mov	r3, r0
 8005834:	73fb      	strb	r3, [r7, #15]
  return res;
 8005836:	7bfb      	ldrb	r3, [r7, #15]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	2000233c 	.word	0x2000233c

08005844 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3301      	adds	r3, #1
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005854:	89fb      	ldrh	r3, [r7, #14]
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	b21a      	sxth	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	b21b      	sxth	r3, r3
 8005860:	4313      	orrs	r3, r2
 8005862:	b21b      	sxth	r3, r3
 8005864:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005866:	89fb      	ldrh	r3, [r7, #14]
}
 8005868:	4618      	mov	r0, r3
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3303      	adds	r3, #3
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	021b      	lsls	r3, r3, #8
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	3202      	adds	r2, #2
 800588c:	7812      	ldrb	r2, [r2, #0]
 800588e:	4313      	orrs	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	021b      	lsls	r3, r3, #8
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	3201      	adds	r2, #1
 800589a:	7812      	ldrb	r2, [r2, #0]
 800589c:	4313      	orrs	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	021b      	lsls	r3, r3, #8
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	7812      	ldrb	r2, [r2, #0]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]
	return rv;
 80058ac:	68fb      	ldr	r3, [r7, #12]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	460b      	mov	r3, r1
 80058c4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	607a      	str	r2, [r7, #4]
 80058cc:	887a      	ldrh	r2, [r7, #2]
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	701a      	strb	r2, [r3, #0]
 80058d2:	887b      	ldrh	r3, [r7, #2]
 80058d4:	0a1b      	lsrs	r3, r3, #8
 80058d6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	607a      	str	r2, [r7, #4]
 80058de:	887a      	ldrh	r2, [r7, #2]
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	701a      	strb	r2, [r3, #0]
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	607a      	str	r2, [r7, #4]
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	701a      	strb	r2, [r3, #0]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	0a1b      	lsrs	r3, r3, #8
 800590a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	607a      	str	r2, [r7, #4]
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	701a      	strb	r2, [r3, #0]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	0a1b      	lsrs	r3, r3, #8
 800591c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	1c5a      	adds	r2, r3, #1
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	701a      	strb	r2, [r3, #0]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	0a1b      	lsrs	r3, r3, #8
 800592e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	607a      	str	r2, [r7, #4]
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	b2d2      	uxtb	r2, r2
 800593a:	701a      	strb	r2, [r3, #0]
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00d      	beq.n	800597e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	1c53      	adds	r3, r2, #1
 8005966:	613b      	str	r3, [r7, #16]
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	1c59      	adds	r1, r3, #1
 800596c:	6179      	str	r1, [r7, #20]
 800596e:	7812      	ldrb	r2, [r2, #0]
 8005970:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3b01      	subs	r3, #1
 8005976:	607b      	str	r3, [r7, #4]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1f1      	bne.n	8005962 <mem_cpy+0x1a>
	}
}
 800597e:	bf00      	nop
 8005980:	371c      	adds	r7, #28
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800598a:	b480      	push	{r7}
 800598c:	b087      	sub	sp, #28
 800598e:	af00      	add	r7, sp, #0
 8005990:	60f8      	str	r0, [r7, #12]
 8005992:	60b9      	str	r1, [r7, #8]
 8005994:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	617a      	str	r2, [r7, #20]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	607b      	str	r3, [r7, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1f3      	bne.n	800599a <mem_set+0x10>
}
 80059b2:	bf00      	nop
 80059b4:	bf00      	nop
 80059b6:	371c      	adds	r7, #28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80059c0:	b480      	push	{r7}
 80059c2:	b089      	sub	sp, #36	; 0x24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	61fb      	str	r3, [r7, #28]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80059d4:	2300      	movs	r3, #0
 80059d6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	1c5a      	adds	r2, r3, #1
 80059dc:	61fa      	str	r2, [r7, #28]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	4619      	mov	r1, r3
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	61ba      	str	r2, [r7, #24]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	1acb      	subs	r3, r1, r3
 80059ec:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3b01      	subs	r3, #1
 80059f2:	607b      	str	r3, [r7, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d002      	beq.n	8005a00 <mem_cmp+0x40>
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d0eb      	beq.n	80059d8 <mem_cmp+0x18>

	return r;
 8005a00:	697b      	ldr	r3, [r7, #20]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3724      	adds	r7, #36	; 0x24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005a18:	e002      	b.n	8005a20 <chk_chr+0x12>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	607b      	str	r3, [r7, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d005      	beq.n	8005a34 <chk_chr+0x26>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d1f2      	bne.n	8005a1a <chk_chr+0xc>
	return *str;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	781b      	ldrb	r3, [r3, #0]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60bb      	str	r3, [r7, #8]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	60fb      	str	r3, [r7, #12]
 8005a56:	e029      	b.n	8005aac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005a58:	4a27      	ldr	r2, [pc, #156]	; (8005af8 <chk_lock+0xb4>)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	4413      	add	r3, r2
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d01d      	beq.n	8005aa2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005a66:	4a24      	ldr	r2, [pc, #144]	; (8005af8 <chk_lock+0xb4>)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	011b      	lsls	r3, r3, #4
 8005a6c:	4413      	add	r3, r2
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d116      	bne.n	8005aa6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005a78:	4a1f      	ldr	r2, [pc, #124]	; (8005af8 <chk_lock+0xb4>)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	011b      	lsls	r3, r3, #4
 8005a7e:	4413      	add	r3, r2
 8005a80:	3304      	adds	r3, #4
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d10c      	bne.n	8005aa6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005a8c:	4a1a      	ldr	r2, [pc, #104]	; (8005af8 <chk_lock+0xb4>)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	011b      	lsls	r3, r3, #4
 8005a92:	4413      	add	r3, r2
 8005a94:	3308      	adds	r3, #8
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d102      	bne.n	8005aa6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005aa0:	e007      	b.n	8005ab2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d9d2      	bls.n	8005a58 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d109      	bne.n	8005acc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d102      	bne.n	8005ac4 <chk_lock+0x80>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d101      	bne.n	8005ac8 <chk_lock+0x84>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	e010      	b.n	8005aea <chk_lock+0xa6>
 8005ac8:	2312      	movs	r3, #18
 8005aca:	e00e      	b.n	8005aea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d108      	bne.n	8005ae4 <chk_lock+0xa0>
 8005ad2:	4a09      	ldr	r2, [pc, #36]	; (8005af8 <chk_lock+0xb4>)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	011b      	lsls	r3, r3, #4
 8005ad8:	4413      	add	r3, r2
 8005ada:	330c      	adds	r3, #12
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ae2:	d101      	bne.n	8005ae8 <chk_lock+0xa4>
 8005ae4:	2310      	movs	r3, #16
 8005ae6:	e000      	b.n	8005aea <chk_lock+0xa6>
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	2000231c 	.word	0x2000231c

08005afc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005b02:	2300      	movs	r3, #0
 8005b04:	607b      	str	r3, [r7, #4]
 8005b06:	e002      	b.n	8005b0e <enq_lock+0x12>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	607b      	str	r3, [r7, #4]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d806      	bhi.n	8005b22 <enq_lock+0x26>
 8005b14:	4a09      	ldr	r2, [pc, #36]	; (8005b3c <enq_lock+0x40>)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	011b      	lsls	r3, r3, #4
 8005b1a:	4413      	add	r3, r2
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1f2      	bne.n	8005b08 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	bf14      	ite	ne
 8005b28:	2301      	movne	r3, #1
 8005b2a:	2300      	moveq	r3, #0
 8005b2c:	b2db      	uxtb	r3, r3
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	2000231c 	.word	0x2000231c

08005b40 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60fb      	str	r3, [r7, #12]
 8005b4e:	e01f      	b.n	8005b90 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005b50:	4a41      	ldr	r2, [pc, #260]	; (8005c58 <inc_lock+0x118>)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	011b      	lsls	r3, r3, #4
 8005b56:	4413      	add	r3, r2
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d113      	bne.n	8005b8a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005b62:	4a3d      	ldr	r2, [pc, #244]	; (8005c58 <inc_lock+0x118>)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	011b      	lsls	r3, r3, #4
 8005b68:	4413      	add	r3, r2
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d109      	bne.n	8005b8a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005b76:	4a38      	ldr	r2, [pc, #224]	; (8005c58 <inc_lock+0x118>)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	4413      	add	r3, r2
 8005b7e:	3308      	adds	r3, #8
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d006      	beq.n	8005b98 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d9dc      	bls.n	8005b50 <inc_lock+0x10>
 8005b96:	e000      	b.n	8005b9a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005b98:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d132      	bne.n	8005c06 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	e002      	b.n	8005bac <inc_lock+0x6c>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d806      	bhi.n	8005bc0 <inc_lock+0x80>
 8005bb2:	4a29      	ldr	r2, [pc, #164]	; (8005c58 <inc_lock+0x118>)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	011b      	lsls	r3, r3, #4
 8005bb8:	4413      	add	r3, r2
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1f2      	bne.n	8005ba6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d101      	bne.n	8005bca <inc_lock+0x8a>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	e040      	b.n	8005c4c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	4922      	ldr	r1, [pc, #136]	; (8005c58 <inc_lock+0x118>)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	011b      	lsls	r3, r3, #4
 8005bd4:	440b      	add	r3, r1
 8005bd6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	491e      	ldr	r1, [pc, #120]	; (8005c58 <inc_lock+0x118>)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	440b      	add	r3, r1
 8005be4:	3304      	adds	r3, #4
 8005be6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	695a      	ldr	r2, [r3, #20]
 8005bec:	491a      	ldr	r1, [pc, #104]	; (8005c58 <inc_lock+0x118>)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	011b      	lsls	r3, r3, #4
 8005bf2:	440b      	add	r3, r1
 8005bf4:	3308      	adds	r3, #8
 8005bf6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005bf8:	4a17      	ldr	r2, [pc, #92]	; (8005c58 <inc_lock+0x118>)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	011b      	lsls	r3, r3, #4
 8005bfe:	4413      	add	r3, r2
 8005c00:	330c      	adds	r3, #12
 8005c02:	2200      	movs	r2, #0
 8005c04:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d009      	beq.n	8005c20 <inc_lock+0xe0>
 8005c0c:	4a12      	ldr	r2, [pc, #72]	; (8005c58 <inc_lock+0x118>)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	011b      	lsls	r3, r3, #4
 8005c12:	4413      	add	r3, r2
 8005c14:	330c      	adds	r3, #12
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <inc_lock+0xe0>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	e015      	b.n	8005c4c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d108      	bne.n	8005c38 <inc_lock+0xf8>
 8005c26:	4a0c      	ldr	r2, [pc, #48]	; (8005c58 <inc_lock+0x118>)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	011b      	lsls	r3, r3, #4
 8005c2c:	4413      	add	r3, r2
 8005c2e:	330c      	adds	r3, #12
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	3301      	adds	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	e001      	b.n	8005c3c <inc_lock+0xfc>
 8005c38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c3c:	4906      	ldr	r1, [pc, #24]	; (8005c58 <inc_lock+0x118>)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	440b      	add	r3, r1
 8005c44:	330c      	adds	r3, #12
 8005c46:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3301      	adds	r3, #1
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	2000231c 	.word	0x2000231c

08005c5c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	607b      	str	r3, [r7, #4]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d825      	bhi.n	8005cbc <dec_lock+0x60>
		n = Files[i].ctr;
 8005c70:	4a17      	ldr	r2, [pc, #92]	; (8005cd0 <dec_lock+0x74>)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	011b      	lsls	r3, r3, #4
 8005c76:	4413      	add	r3, r2
 8005c78:	330c      	adds	r3, #12
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005c7e:	89fb      	ldrh	r3, [r7, #14]
 8005c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c84:	d101      	bne.n	8005c8a <dec_lock+0x2e>
 8005c86:	2300      	movs	r3, #0
 8005c88:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005c8a:	89fb      	ldrh	r3, [r7, #14]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <dec_lock+0x3a>
 8005c90:	89fb      	ldrh	r3, [r7, #14]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005c96:	4a0e      	ldr	r2, [pc, #56]	; (8005cd0 <dec_lock+0x74>)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	011b      	lsls	r3, r3, #4
 8005c9c:	4413      	add	r3, r2
 8005c9e:	330c      	adds	r3, #12
 8005ca0:	89fa      	ldrh	r2, [r7, #14]
 8005ca2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005ca4:	89fb      	ldrh	r3, [r7, #14]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d105      	bne.n	8005cb6 <dec_lock+0x5a>
 8005caa:	4a09      	ldr	r2, [pc, #36]	; (8005cd0 <dec_lock+0x74>)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	011b      	lsls	r3, r3, #4
 8005cb0:	4413      	add	r3, r2
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	737b      	strb	r3, [r7, #13]
 8005cba:	e001      	b.n	8005cc0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005cc0:	7b7b      	ldrb	r3, [r7, #13]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	2000231c 	.word	0x2000231c

08005cd4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	e010      	b.n	8005d04 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005ce2:	4a0d      	ldr	r2, [pc, #52]	; (8005d18 <clear_lock+0x44>)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	4413      	add	r3, r2
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d105      	bne.n	8005cfe <clear_lock+0x2a>
 8005cf2:	4a09      	ldr	r2, [pc, #36]	; (8005d18 <clear_lock+0x44>)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	4413      	add	r3, r2
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	3301      	adds	r3, #1
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d9eb      	bls.n	8005ce2 <clear_lock+0xe>
	}
}
 8005d0a:	bf00      	nop
 8005d0c:	bf00      	nop
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	2000231c 	.word	0x2000231c

08005d1c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	78db      	ldrb	r3, [r3, #3]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d034      	beq.n	8005d9a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d34:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	7858      	ldrb	r0, [r3, #1]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005d40:	2301      	movs	r3, #1
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	f7ff fd40 	bl	80057c8 <disk_write>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d002      	beq.n	8005d54 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	73fb      	strb	r3, [r7, #15]
 8005d52:	e022      	b.n	8005d9a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	1ad2      	subs	r2, r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d217      	bcs.n	8005d9a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	789b      	ldrb	r3, [r3, #2]
 8005d6e:	613b      	str	r3, [r7, #16]
 8005d70:	e010      	b.n	8005d94 <sync_window+0x78>
					wsect += fs->fsize;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	4413      	add	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	7858      	ldrb	r0, [r3, #1]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005d86:	2301      	movs	r3, #1
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	f7ff fd1d 	bl	80057c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	3b01      	subs	r3, #1
 8005d92:	613b      	str	r3, [r7, #16]
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d8eb      	bhi.n	8005d72 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3718      	adds	r7, #24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d01b      	beq.n	8005df4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7ff ffad 	bl	8005d1c <sync_window>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d113      	bne.n	8005df4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	7858      	ldrb	r0, [r3, #1]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	f7ff fcd5 	bl	8005788 <disk_read>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d004      	beq.n	8005dee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005de4:	f04f 33ff 	mov.w	r3, #4294967295
 8005de8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
	...

08005e00 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7ff ff87 	bl	8005d1c <sync_window>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d159      	bne.n	8005ecc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b03      	cmp	r3, #3
 8005e1e:	d149      	bne.n	8005eb4 <sync_fs+0xb4>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	791b      	ldrb	r3, [r3, #4]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d145      	bne.n	8005eb4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	899b      	ldrh	r3, [r3, #12]
 8005e32:	461a      	mov	r2, r3
 8005e34:	2100      	movs	r1, #0
 8005e36:	f7ff fda8 	bl	800598a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	3334      	adds	r3, #52	; 0x34
 8005e3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005e42:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7ff fd37 	bl	80058ba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3334      	adds	r3, #52	; 0x34
 8005e50:	4921      	ldr	r1, [pc, #132]	; (8005ed8 <sync_fs+0xd8>)
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7ff fd4c 	bl	80058f0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3334      	adds	r3, #52	; 0x34
 8005e5c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005e60:	491e      	ldr	r1, [pc, #120]	; (8005edc <sync_fs+0xdc>)
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7ff fd44 	bl	80058f0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3334      	adds	r3, #52	; 0x34
 8005e6c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	4619      	mov	r1, r3
 8005e76:	4610      	mov	r0, r2
 8005e78:	f7ff fd3a 	bl	80058f0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	3334      	adds	r3, #52	; 0x34
 8005e80:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	4619      	mov	r1, r3
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	f7ff fd30 	bl	80058f0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	7858      	ldrb	r0, [r3, #1]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	f7ff fc8d 	bl	80057c8 <disk_write>
			fs->fsi_flag = 0;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	785b      	ldrb	r3, [r3, #1]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	2100      	movs	r1, #0
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7ff fca3 	bl	8005808 <disk_ioctl>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <sync_fs+0xcc>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	41615252 	.word	0x41615252
 8005edc:	61417272 	.word	0x61417272

08005ee0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	3b02      	subs	r3, #2
 8005eee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	3b02      	subs	r3, #2
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d301      	bcc.n	8005f00 <clust2sect+0x20>
 8005efc:	2300      	movs	r3, #0
 8005efe:	e008      	b.n	8005f12 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	895b      	ldrh	r3, [r3, #10]
 8005f04:	461a      	mov	r2, r3
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	fb03 f202 	mul.w	r2, r3, r2
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f10:	4413      	add	r3, r2
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b086      	sub	sp, #24
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d904      	bls.n	8005f3e <get_fat+0x20>
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d302      	bcc.n	8005f44 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005f3e:	2301      	movs	r3, #1
 8005f40:	617b      	str	r3, [r7, #20]
 8005f42:	e0bb      	b.n	80060bc <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005f44:	f04f 33ff 	mov.w	r3, #4294967295
 8005f48:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	f000 8083 	beq.w	800605a <get_fat+0x13c>
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	f300 80a7 	bgt.w	80060a8 <get_fat+0x18a>
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d002      	beq.n	8005f64 <get_fat+0x46>
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d056      	beq.n	8006010 <get_fat+0xf2>
 8005f62:	e0a1      	b.n	80060a8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	085b      	lsrs	r3, r3, #1
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4413      	add	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	899b      	ldrh	r3, [r3, #12]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f82:	4413      	add	r3, r2
 8005f84:	4619      	mov	r1, r3
 8005f86:	6938      	ldr	r0, [r7, #16]
 8005f88:	f7ff ff0c 	bl	8005da4 <move_window>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f040 808d 	bne.w	80060ae <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	1c5a      	adds	r2, r3, #1
 8005f98:	60fa      	str	r2, [r7, #12]
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	8992      	ldrh	r2, [r2, #12]
 8005f9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fa2:	fb01 f202 	mul.w	r2, r1, r2
 8005fa6:	1a9b      	subs	r3, r3, r2
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4413      	add	r3, r2
 8005fac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005fb0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	899b      	ldrh	r3, [r3, #12]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fc2:	4413      	add	r3, r2
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	6938      	ldr	r0, [r7, #16]
 8005fc8:	f7ff feec 	bl	8005da4 <move_window>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d16f      	bne.n	80060b2 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	899b      	ldrh	r3, [r3, #12]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fde:	fb01 f202 	mul.w	r2, r1, r2
 8005fe2:	1a9b      	subs	r3, r3, r2
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005fec:	021b      	lsls	r3, r3, #8
 8005fee:	461a      	mov	r2, r3
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <get_fat+0xe8>
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	091b      	lsrs	r3, r3, #4
 8006004:	e002      	b.n	800600c <get_fat+0xee>
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800600c:	617b      	str	r3, [r7, #20]
			break;
 800600e:	e055      	b.n	80060bc <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	899b      	ldrh	r3, [r3, #12]
 8006018:	085b      	lsrs	r3, r3, #1
 800601a:	b29b      	uxth	r3, r3
 800601c:	4619      	mov	r1, r3
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	fbb3 f3f1 	udiv	r3, r3, r1
 8006024:	4413      	add	r3, r2
 8006026:	4619      	mov	r1, r3
 8006028:	6938      	ldr	r0, [r7, #16]
 800602a:	f7ff febb 	bl	8005da4 <move_window>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d140      	bne.n	80060b6 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	005b      	lsls	r3, r3, #1
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	8992      	ldrh	r2, [r2, #12]
 8006042:	fbb3 f0f2 	udiv	r0, r3, r2
 8006046:	fb00 f202 	mul.w	r2, r0, r2
 800604a:	1a9b      	subs	r3, r3, r2
 800604c:	440b      	add	r3, r1
 800604e:	4618      	mov	r0, r3
 8006050:	f7ff fbf8 	bl	8005844 <ld_word>
 8006054:	4603      	mov	r3, r0
 8006056:	617b      	str	r3, [r7, #20]
			break;
 8006058:	e030      	b.n	80060bc <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	899b      	ldrh	r3, [r3, #12]
 8006062:	089b      	lsrs	r3, r3, #2
 8006064:	b29b      	uxth	r3, r3
 8006066:	4619      	mov	r1, r3
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	fbb3 f3f1 	udiv	r3, r3, r1
 800606e:	4413      	add	r3, r2
 8006070:	4619      	mov	r1, r3
 8006072:	6938      	ldr	r0, [r7, #16]
 8006074:	f7ff fe96 	bl	8005da4 <move_window>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d11d      	bne.n	80060ba <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	8992      	ldrh	r2, [r2, #12]
 800608c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006090:	fb00 f202 	mul.w	r2, r0, r2
 8006094:	1a9b      	subs	r3, r3, r2
 8006096:	440b      	add	r3, r1
 8006098:	4618      	mov	r0, r3
 800609a:	f7ff fbeb 	bl	8005874 <ld_dword>
 800609e:	4603      	mov	r3, r0
 80060a0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80060a4:	617b      	str	r3, [r7, #20]
			break;
 80060a6:	e009      	b.n	80060bc <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80060a8:	2301      	movs	r3, #1
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	e006      	b.n	80060bc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060ae:	bf00      	nop
 80060b0:	e004      	b.n	80060bc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060b2:	bf00      	nop
 80060b4:	e002      	b.n	80060bc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80060b6:	bf00      	nop
 80060b8:	e000      	b.n	80060bc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80060ba:	bf00      	nop
		}
	}

	return val;
 80060bc:	697b      	ldr	r3, [r7, #20]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3718      	adds	r7, #24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80060c6:	b590      	push	{r4, r7, lr}
 80060c8:	b089      	sub	sp, #36	; 0x24
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	60f8      	str	r0, [r7, #12]
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80060d2:	2302      	movs	r3, #2
 80060d4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	f240 8102 	bls.w	80062e2 <put_fat+0x21c>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	f080 80fc 	bcs.w	80062e2 <put_fat+0x21c>
		switch (fs->fs_type) {
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	2b03      	cmp	r3, #3
 80060f0:	f000 80b6 	beq.w	8006260 <put_fat+0x19a>
 80060f4:	2b03      	cmp	r3, #3
 80060f6:	f300 80fd 	bgt.w	80062f4 <put_fat+0x22e>
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d003      	beq.n	8006106 <put_fat+0x40>
 80060fe:	2b02      	cmp	r3, #2
 8006100:	f000 8083 	beq.w	800620a <put_fat+0x144>
 8006104:	e0f6      	b.n	80062f4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	61bb      	str	r3, [r7, #24]
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	085b      	lsrs	r3, r3, #1
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	4413      	add	r3, r2
 8006112:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	899b      	ldrh	r3, [r3, #12]
 800611c:	4619      	mov	r1, r3
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	fbb3 f3f1 	udiv	r3, r3, r1
 8006124:	4413      	add	r3, r2
 8006126:	4619      	mov	r1, r3
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f7ff fe3b 	bl	8005da4 <move_window>
 800612e:	4603      	mov	r3, r0
 8006130:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006132:	7ffb      	ldrb	r3, [r7, #31]
 8006134:	2b00      	cmp	r3, #0
 8006136:	f040 80d6 	bne.w	80062e6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	61ba      	str	r2, [r7, #24]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	8992      	ldrh	r2, [r2, #12]
 800614a:	fbb3 f0f2 	udiv	r0, r3, r2
 800614e:	fb00 f202 	mul.w	r2, r0, r2
 8006152:	1a9b      	subs	r3, r3, r2
 8006154:	440b      	add	r3, r1
 8006156:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00d      	beq.n	800617e <put_fat+0xb8>
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	b25b      	sxtb	r3, r3
 8006168:	f003 030f 	and.w	r3, r3, #15
 800616c:	b25a      	sxtb	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	b2db      	uxtb	r3, r3
 8006172:	011b      	lsls	r3, r3, #4
 8006174:	b25b      	sxtb	r3, r3
 8006176:	4313      	orrs	r3, r2
 8006178:	b25b      	sxtb	r3, r3
 800617a:	b2db      	uxtb	r3, r3
 800617c:	e001      	b.n	8006182 <put_fat+0xbc>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	b2db      	uxtb	r3, r3
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2201      	movs	r2, #1
 800618a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	899b      	ldrh	r3, [r3, #12]
 8006194:	4619      	mov	r1, r3
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	fbb3 f3f1 	udiv	r3, r3, r1
 800619c:	4413      	add	r3, r2
 800619e:	4619      	mov	r1, r3
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f7ff fdff 	bl	8005da4 <move_window>
 80061a6:	4603      	mov	r3, r0
 80061a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061aa:	7ffb      	ldrb	r3, [r7, #31]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f040 809c 	bne.w	80062ea <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	899b      	ldrh	r3, [r3, #12]
 80061bc:	461a      	mov	r2, r3
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80061c4:	fb00 f202 	mul.w	r2, r0, r2
 80061c8:	1a9b      	subs	r3, r3, r2
 80061ca:	440b      	add	r3, r1
 80061cc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d003      	beq.n	80061e0 <put_fat+0x11a>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	091b      	lsrs	r3, r3, #4
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	e00e      	b.n	80061fe <put_fat+0x138>
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	b25b      	sxtb	r3, r3
 80061e6:	f023 030f 	bic.w	r3, r3, #15
 80061ea:	b25a      	sxtb	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	0a1b      	lsrs	r3, r3, #8
 80061f0:	b25b      	sxtb	r3, r3
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	b25b      	sxtb	r3, r3
 80061f8:	4313      	orrs	r3, r2
 80061fa:	b25b      	sxtb	r3, r3
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2201      	movs	r2, #1
 8006206:	70da      	strb	r2, [r3, #3]
			break;
 8006208:	e074      	b.n	80062f4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	899b      	ldrh	r3, [r3, #12]
 8006212:	085b      	lsrs	r3, r3, #1
 8006214:	b29b      	uxth	r3, r3
 8006216:	4619      	mov	r1, r3
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	fbb3 f3f1 	udiv	r3, r3, r1
 800621e:	4413      	add	r3, r2
 8006220:	4619      	mov	r1, r3
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f7ff fdbe 	bl	8005da4 <move_window>
 8006228:	4603      	mov	r3, r0
 800622a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800622c:	7ffb      	ldrb	r3, [r7, #31]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d15d      	bne.n	80062ee <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	005b      	lsls	r3, r3, #1
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	8992      	ldrh	r2, [r2, #12]
 8006240:	fbb3 f0f2 	udiv	r0, r3, r2
 8006244:	fb00 f202 	mul.w	r2, r0, r2
 8006248:	1a9b      	subs	r3, r3, r2
 800624a:	440b      	add	r3, r1
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	b292      	uxth	r2, r2
 8006250:	4611      	mov	r1, r2
 8006252:	4618      	mov	r0, r3
 8006254:	f7ff fb31 	bl	80058ba <st_word>
			fs->wflag = 1;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2201      	movs	r2, #1
 800625c:	70da      	strb	r2, [r3, #3]
			break;
 800625e:	e049      	b.n	80062f4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	899b      	ldrh	r3, [r3, #12]
 8006268:	089b      	lsrs	r3, r3, #2
 800626a:	b29b      	uxth	r3, r3
 800626c:	4619      	mov	r1, r3
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	fbb3 f3f1 	udiv	r3, r3, r1
 8006274:	4413      	add	r3, r2
 8006276:	4619      	mov	r1, r3
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f7ff fd93 	bl	8005da4 <move_window>
 800627e:	4603      	mov	r3, r0
 8006280:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006282:	7ffb      	ldrb	r3, [r7, #31]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d134      	bne.n	80062f2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	8992      	ldrh	r2, [r2, #12]
 800629c:	fbb3 f0f2 	udiv	r0, r3, r2
 80062a0:	fb00 f202 	mul.w	r2, r0, r2
 80062a4:	1a9b      	subs	r3, r3, r2
 80062a6:	440b      	add	r3, r1
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7ff fae3 	bl	8005874 <ld_dword>
 80062ae:	4603      	mov	r3, r0
 80062b0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80062b4:	4323      	orrs	r3, r4
 80062b6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	8992      	ldrh	r2, [r2, #12]
 80062c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80062ca:	fb00 f202 	mul.w	r2, r0, r2
 80062ce:	1a9b      	subs	r3, r3, r2
 80062d0:	440b      	add	r3, r1
 80062d2:	6879      	ldr	r1, [r7, #4]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7ff fb0b 	bl	80058f0 <st_dword>
			fs->wflag = 1;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2201      	movs	r2, #1
 80062de:	70da      	strb	r2, [r3, #3]
			break;
 80062e0:	e008      	b.n	80062f4 <put_fat+0x22e>
		}
	}
 80062e2:	bf00      	nop
 80062e4:	e006      	b.n	80062f4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80062e6:	bf00      	nop
 80062e8:	e004      	b.n	80062f4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80062ea:	bf00      	nop
 80062ec:	e002      	b.n	80062f4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80062ee:	bf00      	nop
 80062f0:	e000      	b.n	80062f4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80062f2:	bf00      	nop
	return res;
 80062f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3724      	adds	r7, #36	; 0x24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd90      	pop	{r4, r7, pc}

080062fe <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b088      	sub	sp, #32
 8006302:	af00      	add	r7, sp, #0
 8006304:	60f8      	str	r0, [r7, #12]
 8006306:	60b9      	str	r1, [r7, #8]
 8006308:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d904      	bls.n	8006324 <remove_chain+0x26>
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	429a      	cmp	r2, r3
 8006322:	d301      	bcc.n	8006328 <remove_chain+0x2a>
 8006324:	2302      	movs	r3, #2
 8006326:	e04b      	b.n	80063c0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00c      	beq.n	8006348 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800632e:	f04f 32ff 	mov.w	r2, #4294967295
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	69b8      	ldr	r0, [r7, #24]
 8006336:	f7ff fec6 	bl	80060c6 <put_fat>
 800633a:	4603      	mov	r3, r0
 800633c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800633e:	7ffb      	ldrb	r3, [r7, #31]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d001      	beq.n	8006348 <remove_chain+0x4a>
 8006344:	7ffb      	ldrb	r3, [r7, #31]
 8006346:	e03b      	b.n	80063c0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006348:	68b9      	ldr	r1, [r7, #8]
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f7ff fde7 	bl	8005f1e <get_fat>
 8006350:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d031      	beq.n	80063bc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d101      	bne.n	8006362 <remove_chain+0x64>
 800635e:	2302      	movs	r3, #2
 8006360:	e02e      	b.n	80063c0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006368:	d101      	bne.n	800636e <remove_chain+0x70>
 800636a:	2301      	movs	r3, #1
 800636c:	e028      	b.n	80063c0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800636e:	2200      	movs	r2, #0
 8006370:	68b9      	ldr	r1, [r7, #8]
 8006372:	69b8      	ldr	r0, [r7, #24]
 8006374:	f7ff fea7 	bl	80060c6 <put_fat>
 8006378:	4603      	mov	r3, r0
 800637a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800637c:	7ffb      	ldrb	r3, [r7, #31]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <remove_chain+0x88>
 8006382:	7ffb      	ldrb	r3, [r7, #31]
 8006384:	e01c      	b.n	80063c0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	695a      	ldr	r2, [r3, #20]
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	3b02      	subs	r3, #2
 8006390:	429a      	cmp	r2, r3
 8006392:	d20b      	bcs.n	80063ac <remove_chain+0xae>
			fs->free_clst++;
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	791b      	ldrb	r3, [r3, #4]
 80063a2:	f043 0301 	orr.w	r3, r3, #1
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d3c6      	bcc.n	8006348 <remove_chain+0x4a>
 80063ba:	e000      	b.n	80063be <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80063bc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3720      	adds	r7, #32
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10d      	bne.n	80063fa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d004      	beq.n	80063f4 <create_chain+0x2c>
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d31b      	bcc.n	800642c <create_chain+0x64>
 80063f4:	2301      	movs	r3, #1
 80063f6:	61bb      	str	r3, [r7, #24]
 80063f8:	e018      	b.n	800642c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80063fa:	6839      	ldr	r1, [r7, #0]
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7ff fd8e 	bl	8005f1e <get_fat>
 8006402:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d801      	bhi.n	800640e <create_chain+0x46>
 800640a:	2301      	movs	r3, #1
 800640c:	e070      	b.n	80064f0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006414:	d101      	bne.n	800641a <create_chain+0x52>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	e06a      	b.n	80064f0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	429a      	cmp	r2, r3
 8006422:	d201      	bcs.n	8006428 <create_chain+0x60>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	e063      	b.n	80064f0 <create_chain+0x128>
		scl = clst;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	3301      	adds	r3, #1
 8006434:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	69fa      	ldr	r2, [r7, #28]
 800643c:	429a      	cmp	r2, r3
 800643e:	d307      	bcc.n	8006450 <create_chain+0x88>
				ncl = 2;
 8006440:	2302      	movs	r3, #2
 8006442:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006444:	69fa      	ldr	r2, [r7, #28]
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	429a      	cmp	r2, r3
 800644a:	d901      	bls.n	8006450 <create_chain+0x88>
 800644c:	2300      	movs	r3, #0
 800644e:	e04f      	b.n	80064f0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006450:	69f9      	ldr	r1, [r7, #28]
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7ff fd63 	bl	8005f1e <get_fat>
 8006458:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00e      	beq.n	800647e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d003      	beq.n	800646e <create_chain+0xa6>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646c:	d101      	bne.n	8006472 <create_chain+0xaa>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	e03e      	b.n	80064f0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006472:	69fa      	ldr	r2, [r7, #28]
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	429a      	cmp	r2, r3
 8006478:	d1da      	bne.n	8006430 <create_chain+0x68>
 800647a:	2300      	movs	r3, #0
 800647c:	e038      	b.n	80064f0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800647e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006480:	f04f 32ff 	mov.w	r2, #4294967295
 8006484:	69f9      	ldr	r1, [r7, #28]
 8006486:	6938      	ldr	r0, [r7, #16]
 8006488:	f7ff fe1d 	bl	80060c6 <put_fat>
 800648c:	4603      	mov	r3, r0
 800648e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006490:	7dfb      	ldrb	r3, [r7, #23]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d109      	bne.n	80064aa <create_chain+0xe2>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d006      	beq.n	80064aa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800649c:	69fa      	ldr	r2, [r7, #28]
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	6938      	ldr	r0, [r7, #16]
 80064a2:	f7ff fe10 	bl	80060c6 <put_fat>
 80064a6:	4603      	mov	r3, r0
 80064a8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80064aa:	7dfb      	ldrb	r3, [r7, #23]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d116      	bne.n	80064de <create_chain+0x116>
		fs->last_clst = ncl;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	69fa      	ldr	r2, [r7, #28]
 80064b4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	695a      	ldr	r2, [r3, #20]
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	3b02      	subs	r3, #2
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d804      	bhi.n	80064ce <create_chain+0x106>
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	1e5a      	subs	r2, r3, #1
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	791b      	ldrb	r3, [r3, #4]
 80064d2:	f043 0301 	orr.w	r3, r3, #1
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	711a      	strb	r2, [r3, #4]
 80064dc:	e007      	b.n	80064ee <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80064de:	7dfb      	ldrb	r3, [r7, #23]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d102      	bne.n	80064ea <create_chain+0x122>
 80064e4:	f04f 33ff 	mov.w	r3, #4294967295
 80064e8:	e000      	b.n	80064ec <create_chain+0x124>
 80064ea:	2301      	movs	r3, #1
 80064ec:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80064ee:	69fb      	ldr	r3, [r7, #28]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3720      	adds	r7, #32
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650c:	3304      	adds	r3, #4
 800650e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	899b      	ldrh	r3, [r3, #12]
 8006514:	461a      	mov	r2, r3
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	fbb3 f3f2 	udiv	r3, r3, r2
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	8952      	ldrh	r2, [r2, #10]
 8006520:	fbb3 f3f2 	udiv	r3, r3, r2
 8006524:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	1d1a      	adds	r2, r3, #4
 800652a:	613a      	str	r2, [r7, #16]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <clmt_clust+0x42>
 8006536:	2300      	movs	r3, #0
 8006538:	e010      	b.n	800655c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	429a      	cmp	r2, r3
 8006540:	d307      	bcc.n	8006552 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	617b      	str	r3, [r7, #20]
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	3304      	adds	r3, #4
 800654e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006550:	e7e9      	b.n	8006526 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006552:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	4413      	add	r3, r2
}
 800655c:	4618      	mov	r0, r3
 800655e:	371c      	adds	r7, #28
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800657e:	d204      	bcs.n	800658a <dir_sdi+0x22>
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	f003 031f 	and.w	r3, r3, #31
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <dir_sdi+0x26>
		return FR_INT_ERR;
 800658a:	2302      	movs	r3, #2
 800658c:	e071      	b.n	8006672 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d106      	bne.n	80065ae <dir_sdi+0x46>
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d902      	bls.n	80065ae <dir_sdi+0x46>
		clst = fs->dirbase;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ac:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10c      	bne.n	80065ce <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	095b      	lsrs	r3, r3, #5
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	8912      	ldrh	r2, [r2, #8]
 80065bc:	4293      	cmp	r3, r2
 80065be:	d301      	bcc.n	80065c4 <dir_sdi+0x5c>
 80065c0:	2302      	movs	r3, #2
 80065c2:	e056      	b.n	8006672 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	61da      	str	r2, [r3, #28]
 80065cc:	e02d      	b.n	800662a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	895b      	ldrh	r3, [r3, #10]
 80065d2:	461a      	mov	r2, r3
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	899b      	ldrh	r3, [r3, #12]
 80065d8:	fb02 f303 	mul.w	r3, r2, r3
 80065dc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80065de:	e019      	b.n	8006614 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6979      	ldr	r1, [r7, #20]
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7ff fc9a 	bl	8005f1e <get_fat>
 80065ea:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f2:	d101      	bne.n	80065f8 <dir_sdi+0x90>
 80065f4:	2301      	movs	r3, #1
 80065f6:	e03c      	b.n	8006672 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d904      	bls.n	8006608 <dir_sdi+0xa0>
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	429a      	cmp	r2, r3
 8006606:	d301      	bcc.n	800660c <dir_sdi+0xa4>
 8006608:	2302      	movs	r3, #2
 800660a:	e032      	b.n	8006672 <dir_sdi+0x10a>
			ofs -= csz;
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	429a      	cmp	r2, r3
 800661a:	d2e1      	bcs.n	80065e0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800661c:	6979      	ldr	r1, [r7, #20]
 800661e:	6938      	ldr	r0, [r7, #16]
 8006620:	f7ff fc5e 	bl	8005ee0 <clust2sect>
 8006624:	4602      	mov	r2, r0
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	69db      	ldr	r3, [r3, #28]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d101      	bne.n	800663c <dir_sdi+0xd4>
 8006638:	2302      	movs	r3, #2
 800663a:	e01a      	b.n	8006672 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	69da      	ldr	r2, [r3, #28]
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	899b      	ldrh	r3, [r3, #12]
 8006644:	4619      	mov	r1, r3
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	fbb3 f3f1 	udiv	r3, r3, r1
 800664c:	441a      	add	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	899b      	ldrh	r3, [r3, #12]
 800665c:	461a      	mov	r2, r3
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	fbb3 f0f2 	udiv	r0, r3, r2
 8006664:	fb00 f202 	mul.w	r2, r0, r2
 8006668:	1a9b      	subs	r3, r3, r2
 800666a:	18ca      	adds	r2, r1, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3718      	adds	r7, #24
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b086      	sub	sp, #24
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	3320      	adds	r3, #32
 8006690:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <dir_next+0x28>
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066a0:	d301      	bcc.n	80066a6 <dir_next+0x2c>
 80066a2:	2304      	movs	r3, #4
 80066a4:	e0bb      	b.n	800681e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	899b      	ldrh	r3, [r3, #12]
 80066aa:	461a      	mov	r2, r3
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80066b2:	fb01 f202 	mul.w	r2, r1, r2
 80066b6:	1a9b      	subs	r3, r3, r2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f040 809d 	bne.w	80067f8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10b      	bne.n	80066e8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	095b      	lsrs	r3, r3, #5
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	8912      	ldrh	r2, [r2, #8]
 80066d8:	4293      	cmp	r3, r2
 80066da:	f0c0 808d 	bcc.w	80067f8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	61da      	str	r2, [r3, #28]
 80066e4:	2304      	movs	r3, #4
 80066e6:	e09a      	b.n	800681e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	899b      	ldrh	r3, [r3, #12]
 80066ec:	461a      	mov	r2, r3
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	8952      	ldrh	r2, [r2, #10]
 80066f8:	3a01      	subs	r2, #1
 80066fa:	4013      	ands	r3, r2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d17b      	bne.n	80067f8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	4619      	mov	r1, r3
 8006708:	4610      	mov	r0, r2
 800670a:	f7ff fc08 	bl	8005f1e <get_fat>
 800670e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d801      	bhi.n	800671a <dir_next+0xa0>
 8006716:	2302      	movs	r3, #2
 8006718:	e081      	b.n	800681e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006720:	d101      	bne.n	8006726 <dir_next+0xac>
 8006722:	2301      	movs	r3, #1
 8006724:	e07b      	b.n	800681e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	429a      	cmp	r2, r3
 800672e:	d359      	bcc.n	80067e4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d104      	bne.n	8006740 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	61da      	str	r2, [r3, #28]
 800673c:	2304      	movs	r3, #4
 800673e:	e06e      	b.n	800681e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	4619      	mov	r1, r3
 8006748:	4610      	mov	r0, r2
 800674a:	f7ff fe3d 	bl	80063c8 <create_chain>
 800674e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <dir_next+0xe0>
 8006756:	2307      	movs	r3, #7
 8006758:	e061      	b.n	800681e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d101      	bne.n	8006764 <dir_next+0xea>
 8006760:	2302      	movs	r3, #2
 8006762:	e05c      	b.n	800681e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676a:	d101      	bne.n	8006770 <dir_next+0xf6>
 800676c:	2301      	movs	r3, #1
 800676e:	e056      	b.n	800681e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f7ff fad3 	bl	8005d1c <sync_window>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <dir_next+0x106>
 800677c:	2301      	movs	r3, #1
 800677e:	e04e      	b.n	800681e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	899b      	ldrh	r3, [r3, #12]
 800678a:	461a      	mov	r2, r3
 800678c:	2100      	movs	r1, #0
 800678e:	f7ff f8fc 	bl	800598a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006792:	2300      	movs	r3, #0
 8006794:	613b      	str	r3, [r7, #16]
 8006796:	6979      	ldr	r1, [r7, #20]
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f7ff fba1 	bl	8005ee0 <clust2sect>
 800679e:	4602      	mov	r2, r0
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	631a      	str	r2, [r3, #48]	; 0x30
 80067a4:	e012      	b.n	80067cc <dir_next+0x152>
						fs->wflag = 1;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2201      	movs	r2, #1
 80067aa:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f7ff fab5 	bl	8005d1c <sync_window>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <dir_next+0x142>
 80067b8:	2301      	movs	r3, #1
 80067ba:	e030      	b.n	800681e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	3301      	adds	r3, #1
 80067c0:	613b      	str	r3, [r7, #16]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c6:	1c5a      	adds	r2, r3, #1
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	631a      	str	r2, [r3, #48]	; 0x30
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	895b      	ldrh	r3, [r3, #10]
 80067d0:	461a      	mov	r2, r3
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d3e6      	bcc.n	80067a6 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	1ad2      	subs	r2, r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80067ea:	6979      	ldr	r1, [r7, #20]
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f7ff fb77 	bl	8005ee0 <clust2sect>
 80067f2:	4602      	mov	r2, r0
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	899b      	ldrh	r3, [r3, #12]
 8006808:	461a      	mov	r2, r3
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006810:	fb00 f202 	mul.w	r2, r0, r2
 8006814:	1a9b      	subs	r3, r3, r2
 8006816:	18ca      	adds	r2, r1, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b086      	sub	sp, #24
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006836:	2100      	movs	r1, #0
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f7ff fe95 	bl	8006568 <dir_sdi>
 800683e:	4603      	mov	r3, r0
 8006840:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006842:	7dfb      	ldrb	r3, [r7, #23]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d12b      	bne.n	80068a0 <dir_alloc+0x7a>
		n = 0;
 8006848:	2300      	movs	r3, #0
 800684a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	4619      	mov	r1, r3
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f7ff faa6 	bl	8005da4 <move_window>
 8006858:	4603      	mov	r3, r0
 800685a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800685c:	7dfb      	ldrb	r3, [r7, #23]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d11d      	bne.n	800689e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	2be5      	cmp	r3, #229	; 0xe5
 800686a:	d004      	beq.n	8006876 <dir_alloc+0x50>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d107      	bne.n	8006886 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	3301      	adds	r3, #1
 800687a:	613b      	str	r3, [r7, #16]
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	429a      	cmp	r2, r3
 8006882:	d102      	bne.n	800688a <dir_alloc+0x64>
 8006884:	e00c      	b.n	80068a0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006886:	2300      	movs	r3, #0
 8006888:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800688a:	2101      	movs	r1, #1
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7ff fef4 	bl	800667a <dir_next>
 8006892:	4603      	mov	r3, r0
 8006894:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006896:	7dfb      	ldrb	r3, [r7, #23]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d0d7      	beq.n	800684c <dir_alloc+0x26>
 800689c:	e000      	b.n	80068a0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800689e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80068a0:	7dfb      	ldrb	r3, [r7, #23]
 80068a2:	2b04      	cmp	r3, #4
 80068a4:	d101      	bne.n	80068aa <dir_alloc+0x84>
 80068a6:	2307      	movs	r3, #7
 80068a8:	75fb      	strb	r3, [r7, #23]
	return res;
 80068aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3718      	adds	r7, #24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	331a      	adds	r3, #26
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7fe ffbe 	bl	8005844 <ld_word>
 80068c8:	4603      	mov	r3, r0
 80068ca:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	2b03      	cmp	r3, #3
 80068d2:	d109      	bne.n	80068e8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	3314      	adds	r3, #20
 80068d8:	4618      	mov	r0, r3
 80068da:	f7fe ffb3 	bl	8005844 <ld_word>
 80068de:	4603      	mov	r3, r0
 80068e0:	041b      	lsls	r3, r3, #16
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80068e8:	68fb      	ldr	r3, [r7, #12]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b084      	sub	sp, #16
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	60f8      	str	r0, [r7, #12]
 80068fa:	60b9      	str	r1, [r7, #8]
 80068fc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	331a      	adds	r3, #26
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	b292      	uxth	r2, r2
 8006906:	4611      	mov	r1, r2
 8006908:	4618      	mov	r0, r3
 800690a:	f7fe ffd6 	bl	80058ba <st_word>
	if (fs->fs_type == FS_FAT32) {
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	2b03      	cmp	r3, #3
 8006914:	d109      	bne.n	800692a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	f103 0214 	add.w	r2, r3, #20
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	0c1b      	lsrs	r3, r3, #16
 8006920:	b29b      	uxth	r3, r3
 8006922:	4619      	mov	r1, r3
 8006924:	4610      	mov	r0, r2
 8006926:	f7fe ffc8 	bl	80058ba <st_word>
	}
}
 800692a:	bf00      	nop
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b086      	sub	sp, #24
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006940:	2100      	movs	r1, #0
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7ff fe10 	bl	8006568 <dir_sdi>
 8006948:	4603      	mov	r3, r0
 800694a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800694c:	7dfb      	ldrb	r3, [r7, #23]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <dir_find+0x24>
 8006952:	7dfb      	ldrb	r3, [r7, #23]
 8006954:	e03e      	b.n	80069d4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	4619      	mov	r1, r3
 800695c:	6938      	ldr	r0, [r7, #16]
 800695e:	f7ff fa21 	bl	8005da4 <move_window>
 8006962:	4603      	mov	r3, r0
 8006964:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006966:	7dfb      	ldrb	r3, [r7, #23]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d12f      	bne.n	80069cc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d102      	bne.n	8006980 <dir_find+0x4e>
 800697a:	2304      	movs	r3, #4
 800697c:	75fb      	strb	r3, [r7, #23]
 800697e:	e028      	b.n	80069d2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	330b      	adds	r3, #11
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800698c:	b2da      	uxtb	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	330b      	adds	r3, #11
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	f003 0308 	and.w	r3, r3, #8
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10a      	bne.n	80069b8 <dir_find+0x86>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a18      	ldr	r0, [r3, #32]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	3324      	adds	r3, #36	; 0x24
 80069aa:	220b      	movs	r2, #11
 80069ac:	4619      	mov	r1, r3
 80069ae:	f7ff f807 	bl	80059c0 <mem_cmp>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00b      	beq.n	80069d0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80069b8:	2100      	movs	r1, #0
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7ff fe5d 	bl	800667a <dir_next>
 80069c0:	4603      	mov	r3, r0
 80069c2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80069c4:	7dfb      	ldrb	r3, [r7, #23]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d0c5      	beq.n	8006956 <dir_find+0x24>
 80069ca:	e002      	b.n	80069d2 <dir_find+0xa0>
		if (res != FR_OK) break;
 80069cc:	bf00      	nop
 80069ce:	e000      	b.n	80069d2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80069d0:	bf00      	nop

	return res;
 80069d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3718      	adds	r7, #24
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80069ea:	2101      	movs	r1, #1
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f7ff ff1a 	bl	8006826 <dir_alloc>
 80069f2:	4603      	mov	r3, r0
 80069f4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80069f6:	7bfb      	ldrb	r3, [r7, #15]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d11c      	bne.n	8006a36 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	4619      	mov	r1, r3
 8006a02:	68b8      	ldr	r0, [r7, #8]
 8006a04:	f7ff f9ce 	bl	8005da4 <move_window>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d111      	bne.n	8006a36 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	2220      	movs	r2, #32
 8006a18:	2100      	movs	r1, #0
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7fe ffb5 	bl	800598a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a18      	ldr	r0, [r3, #32]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	3324      	adds	r3, #36	; 0x24
 8006a28:	220b      	movs	r2, #11
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	f7fe ff8c 	bl	8005948 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2201      	movs	r2, #1
 8006a34:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d04e      	beq.n	8006af6 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	613b      	str	r3, [r7, #16]
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8006a60:	e021      	b.n	8006aa6 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a1a      	ldr	r2, [r3, #32]
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	1c59      	adds	r1, r3, #1
 8006a6a:	6179      	str	r1, [r7, #20]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
 8006a74:	2b20      	cmp	r3, #32
 8006a76:	d100      	bne.n	8006a7a <get_fileinfo+0x3a>
 8006a78:	e015      	b.n	8006aa6 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
 8006a7c:	2b05      	cmp	r3, #5
 8006a7e:	d101      	bne.n	8006a84 <get_fileinfo+0x44>
 8006a80:	23e5      	movs	r3, #229	; 0xe5
 8006a82:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2b09      	cmp	r3, #9
 8006a88:	d106      	bne.n	8006a98 <get_fileinfo+0x58>
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	1c5a      	adds	r2, r3, #1
 8006a8e:	613a      	str	r2, [r7, #16]
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	4413      	add	r3, r2
 8006a94:	222e      	movs	r2, #46	; 0x2e
 8006a96:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	1c5a      	adds	r2, r3, #1
 8006a9c:	613a      	str	r2, [r7, #16]
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	7bfa      	ldrb	r2, [r7, #15]
 8006aa4:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2b0a      	cmp	r3, #10
 8006aaa:	d9da      	bls.n	8006a62 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	3309      	adds	r3, #9
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	7ada      	ldrb	r2, [r3, #11]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	331c      	adds	r3, #28
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fe fed3 	bl	8005874 <ld_dword>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
 8006ad8:	3316      	adds	r3, #22
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7fe feca 	bl	8005874 <ld_dword>
 8006ae0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	80da      	strh	r2, [r3, #6]
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	0c1b      	lsrs	r3, r3, #16
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	809a      	strh	r2, [r3, #4]
 8006af4:	e000      	b.n	8006af8 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006af6:	bf00      	nop
}
 8006af8:	3718      	adds	r7, #24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
	...

08006b00 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b088      	sub	sp, #32
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	3324      	adds	r3, #36	; 0x24
 8006b14:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006b16:	220b      	movs	r2, #11
 8006b18:	2120      	movs	r1, #32
 8006b1a:	68b8      	ldr	r0, [r7, #8]
 8006b1c:	f7fe ff35 	bl	800598a <mem_set>
	si = i = 0; ni = 8;
 8006b20:	2300      	movs	r3, #0
 8006b22:	613b      	str	r3, [r7, #16]
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	61fb      	str	r3, [r7, #28]
 8006b28:	2308      	movs	r3, #8
 8006b2a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	61fa      	str	r2, [r7, #28]
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	4413      	add	r3, r2
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006b3a:	7efb      	ldrb	r3, [r7, #27]
 8006b3c:	2b20      	cmp	r3, #32
 8006b3e:	d94e      	bls.n	8006bde <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006b40:	7efb      	ldrb	r3, [r7, #27]
 8006b42:	2b2f      	cmp	r3, #47	; 0x2f
 8006b44:	d006      	beq.n	8006b54 <create_name+0x54>
 8006b46:	7efb      	ldrb	r3, [r7, #27]
 8006b48:	2b5c      	cmp	r3, #92	; 0x5c
 8006b4a:	d110      	bne.n	8006b6e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006b4c:	e002      	b.n	8006b54 <create_name+0x54>
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	3301      	adds	r3, #1
 8006b52:	61fb      	str	r3, [r7, #28]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	4413      	add	r3, r2
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	2b2f      	cmp	r3, #47	; 0x2f
 8006b5e:	d0f6      	beq.n	8006b4e <create_name+0x4e>
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	4413      	add	r3, r2
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	2b5c      	cmp	r3, #92	; 0x5c
 8006b6a:	d0f0      	beq.n	8006b4e <create_name+0x4e>
			break;
 8006b6c:	e038      	b.n	8006be0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006b6e:	7efb      	ldrb	r3, [r7, #27]
 8006b70:	2b2e      	cmp	r3, #46	; 0x2e
 8006b72:	d003      	beq.n	8006b7c <create_name+0x7c>
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d30c      	bcc.n	8006b96 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	2b0b      	cmp	r3, #11
 8006b80:	d002      	beq.n	8006b88 <create_name+0x88>
 8006b82:	7efb      	ldrb	r3, [r7, #27]
 8006b84:	2b2e      	cmp	r3, #46	; 0x2e
 8006b86:	d001      	beq.n	8006b8c <create_name+0x8c>
 8006b88:	2306      	movs	r3, #6
 8006b8a:	e044      	b.n	8006c16 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006b8c:	2308      	movs	r3, #8
 8006b8e:	613b      	str	r3, [r7, #16]
 8006b90:	230b      	movs	r3, #11
 8006b92:	617b      	str	r3, [r7, #20]
			continue;
 8006b94:	e022      	b.n	8006bdc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006b96:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	da04      	bge.n	8006ba8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006b9e:	7efb      	ldrb	r3, [r7, #27]
 8006ba0:	3b80      	subs	r3, #128	; 0x80
 8006ba2:	4a1f      	ldr	r2, [pc, #124]	; (8006c20 <create_name+0x120>)
 8006ba4:	5cd3      	ldrb	r3, [r2, r3]
 8006ba6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006ba8:	7efb      	ldrb	r3, [r7, #27]
 8006baa:	4619      	mov	r1, r3
 8006bac:	481d      	ldr	r0, [pc, #116]	; (8006c24 <create_name+0x124>)
 8006bae:	f7fe ff2e 	bl	8005a0e <chk_chr>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <create_name+0xbc>
 8006bb8:	2306      	movs	r3, #6
 8006bba:	e02c      	b.n	8006c16 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006bbc:	7efb      	ldrb	r3, [r7, #27]
 8006bbe:	2b60      	cmp	r3, #96	; 0x60
 8006bc0:	d905      	bls.n	8006bce <create_name+0xce>
 8006bc2:	7efb      	ldrb	r3, [r7, #27]
 8006bc4:	2b7a      	cmp	r3, #122	; 0x7a
 8006bc6:	d802      	bhi.n	8006bce <create_name+0xce>
 8006bc8:	7efb      	ldrb	r3, [r7, #27]
 8006bca:	3b20      	subs	r3, #32
 8006bcc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	613a      	str	r2, [r7, #16]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	7efa      	ldrb	r2, [r7, #27]
 8006bda:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006bdc:	e7a6      	b.n	8006b2c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006bde:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	441a      	add	r2, r3
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <create_name+0xf4>
 8006bf0:	2306      	movs	r3, #6
 8006bf2:	e010      	b.n	8006c16 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	2be5      	cmp	r3, #229	; 0xe5
 8006bfa:	d102      	bne.n	8006c02 <create_name+0x102>
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2205      	movs	r2, #5
 8006c00:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006c02:	7efb      	ldrb	r3, [r7, #27]
 8006c04:	2b20      	cmp	r3, #32
 8006c06:	d801      	bhi.n	8006c0c <create_name+0x10c>
 8006c08:	2204      	movs	r2, #4
 8006c0a:	e000      	b.n	8006c0e <create_name+0x10e>
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	330b      	adds	r3, #11
 8006c12:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006c14:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3720      	adds	r7, #32
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	08008fd0 	.word	0x08008fd0
 8006c24:	08008f58 	.word	0x08008f58

08006c28 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006c3c:	e002      	b.n	8006c44 <follow_path+0x1c>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	3301      	adds	r3, #1
 8006c42:	603b      	str	r3, [r7, #0]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	2b2f      	cmp	r3, #47	; 0x2f
 8006c4a:	d0f8      	beq.n	8006c3e <follow_path+0x16>
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	2b5c      	cmp	r3, #92	; 0x5c
 8006c52:	d0f4      	beq.n	8006c3e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	2200      	movs	r2, #0
 8006c58:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	2b1f      	cmp	r3, #31
 8006c60:	d80a      	bhi.n	8006c78 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2280      	movs	r2, #128	; 0x80
 8006c66:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7ff fc7b 	bl	8006568 <dir_sdi>
 8006c72:	4603      	mov	r3, r0
 8006c74:	75fb      	strb	r3, [r7, #23]
 8006c76:	e048      	b.n	8006d0a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006c78:	463b      	mov	r3, r7
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f7ff ff3f 	bl	8006b00 <create_name>
 8006c82:	4603      	mov	r3, r0
 8006c84:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006c86:	7dfb      	ldrb	r3, [r7, #23]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d139      	bne.n	8006d00 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7ff fe50 	bl	8006932 <dir_find>
 8006c92:	4603      	mov	r3, r0
 8006c94:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006c9c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006c9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00a      	beq.n	8006cba <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006ca4:	7dfb      	ldrb	r3, [r7, #23]
 8006ca6:	2b04      	cmp	r3, #4
 8006ca8:	d12c      	bne.n	8006d04 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006caa:	7afb      	ldrb	r3, [r7, #11]
 8006cac:	f003 0304 	and.w	r3, r3, #4
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d127      	bne.n	8006d04 <follow_path+0xdc>
 8006cb4:	2305      	movs	r3, #5
 8006cb6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006cb8:	e024      	b.n	8006d04 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006cba:	7afb      	ldrb	r3, [r7, #11]
 8006cbc:	f003 0304 	and.w	r3, r3, #4
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d121      	bne.n	8006d08 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	799b      	ldrb	r3, [r3, #6]
 8006cc8:	f003 0310 	and.w	r3, r3, #16
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d102      	bne.n	8006cd6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006cd0:	2305      	movs	r3, #5
 8006cd2:	75fb      	strb	r3, [r7, #23]
 8006cd4:	e019      	b.n	8006d0a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	8992      	ldrh	r2, [r2, #12]
 8006ce4:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ce8:	fb00 f202 	mul.w	r2, r0, r2
 8006cec:	1a9b      	subs	r3, r3, r2
 8006cee:	440b      	add	r3, r1
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f7ff fdde 	bl	80068b4 <ld_clust>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006cfe:	e7bb      	b.n	8006c78 <follow_path+0x50>
			if (res != FR_OK) break;
 8006d00:	bf00      	nop
 8006d02:	e002      	b.n	8006d0a <follow_path+0xe2>
				break;
 8006d04:	bf00      	nop
 8006d06:	e000      	b.n	8006d0a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006d08:	bf00      	nop
			}
		}
	}

	return res;
 8006d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3718      	adds	r7, #24
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d20:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d031      	beq.n	8006d8e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	617b      	str	r3, [r7, #20]
 8006d30:	e002      	b.n	8006d38 <get_ldnumber+0x24>
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	3301      	adds	r3, #1
 8006d36:	617b      	str	r3, [r7, #20]
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d903      	bls.n	8006d48 <get_ldnumber+0x34>
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	2b3a      	cmp	r3, #58	; 0x3a
 8006d46:	d1f4      	bne.n	8006d32 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	2b3a      	cmp	r3, #58	; 0x3a
 8006d4e:	d11c      	bne.n	8006d8a <get_ldnumber+0x76>
			tp = *path;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	60fa      	str	r2, [r7, #12]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	3b30      	subs	r3, #48	; 0x30
 8006d60:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2b09      	cmp	r3, #9
 8006d66:	d80e      	bhi.n	8006d86 <get_ldnumber+0x72>
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d10a      	bne.n	8006d86 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d107      	bne.n	8006d86 <get_ldnumber+0x72>
					vol = (int)i;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	617b      	str	r3, [r7, #20]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	697a      	ldr	r2, [r7, #20]
 8006d84:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	e002      	b.n	8006d90 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006d8e:	693b      	ldr	r3, [r7, #16]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	371c      	adds	r7, #28
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	70da      	strb	r2, [r3, #3]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f04f 32ff 	mov.w	r2, #4294967295
 8006db2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006db4:	6839      	ldr	r1, [r7, #0]
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7fe fff4 	bl	8005da4 <move_window>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <check_fs+0x2a>
 8006dc2:	2304      	movs	r3, #4
 8006dc4:	e038      	b.n	8006e38 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	3334      	adds	r3, #52	; 0x34
 8006dca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7fe fd38 	bl	8005844 <ld_word>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d001      	beq.n	8006de4 <check_fs+0x48>
 8006de0:	2303      	movs	r3, #3
 8006de2:	e029      	b.n	8006e38 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006dea:	2be9      	cmp	r3, #233	; 0xe9
 8006dec:	d009      	beq.n	8006e02 <check_fs+0x66>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006df4:	2beb      	cmp	r3, #235	; 0xeb
 8006df6:	d11e      	bne.n	8006e36 <check_fs+0x9a>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006dfe:	2b90      	cmp	r3, #144	; 0x90
 8006e00:	d119      	bne.n	8006e36 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3334      	adds	r3, #52	; 0x34
 8006e06:	3336      	adds	r3, #54	; 0x36
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7fe fd33 	bl	8005874 <ld_dword>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e14:	4a0a      	ldr	r2, [pc, #40]	; (8006e40 <check_fs+0xa4>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d101      	bne.n	8006e1e <check_fs+0x82>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	e00c      	b.n	8006e38 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	3334      	adds	r3, #52	; 0x34
 8006e22:	3352      	adds	r3, #82	; 0x52
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7fe fd25 	bl	8005874 <ld_dword>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	4a05      	ldr	r2, [pc, #20]	; (8006e44 <check_fs+0xa8>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d101      	bne.n	8006e36 <check_fs+0x9a>
 8006e32:	2300      	movs	r3, #0
 8006e34:	e000      	b.n	8006e38 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006e36:	2302      	movs	r3, #2
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	00544146 	.word	0x00544146
 8006e44:	33544146 	.word	0x33544146

08006e48 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b096      	sub	sp, #88	; 0x58
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	4613      	mov	r3, r2
 8006e54:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f7ff ff59 	bl	8006d14 <get_ldnumber>
 8006e62:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	da01      	bge.n	8006e6e <find_volume+0x26>
 8006e6a:	230b      	movs	r3, #11
 8006e6c:	e262      	b.n	8007334 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006e6e:	4a9f      	ldr	r2, [pc, #636]	; (80070ec <find_volume+0x2a4>)
 8006e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e76:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <find_volume+0x3a>
 8006e7e:	230c      	movs	r3, #12
 8006e80:	e258      	b.n	8007334 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e86:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006e88:	79fb      	ldrb	r3, [r7, #7]
 8006e8a:	f023 0301 	bic.w	r3, r3, #1
 8006e8e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d01a      	beq.n	8006ece <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9a:	785b      	ldrb	r3, [r3, #1]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fe fc33 	bl	8005708 <disk_status>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006ea8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10c      	bne.n	8006ece <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006eb4:	79fb      	ldrb	r3, [r7, #7]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d007      	beq.n	8006eca <find_volume+0x82>
 8006eba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ebe:	f003 0304 	and.w	r3, r3, #4
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d001      	beq.n	8006eca <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006ec6:	230a      	movs	r3, #10
 8006ec8:	e234      	b.n	8007334 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8006eca:	2300      	movs	r3, #0
 8006ecc:	e232      	b.n	8007334 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ed6:	b2da      	uxtb	r2, r3
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eda:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ede:	785b      	ldrb	r3, [r3, #1]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7fe fc2b 	bl	800573c <disk_initialize>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006eec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e21b      	b.n	8007334 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006efc:	79fb      	ldrb	r3, [r7, #7]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d007      	beq.n	8006f12 <find_volume+0xca>
 8006f02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f06:	f003 0304 	and.w	r3, r3, #4
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006f0e:	230a      	movs	r3, #10
 8006f10:	e210      	b.n	8007334 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f14:	7858      	ldrb	r0, [r3, #1]
 8006f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f18:	330c      	adds	r3, #12
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	2102      	movs	r1, #2
 8006f1e:	f7fe fc73 	bl	8005808 <disk_ioctl>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d001      	beq.n	8006f2c <find_volume+0xe4>
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e203      	b.n	8007334 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2e:	899b      	ldrh	r3, [r3, #12]
 8006f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f34:	d80d      	bhi.n	8006f52 <find_volume+0x10a>
 8006f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f38:	899b      	ldrh	r3, [r3, #12]
 8006f3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f3e:	d308      	bcc.n	8006f52 <find_volume+0x10a>
 8006f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f42:	899b      	ldrh	r3, [r3, #12]
 8006f44:	461a      	mov	r2, r3
 8006f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f48:	899b      	ldrh	r3, [r3, #12]
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <find_volume+0x10e>
 8006f52:	2301      	movs	r3, #1
 8006f54:	e1ee      	b.n	8007334 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006f56:	2300      	movs	r3, #0
 8006f58:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006f5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f5e:	f7ff ff1d 	bl	8006d9c <check_fs>
 8006f62:	4603      	mov	r3, r0
 8006f64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006f68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d149      	bne.n	8007004 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006f70:	2300      	movs	r3, #0
 8006f72:	643b      	str	r3, [r7, #64]	; 0x40
 8006f74:	e01e      	b.n	8006fb4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f78:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f7e:	011b      	lsls	r3, r3, #4
 8006f80:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006f84:	4413      	add	r3, r2
 8006f86:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d006      	beq.n	8006fa0 <find_volume+0x158>
 8006f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f94:	3308      	adds	r3, #8
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7fe fc6c 	bl	8005874 <ld_dword>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	e000      	b.n	8006fa2 <find_volume+0x15a>
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	3358      	adds	r3, #88	; 0x58
 8006fa8:	443b      	add	r3, r7
 8006faa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	643b      	str	r3, [r7, #64]	; 0x40
 8006fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fb6:	2b03      	cmp	r3, #3
 8006fb8:	d9dd      	bls.n	8006f76 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006fba:	2300      	movs	r3, #0
 8006fbc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d002      	beq.n	8006fca <find_volume+0x182>
 8006fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	3358      	adds	r3, #88	; 0x58
 8006fd0:	443b      	add	r3, r7
 8006fd2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006fd6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006fd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d005      	beq.n	8006fea <find_volume+0x1a2>
 8006fde:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006fe0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006fe2:	f7ff fedb 	bl	8006d9c <check_fs>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	e000      	b.n	8006fec <find_volume+0x1a4>
 8006fea:	2303      	movs	r3, #3
 8006fec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006ff0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d905      	bls.n	8007004 <find_volume+0x1bc>
 8006ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	643b      	str	r3, [r7, #64]	; 0x40
 8006ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007000:	2b03      	cmp	r3, #3
 8007002:	d9e2      	bls.n	8006fca <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007004:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007008:	2b04      	cmp	r3, #4
 800700a:	d101      	bne.n	8007010 <find_volume+0x1c8>
 800700c:	2301      	movs	r3, #1
 800700e:	e191      	b.n	8007334 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007010:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007014:	2b01      	cmp	r3, #1
 8007016:	d901      	bls.n	800701c <find_volume+0x1d4>
 8007018:	230d      	movs	r3, #13
 800701a:	e18b      	b.n	8007334 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	3334      	adds	r3, #52	; 0x34
 8007020:	330b      	adds	r3, #11
 8007022:	4618      	mov	r0, r3
 8007024:	f7fe fc0e 	bl	8005844 <ld_word>
 8007028:	4603      	mov	r3, r0
 800702a:	461a      	mov	r2, r3
 800702c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702e:	899b      	ldrh	r3, [r3, #12]
 8007030:	429a      	cmp	r2, r3
 8007032:	d001      	beq.n	8007038 <find_volume+0x1f0>
 8007034:	230d      	movs	r3, #13
 8007036:	e17d      	b.n	8007334 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703a:	3334      	adds	r3, #52	; 0x34
 800703c:	3316      	adds	r3, #22
 800703e:	4618      	mov	r0, r3
 8007040:	f7fe fc00 	bl	8005844 <ld_word>
 8007044:	4603      	mov	r3, r0
 8007046:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800704a:	2b00      	cmp	r3, #0
 800704c:	d106      	bne.n	800705c <find_volume+0x214>
 800704e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007050:	3334      	adds	r3, #52	; 0x34
 8007052:	3324      	adds	r3, #36	; 0x24
 8007054:	4618      	mov	r0, r3
 8007056:	f7fe fc0d 	bl	8005874 <ld_dword>
 800705a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800705c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007060:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007064:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800706c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706e:	789b      	ldrb	r3, [r3, #2]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d005      	beq.n	8007080 <find_volume+0x238>
 8007074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007076:	789b      	ldrb	r3, [r3, #2]
 8007078:	2b02      	cmp	r3, #2
 800707a:	d001      	beq.n	8007080 <find_volume+0x238>
 800707c:	230d      	movs	r3, #13
 800707e:	e159      	b.n	8007334 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007082:	789b      	ldrb	r3, [r3, #2]
 8007084:	461a      	mov	r2, r3
 8007086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007088:	fb02 f303 	mul.w	r3, r2, r3
 800708c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800708e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007094:	b29a      	uxth	r2, r3
 8007096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007098:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800709a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709c:	895b      	ldrh	r3, [r3, #10]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d008      	beq.n	80070b4 <find_volume+0x26c>
 80070a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a4:	895b      	ldrh	r3, [r3, #10]
 80070a6:	461a      	mov	r2, r3
 80070a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070aa:	895b      	ldrh	r3, [r3, #10]
 80070ac:	3b01      	subs	r3, #1
 80070ae:	4013      	ands	r3, r2
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <find_volume+0x270>
 80070b4:	230d      	movs	r3, #13
 80070b6:	e13d      	b.n	8007334 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80070b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ba:	3334      	adds	r3, #52	; 0x34
 80070bc:	3311      	adds	r3, #17
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fe fbc0 	bl	8005844 <ld_word>
 80070c4:	4603      	mov	r3, r0
 80070c6:	461a      	mov	r2, r3
 80070c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80070cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ce:	891b      	ldrh	r3, [r3, #8]
 80070d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070d2:	8992      	ldrh	r2, [r2, #12]
 80070d4:	0952      	lsrs	r2, r2, #5
 80070d6:	b292      	uxth	r2, r2
 80070d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80070dc:	fb01 f202 	mul.w	r2, r1, r2
 80070e0:	1a9b      	subs	r3, r3, r2
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d003      	beq.n	80070f0 <find_volume+0x2a8>
 80070e8:	230d      	movs	r3, #13
 80070ea:	e123      	b.n	8007334 <find_volume+0x4ec>
 80070ec:	20002314 	.word	0x20002314

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80070f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f2:	3334      	adds	r3, #52	; 0x34
 80070f4:	3313      	adds	r3, #19
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7fe fba4 	bl	8005844 <ld_word>
 80070fc:	4603      	mov	r3, r0
 80070fe:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007102:	2b00      	cmp	r3, #0
 8007104:	d106      	bne.n	8007114 <find_volume+0x2cc>
 8007106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007108:	3334      	adds	r3, #52	; 0x34
 800710a:	3320      	adds	r3, #32
 800710c:	4618      	mov	r0, r3
 800710e:	f7fe fbb1 	bl	8005874 <ld_dword>
 8007112:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007116:	3334      	adds	r3, #52	; 0x34
 8007118:	330e      	adds	r3, #14
 800711a:	4618      	mov	r0, r3
 800711c:	f7fe fb92 	bl	8005844 <ld_word>
 8007120:	4603      	mov	r3, r0
 8007122:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007124:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <find_volume+0x2e6>
 800712a:	230d      	movs	r3, #13
 800712c:	e102      	b.n	8007334 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800712e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007132:	4413      	add	r3, r2
 8007134:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007136:	8911      	ldrh	r1, [r2, #8]
 8007138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800713a:	8992      	ldrh	r2, [r2, #12]
 800713c:	0952      	lsrs	r2, r2, #5
 800713e:	b292      	uxth	r2, r2
 8007140:	fbb1 f2f2 	udiv	r2, r1, r2
 8007144:	b292      	uxth	r2, r2
 8007146:	4413      	add	r3, r2
 8007148:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800714a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800714c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714e:	429a      	cmp	r2, r3
 8007150:	d201      	bcs.n	8007156 <find_volume+0x30e>
 8007152:	230d      	movs	r3, #13
 8007154:	e0ee      	b.n	8007334 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007156:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800715e:	8952      	ldrh	r2, [r2, #10]
 8007160:	fbb3 f3f2 	udiv	r3, r3, r2
 8007164:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <find_volume+0x328>
 800716c:	230d      	movs	r3, #13
 800716e:	e0e1      	b.n	8007334 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8007170:	2303      	movs	r3, #3
 8007172:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800717c:	4293      	cmp	r3, r2
 800717e:	d802      	bhi.n	8007186 <find_volume+0x33e>
 8007180:	2302      	movs	r3, #2
 8007182:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	f640 72f5 	movw	r2, #4085	; 0xff5
 800718c:	4293      	cmp	r3, r2
 800718e:	d802      	bhi.n	8007196 <find_volume+0x34e>
 8007190:	2301      	movs	r3, #1
 8007192:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007198:	1c9a      	adds	r2, r3, #2
 800719a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800719e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80071a2:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80071a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80071a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071a8:	441a      	add	r2, r3
 80071aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ac:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80071ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	441a      	add	r2, r3
 80071b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b6:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80071b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071bc:	2b03      	cmp	r3, #3
 80071be:	d11e      	bne.n	80071fe <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80071c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c2:	3334      	adds	r3, #52	; 0x34
 80071c4:	332a      	adds	r3, #42	; 0x2a
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fe fb3c 	bl	8005844 <ld_word>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d001      	beq.n	80071d6 <find_volume+0x38e>
 80071d2:	230d      	movs	r3, #13
 80071d4:	e0ae      	b.n	8007334 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80071d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d8:	891b      	ldrh	r3, [r3, #8]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d001      	beq.n	80071e2 <find_volume+0x39a>
 80071de:	230d      	movs	r3, #13
 80071e0:	e0a8      	b.n	8007334 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80071e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e4:	3334      	adds	r3, #52	; 0x34
 80071e6:	332c      	adds	r3, #44	; 0x2c
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7fe fb43 	bl	8005874 <ld_dword>
 80071ee:	4602      	mov	r2, r0
 80071f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80071f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	647b      	str	r3, [r7, #68]	; 0x44
 80071fc:	e01f      	b.n	800723e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80071fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007200:	891b      	ldrh	r3, [r3, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d101      	bne.n	800720a <find_volume+0x3c2>
 8007206:	230d      	movs	r3, #13
 8007208:	e094      	b.n	8007334 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800720a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800720e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007210:	441a      	add	r2, r3
 8007212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007214:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007216:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800721a:	2b02      	cmp	r3, #2
 800721c:	d103      	bne.n	8007226 <find_volume+0x3de>
 800721e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	005b      	lsls	r3, r3, #1
 8007224:	e00a      	b.n	800723c <find_volume+0x3f4>
 8007226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007228:	699a      	ldr	r2, [r3, #24]
 800722a:	4613      	mov	r3, r2
 800722c:	005b      	lsls	r3, r3, #1
 800722e:	4413      	add	r3, r2
 8007230:	085a      	lsrs	r2, r3, #1
 8007232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800723c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800723e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007240:	69da      	ldr	r2, [r3, #28]
 8007242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007244:	899b      	ldrh	r3, [r3, #12]
 8007246:	4619      	mov	r1, r3
 8007248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800724a:	440b      	add	r3, r1
 800724c:	3b01      	subs	r3, #1
 800724e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007250:	8989      	ldrh	r1, [r1, #12]
 8007252:	fbb3 f3f1 	udiv	r3, r3, r1
 8007256:	429a      	cmp	r2, r3
 8007258:	d201      	bcs.n	800725e <find_volume+0x416>
 800725a:	230d      	movs	r3, #13
 800725c:	e06a      	b.n	8007334 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800725e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007260:	f04f 32ff 	mov.w	r2, #4294967295
 8007264:	615a      	str	r2, [r3, #20]
 8007266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007268:	695a      	ldr	r2, [r3, #20]
 800726a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800726e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007270:	2280      	movs	r2, #128	; 0x80
 8007272:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007274:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007278:	2b03      	cmp	r3, #3
 800727a:	d149      	bne.n	8007310 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800727c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727e:	3334      	adds	r3, #52	; 0x34
 8007280:	3330      	adds	r3, #48	; 0x30
 8007282:	4618      	mov	r0, r3
 8007284:	f7fe fade 	bl	8005844 <ld_word>
 8007288:	4603      	mov	r3, r0
 800728a:	2b01      	cmp	r3, #1
 800728c:	d140      	bne.n	8007310 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800728e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007290:	3301      	adds	r3, #1
 8007292:	4619      	mov	r1, r3
 8007294:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007296:	f7fe fd85 	bl	8005da4 <move_window>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d137      	bne.n	8007310 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80072a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a2:	2200      	movs	r2, #0
 80072a4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80072a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a8:	3334      	adds	r3, #52	; 0x34
 80072aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fe fac8 	bl	8005844 <ld_word>
 80072b4:	4603      	mov	r3, r0
 80072b6:	461a      	mov	r2, r3
 80072b8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80072bc:	429a      	cmp	r2, r3
 80072be:	d127      	bne.n	8007310 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80072c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c2:	3334      	adds	r3, #52	; 0x34
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7fe fad5 	bl	8005874 <ld_dword>
 80072ca:	4603      	mov	r3, r0
 80072cc:	4a1b      	ldr	r2, [pc, #108]	; (800733c <find_volume+0x4f4>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d11e      	bne.n	8007310 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80072d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d4:	3334      	adds	r3, #52	; 0x34
 80072d6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fe faca 	bl	8005874 <ld_dword>
 80072e0:	4603      	mov	r3, r0
 80072e2:	4a17      	ldr	r2, [pc, #92]	; (8007340 <find_volume+0x4f8>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d113      	bne.n	8007310 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80072e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ea:	3334      	adds	r3, #52	; 0x34
 80072ec:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7fe fabf 	bl	8005874 <ld_dword>
 80072f6:	4602      	mov	r2, r0
 80072f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fa:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80072fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fe:	3334      	adds	r3, #52	; 0x34
 8007300:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007304:	4618      	mov	r0, r3
 8007306:	f7fe fab5 	bl	8005874 <ld_dword>
 800730a:	4602      	mov	r2, r0
 800730c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007312:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007316:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007318:	4b0a      	ldr	r3, [pc, #40]	; (8007344 <find_volume+0x4fc>)
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	3301      	adds	r3, #1
 800731e:	b29a      	uxth	r2, r3
 8007320:	4b08      	ldr	r3, [pc, #32]	; (8007344 <find_volume+0x4fc>)
 8007322:	801a      	strh	r2, [r3, #0]
 8007324:	4b07      	ldr	r3, [pc, #28]	; (8007344 <find_volume+0x4fc>)
 8007326:	881a      	ldrh	r2, [r3, #0]
 8007328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800732c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800732e:	f7fe fcd1 	bl	8005cd4 <clear_lock>
#endif
	return FR_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	3758      	adds	r7, #88	; 0x58
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	41615252 	.word	0x41615252
 8007340:	61417272 	.word	0x61417272
 8007344:	20002318 	.word	0x20002318

08007348 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007352:	2309      	movs	r3, #9
 8007354:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d01c      	beq.n	8007396 <validate+0x4e>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d018      	beq.n	8007396 <validate+0x4e>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d013      	beq.n	8007396 <validate+0x4e>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	889a      	ldrh	r2, [r3, #4]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	88db      	ldrh	r3, [r3, #6]
 8007378:	429a      	cmp	r2, r3
 800737a:	d10c      	bne.n	8007396 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	785b      	ldrb	r3, [r3, #1]
 8007382:	4618      	mov	r0, r3
 8007384:	f7fe f9c0 	bl	8005708 <disk_status>
 8007388:	4603      	mov	r3, r0
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	2b00      	cmp	r3, #0
 8007390:	d101      	bne.n	8007396 <validate+0x4e>
			res = FR_OK;
 8007392:	2300      	movs	r3, #0
 8007394:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007396:	7bfb      	ldrb	r3, [r7, #15]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d102      	bne.n	80073a2 <validate+0x5a>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	e000      	b.n	80073a4 <validate+0x5c>
 80073a2:	2300      	movs	r3, #0
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	6013      	str	r3, [r2, #0]
	return res;
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
	...

080073b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b088      	sub	sp, #32
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	4613      	mov	r3, r2
 80073c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80073c6:	f107 0310 	add.w	r3, r7, #16
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7ff fca2 	bl	8006d14 <get_ldnumber>
 80073d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	da01      	bge.n	80073dc <f_mount+0x28>
 80073d8:	230b      	movs	r3, #11
 80073da:	e02b      	b.n	8007434 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80073dc:	4a17      	ldr	r2, [pc, #92]	; (800743c <f_mount+0x88>)
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d005      	beq.n	80073f8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80073ec:	69b8      	ldr	r0, [r7, #24]
 80073ee:	f7fe fc71 	bl	8005cd4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	2200      	movs	r2, #0
 80073f6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d002      	beq.n	8007404 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	490d      	ldr	r1, [pc, #52]	; (800743c <f_mount+0x88>)
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d002      	beq.n	800741a <f_mount+0x66>
 8007414:	79fb      	ldrb	r3, [r7, #7]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d001      	beq.n	800741e <f_mount+0x6a>
 800741a:	2300      	movs	r3, #0
 800741c:	e00a      	b.n	8007434 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800741e:	f107 010c 	add.w	r1, r7, #12
 8007422:	f107 0308 	add.w	r3, r7, #8
 8007426:	2200      	movs	r2, #0
 8007428:	4618      	mov	r0, r3
 800742a:	f7ff fd0d 	bl	8006e48 <find_volume>
 800742e:	4603      	mov	r3, r0
 8007430:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007432:	7dfb      	ldrb	r3, [r7, #23]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3720      	adds	r7, #32
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	20002314 	.word	0x20002314

08007440 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b098      	sub	sp, #96	; 0x60
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	4613      	mov	r3, r2
 800744c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <f_open+0x18>
 8007454:	2309      	movs	r3, #9
 8007456:	e1bb      	b.n	80077d0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007458:	79fb      	ldrb	r3, [r7, #7]
 800745a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800745e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007460:	79fa      	ldrb	r2, [r7, #7]
 8007462:	f107 0110 	add.w	r1, r7, #16
 8007466:	f107 0308 	add.w	r3, r7, #8
 800746a:	4618      	mov	r0, r3
 800746c:	f7ff fcec 	bl	8006e48 <find_volume>
 8007470:	4603      	mov	r3, r0
 8007472:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007476:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800747a:	2b00      	cmp	r3, #0
 800747c:	f040 819f 	bne.w	80077be <f_open+0x37e>
		dj.obj.fs = fs;
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	f107 0314 	add.w	r3, r7, #20
 800748a:	4611      	mov	r1, r2
 800748c:	4618      	mov	r0, r3
 800748e:	f7ff fbcb 	bl	8006c28 <follow_path>
 8007492:	4603      	mov	r3, r0
 8007494:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007498:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800749c:	2b00      	cmp	r3, #0
 800749e:	d11a      	bne.n	80074d6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80074a0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80074a4:	b25b      	sxtb	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	da03      	bge.n	80074b2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80074aa:	2306      	movs	r3, #6
 80074ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80074b0:	e011      	b.n	80074d6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80074b2:	79fb      	ldrb	r3, [r7, #7]
 80074b4:	f023 0301 	bic.w	r3, r3, #1
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	bf14      	ite	ne
 80074bc:	2301      	movne	r3, #1
 80074be:	2300      	moveq	r3, #0
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	461a      	mov	r2, r3
 80074c4:	f107 0314 	add.w	r3, r7, #20
 80074c8:	4611      	mov	r1, r2
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fe faba 	bl	8005a44 <chk_lock>
 80074d0:	4603      	mov	r3, r0
 80074d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80074d6:	79fb      	ldrb	r3, [r7, #7]
 80074d8:	f003 031c 	and.w	r3, r3, #28
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d07f      	beq.n	80075e0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80074e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d017      	beq.n	8007518 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80074e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074ec:	2b04      	cmp	r3, #4
 80074ee:	d10e      	bne.n	800750e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80074f0:	f7fe fb04 	bl	8005afc <enq_lock>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d006      	beq.n	8007508 <f_open+0xc8>
 80074fa:	f107 0314 	add.w	r3, r7, #20
 80074fe:	4618      	mov	r0, r3
 8007500:	f7ff fa6c 	bl	80069dc <dir_register>
 8007504:	4603      	mov	r3, r0
 8007506:	e000      	b.n	800750a <f_open+0xca>
 8007508:	2312      	movs	r3, #18
 800750a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800750e:	79fb      	ldrb	r3, [r7, #7]
 8007510:	f043 0308 	orr.w	r3, r3, #8
 8007514:	71fb      	strb	r3, [r7, #7]
 8007516:	e010      	b.n	800753a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007518:	7ebb      	ldrb	r3, [r7, #26]
 800751a:	f003 0311 	and.w	r3, r3, #17
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <f_open+0xea>
					res = FR_DENIED;
 8007522:	2307      	movs	r3, #7
 8007524:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007528:	e007      	b.n	800753a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800752a:	79fb      	ldrb	r3, [r7, #7]
 800752c:	f003 0304 	and.w	r3, r3, #4
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <f_open+0xfa>
 8007534:	2308      	movs	r3, #8
 8007536:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800753a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800753e:	2b00      	cmp	r3, #0
 8007540:	d168      	bne.n	8007614 <f_open+0x1d4>
 8007542:	79fb      	ldrb	r3, [r7, #7]
 8007544:	f003 0308 	and.w	r3, r3, #8
 8007548:	2b00      	cmp	r3, #0
 800754a:	d063      	beq.n	8007614 <f_open+0x1d4>
				dw = GET_FATTIME();
 800754c:	f7fd ff70 	bl	8005430 <get_fattime>
 8007550:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007554:	330e      	adds	r3, #14
 8007556:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007558:	4618      	mov	r0, r3
 800755a:	f7fe f9c9 	bl	80058f0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800755e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007560:	3316      	adds	r3, #22
 8007562:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007564:	4618      	mov	r0, r3
 8007566:	f7fe f9c3 	bl	80058f0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800756a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800756c:	330b      	adds	r3, #11
 800756e:	2220      	movs	r2, #32
 8007570:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007576:	4611      	mov	r1, r2
 8007578:	4618      	mov	r0, r3
 800757a:	f7ff f99b 	bl	80068b4 <ld_clust>
 800757e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007584:	2200      	movs	r2, #0
 8007586:	4618      	mov	r0, r3
 8007588:	f7ff f9b3 	bl	80068f2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800758c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800758e:	331c      	adds	r3, #28
 8007590:	2100      	movs	r1, #0
 8007592:	4618      	mov	r0, r3
 8007594:	f7fe f9ac 	bl	80058f0 <st_dword>
					fs->wflag = 1;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	2201      	movs	r2, #1
 800759c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800759e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d037      	beq.n	8007614 <f_open+0x1d4>
						dw = fs->winsect;
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80075aa:	f107 0314 	add.w	r3, r7, #20
 80075ae:	2200      	movs	r2, #0
 80075b0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fe fea3 	bl	80062fe <remove_chain>
 80075b8:	4603      	mov	r3, r0
 80075ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80075be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d126      	bne.n	8007614 <f_open+0x1d4>
							res = move_window(fs, dw);
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fe fbea 	bl	8005da4 <move_window>
 80075d0:	4603      	mov	r3, r0
 80075d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075da:	3a01      	subs	r2, #1
 80075dc:	611a      	str	r2, [r3, #16]
 80075de:	e019      	b.n	8007614 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80075e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d115      	bne.n	8007614 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80075e8:	7ebb      	ldrb	r3, [r7, #26]
 80075ea:	f003 0310 	and.w	r3, r3, #16
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d003      	beq.n	80075fa <f_open+0x1ba>
					res = FR_NO_FILE;
 80075f2:	2304      	movs	r3, #4
 80075f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80075f8:	e00c      	b.n	8007614 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80075fa:	79fb      	ldrb	r3, [r7, #7]
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d007      	beq.n	8007614 <f_open+0x1d4>
 8007604:	7ebb      	ldrb	r3, [r7, #26]
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b00      	cmp	r3, #0
 800760c:	d002      	beq.n	8007614 <f_open+0x1d4>
						res = FR_DENIED;
 800760e:	2307      	movs	r3, #7
 8007610:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007614:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007618:	2b00      	cmp	r3, #0
 800761a:	d128      	bne.n	800766e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800761c:	79fb      	ldrb	r3, [r7, #7]
 800761e:	f003 0308 	and.w	r3, r3, #8
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007626:	79fb      	ldrb	r3, [r7, #7]
 8007628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800762c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800763c:	79fb      	ldrb	r3, [r7, #7]
 800763e:	f023 0301 	bic.w	r3, r3, #1
 8007642:	2b00      	cmp	r3, #0
 8007644:	bf14      	ite	ne
 8007646:	2301      	movne	r3, #1
 8007648:	2300      	moveq	r3, #0
 800764a:	b2db      	uxtb	r3, r3
 800764c:	461a      	mov	r2, r3
 800764e:	f107 0314 	add.w	r3, r7, #20
 8007652:	4611      	mov	r1, r2
 8007654:	4618      	mov	r0, r3
 8007656:	f7fe fa73 	bl	8005b40 <inc_lock>
 800765a:	4602      	mov	r2, r0
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d102      	bne.n	800766e <f_open+0x22e>
 8007668:	2302      	movs	r3, #2
 800766a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800766e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007672:	2b00      	cmp	r3, #0
 8007674:	f040 80a3 	bne.w	80077be <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800767c:	4611      	mov	r1, r2
 800767e:	4618      	mov	r0, r3
 8007680:	f7ff f918 	bl	80068b4 <ld_clust>
 8007684:	4602      	mov	r2, r0
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800768a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800768c:	331c      	adds	r3, #28
 800768e:	4618      	mov	r0, r3
 8007690:	f7fe f8f0 	bl	8005874 <ld_dword>
 8007694:	4602      	mov	r2, r0
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	88da      	ldrh	r2, [r3, #6]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	79fa      	ldrb	r2, [r7, #7]
 80076b2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	3330      	adds	r3, #48	; 0x30
 80076ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80076ce:	2100      	movs	r1, #0
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7fe f95a 	bl	800598a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80076d6:	79fb      	ldrb	r3, [r7, #7]
 80076d8:	f003 0320 	and.w	r3, r3, #32
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d06e      	beq.n	80077be <f_open+0x37e>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d06a      	beq.n	80077be <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	68da      	ldr	r2, [r3, #12]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	895b      	ldrh	r3, [r3, #10]
 80076f4:	461a      	mov	r2, r3
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	899b      	ldrh	r3, [r3, #12]
 80076fa:	fb02 f303 	mul.w	r3, r2, r3
 80076fe:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	657b      	str	r3, [r7, #84]	; 0x54
 800770c:	e016      	b.n	800773c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007712:	4618      	mov	r0, r3
 8007714:	f7fe fc03 	bl	8005f1e <get_fat>
 8007718:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800771a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800771c:	2b01      	cmp	r3, #1
 800771e:	d802      	bhi.n	8007726 <f_open+0x2e6>
 8007720:	2302      	movs	r3, #2
 8007722:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007726:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772c:	d102      	bne.n	8007734 <f_open+0x2f4>
 800772e:	2301      	movs	r3, #1
 8007730:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007734:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	657b      	str	r3, [r7, #84]	; 0x54
 800773c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007740:	2b00      	cmp	r3, #0
 8007742:	d103      	bne.n	800774c <f_open+0x30c>
 8007744:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007748:	429a      	cmp	r2, r3
 800774a:	d8e0      	bhi.n	800770e <f_open+0x2ce>
				}
				fp->clust = clst;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007750:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007752:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007756:	2b00      	cmp	r3, #0
 8007758:	d131      	bne.n	80077be <f_open+0x37e>
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	899b      	ldrh	r3, [r3, #12]
 800775e:	461a      	mov	r2, r3
 8007760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007762:	fbb3 f1f2 	udiv	r1, r3, r2
 8007766:	fb01 f202 	mul.w	r2, r1, r2
 800776a:	1a9b      	subs	r3, r3, r2
 800776c:	2b00      	cmp	r3, #0
 800776e:	d026      	beq.n	80077be <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007774:	4618      	mov	r0, r3
 8007776:	f7fe fbb3 	bl	8005ee0 <clust2sect>
 800777a:	6478      	str	r0, [r7, #68]	; 0x44
 800777c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800777e:	2b00      	cmp	r3, #0
 8007780:	d103      	bne.n	800778a <f_open+0x34a>
						res = FR_INT_ERR;
 8007782:	2302      	movs	r3, #2
 8007784:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007788:	e019      	b.n	80077be <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	899b      	ldrh	r3, [r3, #12]
 800778e:	461a      	mov	r2, r3
 8007790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007792:	fbb3 f2f2 	udiv	r2, r3, r2
 8007796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007798:	441a      	add	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	7858      	ldrb	r0, [r3, #1]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6a1a      	ldr	r2, [r3, #32]
 80077ac:	2301      	movs	r3, #1
 80077ae:	f7fd ffeb 	bl	8005788 <disk_read>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d002      	beq.n	80077be <f_open+0x37e>
 80077b8:	2301      	movs	r3, #1
 80077ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80077be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d002      	beq.n	80077cc <f_open+0x38c>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80077cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3760      	adds	r7, #96	; 0x60
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b08c      	sub	sp, #48	; 0x30
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	607a      	str	r2, [r7, #4]
 80077e4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2200      	movs	r2, #0
 80077ee:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f107 0210 	add.w	r2, r7, #16
 80077f6:	4611      	mov	r1, r2
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7ff fda5 	bl	8007348 <validate>
 80077fe:	4603      	mov	r3, r0
 8007800:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007804:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007808:	2b00      	cmp	r3, #0
 800780a:	d107      	bne.n	800781c <f_write+0x44>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	7d5b      	ldrb	r3, [r3, #21]
 8007810:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007814:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007818:	2b00      	cmp	r3, #0
 800781a:	d002      	beq.n	8007822 <f_write+0x4a>
 800781c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007820:	e16a      	b.n	8007af8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	7d1b      	ldrb	r3, [r3, #20]
 8007826:	f003 0302 	and.w	r3, r3, #2
 800782a:	2b00      	cmp	r3, #0
 800782c:	d101      	bne.n	8007832 <f_write+0x5a>
 800782e:	2307      	movs	r3, #7
 8007830:	e162      	b.n	8007af8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	699a      	ldr	r2, [r3, #24]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	441a      	add	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	429a      	cmp	r2, r3
 8007840:	f080 814c 	bcs.w	8007adc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	43db      	mvns	r3, r3
 800784a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800784c:	e146      	b.n	8007adc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	8992      	ldrh	r2, [r2, #12]
 8007856:	fbb3 f1f2 	udiv	r1, r3, r2
 800785a:	fb01 f202 	mul.w	r2, r1, r2
 800785e:	1a9b      	subs	r3, r3, r2
 8007860:	2b00      	cmp	r3, #0
 8007862:	f040 80f1 	bne.w	8007a48 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	8992      	ldrh	r2, [r2, #12]
 800786e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	8952      	ldrh	r2, [r2, #10]
 8007876:	3a01      	subs	r2, #1
 8007878:	4013      	ands	r3, r2
 800787a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d143      	bne.n	800790a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10c      	bne.n	80078a4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007892:	2b00      	cmp	r3, #0
 8007894:	d11a      	bne.n	80078cc <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2100      	movs	r1, #0
 800789a:	4618      	mov	r0, r3
 800789c:	f7fe fd94 	bl	80063c8 <create_chain>
 80078a0:	62b8      	str	r0, [r7, #40]	; 0x28
 80078a2:	e013      	b.n	80078cc <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d007      	beq.n	80078bc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	4619      	mov	r1, r3
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f7fe fe20 	bl	80064f8 <clmt_clust>
 80078b8:	62b8      	str	r0, [r7, #40]	; 0x28
 80078ba:	e007      	b.n	80078cc <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	69db      	ldr	r3, [r3, #28]
 80078c2:	4619      	mov	r1, r3
 80078c4:	4610      	mov	r0, r2
 80078c6:	f7fe fd7f 	bl	80063c8 <create_chain>
 80078ca:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80078cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f000 8109 	beq.w	8007ae6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d104      	bne.n	80078e4 <f_write+0x10c>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2202      	movs	r2, #2
 80078de:	755a      	strb	r2, [r3, #21]
 80078e0:	2302      	movs	r3, #2
 80078e2:	e109      	b.n	8007af8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80078e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ea:	d104      	bne.n	80078f6 <f_write+0x11e>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2201      	movs	r2, #1
 80078f0:	755a      	strb	r2, [r3, #21]
 80078f2:	2301      	movs	r3, #1
 80078f4:	e100      	b.n	8007af8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078fa:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d102      	bne.n	800790a <f_write+0x132>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007908:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	7d1b      	ldrb	r3, [r3, #20]
 800790e:	b25b      	sxtb	r3, r3
 8007910:	2b00      	cmp	r3, #0
 8007912:	da18      	bge.n	8007946 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	7858      	ldrb	r0, [r3, #1]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6a1a      	ldr	r2, [r3, #32]
 8007922:	2301      	movs	r3, #1
 8007924:	f7fd ff50 	bl	80057c8 <disk_write>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d004      	beq.n	8007938 <f_write+0x160>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2201      	movs	r2, #1
 8007932:	755a      	strb	r2, [r3, #21]
 8007934:	2301      	movs	r3, #1
 8007936:	e0df      	b.n	8007af8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	7d1b      	ldrb	r3, [r3, #20]
 800793c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007940:	b2da      	uxtb	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	69db      	ldr	r3, [r3, #28]
 800794c:	4619      	mov	r1, r3
 800794e:	4610      	mov	r0, r2
 8007950:	f7fe fac6 	bl	8005ee0 <clust2sect>
 8007954:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d104      	bne.n	8007966 <f_write+0x18e>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2202      	movs	r2, #2
 8007960:	755a      	strb	r2, [r3, #21]
 8007962:	2302      	movs	r3, #2
 8007964:	e0c8      	b.n	8007af8 <f_write+0x320>
			sect += csect;
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	4413      	add	r3, r2
 800796c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	899b      	ldrh	r3, [r3, #12]
 8007972:	461a      	mov	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	fbb3 f3f2 	udiv	r3, r3, r2
 800797a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800797c:	6a3b      	ldr	r3, [r7, #32]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d043      	beq.n	8007a0a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	6a3b      	ldr	r3, [r7, #32]
 8007986:	4413      	add	r3, r2
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	8952      	ldrh	r2, [r2, #10]
 800798c:	4293      	cmp	r3, r2
 800798e:	d905      	bls.n	800799c <f_write+0x1c4>
					cc = fs->csize - csect;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	895b      	ldrh	r3, [r3, #10]
 8007994:	461a      	mov	r2, r3
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	7858      	ldrb	r0, [r3, #1]
 80079a0:	6a3b      	ldr	r3, [r7, #32]
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	69f9      	ldr	r1, [r7, #28]
 80079a6:	f7fd ff0f 	bl	80057c8 <disk_write>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d004      	beq.n	80079ba <f_write+0x1e2>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2201      	movs	r2, #1
 80079b4:	755a      	strb	r2, [r3, #21]
 80079b6:	2301      	movs	r3, #1
 80079b8:	e09e      	b.n	8007af8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6a1a      	ldr	r2, [r3, #32]
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	6a3a      	ldr	r2, [r7, #32]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d918      	bls.n	80079fa <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6a1a      	ldr	r2, [r3, #32]
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	8992      	ldrh	r2, [r2, #12]
 80079da:	fb02 f303 	mul.w	r3, r2, r3
 80079de:	69fa      	ldr	r2, [r7, #28]
 80079e0:	18d1      	adds	r1, r2, r3
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	899b      	ldrh	r3, [r3, #12]
 80079e6:	461a      	mov	r2, r3
 80079e8:	f7fd ffae 	bl	8005948 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	7d1b      	ldrb	r3, [r3, #20]
 80079f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079f4:	b2da      	uxtb	r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	899b      	ldrh	r3, [r3, #12]
 80079fe:	461a      	mov	r2, r3
 8007a00:	6a3b      	ldr	r3, [r7, #32]
 8007a02:	fb02 f303 	mul.w	r3, r2, r3
 8007a06:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007a08:	e04b      	b.n	8007aa2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d016      	beq.n	8007a42 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	699a      	ldr	r2, [r3, #24]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d210      	bcs.n	8007a42 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	7858      	ldrb	r0, [r3, #1]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	f7fd feab 	bl	8005788 <disk_read>
 8007a32:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d004      	beq.n	8007a42 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	755a      	strb	r2, [r3, #21]
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e05a      	b.n	8007af8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	899b      	ldrh	r3, [r3, #12]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	8992      	ldrh	r2, [r2, #12]
 8007a56:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a5a:	fb01 f202 	mul.w	r2, r1, r2
 8007a5e:	1a9b      	subs	r3, r3, r2
 8007a60:	1ac3      	subs	r3, r0, r3
 8007a62:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d901      	bls.n	8007a70 <f_write+0x298>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	8992      	ldrh	r2, [r2, #12]
 8007a7e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a82:	fb00 f202 	mul.w	r2, r0, r2
 8007a86:	1a9b      	subs	r3, r3, r2
 8007a88:	440b      	add	r3, r1
 8007a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a8c:	69f9      	ldr	r1, [r7, #28]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fd ff5a 	bl	8005948 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	7d1b      	ldrb	r3, [r3, #20]
 8007a98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007aa2:	69fa      	ldr	r2, [r7, #28]
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	4413      	add	r3, r2
 8007aa8:	61fb      	str	r3, [r7, #28]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	699a      	ldr	r2, [r3, #24]
 8007aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab0:	441a      	add	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	619a      	str	r2, [r3, #24]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	68da      	ldr	r2, [r3, #12]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	bf38      	it	cc
 8007ac2:	461a      	movcc	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	60da      	str	r2, [r3, #12]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	441a      	add	r2, r3
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f47f aeb5 	bne.w	800784e <f_write+0x76>
 8007ae4:	e000      	b.n	8007ae8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007ae6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	7d1b      	ldrb	r3, [r3, #20]
 8007aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007af0:	b2da      	uxtb	r2, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3730      	adds	r7, #48	; 0x30
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f107 0208 	add.w	r2, r7, #8
 8007b0e:	4611      	mov	r1, r2
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7ff fc19 	bl	8007348 <validate>
 8007b16:	4603      	mov	r3, r0
 8007b18:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d168      	bne.n	8007bf2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	7d1b      	ldrb	r3, [r3, #20]
 8007b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d062      	beq.n	8007bf2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	7d1b      	ldrb	r3, [r3, #20]
 8007b30:	b25b      	sxtb	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	da15      	bge.n	8007b62 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	7858      	ldrb	r0, [r3, #1]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a1a      	ldr	r2, [r3, #32]
 8007b44:	2301      	movs	r3, #1
 8007b46:	f7fd fe3f 	bl	80057c8 <disk_write>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d001      	beq.n	8007b54 <f_sync+0x54>
 8007b50:	2301      	movs	r3, #1
 8007b52:	e04f      	b.n	8007bf4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	7d1b      	ldrb	r3, [r3, #20]
 8007b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b5c:	b2da      	uxtb	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007b62:	f7fd fc65 	bl	8005430 <get_fattime>
 8007b66:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6e:	4619      	mov	r1, r3
 8007b70:	4610      	mov	r0, r2
 8007b72:	f7fe f917 	bl	8005da4 <move_window>
 8007b76:	4603      	mov	r3, r0
 8007b78:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007b7a:	7dfb      	ldrb	r3, [r7, #23]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d138      	bne.n	8007bf2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b84:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	330b      	adds	r3, #11
 8007b8a:	781a      	ldrb	r2, [r3, #0]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	330b      	adds	r3, #11
 8007b90:	f042 0220 	orr.w	r2, r2, #32
 8007b94:	b2d2      	uxtb	r2, r2
 8007b96:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6818      	ldr	r0, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	68f9      	ldr	r1, [r7, #12]
 8007ba4:	f7fe fea5 	bl	80068f2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f103 021c 	add.w	r2, r3, #28
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	f7fd fe9b 	bl	80058f0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	3316      	adds	r3, #22
 8007bbe:	6939      	ldr	r1, [r7, #16]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7fd fe95 	bl	80058f0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	3312      	adds	r3, #18
 8007bca:	2100      	movs	r1, #0
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7fd fe74 	bl	80058ba <st_word>
					fs->wflag = 1;
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fe f910 	bl	8005e00 <sync_fs>
 8007be0:	4603      	mov	r3, r0
 8007be2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	7d1b      	ldrb	r3, [r3, #20]
 8007be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3718      	adds	r7, #24
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f7ff ff7b 	bl	8007b00 <f_sync>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007c0e:	7bfb      	ldrb	r3, [r7, #15]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d118      	bne.n	8007c46 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f107 0208 	add.w	r2, r7, #8
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7ff fb93 	bl	8007348 <validate>
 8007c22:	4603      	mov	r3, r0
 8007c24:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10c      	bne.n	8007c46 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7fe f813 	bl	8005c5c <dec_lock>
 8007c36:	4603      	mov	r3, r0
 8007c38:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d102      	bne.n	8007c46 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b090      	sub	sp, #64	; 0x40
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8007c5a:	f107 010c 	add.w	r1, r7, #12
 8007c5e:	1d3b      	adds	r3, r7, #4
 8007c60:	2200      	movs	r2, #0
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7ff f8f0 	bl	8006e48 <find_volume>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8007c6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d11f      	bne.n	8007cb6 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	f107 030c 	add.w	r3, r7, #12
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fe ffd2 	bl	8006c28 <follow_path>
 8007c84:	4603      	mov	r3, r0
 8007c86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8007c8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d111      	bne.n	8007cb6 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8007c92:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007c96:	b25b      	sxtb	r3, r3
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	da03      	bge.n	8007ca4 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8007c9c:	2306      	movs	r3, #6
 8007c9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007ca2:	e008      	b.n	8007cb6 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d005      	beq.n	8007cb6 <f_stat+0x66>
 8007caa:	f107 030c 	add.w	r3, r7, #12
 8007cae:	6839      	ldr	r1, [r7, #0]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7fe fec5 	bl	8006a40 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8007cb6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3740      	adds	r7, #64	; 0x40
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
	...

08007cc4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b087      	sub	sp, #28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007cda:	4b1f      	ldr	r3, [pc, #124]	; (8007d58 <FATFS_LinkDriverEx+0x94>)
 8007cdc:	7a5b      	ldrb	r3, [r3, #9]
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d131      	bne.n	8007d48 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007ce4:	4b1c      	ldr	r3, [pc, #112]	; (8007d58 <FATFS_LinkDriverEx+0x94>)
 8007ce6:	7a5b      	ldrb	r3, [r3, #9]
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	461a      	mov	r2, r3
 8007cec:	4b1a      	ldr	r3, [pc, #104]	; (8007d58 <FATFS_LinkDriverEx+0x94>)
 8007cee:	2100      	movs	r1, #0
 8007cf0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007cf2:	4b19      	ldr	r3, [pc, #100]	; (8007d58 <FATFS_LinkDriverEx+0x94>)
 8007cf4:	7a5b      	ldrb	r3, [r3, #9]
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	4a17      	ldr	r2, [pc, #92]	; (8007d58 <FATFS_LinkDriverEx+0x94>)
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4413      	add	r3, r2
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007d02:	4b15      	ldr	r3, [pc, #84]	; (8007d58 <FATFS_LinkDriverEx+0x94>)
 8007d04:	7a5b      	ldrb	r3, [r3, #9]
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	461a      	mov	r2, r3
 8007d0a:	4b13      	ldr	r3, [pc, #76]	; (8007d58 <FATFS_LinkDriverEx+0x94>)
 8007d0c:	4413      	add	r3, r2
 8007d0e:	79fa      	ldrb	r2, [r7, #7]
 8007d10:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007d12:	4b11      	ldr	r3, [pc, #68]	; (8007d58 <FATFS_LinkDriverEx+0x94>)
 8007d14:	7a5b      	ldrb	r3, [r3, #9]
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	1c5a      	adds	r2, r3, #1
 8007d1a:	b2d1      	uxtb	r1, r2
 8007d1c:	4a0e      	ldr	r2, [pc, #56]	; (8007d58 <FATFS_LinkDriverEx+0x94>)
 8007d1e:	7251      	strb	r1, [r2, #9]
 8007d20:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007d22:	7dbb      	ldrb	r3, [r7, #22]
 8007d24:	3330      	adds	r3, #48	; 0x30
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	223a      	movs	r2, #58	; 0x3a
 8007d32:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	3302      	adds	r3, #2
 8007d38:	222f      	movs	r2, #47	; 0x2f
 8007d3a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	3303      	adds	r3, #3
 8007d40:	2200      	movs	r2, #0
 8007d42:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007d44:	2300      	movs	r3, #0
 8007d46:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	371c      	adds	r7, #28
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	2000233c 	.word	0x2000233c

08007d5c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007d66:	2200      	movs	r2, #0
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7ff ffaa 	bl	8007cc4 <FATFS_LinkDriverEx>
 8007d70:	4603      	mov	r3, r0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
	...

08007d7c <__errno>:
 8007d7c:	4b01      	ldr	r3, [pc, #4]	; (8007d84 <__errno+0x8>)
 8007d7e:	6818      	ldr	r0, [r3, #0]
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	2000000c 	.word	0x2000000c

08007d88 <__libc_init_array>:
 8007d88:	b570      	push	{r4, r5, r6, lr}
 8007d8a:	4d0d      	ldr	r5, [pc, #52]	; (8007dc0 <__libc_init_array+0x38>)
 8007d8c:	4c0d      	ldr	r4, [pc, #52]	; (8007dc4 <__libc_init_array+0x3c>)
 8007d8e:	1b64      	subs	r4, r4, r5
 8007d90:	10a4      	asrs	r4, r4, #2
 8007d92:	2600      	movs	r6, #0
 8007d94:	42a6      	cmp	r6, r4
 8007d96:	d109      	bne.n	8007dac <__libc_init_array+0x24>
 8007d98:	4d0b      	ldr	r5, [pc, #44]	; (8007dc8 <__libc_init_array+0x40>)
 8007d9a:	4c0c      	ldr	r4, [pc, #48]	; (8007dcc <__libc_init_array+0x44>)
 8007d9c:	f001 f824 	bl	8008de8 <_init>
 8007da0:	1b64      	subs	r4, r4, r5
 8007da2:	10a4      	asrs	r4, r4, #2
 8007da4:	2600      	movs	r6, #0
 8007da6:	42a6      	cmp	r6, r4
 8007da8:	d105      	bne.n	8007db6 <__libc_init_array+0x2e>
 8007daa:	bd70      	pop	{r4, r5, r6, pc}
 8007dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8007db0:	4798      	blx	r3
 8007db2:	3601      	adds	r6, #1
 8007db4:	e7ee      	b.n	8007d94 <__libc_init_array+0xc>
 8007db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dba:	4798      	blx	r3
 8007dbc:	3601      	adds	r6, #1
 8007dbe:	e7f2      	b.n	8007da6 <__libc_init_array+0x1e>
 8007dc0:	080090f0 	.word	0x080090f0
 8007dc4:	080090f0 	.word	0x080090f0
 8007dc8:	080090f0 	.word	0x080090f0
 8007dcc:	080090f4 	.word	0x080090f4

08007dd0 <memset>:
 8007dd0:	4402      	add	r2, r0
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d100      	bne.n	8007dda <memset+0xa>
 8007dd8:	4770      	bx	lr
 8007dda:	f803 1b01 	strb.w	r1, [r3], #1
 8007dde:	e7f9      	b.n	8007dd4 <memset+0x4>

08007de0 <iprintf>:
 8007de0:	b40f      	push	{r0, r1, r2, r3}
 8007de2:	4b0a      	ldr	r3, [pc, #40]	; (8007e0c <iprintf+0x2c>)
 8007de4:	b513      	push	{r0, r1, r4, lr}
 8007de6:	681c      	ldr	r4, [r3, #0]
 8007de8:	b124      	cbz	r4, 8007df4 <iprintf+0x14>
 8007dea:	69a3      	ldr	r3, [r4, #24]
 8007dec:	b913      	cbnz	r3, 8007df4 <iprintf+0x14>
 8007dee:	4620      	mov	r0, r4
 8007df0:	f000 fa5e 	bl	80082b0 <__sinit>
 8007df4:	ab05      	add	r3, sp, #20
 8007df6:	9a04      	ldr	r2, [sp, #16]
 8007df8:	68a1      	ldr	r1, [r4, #8]
 8007dfa:	9301      	str	r3, [sp, #4]
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	f000 fc67 	bl	80086d0 <_vfiprintf_r>
 8007e02:	b002      	add	sp, #8
 8007e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e08:	b004      	add	sp, #16
 8007e0a:	4770      	bx	lr
 8007e0c:	2000000c 	.word	0x2000000c

08007e10 <_puts_r>:
 8007e10:	b570      	push	{r4, r5, r6, lr}
 8007e12:	460e      	mov	r6, r1
 8007e14:	4605      	mov	r5, r0
 8007e16:	b118      	cbz	r0, 8007e20 <_puts_r+0x10>
 8007e18:	6983      	ldr	r3, [r0, #24]
 8007e1a:	b90b      	cbnz	r3, 8007e20 <_puts_r+0x10>
 8007e1c:	f000 fa48 	bl	80082b0 <__sinit>
 8007e20:	69ab      	ldr	r3, [r5, #24]
 8007e22:	68ac      	ldr	r4, [r5, #8]
 8007e24:	b913      	cbnz	r3, 8007e2c <_puts_r+0x1c>
 8007e26:	4628      	mov	r0, r5
 8007e28:	f000 fa42 	bl	80082b0 <__sinit>
 8007e2c:	4b2c      	ldr	r3, [pc, #176]	; (8007ee0 <_puts_r+0xd0>)
 8007e2e:	429c      	cmp	r4, r3
 8007e30:	d120      	bne.n	8007e74 <_puts_r+0x64>
 8007e32:	686c      	ldr	r4, [r5, #4]
 8007e34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e36:	07db      	lsls	r3, r3, #31
 8007e38:	d405      	bmi.n	8007e46 <_puts_r+0x36>
 8007e3a:	89a3      	ldrh	r3, [r4, #12]
 8007e3c:	0598      	lsls	r0, r3, #22
 8007e3e:	d402      	bmi.n	8007e46 <_puts_r+0x36>
 8007e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e42:	f000 fad3 	bl	80083ec <__retarget_lock_acquire_recursive>
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	0719      	lsls	r1, r3, #28
 8007e4a:	d51d      	bpl.n	8007e88 <_puts_r+0x78>
 8007e4c:	6923      	ldr	r3, [r4, #16]
 8007e4e:	b1db      	cbz	r3, 8007e88 <_puts_r+0x78>
 8007e50:	3e01      	subs	r6, #1
 8007e52:	68a3      	ldr	r3, [r4, #8]
 8007e54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	60a3      	str	r3, [r4, #8]
 8007e5c:	bb39      	cbnz	r1, 8007eae <_puts_r+0x9e>
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	da38      	bge.n	8007ed4 <_puts_r+0xc4>
 8007e62:	4622      	mov	r2, r4
 8007e64:	210a      	movs	r1, #10
 8007e66:	4628      	mov	r0, r5
 8007e68:	f000 f848 	bl	8007efc <__swbuf_r>
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d011      	beq.n	8007e94 <_puts_r+0x84>
 8007e70:	250a      	movs	r5, #10
 8007e72:	e011      	b.n	8007e98 <_puts_r+0x88>
 8007e74:	4b1b      	ldr	r3, [pc, #108]	; (8007ee4 <_puts_r+0xd4>)
 8007e76:	429c      	cmp	r4, r3
 8007e78:	d101      	bne.n	8007e7e <_puts_r+0x6e>
 8007e7a:	68ac      	ldr	r4, [r5, #8]
 8007e7c:	e7da      	b.n	8007e34 <_puts_r+0x24>
 8007e7e:	4b1a      	ldr	r3, [pc, #104]	; (8007ee8 <_puts_r+0xd8>)
 8007e80:	429c      	cmp	r4, r3
 8007e82:	bf08      	it	eq
 8007e84:	68ec      	ldreq	r4, [r5, #12]
 8007e86:	e7d5      	b.n	8007e34 <_puts_r+0x24>
 8007e88:	4621      	mov	r1, r4
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	f000 f888 	bl	8007fa0 <__swsetup_r>
 8007e90:	2800      	cmp	r0, #0
 8007e92:	d0dd      	beq.n	8007e50 <_puts_r+0x40>
 8007e94:	f04f 35ff 	mov.w	r5, #4294967295
 8007e98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e9a:	07da      	lsls	r2, r3, #31
 8007e9c:	d405      	bmi.n	8007eaa <_puts_r+0x9a>
 8007e9e:	89a3      	ldrh	r3, [r4, #12]
 8007ea0:	059b      	lsls	r3, r3, #22
 8007ea2:	d402      	bmi.n	8007eaa <_puts_r+0x9a>
 8007ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ea6:	f000 faa2 	bl	80083ee <__retarget_lock_release_recursive>
 8007eaa:	4628      	mov	r0, r5
 8007eac:	bd70      	pop	{r4, r5, r6, pc}
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	da04      	bge.n	8007ebc <_puts_r+0xac>
 8007eb2:	69a2      	ldr	r2, [r4, #24]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	dc06      	bgt.n	8007ec6 <_puts_r+0xb6>
 8007eb8:	290a      	cmp	r1, #10
 8007eba:	d004      	beq.n	8007ec6 <_puts_r+0xb6>
 8007ebc:	6823      	ldr	r3, [r4, #0]
 8007ebe:	1c5a      	adds	r2, r3, #1
 8007ec0:	6022      	str	r2, [r4, #0]
 8007ec2:	7019      	strb	r1, [r3, #0]
 8007ec4:	e7c5      	b.n	8007e52 <_puts_r+0x42>
 8007ec6:	4622      	mov	r2, r4
 8007ec8:	4628      	mov	r0, r5
 8007eca:	f000 f817 	bl	8007efc <__swbuf_r>
 8007ece:	3001      	adds	r0, #1
 8007ed0:	d1bf      	bne.n	8007e52 <_puts_r+0x42>
 8007ed2:	e7df      	b.n	8007e94 <_puts_r+0x84>
 8007ed4:	6823      	ldr	r3, [r4, #0]
 8007ed6:	250a      	movs	r5, #10
 8007ed8:	1c5a      	adds	r2, r3, #1
 8007eda:	6022      	str	r2, [r4, #0]
 8007edc:	701d      	strb	r5, [r3, #0]
 8007ede:	e7db      	b.n	8007e98 <_puts_r+0x88>
 8007ee0:	08009074 	.word	0x08009074
 8007ee4:	08009094 	.word	0x08009094
 8007ee8:	08009054 	.word	0x08009054

08007eec <puts>:
 8007eec:	4b02      	ldr	r3, [pc, #8]	; (8007ef8 <puts+0xc>)
 8007eee:	4601      	mov	r1, r0
 8007ef0:	6818      	ldr	r0, [r3, #0]
 8007ef2:	f7ff bf8d 	b.w	8007e10 <_puts_r>
 8007ef6:	bf00      	nop
 8007ef8:	2000000c 	.word	0x2000000c

08007efc <__swbuf_r>:
 8007efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efe:	460e      	mov	r6, r1
 8007f00:	4614      	mov	r4, r2
 8007f02:	4605      	mov	r5, r0
 8007f04:	b118      	cbz	r0, 8007f0e <__swbuf_r+0x12>
 8007f06:	6983      	ldr	r3, [r0, #24]
 8007f08:	b90b      	cbnz	r3, 8007f0e <__swbuf_r+0x12>
 8007f0a:	f000 f9d1 	bl	80082b0 <__sinit>
 8007f0e:	4b21      	ldr	r3, [pc, #132]	; (8007f94 <__swbuf_r+0x98>)
 8007f10:	429c      	cmp	r4, r3
 8007f12:	d12b      	bne.n	8007f6c <__swbuf_r+0x70>
 8007f14:	686c      	ldr	r4, [r5, #4]
 8007f16:	69a3      	ldr	r3, [r4, #24]
 8007f18:	60a3      	str	r3, [r4, #8]
 8007f1a:	89a3      	ldrh	r3, [r4, #12]
 8007f1c:	071a      	lsls	r2, r3, #28
 8007f1e:	d52f      	bpl.n	8007f80 <__swbuf_r+0x84>
 8007f20:	6923      	ldr	r3, [r4, #16]
 8007f22:	b36b      	cbz	r3, 8007f80 <__swbuf_r+0x84>
 8007f24:	6923      	ldr	r3, [r4, #16]
 8007f26:	6820      	ldr	r0, [r4, #0]
 8007f28:	1ac0      	subs	r0, r0, r3
 8007f2a:	6963      	ldr	r3, [r4, #20]
 8007f2c:	b2f6      	uxtb	r6, r6
 8007f2e:	4283      	cmp	r3, r0
 8007f30:	4637      	mov	r7, r6
 8007f32:	dc04      	bgt.n	8007f3e <__swbuf_r+0x42>
 8007f34:	4621      	mov	r1, r4
 8007f36:	4628      	mov	r0, r5
 8007f38:	f000 f926 	bl	8008188 <_fflush_r>
 8007f3c:	bb30      	cbnz	r0, 8007f8c <__swbuf_r+0x90>
 8007f3e:	68a3      	ldr	r3, [r4, #8]
 8007f40:	3b01      	subs	r3, #1
 8007f42:	60a3      	str	r3, [r4, #8]
 8007f44:	6823      	ldr	r3, [r4, #0]
 8007f46:	1c5a      	adds	r2, r3, #1
 8007f48:	6022      	str	r2, [r4, #0]
 8007f4a:	701e      	strb	r6, [r3, #0]
 8007f4c:	6963      	ldr	r3, [r4, #20]
 8007f4e:	3001      	adds	r0, #1
 8007f50:	4283      	cmp	r3, r0
 8007f52:	d004      	beq.n	8007f5e <__swbuf_r+0x62>
 8007f54:	89a3      	ldrh	r3, [r4, #12]
 8007f56:	07db      	lsls	r3, r3, #31
 8007f58:	d506      	bpl.n	8007f68 <__swbuf_r+0x6c>
 8007f5a:	2e0a      	cmp	r6, #10
 8007f5c:	d104      	bne.n	8007f68 <__swbuf_r+0x6c>
 8007f5e:	4621      	mov	r1, r4
 8007f60:	4628      	mov	r0, r5
 8007f62:	f000 f911 	bl	8008188 <_fflush_r>
 8007f66:	b988      	cbnz	r0, 8007f8c <__swbuf_r+0x90>
 8007f68:	4638      	mov	r0, r7
 8007f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f6c:	4b0a      	ldr	r3, [pc, #40]	; (8007f98 <__swbuf_r+0x9c>)
 8007f6e:	429c      	cmp	r4, r3
 8007f70:	d101      	bne.n	8007f76 <__swbuf_r+0x7a>
 8007f72:	68ac      	ldr	r4, [r5, #8]
 8007f74:	e7cf      	b.n	8007f16 <__swbuf_r+0x1a>
 8007f76:	4b09      	ldr	r3, [pc, #36]	; (8007f9c <__swbuf_r+0xa0>)
 8007f78:	429c      	cmp	r4, r3
 8007f7a:	bf08      	it	eq
 8007f7c:	68ec      	ldreq	r4, [r5, #12]
 8007f7e:	e7ca      	b.n	8007f16 <__swbuf_r+0x1a>
 8007f80:	4621      	mov	r1, r4
 8007f82:	4628      	mov	r0, r5
 8007f84:	f000 f80c 	bl	8007fa0 <__swsetup_r>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d0cb      	beq.n	8007f24 <__swbuf_r+0x28>
 8007f8c:	f04f 37ff 	mov.w	r7, #4294967295
 8007f90:	e7ea      	b.n	8007f68 <__swbuf_r+0x6c>
 8007f92:	bf00      	nop
 8007f94:	08009074 	.word	0x08009074
 8007f98:	08009094 	.word	0x08009094
 8007f9c:	08009054 	.word	0x08009054

08007fa0 <__swsetup_r>:
 8007fa0:	4b32      	ldr	r3, [pc, #200]	; (800806c <__swsetup_r+0xcc>)
 8007fa2:	b570      	push	{r4, r5, r6, lr}
 8007fa4:	681d      	ldr	r5, [r3, #0]
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	460c      	mov	r4, r1
 8007faa:	b125      	cbz	r5, 8007fb6 <__swsetup_r+0x16>
 8007fac:	69ab      	ldr	r3, [r5, #24]
 8007fae:	b913      	cbnz	r3, 8007fb6 <__swsetup_r+0x16>
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	f000 f97d 	bl	80082b0 <__sinit>
 8007fb6:	4b2e      	ldr	r3, [pc, #184]	; (8008070 <__swsetup_r+0xd0>)
 8007fb8:	429c      	cmp	r4, r3
 8007fba:	d10f      	bne.n	8007fdc <__swsetup_r+0x3c>
 8007fbc:	686c      	ldr	r4, [r5, #4]
 8007fbe:	89a3      	ldrh	r3, [r4, #12]
 8007fc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fc4:	0719      	lsls	r1, r3, #28
 8007fc6:	d42c      	bmi.n	8008022 <__swsetup_r+0x82>
 8007fc8:	06dd      	lsls	r5, r3, #27
 8007fca:	d411      	bmi.n	8007ff0 <__swsetup_r+0x50>
 8007fcc:	2309      	movs	r3, #9
 8007fce:	6033      	str	r3, [r6, #0]
 8007fd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fd4:	81a3      	strh	r3, [r4, #12]
 8007fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8007fda:	e03e      	b.n	800805a <__swsetup_r+0xba>
 8007fdc:	4b25      	ldr	r3, [pc, #148]	; (8008074 <__swsetup_r+0xd4>)
 8007fde:	429c      	cmp	r4, r3
 8007fe0:	d101      	bne.n	8007fe6 <__swsetup_r+0x46>
 8007fe2:	68ac      	ldr	r4, [r5, #8]
 8007fe4:	e7eb      	b.n	8007fbe <__swsetup_r+0x1e>
 8007fe6:	4b24      	ldr	r3, [pc, #144]	; (8008078 <__swsetup_r+0xd8>)
 8007fe8:	429c      	cmp	r4, r3
 8007fea:	bf08      	it	eq
 8007fec:	68ec      	ldreq	r4, [r5, #12]
 8007fee:	e7e6      	b.n	8007fbe <__swsetup_r+0x1e>
 8007ff0:	0758      	lsls	r0, r3, #29
 8007ff2:	d512      	bpl.n	800801a <__swsetup_r+0x7a>
 8007ff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ff6:	b141      	cbz	r1, 800800a <__swsetup_r+0x6a>
 8007ff8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ffc:	4299      	cmp	r1, r3
 8007ffe:	d002      	beq.n	8008006 <__swsetup_r+0x66>
 8008000:	4630      	mov	r0, r6
 8008002:	f000 fa5b 	bl	80084bc <_free_r>
 8008006:	2300      	movs	r3, #0
 8008008:	6363      	str	r3, [r4, #52]	; 0x34
 800800a:	89a3      	ldrh	r3, [r4, #12]
 800800c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008010:	81a3      	strh	r3, [r4, #12]
 8008012:	2300      	movs	r3, #0
 8008014:	6063      	str	r3, [r4, #4]
 8008016:	6923      	ldr	r3, [r4, #16]
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	89a3      	ldrh	r3, [r4, #12]
 800801c:	f043 0308 	orr.w	r3, r3, #8
 8008020:	81a3      	strh	r3, [r4, #12]
 8008022:	6923      	ldr	r3, [r4, #16]
 8008024:	b94b      	cbnz	r3, 800803a <__swsetup_r+0x9a>
 8008026:	89a3      	ldrh	r3, [r4, #12]
 8008028:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800802c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008030:	d003      	beq.n	800803a <__swsetup_r+0x9a>
 8008032:	4621      	mov	r1, r4
 8008034:	4630      	mov	r0, r6
 8008036:	f000 fa01 	bl	800843c <__smakebuf_r>
 800803a:	89a0      	ldrh	r0, [r4, #12]
 800803c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008040:	f010 0301 	ands.w	r3, r0, #1
 8008044:	d00a      	beq.n	800805c <__swsetup_r+0xbc>
 8008046:	2300      	movs	r3, #0
 8008048:	60a3      	str	r3, [r4, #8]
 800804a:	6963      	ldr	r3, [r4, #20]
 800804c:	425b      	negs	r3, r3
 800804e:	61a3      	str	r3, [r4, #24]
 8008050:	6923      	ldr	r3, [r4, #16]
 8008052:	b943      	cbnz	r3, 8008066 <__swsetup_r+0xc6>
 8008054:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008058:	d1ba      	bne.n	8007fd0 <__swsetup_r+0x30>
 800805a:	bd70      	pop	{r4, r5, r6, pc}
 800805c:	0781      	lsls	r1, r0, #30
 800805e:	bf58      	it	pl
 8008060:	6963      	ldrpl	r3, [r4, #20]
 8008062:	60a3      	str	r3, [r4, #8]
 8008064:	e7f4      	b.n	8008050 <__swsetup_r+0xb0>
 8008066:	2000      	movs	r0, #0
 8008068:	e7f7      	b.n	800805a <__swsetup_r+0xba>
 800806a:	bf00      	nop
 800806c:	2000000c 	.word	0x2000000c
 8008070:	08009074 	.word	0x08009074
 8008074:	08009094 	.word	0x08009094
 8008078:	08009054 	.word	0x08009054

0800807c <__sflush_r>:
 800807c:	898a      	ldrh	r2, [r1, #12]
 800807e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008082:	4605      	mov	r5, r0
 8008084:	0710      	lsls	r0, r2, #28
 8008086:	460c      	mov	r4, r1
 8008088:	d458      	bmi.n	800813c <__sflush_r+0xc0>
 800808a:	684b      	ldr	r3, [r1, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	dc05      	bgt.n	800809c <__sflush_r+0x20>
 8008090:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008092:	2b00      	cmp	r3, #0
 8008094:	dc02      	bgt.n	800809c <__sflush_r+0x20>
 8008096:	2000      	movs	r0, #0
 8008098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800809c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800809e:	2e00      	cmp	r6, #0
 80080a0:	d0f9      	beq.n	8008096 <__sflush_r+0x1a>
 80080a2:	2300      	movs	r3, #0
 80080a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080a8:	682f      	ldr	r7, [r5, #0]
 80080aa:	602b      	str	r3, [r5, #0]
 80080ac:	d032      	beq.n	8008114 <__sflush_r+0x98>
 80080ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080b0:	89a3      	ldrh	r3, [r4, #12]
 80080b2:	075a      	lsls	r2, r3, #29
 80080b4:	d505      	bpl.n	80080c2 <__sflush_r+0x46>
 80080b6:	6863      	ldr	r3, [r4, #4]
 80080b8:	1ac0      	subs	r0, r0, r3
 80080ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080bc:	b10b      	cbz	r3, 80080c2 <__sflush_r+0x46>
 80080be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080c0:	1ac0      	subs	r0, r0, r3
 80080c2:	2300      	movs	r3, #0
 80080c4:	4602      	mov	r2, r0
 80080c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080c8:	6a21      	ldr	r1, [r4, #32]
 80080ca:	4628      	mov	r0, r5
 80080cc:	47b0      	blx	r6
 80080ce:	1c43      	adds	r3, r0, #1
 80080d0:	89a3      	ldrh	r3, [r4, #12]
 80080d2:	d106      	bne.n	80080e2 <__sflush_r+0x66>
 80080d4:	6829      	ldr	r1, [r5, #0]
 80080d6:	291d      	cmp	r1, #29
 80080d8:	d82c      	bhi.n	8008134 <__sflush_r+0xb8>
 80080da:	4a2a      	ldr	r2, [pc, #168]	; (8008184 <__sflush_r+0x108>)
 80080dc:	40ca      	lsrs	r2, r1
 80080de:	07d6      	lsls	r6, r2, #31
 80080e0:	d528      	bpl.n	8008134 <__sflush_r+0xb8>
 80080e2:	2200      	movs	r2, #0
 80080e4:	6062      	str	r2, [r4, #4]
 80080e6:	04d9      	lsls	r1, r3, #19
 80080e8:	6922      	ldr	r2, [r4, #16]
 80080ea:	6022      	str	r2, [r4, #0]
 80080ec:	d504      	bpl.n	80080f8 <__sflush_r+0x7c>
 80080ee:	1c42      	adds	r2, r0, #1
 80080f0:	d101      	bne.n	80080f6 <__sflush_r+0x7a>
 80080f2:	682b      	ldr	r3, [r5, #0]
 80080f4:	b903      	cbnz	r3, 80080f8 <__sflush_r+0x7c>
 80080f6:	6560      	str	r0, [r4, #84]	; 0x54
 80080f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080fa:	602f      	str	r7, [r5, #0]
 80080fc:	2900      	cmp	r1, #0
 80080fe:	d0ca      	beq.n	8008096 <__sflush_r+0x1a>
 8008100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008104:	4299      	cmp	r1, r3
 8008106:	d002      	beq.n	800810e <__sflush_r+0x92>
 8008108:	4628      	mov	r0, r5
 800810a:	f000 f9d7 	bl	80084bc <_free_r>
 800810e:	2000      	movs	r0, #0
 8008110:	6360      	str	r0, [r4, #52]	; 0x34
 8008112:	e7c1      	b.n	8008098 <__sflush_r+0x1c>
 8008114:	6a21      	ldr	r1, [r4, #32]
 8008116:	2301      	movs	r3, #1
 8008118:	4628      	mov	r0, r5
 800811a:	47b0      	blx	r6
 800811c:	1c41      	adds	r1, r0, #1
 800811e:	d1c7      	bne.n	80080b0 <__sflush_r+0x34>
 8008120:	682b      	ldr	r3, [r5, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d0c4      	beq.n	80080b0 <__sflush_r+0x34>
 8008126:	2b1d      	cmp	r3, #29
 8008128:	d001      	beq.n	800812e <__sflush_r+0xb2>
 800812a:	2b16      	cmp	r3, #22
 800812c:	d101      	bne.n	8008132 <__sflush_r+0xb6>
 800812e:	602f      	str	r7, [r5, #0]
 8008130:	e7b1      	b.n	8008096 <__sflush_r+0x1a>
 8008132:	89a3      	ldrh	r3, [r4, #12]
 8008134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008138:	81a3      	strh	r3, [r4, #12]
 800813a:	e7ad      	b.n	8008098 <__sflush_r+0x1c>
 800813c:	690f      	ldr	r7, [r1, #16]
 800813e:	2f00      	cmp	r7, #0
 8008140:	d0a9      	beq.n	8008096 <__sflush_r+0x1a>
 8008142:	0793      	lsls	r3, r2, #30
 8008144:	680e      	ldr	r6, [r1, #0]
 8008146:	bf08      	it	eq
 8008148:	694b      	ldreq	r3, [r1, #20]
 800814a:	600f      	str	r7, [r1, #0]
 800814c:	bf18      	it	ne
 800814e:	2300      	movne	r3, #0
 8008150:	eba6 0807 	sub.w	r8, r6, r7
 8008154:	608b      	str	r3, [r1, #8]
 8008156:	f1b8 0f00 	cmp.w	r8, #0
 800815a:	dd9c      	ble.n	8008096 <__sflush_r+0x1a>
 800815c:	6a21      	ldr	r1, [r4, #32]
 800815e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008160:	4643      	mov	r3, r8
 8008162:	463a      	mov	r2, r7
 8008164:	4628      	mov	r0, r5
 8008166:	47b0      	blx	r6
 8008168:	2800      	cmp	r0, #0
 800816a:	dc06      	bgt.n	800817a <__sflush_r+0xfe>
 800816c:	89a3      	ldrh	r3, [r4, #12]
 800816e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008172:	81a3      	strh	r3, [r4, #12]
 8008174:	f04f 30ff 	mov.w	r0, #4294967295
 8008178:	e78e      	b.n	8008098 <__sflush_r+0x1c>
 800817a:	4407      	add	r7, r0
 800817c:	eba8 0800 	sub.w	r8, r8, r0
 8008180:	e7e9      	b.n	8008156 <__sflush_r+0xda>
 8008182:	bf00      	nop
 8008184:	20400001 	.word	0x20400001

08008188 <_fflush_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	690b      	ldr	r3, [r1, #16]
 800818c:	4605      	mov	r5, r0
 800818e:	460c      	mov	r4, r1
 8008190:	b913      	cbnz	r3, 8008198 <_fflush_r+0x10>
 8008192:	2500      	movs	r5, #0
 8008194:	4628      	mov	r0, r5
 8008196:	bd38      	pop	{r3, r4, r5, pc}
 8008198:	b118      	cbz	r0, 80081a2 <_fflush_r+0x1a>
 800819a:	6983      	ldr	r3, [r0, #24]
 800819c:	b90b      	cbnz	r3, 80081a2 <_fflush_r+0x1a>
 800819e:	f000 f887 	bl	80082b0 <__sinit>
 80081a2:	4b14      	ldr	r3, [pc, #80]	; (80081f4 <_fflush_r+0x6c>)
 80081a4:	429c      	cmp	r4, r3
 80081a6:	d11b      	bne.n	80081e0 <_fflush_r+0x58>
 80081a8:	686c      	ldr	r4, [r5, #4]
 80081aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d0ef      	beq.n	8008192 <_fflush_r+0xa>
 80081b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80081b4:	07d0      	lsls	r0, r2, #31
 80081b6:	d404      	bmi.n	80081c2 <_fflush_r+0x3a>
 80081b8:	0599      	lsls	r1, r3, #22
 80081ba:	d402      	bmi.n	80081c2 <_fflush_r+0x3a>
 80081bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081be:	f000 f915 	bl	80083ec <__retarget_lock_acquire_recursive>
 80081c2:	4628      	mov	r0, r5
 80081c4:	4621      	mov	r1, r4
 80081c6:	f7ff ff59 	bl	800807c <__sflush_r>
 80081ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081cc:	07da      	lsls	r2, r3, #31
 80081ce:	4605      	mov	r5, r0
 80081d0:	d4e0      	bmi.n	8008194 <_fflush_r+0xc>
 80081d2:	89a3      	ldrh	r3, [r4, #12]
 80081d4:	059b      	lsls	r3, r3, #22
 80081d6:	d4dd      	bmi.n	8008194 <_fflush_r+0xc>
 80081d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081da:	f000 f908 	bl	80083ee <__retarget_lock_release_recursive>
 80081de:	e7d9      	b.n	8008194 <_fflush_r+0xc>
 80081e0:	4b05      	ldr	r3, [pc, #20]	; (80081f8 <_fflush_r+0x70>)
 80081e2:	429c      	cmp	r4, r3
 80081e4:	d101      	bne.n	80081ea <_fflush_r+0x62>
 80081e6:	68ac      	ldr	r4, [r5, #8]
 80081e8:	e7df      	b.n	80081aa <_fflush_r+0x22>
 80081ea:	4b04      	ldr	r3, [pc, #16]	; (80081fc <_fflush_r+0x74>)
 80081ec:	429c      	cmp	r4, r3
 80081ee:	bf08      	it	eq
 80081f0:	68ec      	ldreq	r4, [r5, #12]
 80081f2:	e7da      	b.n	80081aa <_fflush_r+0x22>
 80081f4:	08009074 	.word	0x08009074
 80081f8:	08009094 	.word	0x08009094
 80081fc:	08009054 	.word	0x08009054

08008200 <std>:
 8008200:	2300      	movs	r3, #0
 8008202:	b510      	push	{r4, lr}
 8008204:	4604      	mov	r4, r0
 8008206:	e9c0 3300 	strd	r3, r3, [r0]
 800820a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800820e:	6083      	str	r3, [r0, #8]
 8008210:	8181      	strh	r1, [r0, #12]
 8008212:	6643      	str	r3, [r0, #100]	; 0x64
 8008214:	81c2      	strh	r2, [r0, #14]
 8008216:	6183      	str	r3, [r0, #24]
 8008218:	4619      	mov	r1, r3
 800821a:	2208      	movs	r2, #8
 800821c:	305c      	adds	r0, #92	; 0x5c
 800821e:	f7ff fdd7 	bl	8007dd0 <memset>
 8008222:	4b05      	ldr	r3, [pc, #20]	; (8008238 <std+0x38>)
 8008224:	6263      	str	r3, [r4, #36]	; 0x24
 8008226:	4b05      	ldr	r3, [pc, #20]	; (800823c <std+0x3c>)
 8008228:	62a3      	str	r3, [r4, #40]	; 0x28
 800822a:	4b05      	ldr	r3, [pc, #20]	; (8008240 <std+0x40>)
 800822c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800822e:	4b05      	ldr	r3, [pc, #20]	; (8008244 <std+0x44>)
 8008230:	6224      	str	r4, [r4, #32]
 8008232:	6323      	str	r3, [r4, #48]	; 0x30
 8008234:	bd10      	pop	{r4, pc}
 8008236:	bf00      	nop
 8008238:	08008c79 	.word	0x08008c79
 800823c:	08008c9b 	.word	0x08008c9b
 8008240:	08008cd3 	.word	0x08008cd3
 8008244:	08008cf7 	.word	0x08008cf7

08008248 <_cleanup_r>:
 8008248:	4901      	ldr	r1, [pc, #4]	; (8008250 <_cleanup_r+0x8>)
 800824a:	f000 b8af 	b.w	80083ac <_fwalk_reent>
 800824e:	bf00      	nop
 8008250:	08008189 	.word	0x08008189

08008254 <__sfmoreglue>:
 8008254:	b570      	push	{r4, r5, r6, lr}
 8008256:	2268      	movs	r2, #104	; 0x68
 8008258:	1e4d      	subs	r5, r1, #1
 800825a:	4355      	muls	r5, r2
 800825c:	460e      	mov	r6, r1
 800825e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008262:	f000 f997 	bl	8008594 <_malloc_r>
 8008266:	4604      	mov	r4, r0
 8008268:	b140      	cbz	r0, 800827c <__sfmoreglue+0x28>
 800826a:	2100      	movs	r1, #0
 800826c:	e9c0 1600 	strd	r1, r6, [r0]
 8008270:	300c      	adds	r0, #12
 8008272:	60a0      	str	r0, [r4, #8]
 8008274:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008278:	f7ff fdaa 	bl	8007dd0 <memset>
 800827c:	4620      	mov	r0, r4
 800827e:	bd70      	pop	{r4, r5, r6, pc}

08008280 <__sfp_lock_acquire>:
 8008280:	4801      	ldr	r0, [pc, #4]	; (8008288 <__sfp_lock_acquire+0x8>)
 8008282:	f000 b8b3 	b.w	80083ec <__retarget_lock_acquire_recursive>
 8008286:	bf00      	nop
 8008288:	20002349 	.word	0x20002349

0800828c <__sfp_lock_release>:
 800828c:	4801      	ldr	r0, [pc, #4]	; (8008294 <__sfp_lock_release+0x8>)
 800828e:	f000 b8ae 	b.w	80083ee <__retarget_lock_release_recursive>
 8008292:	bf00      	nop
 8008294:	20002349 	.word	0x20002349

08008298 <__sinit_lock_acquire>:
 8008298:	4801      	ldr	r0, [pc, #4]	; (80082a0 <__sinit_lock_acquire+0x8>)
 800829a:	f000 b8a7 	b.w	80083ec <__retarget_lock_acquire_recursive>
 800829e:	bf00      	nop
 80082a0:	2000234a 	.word	0x2000234a

080082a4 <__sinit_lock_release>:
 80082a4:	4801      	ldr	r0, [pc, #4]	; (80082ac <__sinit_lock_release+0x8>)
 80082a6:	f000 b8a2 	b.w	80083ee <__retarget_lock_release_recursive>
 80082aa:	bf00      	nop
 80082ac:	2000234a 	.word	0x2000234a

080082b0 <__sinit>:
 80082b0:	b510      	push	{r4, lr}
 80082b2:	4604      	mov	r4, r0
 80082b4:	f7ff fff0 	bl	8008298 <__sinit_lock_acquire>
 80082b8:	69a3      	ldr	r3, [r4, #24]
 80082ba:	b11b      	cbz	r3, 80082c4 <__sinit+0x14>
 80082bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082c0:	f7ff bff0 	b.w	80082a4 <__sinit_lock_release>
 80082c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80082c8:	6523      	str	r3, [r4, #80]	; 0x50
 80082ca:	4b13      	ldr	r3, [pc, #76]	; (8008318 <__sinit+0x68>)
 80082cc:	4a13      	ldr	r2, [pc, #76]	; (800831c <__sinit+0x6c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80082d2:	42a3      	cmp	r3, r4
 80082d4:	bf04      	itt	eq
 80082d6:	2301      	moveq	r3, #1
 80082d8:	61a3      	streq	r3, [r4, #24]
 80082da:	4620      	mov	r0, r4
 80082dc:	f000 f820 	bl	8008320 <__sfp>
 80082e0:	6060      	str	r0, [r4, #4]
 80082e2:	4620      	mov	r0, r4
 80082e4:	f000 f81c 	bl	8008320 <__sfp>
 80082e8:	60a0      	str	r0, [r4, #8]
 80082ea:	4620      	mov	r0, r4
 80082ec:	f000 f818 	bl	8008320 <__sfp>
 80082f0:	2200      	movs	r2, #0
 80082f2:	60e0      	str	r0, [r4, #12]
 80082f4:	2104      	movs	r1, #4
 80082f6:	6860      	ldr	r0, [r4, #4]
 80082f8:	f7ff ff82 	bl	8008200 <std>
 80082fc:	68a0      	ldr	r0, [r4, #8]
 80082fe:	2201      	movs	r2, #1
 8008300:	2109      	movs	r1, #9
 8008302:	f7ff ff7d 	bl	8008200 <std>
 8008306:	68e0      	ldr	r0, [r4, #12]
 8008308:	2202      	movs	r2, #2
 800830a:	2112      	movs	r1, #18
 800830c:	f7ff ff78 	bl	8008200 <std>
 8008310:	2301      	movs	r3, #1
 8008312:	61a3      	str	r3, [r4, #24]
 8008314:	e7d2      	b.n	80082bc <__sinit+0xc>
 8008316:	bf00      	nop
 8008318:	08009050 	.word	0x08009050
 800831c:	08008249 	.word	0x08008249

08008320 <__sfp>:
 8008320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008322:	4607      	mov	r7, r0
 8008324:	f7ff ffac 	bl	8008280 <__sfp_lock_acquire>
 8008328:	4b1e      	ldr	r3, [pc, #120]	; (80083a4 <__sfp+0x84>)
 800832a:	681e      	ldr	r6, [r3, #0]
 800832c:	69b3      	ldr	r3, [r6, #24]
 800832e:	b913      	cbnz	r3, 8008336 <__sfp+0x16>
 8008330:	4630      	mov	r0, r6
 8008332:	f7ff ffbd 	bl	80082b0 <__sinit>
 8008336:	3648      	adds	r6, #72	; 0x48
 8008338:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800833c:	3b01      	subs	r3, #1
 800833e:	d503      	bpl.n	8008348 <__sfp+0x28>
 8008340:	6833      	ldr	r3, [r6, #0]
 8008342:	b30b      	cbz	r3, 8008388 <__sfp+0x68>
 8008344:	6836      	ldr	r6, [r6, #0]
 8008346:	e7f7      	b.n	8008338 <__sfp+0x18>
 8008348:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800834c:	b9d5      	cbnz	r5, 8008384 <__sfp+0x64>
 800834e:	4b16      	ldr	r3, [pc, #88]	; (80083a8 <__sfp+0x88>)
 8008350:	60e3      	str	r3, [r4, #12]
 8008352:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008356:	6665      	str	r5, [r4, #100]	; 0x64
 8008358:	f000 f847 	bl	80083ea <__retarget_lock_init_recursive>
 800835c:	f7ff ff96 	bl	800828c <__sfp_lock_release>
 8008360:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008364:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008368:	6025      	str	r5, [r4, #0]
 800836a:	61a5      	str	r5, [r4, #24]
 800836c:	2208      	movs	r2, #8
 800836e:	4629      	mov	r1, r5
 8008370:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008374:	f7ff fd2c 	bl	8007dd0 <memset>
 8008378:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800837c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008380:	4620      	mov	r0, r4
 8008382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008384:	3468      	adds	r4, #104	; 0x68
 8008386:	e7d9      	b.n	800833c <__sfp+0x1c>
 8008388:	2104      	movs	r1, #4
 800838a:	4638      	mov	r0, r7
 800838c:	f7ff ff62 	bl	8008254 <__sfmoreglue>
 8008390:	4604      	mov	r4, r0
 8008392:	6030      	str	r0, [r6, #0]
 8008394:	2800      	cmp	r0, #0
 8008396:	d1d5      	bne.n	8008344 <__sfp+0x24>
 8008398:	f7ff ff78 	bl	800828c <__sfp_lock_release>
 800839c:	230c      	movs	r3, #12
 800839e:	603b      	str	r3, [r7, #0]
 80083a0:	e7ee      	b.n	8008380 <__sfp+0x60>
 80083a2:	bf00      	nop
 80083a4:	08009050 	.word	0x08009050
 80083a8:	ffff0001 	.word	0xffff0001

080083ac <_fwalk_reent>:
 80083ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083b0:	4606      	mov	r6, r0
 80083b2:	4688      	mov	r8, r1
 80083b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80083b8:	2700      	movs	r7, #0
 80083ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083be:	f1b9 0901 	subs.w	r9, r9, #1
 80083c2:	d505      	bpl.n	80083d0 <_fwalk_reent+0x24>
 80083c4:	6824      	ldr	r4, [r4, #0]
 80083c6:	2c00      	cmp	r4, #0
 80083c8:	d1f7      	bne.n	80083ba <_fwalk_reent+0xe>
 80083ca:	4638      	mov	r0, r7
 80083cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083d0:	89ab      	ldrh	r3, [r5, #12]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d907      	bls.n	80083e6 <_fwalk_reent+0x3a>
 80083d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083da:	3301      	adds	r3, #1
 80083dc:	d003      	beq.n	80083e6 <_fwalk_reent+0x3a>
 80083de:	4629      	mov	r1, r5
 80083e0:	4630      	mov	r0, r6
 80083e2:	47c0      	blx	r8
 80083e4:	4307      	orrs	r7, r0
 80083e6:	3568      	adds	r5, #104	; 0x68
 80083e8:	e7e9      	b.n	80083be <_fwalk_reent+0x12>

080083ea <__retarget_lock_init_recursive>:
 80083ea:	4770      	bx	lr

080083ec <__retarget_lock_acquire_recursive>:
 80083ec:	4770      	bx	lr

080083ee <__retarget_lock_release_recursive>:
 80083ee:	4770      	bx	lr

080083f0 <__swhatbuf_r>:
 80083f0:	b570      	push	{r4, r5, r6, lr}
 80083f2:	460e      	mov	r6, r1
 80083f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083f8:	2900      	cmp	r1, #0
 80083fa:	b096      	sub	sp, #88	; 0x58
 80083fc:	4614      	mov	r4, r2
 80083fe:	461d      	mov	r5, r3
 8008400:	da08      	bge.n	8008414 <__swhatbuf_r+0x24>
 8008402:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	602a      	str	r2, [r5, #0]
 800840a:	061a      	lsls	r2, r3, #24
 800840c:	d410      	bmi.n	8008430 <__swhatbuf_r+0x40>
 800840e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008412:	e00e      	b.n	8008432 <__swhatbuf_r+0x42>
 8008414:	466a      	mov	r2, sp
 8008416:	f000 fc95 	bl	8008d44 <_fstat_r>
 800841a:	2800      	cmp	r0, #0
 800841c:	dbf1      	blt.n	8008402 <__swhatbuf_r+0x12>
 800841e:	9a01      	ldr	r2, [sp, #4]
 8008420:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008424:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008428:	425a      	negs	r2, r3
 800842a:	415a      	adcs	r2, r3
 800842c:	602a      	str	r2, [r5, #0]
 800842e:	e7ee      	b.n	800840e <__swhatbuf_r+0x1e>
 8008430:	2340      	movs	r3, #64	; 0x40
 8008432:	2000      	movs	r0, #0
 8008434:	6023      	str	r3, [r4, #0]
 8008436:	b016      	add	sp, #88	; 0x58
 8008438:	bd70      	pop	{r4, r5, r6, pc}
	...

0800843c <__smakebuf_r>:
 800843c:	898b      	ldrh	r3, [r1, #12]
 800843e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008440:	079d      	lsls	r5, r3, #30
 8008442:	4606      	mov	r6, r0
 8008444:	460c      	mov	r4, r1
 8008446:	d507      	bpl.n	8008458 <__smakebuf_r+0x1c>
 8008448:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800844c:	6023      	str	r3, [r4, #0]
 800844e:	6123      	str	r3, [r4, #16]
 8008450:	2301      	movs	r3, #1
 8008452:	6163      	str	r3, [r4, #20]
 8008454:	b002      	add	sp, #8
 8008456:	bd70      	pop	{r4, r5, r6, pc}
 8008458:	ab01      	add	r3, sp, #4
 800845a:	466a      	mov	r2, sp
 800845c:	f7ff ffc8 	bl	80083f0 <__swhatbuf_r>
 8008460:	9900      	ldr	r1, [sp, #0]
 8008462:	4605      	mov	r5, r0
 8008464:	4630      	mov	r0, r6
 8008466:	f000 f895 	bl	8008594 <_malloc_r>
 800846a:	b948      	cbnz	r0, 8008480 <__smakebuf_r+0x44>
 800846c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008470:	059a      	lsls	r2, r3, #22
 8008472:	d4ef      	bmi.n	8008454 <__smakebuf_r+0x18>
 8008474:	f023 0303 	bic.w	r3, r3, #3
 8008478:	f043 0302 	orr.w	r3, r3, #2
 800847c:	81a3      	strh	r3, [r4, #12]
 800847e:	e7e3      	b.n	8008448 <__smakebuf_r+0xc>
 8008480:	4b0d      	ldr	r3, [pc, #52]	; (80084b8 <__smakebuf_r+0x7c>)
 8008482:	62b3      	str	r3, [r6, #40]	; 0x28
 8008484:	89a3      	ldrh	r3, [r4, #12]
 8008486:	6020      	str	r0, [r4, #0]
 8008488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800848c:	81a3      	strh	r3, [r4, #12]
 800848e:	9b00      	ldr	r3, [sp, #0]
 8008490:	6163      	str	r3, [r4, #20]
 8008492:	9b01      	ldr	r3, [sp, #4]
 8008494:	6120      	str	r0, [r4, #16]
 8008496:	b15b      	cbz	r3, 80084b0 <__smakebuf_r+0x74>
 8008498:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800849c:	4630      	mov	r0, r6
 800849e:	f000 fc63 	bl	8008d68 <_isatty_r>
 80084a2:	b128      	cbz	r0, 80084b0 <__smakebuf_r+0x74>
 80084a4:	89a3      	ldrh	r3, [r4, #12]
 80084a6:	f023 0303 	bic.w	r3, r3, #3
 80084aa:	f043 0301 	orr.w	r3, r3, #1
 80084ae:	81a3      	strh	r3, [r4, #12]
 80084b0:	89a0      	ldrh	r0, [r4, #12]
 80084b2:	4305      	orrs	r5, r0
 80084b4:	81a5      	strh	r5, [r4, #12]
 80084b6:	e7cd      	b.n	8008454 <__smakebuf_r+0x18>
 80084b8:	08008249 	.word	0x08008249

080084bc <_free_r>:
 80084bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084be:	2900      	cmp	r1, #0
 80084c0:	d044      	beq.n	800854c <_free_r+0x90>
 80084c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084c6:	9001      	str	r0, [sp, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f1a1 0404 	sub.w	r4, r1, #4
 80084ce:	bfb8      	it	lt
 80084d0:	18e4      	addlt	r4, r4, r3
 80084d2:	f000 fc6b 	bl	8008dac <__malloc_lock>
 80084d6:	4a1e      	ldr	r2, [pc, #120]	; (8008550 <_free_r+0x94>)
 80084d8:	9801      	ldr	r0, [sp, #4]
 80084da:	6813      	ldr	r3, [r2, #0]
 80084dc:	b933      	cbnz	r3, 80084ec <_free_r+0x30>
 80084de:	6063      	str	r3, [r4, #4]
 80084e0:	6014      	str	r4, [r2, #0]
 80084e2:	b003      	add	sp, #12
 80084e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084e8:	f000 bc66 	b.w	8008db8 <__malloc_unlock>
 80084ec:	42a3      	cmp	r3, r4
 80084ee:	d908      	bls.n	8008502 <_free_r+0x46>
 80084f0:	6825      	ldr	r5, [r4, #0]
 80084f2:	1961      	adds	r1, r4, r5
 80084f4:	428b      	cmp	r3, r1
 80084f6:	bf01      	itttt	eq
 80084f8:	6819      	ldreq	r1, [r3, #0]
 80084fa:	685b      	ldreq	r3, [r3, #4]
 80084fc:	1949      	addeq	r1, r1, r5
 80084fe:	6021      	streq	r1, [r4, #0]
 8008500:	e7ed      	b.n	80084de <_free_r+0x22>
 8008502:	461a      	mov	r2, r3
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	b10b      	cbz	r3, 800850c <_free_r+0x50>
 8008508:	42a3      	cmp	r3, r4
 800850a:	d9fa      	bls.n	8008502 <_free_r+0x46>
 800850c:	6811      	ldr	r1, [r2, #0]
 800850e:	1855      	adds	r5, r2, r1
 8008510:	42a5      	cmp	r5, r4
 8008512:	d10b      	bne.n	800852c <_free_r+0x70>
 8008514:	6824      	ldr	r4, [r4, #0]
 8008516:	4421      	add	r1, r4
 8008518:	1854      	adds	r4, r2, r1
 800851a:	42a3      	cmp	r3, r4
 800851c:	6011      	str	r1, [r2, #0]
 800851e:	d1e0      	bne.n	80084e2 <_free_r+0x26>
 8008520:	681c      	ldr	r4, [r3, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	6053      	str	r3, [r2, #4]
 8008526:	4421      	add	r1, r4
 8008528:	6011      	str	r1, [r2, #0]
 800852a:	e7da      	b.n	80084e2 <_free_r+0x26>
 800852c:	d902      	bls.n	8008534 <_free_r+0x78>
 800852e:	230c      	movs	r3, #12
 8008530:	6003      	str	r3, [r0, #0]
 8008532:	e7d6      	b.n	80084e2 <_free_r+0x26>
 8008534:	6825      	ldr	r5, [r4, #0]
 8008536:	1961      	adds	r1, r4, r5
 8008538:	428b      	cmp	r3, r1
 800853a:	bf04      	itt	eq
 800853c:	6819      	ldreq	r1, [r3, #0]
 800853e:	685b      	ldreq	r3, [r3, #4]
 8008540:	6063      	str	r3, [r4, #4]
 8008542:	bf04      	itt	eq
 8008544:	1949      	addeq	r1, r1, r5
 8008546:	6021      	streq	r1, [r4, #0]
 8008548:	6054      	str	r4, [r2, #4]
 800854a:	e7ca      	b.n	80084e2 <_free_r+0x26>
 800854c:	b003      	add	sp, #12
 800854e:	bd30      	pop	{r4, r5, pc}
 8008550:	2000234c 	.word	0x2000234c

08008554 <sbrk_aligned>:
 8008554:	b570      	push	{r4, r5, r6, lr}
 8008556:	4e0e      	ldr	r6, [pc, #56]	; (8008590 <sbrk_aligned+0x3c>)
 8008558:	460c      	mov	r4, r1
 800855a:	6831      	ldr	r1, [r6, #0]
 800855c:	4605      	mov	r5, r0
 800855e:	b911      	cbnz	r1, 8008566 <sbrk_aligned+0x12>
 8008560:	f000 fb7a 	bl	8008c58 <_sbrk_r>
 8008564:	6030      	str	r0, [r6, #0]
 8008566:	4621      	mov	r1, r4
 8008568:	4628      	mov	r0, r5
 800856a:	f000 fb75 	bl	8008c58 <_sbrk_r>
 800856e:	1c43      	adds	r3, r0, #1
 8008570:	d00a      	beq.n	8008588 <sbrk_aligned+0x34>
 8008572:	1cc4      	adds	r4, r0, #3
 8008574:	f024 0403 	bic.w	r4, r4, #3
 8008578:	42a0      	cmp	r0, r4
 800857a:	d007      	beq.n	800858c <sbrk_aligned+0x38>
 800857c:	1a21      	subs	r1, r4, r0
 800857e:	4628      	mov	r0, r5
 8008580:	f000 fb6a 	bl	8008c58 <_sbrk_r>
 8008584:	3001      	adds	r0, #1
 8008586:	d101      	bne.n	800858c <sbrk_aligned+0x38>
 8008588:	f04f 34ff 	mov.w	r4, #4294967295
 800858c:	4620      	mov	r0, r4
 800858e:	bd70      	pop	{r4, r5, r6, pc}
 8008590:	20002350 	.word	0x20002350

08008594 <_malloc_r>:
 8008594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008598:	1ccd      	adds	r5, r1, #3
 800859a:	f025 0503 	bic.w	r5, r5, #3
 800859e:	3508      	adds	r5, #8
 80085a0:	2d0c      	cmp	r5, #12
 80085a2:	bf38      	it	cc
 80085a4:	250c      	movcc	r5, #12
 80085a6:	2d00      	cmp	r5, #0
 80085a8:	4607      	mov	r7, r0
 80085aa:	db01      	blt.n	80085b0 <_malloc_r+0x1c>
 80085ac:	42a9      	cmp	r1, r5
 80085ae:	d905      	bls.n	80085bc <_malloc_r+0x28>
 80085b0:	230c      	movs	r3, #12
 80085b2:	603b      	str	r3, [r7, #0]
 80085b4:	2600      	movs	r6, #0
 80085b6:	4630      	mov	r0, r6
 80085b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085bc:	4e2e      	ldr	r6, [pc, #184]	; (8008678 <_malloc_r+0xe4>)
 80085be:	f000 fbf5 	bl	8008dac <__malloc_lock>
 80085c2:	6833      	ldr	r3, [r6, #0]
 80085c4:	461c      	mov	r4, r3
 80085c6:	bb34      	cbnz	r4, 8008616 <_malloc_r+0x82>
 80085c8:	4629      	mov	r1, r5
 80085ca:	4638      	mov	r0, r7
 80085cc:	f7ff ffc2 	bl	8008554 <sbrk_aligned>
 80085d0:	1c43      	adds	r3, r0, #1
 80085d2:	4604      	mov	r4, r0
 80085d4:	d14d      	bne.n	8008672 <_malloc_r+0xde>
 80085d6:	6834      	ldr	r4, [r6, #0]
 80085d8:	4626      	mov	r6, r4
 80085da:	2e00      	cmp	r6, #0
 80085dc:	d140      	bne.n	8008660 <_malloc_r+0xcc>
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	4631      	mov	r1, r6
 80085e2:	4638      	mov	r0, r7
 80085e4:	eb04 0803 	add.w	r8, r4, r3
 80085e8:	f000 fb36 	bl	8008c58 <_sbrk_r>
 80085ec:	4580      	cmp	r8, r0
 80085ee:	d13a      	bne.n	8008666 <_malloc_r+0xd2>
 80085f0:	6821      	ldr	r1, [r4, #0]
 80085f2:	3503      	adds	r5, #3
 80085f4:	1a6d      	subs	r5, r5, r1
 80085f6:	f025 0503 	bic.w	r5, r5, #3
 80085fa:	3508      	adds	r5, #8
 80085fc:	2d0c      	cmp	r5, #12
 80085fe:	bf38      	it	cc
 8008600:	250c      	movcc	r5, #12
 8008602:	4629      	mov	r1, r5
 8008604:	4638      	mov	r0, r7
 8008606:	f7ff ffa5 	bl	8008554 <sbrk_aligned>
 800860a:	3001      	adds	r0, #1
 800860c:	d02b      	beq.n	8008666 <_malloc_r+0xd2>
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	442b      	add	r3, r5
 8008612:	6023      	str	r3, [r4, #0]
 8008614:	e00e      	b.n	8008634 <_malloc_r+0xa0>
 8008616:	6822      	ldr	r2, [r4, #0]
 8008618:	1b52      	subs	r2, r2, r5
 800861a:	d41e      	bmi.n	800865a <_malloc_r+0xc6>
 800861c:	2a0b      	cmp	r2, #11
 800861e:	d916      	bls.n	800864e <_malloc_r+0xba>
 8008620:	1961      	adds	r1, r4, r5
 8008622:	42a3      	cmp	r3, r4
 8008624:	6025      	str	r5, [r4, #0]
 8008626:	bf18      	it	ne
 8008628:	6059      	strne	r1, [r3, #4]
 800862a:	6863      	ldr	r3, [r4, #4]
 800862c:	bf08      	it	eq
 800862e:	6031      	streq	r1, [r6, #0]
 8008630:	5162      	str	r2, [r4, r5]
 8008632:	604b      	str	r3, [r1, #4]
 8008634:	4638      	mov	r0, r7
 8008636:	f104 060b 	add.w	r6, r4, #11
 800863a:	f000 fbbd 	bl	8008db8 <__malloc_unlock>
 800863e:	f026 0607 	bic.w	r6, r6, #7
 8008642:	1d23      	adds	r3, r4, #4
 8008644:	1af2      	subs	r2, r6, r3
 8008646:	d0b6      	beq.n	80085b6 <_malloc_r+0x22>
 8008648:	1b9b      	subs	r3, r3, r6
 800864a:	50a3      	str	r3, [r4, r2]
 800864c:	e7b3      	b.n	80085b6 <_malloc_r+0x22>
 800864e:	6862      	ldr	r2, [r4, #4]
 8008650:	42a3      	cmp	r3, r4
 8008652:	bf0c      	ite	eq
 8008654:	6032      	streq	r2, [r6, #0]
 8008656:	605a      	strne	r2, [r3, #4]
 8008658:	e7ec      	b.n	8008634 <_malloc_r+0xa0>
 800865a:	4623      	mov	r3, r4
 800865c:	6864      	ldr	r4, [r4, #4]
 800865e:	e7b2      	b.n	80085c6 <_malloc_r+0x32>
 8008660:	4634      	mov	r4, r6
 8008662:	6876      	ldr	r6, [r6, #4]
 8008664:	e7b9      	b.n	80085da <_malloc_r+0x46>
 8008666:	230c      	movs	r3, #12
 8008668:	603b      	str	r3, [r7, #0]
 800866a:	4638      	mov	r0, r7
 800866c:	f000 fba4 	bl	8008db8 <__malloc_unlock>
 8008670:	e7a1      	b.n	80085b6 <_malloc_r+0x22>
 8008672:	6025      	str	r5, [r4, #0]
 8008674:	e7de      	b.n	8008634 <_malloc_r+0xa0>
 8008676:	bf00      	nop
 8008678:	2000234c 	.word	0x2000234c

0800867c <__sfputc_r>:
 800867c:	6893      	ldr	r3, [r2, #8]
 800867e:	3b01      	subs	r3, #1
 8008680:	2b00      	cmp	r3, #0
 8008682:	b410      	push	{r4}
 8008684:	6093      	str	r3, [r2, #8]
 8008686:	da08      	bge.n	800869a <__sfputc_r+0x1e>
 8008688:	6994      	ldr	r4, [r2, #24]
 800868a:	42a3      	cmp	r3, r4
 800868c:	db01      	blt.n	8008692 <__sfputc_r+0x16>
 800868e:	290a      	cmp	r1, #10
 8008690:	d103      	bne.n	800869a <__sfputc_r+0x1e>
 8008692:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008696:	f7ff bc31 	b.w	8007efc <__swbuf_r>
 800869a:	6813      	ldr	r3, [r2, #0]
 800869c:	1c58      	adds	r0, r3, #1
 800869e:	6010      	str	r0, [r2, #0]
 80086a0:	7019      	strb	r1, [r3, #0]
 80086a2:	4608      	mov	r0, r1
 80086a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086a8:	4770      	bx	lr

080086aa <__sfputs_r>:
 80086aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ac:	4606      	mov	r6, r0
 80086ae:	460f      	mov	r7, r1
 80086b0:	4614      	mov	r4, r2
 80086b2:	18d5      	adds	r5, r2, r3
 80086b4:	42ac      	cmp	r4, r5
 80086b6:	d101      	bne.n	80086bc <__sfputs_r+0x12>
 80086b8:	2000      	movs	r0, #0
 80086ba:	e007      	b.n	80086cc <__sfputs_r+0x22>
 80086bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086c0:	463a      	mov	r2, r7
 80086c2:	4630      	mov	r0, r6
 80086c4:	f7ff ffda 	bl	800867c <__sfputc_r>
 80086c8:	1c43      	adds	r3, r0, #1
 80086ca:	d1f3      	bne.n	80086b4 <__sfputs_r+0xa>
 80086cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080086d0 <_vfiprintf_r>:
 80086d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d4:	460d      	mov	r5, r1
 80086d6:	b09d      	sub	sp, #116	; 0x74
 80086d8:	4614      	mov	r4, r2
 80086da:	4698      	mov	r8, r3
 80086dc:	4606      	mov	r6, r0
 80086de:	b118      	cbz	r0, 80086e8 <_vfiprintf_r+0x18>
 80086e0:	6983      	ldr	r3, [r0, #24]
 80086e2:	b90b      	cbnz	r3, 80086e8 <_vfiprintf_r+0x18>
 80086e4:	f7ff fde4 	bl	80082b0 <__sinit>
 80086e8:	4b89      	ldr	r3, [pc, #548]	; (8008910 <_vfiprintf_r+0x240>)
 80086ea:	429d      	cmp	r5, r3
 80086ec:	d11b      	bne.n	8008726 <_vfiprintf_r+0x56>
 80086ee:	6875      	ldr	r5, [r6, #4]
 80086f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086f2:	07d9      	lsls	r1, r3, #31
 80086f4:	d405      	bmi.n	8008702 <_vfiprintf_r+0x32>
 80086f6:	89ab      	ldrh	r3, [r5, #12]
 80086f8:	059a      	lsls	r2, r3, #22
 80086fa:	d402      	bmi.n	8008702 <_vfiprintf_r+0x32>
 80086fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086fe:	f7ff fe75 	bl	80083ec <__retarget_lock_acquire_recursive>
 8008702:	89ab      	ldrh	r3, [r5, #12]
 8008704:	071b      	lsls	r3, r3, #28
 8008706:	d501      	bpl.n	800870c <_vfiprintf_r+0x3c>
 8008708:	692b      	ldr	r3, [r5, #16]
 800870a:	b9eb      	cbnz	r3, 8008748 <_vfiprintf_r+0x78>
 800870c:	4629      	mov	r1, r5
 800870e:	4630      	mov	r0, r6
 8008710:	f7ff fc46 	bl	8007fa0 <__swsetup_r>
 8008714:	b1c0      	cbz	r0, 8008748 <_vfiprintf_r+0x78>
 8008716:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008718:	07dc      	lsls	r4, r3, #31
 800871a:	d50e      	bpl.n	800873a <_vfiprintf_r+0x6a>
 800871c:	f04f 30ff 	mov.w	r0, #4294967295
 8008720:	b01d      	add	sp, #116	; 0x74
 8008722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008726:	4b7b      	ldr	r3, [pc, #492]	; (8008914 <_vfiprintf_r+0x244>)
 8008728:	429d      	cmp	r5, r3
 800872a:	d101      	bne.n	8008730 <_vfiprintf_r+0x60>
 800872c:	68b5      	ldr	r5, [r6, #8]
 800872e:	e7df      	b.n	80086f0 <_vfiprintf_r+0x20>
 8008730:	4b79      	ldr	r3, [pc, #484]	; (8008918 <_vfiprintf_r+0x248>)
 8008732:	429d      	cmp	r5, r3
 8008734:	bf08      	it	eq
 8008736:	68f5      	ldreq	r5, [r6, #12]
 8008738:	e7da      	b.n	80086f0 <_vfiprintf_r+0x20>
 800873a:	89ab      	ldrh	r3, [r5, #12]
 800873c:	0598      	lsls	r0, r3, #22
 800873e:	d4ed      	bmi.n	800871c <_vfiprintf_r+0x4c>
 8008740:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008742:	f7ff fe54 	bl	80083ee <__retarget_lock_release_recursive>
 8008746:	e7e9      	b.n	800871c <_vfiprintf_r+0x4c>
 8008748:	2300      	movs	r3, #0
 800874a:	9309      	str	r3, [sp, #36]	; 0x24
 800874c:	2320      	movs	r3, #32
 800874e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008752:	f8cd 800c 	str.w	r8, [sp, #12]
 8008756:	2330      	movs	r3, #48	; 0x30
 8008758:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800891c <_vfiprintf_r+0x24c>
 800875c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008760:	f04f 0901 	mov.w	r9, #1
 8008764:	4623      	mov	r3, r4
 8008766:	469a      	mov	sl, r3
 8008768:	f813 2b01 	ldrb.w	r2, [r3], #1
 800876c:	b10a      	cbz	r2, 8008772 <_vfiprintf_r+0xa2>
 800876e:	2a25      	cmp	r2, #37	; 0x25
 8008770:	d1f9      	bne.n	8008766 <_vfiprintf_r+0x96>
 8008772:	ebba 0b04 	subs.w	fp, sl, r4
 8008776:	d00b      	beq.n	8008790 <_vfiprintf_r+0xc0>
 8008778:	465b      	mov	r3, fp
 800877a:	4622      	mov	r2, r4
 800877c:	4629      	mov	r1, r5
 800877e:	4630      	mov	r0, r6
 8008780:	f7ff ff93 	bl	80086aa <__sfputs_r>
 8008784:	3001      	adds	r0, #1
 8008786:	f000 80aa 	beq.w	80088de <_vfiprintf_r+0x20e>
 800878a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800878c:	445a      	add	r2, fp
 800878e:	9209      	str	r2, [sp, #36]	; 0x24
 8008790:	f89a 3000 	ldrb.w	r3, [sl]
 8008794:	2b00      	cmp	r3, #0
 8008796:	f000 80a2 	beq.w	80088de <_vfiprintf_r+0x20e>
 800879a:	2300      	movs	r3, #0
 800879c:	f04f 32ff 	mov.w	r2, #4294967295
 80087a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087a4:	f10a 0a01 	add.w	sl, sl, #1
 80087a8:	9304      	str	r3, [sp, #16]
 80087aa:	9307      	str	r3, [sp, #28]
 80087ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087b0:	931a      	str	r3, [sp, #104]	; 0x68
 80087b2:	4654      	mov	r4, sl
 80087b4:	2205      	movs	r2, #5
 80087b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ba:	4858      	ldr	r0, [pc, #352]	; (800891c <_vfiprintf_r+0x24c>)
 80087bc:	f7f7 fd28 	bl	8000210 <memchr>
 80087c0:	9a04      	ldr	r2, [sp, #16]
 80087c2:	b9d8      	cbnz	r0, 80087fc <_vfiprintf_r+0x12c>
 80087c4:	06d1      	lsls	r1, r2, #27
 80087c6:	bf44      	itt	mi
 80087c8:	2320      	movmi	r3, #32
 80087ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087ce:	0713      	lsls	r3, r2, #28
 80087d0:	bf44      	itt	mi
 80087d2:	232b      	movmi	r3, #43	; 0x2b
 80087d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087d8:	f89a 3000 	ldrb.w	r3, [sl]
 80087dc:	2b2a      	cmp	r3, #42	; 0x2a
 80087de:	d015      	beq.n	800880c <_vfiprintf_r+0x13c>
 80087e0:	9a07      	ldr	r2, [sp, #28]
 80087e2:	4654      	mov	r4, sl
 80087e4:	2000      	movs	r0, #0
 80087e6:	f04f 0c0a 	mov.w	ip, #10
 80087ea:	4621      	mov	r1, r4
 80087ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087f0:	3b30      	subs	r3, #48	; 0x30
 80087f2:	2b09      	cmp	r3, #9
 80087f4:	d94e      	bls.n	8008894 <_vfiprintf_r+0x1c4>
 80087f6:	b1b0      	cbz	r0, 8008826 <_vfiprintf_r+0x156>
 80087f8:	9207      	str	r2, [sp, #28]
 80087fa:	e014      	b.n	8008826 <_vfiprintf_r+0x156>
 80087fc:	eba0 0308 	sub.w	r3, r0, r8
 8008800:	fa09 f303 	lsl.w	r3, r9, r3
 8008804:	4313      	orrs	r3, r2
 8008806:	9304      	str	r3, [sp, #16]
 8008808:	46a2      	mov	sl, r4
 800880a:	e7d2      	b.n	80087b2 <_vfiprintf_r+0xe2>
 800880c:	9b03      	ldr	r3, [sp, #12]
 800880e:	1d19      	adds	r1, r3, #4
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	9103      	str	r1, [sp, #12]
 8008814:	2b00      	cmp	r3, #0
 8008816:	bfbb      	ittet	lt
 8008818:	425b      	neglt	r3, r3
 800881a:	f042 0202 	orrlt.w	r2, r2, #2
 800881e:	9307      	strge	r3, [sp, #28]
 8008820:	9307      	strlt	r3, [sp, #28]
 8008822:	bfb8      	it	lt
 8008824:	9204      	strlt	r2, [sp, #16]
 8008826:	7823      	ldrb	r3, [r4, #0]
 8008828:	2b2e      	cmp	r3, #46	; 0x2e
 800882a:	d10c      	bne.n	8008846 <_vfiprintf_r+0x176>
 800882c:	7863      	ldrb	r3, [r4, #1]
 800882e:	2b2a      	cmp	r3, #42	; 0x2a
 8008830:	d135      	bne.n	800889e <_vfiprintf_r+0x1ce>
 8008832:	9b03      	ldr	r3, [sp, #12]
 8008834:	1d1a      	adds	r2, r3, #4
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	9203      	str	r2, [sp, #12]
 800883a:	2b00      	cmp	r3, #0
 800883c:	bfb8      	it	lt
 800883e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008842:	3402      	adds	r4, #2
 8008844:	9305      	str	r3, [sp, #20]
 8008846:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800892c <_vfiprintf_r+0x25c>
 800884a:	7821      	ldrb	r1, [r4, #0]
 800884c:	2203      	movs	r2, #3
 800884e:	4650      	mov	r0, sl
 8008850:	f7f7 fcde 	bl	8000210 <memchr>
 8008854:	b140      	cbz	r0, 8008868 <_vfiprintf_r+0x198>
 8008856:	2340      	movs	r3, #64	; 0x40
 8008858:	eba0 000a 	sub.w	r0, r0, sl
 800885c:	fa03 f000 	lsl.w	r0, r3, r0
 8008860:	9b04      	ldr	r3, [sp, #16]
 8008862:	4303      	orrs	r3, r0
 8008864:	3401      	adds	r4, #1
 8008866:	9304      	str	r3, [sp, #16]
 8008868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800886c:	482c      	ldr	r0, [pc, #176]	; (8008920 <_vfiprintf_r+0x250>)
 800886e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008872:	2206      	movs	r2, #6
 8008874:	f7f7 fccc 	bl	8000210 <memchr>
 8008878:	2800      	cmp	r0, #0
 800887a:	d03f      	beq.n	80088fc <_vfiprintf_r+0x22c>
 800887c:	4b29      	ldr	r3, [pc, #164]	; (8008924 <_vfiprintf_r+0x254>)
 800887e:	bb1b      	cbnz	r3, 80088c8 <_vfiprintf_r+0x1f8>
 8008880:	9b03      	ldr	r3, [sp, #12]
 8008882:	3307      	adds	r3, #7
 8008884:	f023 0307 	bic.w	r3, r3, #7
 8008888:	3308      	adds	r3, #8
 800888a:	9303      	str	r3, [sp, #12]
 800888c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800888e:	443b      	add	r3, r7
 8008890:	9309      	str	r3, [sp, #36]	; 0x24
 8008892:	e767      	b.n	8008764 <_vfiprintf_r+0x94>
 8008894:	fb0c 3202 	mla	r2, ip, r2, r3
 8008898:	460c      	mov	r4, r1
 800889a:	2001      	movs	r0, #1
 800889c:	e7a5      	b.n	80087ea <_vfiprintf_r+0x11a>
 800889e:	2300      	movs	r3, #0
 80088a0:	3401      	adds	r4, #1
 80088a2:	9305      	str	r3, [sp, #20]
 80088a4:	4619      	mov	r1, r3
 80088a6:	f04f 0c0a 	mov.w	ip, #10
 80088aa:	4620      	mov	r0, r4
 80088ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088b0:	3a30      	subs	r2, #48	; 0x30
 80088b2:	2a09      	cmp	r2, #9
 80088b4:	d903      	bls.n	80088be <_vfiprintf_r+0x1ee>
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d0c5      	beq.n	8008846 <_vfiprintf_r+0x176>
 80088ba:	9105      	str	r1, [sp, #20]
 80088bc:	e7c3      	b.n	8008846 <_vfiprintf_r+0x176>
 80088be:	fb0c 2101 	mla	r1, ip, r1, r2
 80088c2:	4604      	mov	r4, r0
 80088c4:	2301      	movs	r3, #1
 80088c6:	e7f0      	b.n	80088aa <_vfiprintf_r+0x1da>
 80088c8:	ab03      	add	r3, sp, #12
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	462a      	mov	r2, r5
 80088ce:	4b16      	ldr	r3, [pc, #88]	; (8008928 <_vfiprintf_r+0x258>)
 80088d0:	a904      	add	r1, sp, #16
 80088d2:	4630      	mov	r0, r6
 80088d4:	f3af 8000 	nop.w
 80088d8:	4607      	mov	r7, r0
 80088da:	1c78      	adds	r0, r7, #1
 80088dc:	d1d6      	bne.n	800888c <_vfiprintf_r+0x1bc>
 80088de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088e0:	07d9      	lsls	r1, r3, #31
 80088e2:	d405      	bmi.n	80088f0 <_vfiprintf_r+0x220>
 80088e4:	89ab      	ldrh	r3, [r5, #12]
 80088e6:	059a      	lsls	r2, r3, #22
 80088e8:	d402      	bmi.n	80088f0 <_vfiprintf_r+0x220>
 80088ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088ec:	f7ff fd7f 	bl	80083ee <__retarget_lock_release_recursive>
 80088f0:	89ab      	ldrh	r3, [r5, #12]
 80088f2:	065b      	lsls	r3, r3, #25
 80088f4:	f53f af12 	bmi.w	800871c <_vfiprintf_r+0x4c>
 80088f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088fa:	e711      	b.n	8008720 <_vfiprintf_r+0x50>
 80088fc:	ab03      	add	r3, sp, #12
 80088fe:	9300      	str	r3, [sp, #0]
 8008900:	462a      	mov	r2, r5
 8008902:	4b09      	ldr	r3, [pc, #36]	; (8008928 <_vfiprintf_r+0x258>)
 8008904:	a904      	add	r1, sp, #16
 8008906:	4630      	mov	r0, r6
 8008908:	f000 f880 	bl	8008a0c <_printf_i>
 800890c:	e7e4      	b.n	80088d8 <_vfiprintf_r+0x208>
 800890e:	bf00      	nop
 8008910:	08009074 	.word	0x08009074
 8008914:	08009094 	.word	0x08009094
 8008918:	08009054 	.word	0x08009054
 800891c:	080090b4 	.word	0x080090b4
 8008920:	080090be 	.word	0x080090be
 8008924:	00000000 	.word	0x00000000
 8008928:	080086ab 	.word	0x080086ab
 800892c:	080090ba 	.word	0x080090ba

08008930 <_printf_common>:
 8008930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008934:	4616      	mov	r6, r2
 8008936:	4699      	mov	r9, r3
 8008938:	688a      	ldr	r2, [r1, #8]
 800893a:	690b      	ldr	r3, [r1, #16]
 800893c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008940:	4293      	cmp	r3, r2
 8008942:	bfb8      	it	lt
 8008944:	4613      	movlt	r3, r2
 8008946:	6033      	str	r3, [r6, #0]
 8008948:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800894c:	4607      	mov	r7, r0
 800894e:	460c      	mov	r4, r1
 8008950:	b10a      	cbz	r2, 8008956 <_printf_common+0x26>
 8008952:	3301      	adds	r3, #1
 8008954:	6033      	str	r3, [r6, #0]
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	0699      	lsls	r1, r3, #26
 800895a:	bf42      	ittt	mi
 800895c:	6833      	ldrmi	r3, [r6, #0]
 800895e:	3302      	addmi	r3, #2
 8008960:	6033      	strmi	r3, [r6, #0]
 8008962:	6825      	ldr	r5, [r4, #0]
 8008964:	f015 0506 	ands.w	r5, r5, #6
 8008968:	d106      	bne.n	8008978 <_printf_common+0x48>
 800896a:	f104 0a19 	add.w	sl, r4, #25
 800896e:	68e3      	ldr	r3, [r4, #12]
 8008970:	6832      	ldr	r2, [r6, #0]
 8008972:	1a9b      	subs	r3, r3, r2
 8008974:	42ab      	cmp	r3, r5
 8008976:	dc26      	bgt.n	80089c6 <_printf_common+0x96>
 8008978:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800897c:	1e13      	subs	r3, r2, #0
 800897e:	6822      	ldr	r2, [r4, #0]
 8008980:	bf18      	it	ne
 8008982:	2301      	movne	r3, #1
 8008984:	0692      	lsls	r2, r2, #26
 8008986:	d42b      	bmi.n	80089e0 <_printf_common+0xb0>
 8008988:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800898c:	4649      	mov	r1, r9
 800898e:	4638      	mov	r0, r7
 8008990:	47c0      	blx	r8
 8008992:	3001      	adds	r0, #1
 8008994:	d01e      	beq.n	80089d4 <_printf_common+0xa4>
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	68e5      	ldr	r5, [r4, #12]
 800899a:	6832      	ldr	r2, [r6, #0]
 800899c:	f003 0306 	and.w	r3, r3, #6
 80089a0:	2b04      	cmp	r3, #4
 80089a2:	bf08      	it	eq
 80089a4:	1aad      	subeq	r5, r5, r2
 80089a6:	68a3      	ldr	r3, [r4, #8]
 80089a8:	6922      	ldr	r2, [r4, #16]
 80089aa:	bf0c      	ite	eq
 80089ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089b0:	2500      	movne	r5, #0
 80089b2:	4293      	cmp	r3, r2
 80089b4:	bfc4      	itt	gt
 80089b6:	1a9b      	subgt	r3, r3, r2
 80089b8:	18ed      	addgt	r5, r5, r3
 80089ba:	2600      	movs	r6, #0
 80089bc:	341a      	adds	r4, #26
 80089be:	42b5      	cmp	r5, r6
 80089c0:	d11a      	bne.n	80089f8 <_printf_common+0xc8>
 80089c2:	2000      	movs	r0, #0
 80089c4:	e008      	b.n	80089d8 <_printf_common+0xa8>
 80089c6:	2301      	movs	r3, #1
 80089c8:	4652      	mov	r2, sl
 80089ca:	4649      	mov	r1, r9
 80089cc:	4638      	mov	r0, r7
 80089ce:	47c0      	blx	r8
 80089d0:	3001      	adds	r0, #1
 80089d2:	d103      	bne.n	80089dc <_printf_common+0xac>
 80089d4:	f04f 30ff 	mov.w	r0, #4294967295
 80089d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089dc:	3501      	adds	r5, #1
 80089de:	e7c6      	b.n	800896e <_printf_common+0x3e>
 80089e0:	18e1      	adds	r1, r4, r3
 80089e2:	1c5a      	adds	r2, r3, #1
 80089e4:	2030      	movs	r0, #48	; 0x30
 80089e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089ea:	4422      	add	r2, r4
 80089ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089f4:	3302      	adds	r3, #2
 80089f6:	e7c7      	b.n	8008988 <_printf_common+0x58>
 80089f8:	2301      	movs	r3, #1
 80089fa:	4622      	mov	r2, r4
 80089fc:	4649      	mov	r1, r9
 80089fe:	4638      	mov	r0, r7
 8008a00:	47c0      	blx	r8
 8008a02:	3001      	adds	r0, #1
 8008a04:	d0e6      	beq.n	80089d4 <_printf_common+0xa4>
 8008a06:	3601      	adds	r6, #1
 8008a08:	e7d9      	b.n	80089be <_printf_common+0x8e>
	...

08008a0c <_printf_i>:
 8008a0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a10:	7e0f      	ldrb	r7, [r1, #24]
 8008a12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a14:	2f78      	cmp	r7, #120	; 0x78
 8008a16:	4691      	mov	r9, r2
 8008a18:	4680      	mov	r8, r0
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	469a      	mov	sl, r3
 8008a1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a22:	d807      	bhi.n	8008a34 <_printf_i+0x28>
 8008a24:	2f62      	cmp	r7, #98	; 0x62
 8008a26:	d80a      	bhi.n	8008a3e <_printf_i+0x32>
 8008a28:	2f00      	cmp	r7, #0
 8008a2a:	f000 80d8 	beq.w	8008bde <_printf_i+0x1d2>
 8008a2e:	2f58      	cmp	r7, #88	; 0x58
 8008a30:	f000 80a3 	beq.w	8008b7a <_printf_i+0x16e>
 8008a34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a3c:	e03a      	b.n	8008ab4 <_printf_i+0xa8>
 8008a3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a42:	2b15      	cmp	r3, #21
 8008a44:	d8f6      	bhi.n	8008a34 <_printf_i+0x28>
 8008a46:	a101      	add	r1, pc, #4	; (adr r1, 8008a4c <_printf_i+0x40>)
 8008a48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a4c:	08008aa5 	.word	0x08008aa5
 8008a50:	08008ab9 	.word	0x08008ab9
 8008a54:	08008a35 	.word	0x08008a35
 8008a58:	08008a35 	.word	0x08008a35
 8008a5c:	08008a35 	.word	0x08008a35
 8008a60:	08008a35 	.word	0x08008a35
 8008a64:	08008ab9 	.word	0x08008ab9
 8008a68:	08008a35 	.word	0x08008a35
 8008a6c:	08008a35 	.word	0x08008a35
 8008a70:	08008a35 	.word	0x08008a35
 8008a74:	08008a35 	.word	0x08008a35
 8008a78:	08008bc5 	.word	0x08008bc5
 8008a7c:	08008ae9 	.word	0x08008ae9
 8008a80:	08008ba7 	.word	0x08008ba7
 8008a84:	08008a35 	.word	0x08008a35
 8008a88:	08008a35 	.word	0x08008a35
 8008a8c:	08008be7 	.word	0x08008be7
 8008a90:	08008a35 	.word	0x08008a35
 8008a94:	08008ae9 	.word	0x08008ae9
 8008a98:	08008a35 	.word	0x08008a35
 8008a9c:	08008a35 	.word	0x08008a35
 8008aa0:	08008baf 	.word	0x08008baf
 8008aa4:	682b      	ldr	r3, [r5, #0]
 8008aa6:	1d1a      	adds	r2, r3, #4
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	602a      	str	r2, [r5, #0]
 8008aac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ab0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e0a3      	b.n	8008c00 <_printf_i+0x1f4>
 8008ab8:	6820      	ldr	r0, [r4, #0]
 8008aba:	6829      	ldr	r1, [r5, #0]
 8008abc:	0606      	lsls	r6, r0, #24
 8008abe:	f101 0304 	add.w	r3, r1, #4
 8008ac2:	d50a      	bpl.n	8008ada <_printf_i+0xce>
 8008ac4:	680e      	ldr	r6, [r1, #0]
 8008ac6:	602b      	str	r3, [r5, #0]
 8008ac8:	2e00      	cmp	r6, #0
 8008aca:	da03      	bge.n	8008ad4 <_printf_i+0xc8>
 8008acc:	232d      	movs	r3, #45	; 0x2d
 8008ace:	4276      	negs	r6, r6
 8008ad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ad4:	485e      	ldr	r0, [pc, #376]	; (8008c50 <_printf_i+0x244>)
 8008ad6:	230a      	movs	r3, #10
 8008ad8:	e019      	b.n	8008b0e <_printf_i+0x102>
 8008ada:	680e      	ldr	r6, [r1, #0]
 8008adc:	602b      	str	r3, [r5, #0]
 8008ade:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ae2:	bf18      	it	ne
 8008ae4:	b236      	sxthne	r6, r6
 8008ae6:	e7ef      	b.n	8008ac8 <_printf_i+0xbc>
 8008ae8:	682b      	ldr	r3, [r5, #0]
 8008aea:	6820      	ldr	r0, [r4, #0]
 8008aec:	1d19      	adds	r1, r3, #4
 8008aee:	6029      	str	r1, [r5, #0]
 8008af0:	0601      	lsls	r1, r0, #24
 8008af2:	d501      	bpl.n	8008af8 <_printf_i+0xec>
 8008af4:	681e      	ldr	r6, [r3, #0]
 8008af6:	e002      	b.n	8008afe <_printf_i+0xf2>
 8008af8:	0646      	lsls	r6, r0, #25
 8008afa:	d5fb      	bpl.n	8008af4 <_printf_i+0xe8>
 8008afc:	881e      	ldrh	r6, [r3, #0]
 8008afe:	4854      	ldr	r0, [pc, #336]	; (8008c50 <_printf_i+0x244>)
 8008b00:	2f6f      	cmp	r7, #111	; 0x6f
 8008b02:	bf0c      	ite	eq
 8008b04:	2308      	moveq	r3, #8
 8008b06:	230a      	movne	r3, #10
 8008b08:	2100      	movs	r1, #0
 8008b0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b0e:	6865      	ldr	r5, [r4, #4]
 8008b10:	60a5      	str	r5, [r4, #8]
 8008b12:	2d00      	cmp	r5, #0
 8008b14:	bfa2      	ittt	ge
 8008b16:	6821      	ldrge	r1, [r4, #0]
 8008b18:	f021 0104 	bicge.w	r1, r1, #4
 8008b1c:	6021      	strge	r1, [r4, #0]
 8008b1e:	b90e      	cbnz	r6, 8008b24 <_printf_i+0x118>
 8008b20:	2d00      	cmp	r5, #0
 8008b22:	d04d      	beq.n	8008bc0 <_printf_i+0x1b4>
 8008b24:	4615      	mov	r5, r2
 8008b26:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b2a:	fb03 6711 	mls	r7, r3, r1, r6
 8008b2e:	5dc7      	ldrb	r7, [r0, r7]
 8008b30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b34:	4637      	mov	r7, r6
 8008b36:	42bb      	cmp	r3, r7
 8008b38:	460e      	mov	r6, r1
 8008b3a:	d9f4      	bls.n	8008b26 <_printf_i+0x11a>
 8008b3c:	2b08      	cmp	r3, #8
 8008b3e:	d10b      	bne.n	8008b58 <_printf_i+0x14c>
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	07de      	lsls	r6, r3, #31
 8008b44:	d508      	bpl.n	8008b58 <_printf_i+0x14c>
 8008b46:	6923      	ldr	r3, [r4, #16]
 8008b48:	6861      	ldr	r1, [r4, #4]
 8008b4a:	4299      	cmp	r1, r3
 8008b4c:	bfde      	ittt	le
 8008b4e:	2330      	movle	r3, #48	; 0x30
 8008b50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b58:	1b52      	subs	r2, r2, r5
 8008b5a:	6122      	str	r2, [r4, #16]
 8008b5c:	f8cd a000 	str.w	sl, [sp]
 8008b60:	464b      	mov	r3, r9
 8008b62:	aa03      	add	r2, sp, #12
 8008b64:	4621      	mov	r1, r4
 8008b66:	4640      	mov	r0, r8
 8008b68:	f7ff fee2 	bl	8008930 <_printf_common>
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	d14c      	bne.n	8008c0a <_printf_i+0x1fe>
 8008b70:	f04f 30ff 	mov.w	r0, #4294967295
 8008b74:	b004      	add	sp, #16
 8008b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b7a:	4835      	ldr	r0, [pc, #212]	; (8008c50 <_printf_i+0x244>)
 8008b7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008b80:	6829      	ldr	r1, [r5, #0]
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b88:	6029      	str	r1, [r5, #0]
 8008b8a:	061d      	lsls	r5, r3, #24
 8008b8c:	d514      	bpl.n	8008bb8 <_printf_i+0x1ac>
 8008b8e:	07df      	lsls	r7, r3, #31
 8008b90:	bf44      	itt	mi
 8008b92:	f043 0320 	orrmi.w	r3, r3, #32
 8008b96:	6023      	strmi	r3, [r4, #0]
 8008b98:	b91e      	cbnz	r6, 8008ba2 <_printf_i+0x196>
 8008b9a:	6823      	ldr	r3, [r4, #0]
 8008b9c:	f023 0320 	bic.w	r3, r3, #32
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	2310      	movs	r3, #16
 8008ba4:	e7b0      	b.n	8008b08 <_printf_i+0xfc>
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	f043 0320 	orr.w	r3, r3, #32
 8008bac:	6023      	str	r3, [r4, #0]
 8008bae:	2378      	movs	r3, #120	; 0x78
 8008bb0:	4828      	ldr	r0, [pc, #160]	; (8008c54 <_printf_i+0x248>)
 8008bb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008bb6:	e7e3      	b.n	8008b80 <_printf_i+0x174>
 8008bb8:	0659      	lsls	r1, r3, #25
 8008bba:	bf48      	it	mi
 8008bbc:	b2b6      	uxthmi	r6, r6
 8008bbe:	e7e6      	b.n	8008b8e <_printf_i+0x182>
 8008bc0:	4615      	mov	r5, r2
 8008bc2:	e7bb      	b.n	8008b3c <_printf_i+0x130>
 8008bc4:	682b      	ldr	r3, [r5, #0]
 8008bc6:	6826      	ldr	r6, [r4, #0]
 8008bc8:	6961      	ldr	r1, [r4, #20]
 8008bca:	1d18      	adds	r0, r3, #4
 8008bcc:	6028      	str	r0, [r5, #0]
 8008bce:	0635      	lsls	r5, r6, #24
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	d501      	bpl.n	8008bd8 <_printf_i+0x1cc>
 8008bd4:	6019      	str	r1, [r3, #0]
 8008bd6:	e002      	b.n	8008bde <_printf_i+0x1d2>
 8008bd8:	0670      	lsls	r0, r6, #25
 8008bda:	d5fb      	bpl.n	8008bd4 <_printf_i+0x1c8>
 8008bdc:	8019      	strh	r1, [r3, #0]
 8008bde:	2300      	movs	r3, #0
 8008be0:	6123      	str	r3, [r4, #16]
 8008be2:	4615      	mov	r5, r2
 8008be4:	e7ba      	b.n	8008b5c <_printf_i+0x150>
 8008be6:	682b      	ldr	r3, [r5, #0]
 8008be8:	1d1a      	adds	r2, r3, #4
 8008bea:	602a      	str	r2, [r5, #0]
 8008bec:	681d      	ldr	r5, [r3, #0]
 8008bee:	6862      	ldr	r2, [r4, #4]
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	f7f7 fb0c 	bl	8000210 <memchr>
 8008bf8:	b108      	cbz	r0, 8008bfe <_printf_i+0x1f2>
 8008bfa:	1b40      	subs	r0, r0, r5
 8008bfc:	6060      	str	r0, [r4, #4]
 8008bfe:	6863      	ldr	r3, [r4, #4]
 8008c00:	6123      	str	r3, [r4, #16]
 8008c02:	2300      	movs	r3, #0
 8008c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c08:	e7a8      	b.n	8008b5c <_printf_i+0x150>
 8008c0a:	6923      	ldr	r3, [r4, #16]
 8008c0c:	462a      	mov	r2, r5
 8008c0e:	4649      	mov	r1, r9
 8008c10:	4640      	mov	r0, r8
 8008c12:	47d0      	blx	sl
 8008c14:	3001      	adds	r0, #1
 8008c16:	d0ab      	beq.n	8008b70 <_printf_i+0x164>
 8008c18:	6823      	ldr	r3, [r4, #0]
 8008c1a:	079b      	lsls	r3, r3, #30
 8008c1c:	d413      	bmi.n	8008c46 <_printf_i+0x23a>
 8008c1e:	68e0      	ldr	r0, [r4, #12]
 8008c20:	9b03      	ldr	r3, [sp, #12]
 8008c22:	4298      	cmp	r0, r3
 8008c24:	bfb8      	it	lt
 8008c26:	4618      	movlt	r0, r3
 8008c28:	e7a4      	b.n	8008b74 <_printf_i+0x168>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	4632      	mov	r2, r6
 8008c2e:	4649      	mov	r1, r9
 8008c30:	4640      	mov	r0, r8
 8008c32:	47d0      	blx	sl
 8008c34:	3001      	adds	r0, #1
 8008c36:	d09b      	beq.n	8008b70 <_printf_i+0x164>
 8008c38:	3501      	adds	r5, #1
 8008c3a:	68e3      	ldr	r3, [r4, #12]
 8008c3c:	9903      	ldr	r1, [sp, #12]
 8008c3e:	1a5b      	subs	r3, r3, r1
 8008c40:	42ab      	cmp	r3, r5
 8008c42:	dcf2      	bgt.n	8008c2a <_printf_i+0x21e>
 8008c44:	e7eb      	b.n	8008c1e <_printf_i+0x212>
 8008c46:	2500      	movs	r5, #0
 8008c48:	f104 0619 	add.w	r6, r4, #25
 8008c4c:	e7f5      	b.n	8008c3a <_printf_i+0x22e>
 8008c4e:	bf00      	nop
 8008c50:	080090c5 	.word	0x080090c5
 8008c54:	080090d6 	.word	0x080090d6

08008c58 <_sbrk_r>:
 8008c58:	b538      	push	{r3, r4, r5, lr}
 8008c5a:	4d06      	ldr	r5, [pc, #24]	; (8008c74 <_sbrk_r+0x1c>)
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	4604      	mov	r4, r0
 8008c60:	4608      	mov	r0, r1
 8008c62:	602b      	str	r3, [r5, #0]
 8008c64:	f7f8 f9b6 	bl	8000fd4 <_sbrk>
 8008c68:	1c43      	adds	r3, r0, #1
 8008c6a:	d102      	bne.n	8008c72 <_sbrk_r+0x1a>
 8008c6c:	682b      	ldr	r3, [r5, #0]
 8008c6e:	b103      	cbz	r3, 8008c72 <_sbrk_r+0x1a>
 8008c70:	6023      	str	r3, [r4, #0]
 8008c72:	bd38      	pop	{r3, r4, r5, pc}
 8008c74:	20002354 	.word	0x20002354

08008c78 <__sread>:
 8008c78:	b510      	push	{r4, lr}
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c80:	f000 f8a0 	bl	8008dc4 <_read_r>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	bfab      	itete	ge
 8008c88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c8a:	89a3      	ldrhlt	r3, [r4, #12]
 8008c8c:	181b      	addge	r3, r3, r0
 8008c8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c92:	bfac      	ite	ge
 8008c94:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c96:	81a3      	strhlt	r3, [r4, #12]
 8008c98:	bd10      	pop	{r4, pc}

08008c9a <__swrite>:
 8008c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c9e:	461f      	mov	r7, r3
 8008ca0:	898b      	ldrh	r3, [r1, #12]
 8008ca2:	05db      	lsls	r3, r3, #23
 8008ca4:	4605      	mov	r5, r0
 8008ca6:	460c      	mov	r4, r1
 8008ca8:	4616      	mov	r6, r2
 8008caa:	d505      	bpl.n	8008cb8 <__swrite+0x1e>
 8008cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f000 f868 	bl	8008d88 <_lseek_r>
 8008cb8:	89a3      	ldrh	r3, [r4, #12]
 8008cba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008cc2:	81a3      	strh	r3, [r4, #12]
 8008cc4:	4632      	mov	r2, r6
 8008cc6:	463b      	mov	r3, r7
 8008cc8:	4628      	mov	r0, r5
 8008cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cce:	f000 b817 	b.w	8008d00 <_write_r>

08008cd2 <__sseek>:
 8008cd2:	b510      	push	{r4, lr}
 8008cd4:	460c      	mov	r4, r1
 8008cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cda:	f000 f855 	bl	8008d88 <_lseek_r>
 8008cde:	1c43      	adds	r3, r0, #1
 8008ce0:	89a3      	ldrh	r3, [r4, #12]
 8008ce2:	bf15      	itete	ne
 8008ce4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ce6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008cea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008cee:	81a3      	strheq	r3, [r4, #12]
 8008cf0:	bf18      	it	ne
 8008cf2:	81a3      	strhne	r3, [r4, #12]
 8008cf4:	bd10      	pop	{r4, pc}

08008cf6 <__sclose>:
 8008cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cfa:	f000 b813 	b.w	8008d24 <_close_r>
	...

08008d00 <_write_r>:
 8008d00:	b538      	push	{r3, r4, r5, lr}
 8008d02:	4d07      	ldr	r5, [pc, #28]	; (8008d20 <_write_r+0x20>)
 8008d04:	4604      	mov	r4, r0
 8008d06:	4608      	mov	r0, r1
 8008d08:	4611      	mov	r1, r2
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	602a      	str	r2, [r5, #0]
 8008d0e:	461a      	mov	r2, r3
 8008d10:	f7f7 fc77 	bl	8000602 <_write>
 8008d14:	1c43      	adds	r3, r0, #1
 8008d16:	d102      	bne.n	8008d1e <_write_r+0x1e>
 8008d18:	682b      	ldr	r3, [r5, #0]
 8008d1a:	b103      	cbz	r3, 8008d1e <_write_r+0x1e>
 8008d1c:	6023      	str	r3, [r4, #0]
 8008d1e:	bd38      	pop	{r3, r4, r5, pc}
 8008d20:	20002354 	.word	0x20002354

08008d24 <_close_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	4d06      	ldr	r5, [pc, #24]	; (8008d40 <_close_r+0x1c>)
 8008d28:	2300      	movs	r3, #0
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	4608      	mov	r0, r1
 8008d2e:	602b      	str	r3, [r5, #0]
 8008d30:	f7f8 f91b 	bl	8000f6a <_close>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	d102      	bne.n	8008d3e <_close_r+0x1a>
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	b103      	cbz	r3, 8008d3e <_close_r+0x1a>
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	bd38      	pop	{r3, r4, r5, pc}
 8008d40:	20002354 	.word	0x20002354

08008d44 <_fstat_r>:
 8008d44:	b538      	push	{r3, r4, r5, lr}
 8008d46:	4d07      	ldr	r5, [pc, #28]	; (8008d64 <_fstat_r+0x20>)
 8008d48:	2300      	movs	r3, #0
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	4608      	mov	r0, r1
 8008d4e:	4611      	mov	r1, r2
 8008d50:	602b      	str	r3, [r5, #0]
 8008d52:	f7f8 f916 	bl	8000f82 <_fstat>
 8008d56:	1c43      	adds	r3, r0, #1
 8008d58:	d102      	bne.n	8008d60 <_fstat_r+0x1c>
 8008d5a:	682b      	ldr	r3, [r5, #0]
 8008d5c:	b103      	cbz	r3, 8008d60 <_fstat_r+0x1c>
 8008d5e:	6023      	str	r3, [r4, #0]
 8008d60:	bd38      	pop	{r3, r4, r5, pc}
 8008d62:	bf00      	nop
 8008d64:	20002354 	.word	0x20002354

08008d68 <_isatty_r>:
 8008d68:	b538      	push	{r3, r4, r5, lr}
 8008d6a:	4d06      	ldr	r5, [pc, #24]	; (8008d84 <_isatty_r+0x1c>)
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	4604      	mov	r4, r0
 8008d70:	4608      	mov	r0, r1
 8008d72:	602b      	str	r3, [r5, #0]
 8008d74:	f7f8 f915 	bl	8000fa2 <_isatty>
 8008d78:	1c43      	adds	r3, r0, #1
 8008d7a:	d102      	bne.n	8008d82 <_isatty_r+0x1a>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	b103      	cbz	r3, 8008d82 <_isatty_r+0x1a>
 8008d80:	6023      	str	r3, [r4, #0]
 8008d82:	bd38      	pop	{r3, r4, r5, pc}
 8008d84:	20002354 	.word	0x20002354

08008d88 <_lseek_r>:
 8008d88:	b538      	push	{r3, r4, r5, lr}
 8008d8a:	4d07      	ldr	r5, [pc, #28]	; (8008da8 <_lseek_r+0x20>)
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	4608      	mov	r0, r1
 8008d90:	4611      	mov	r1, r2
 8008d92:	2200      	movs	r2, #0
 8008d94:	602a      	str	r2, [r5, #0]
 8008d96:	461a      	mov	r2, r3
 8008d98:	f7f8 f90e 	bl	8000fb8 <_lseek>
 8008d9c:	1c43      	adds	r3, r0, #1
 8008d9e:	d102      	bne.n	8008da6 <_lseek_r+0x1e>
 8008da0:	682b      	ldr	r3, [r5, #0]
 8008da2:	b103      	cbz	r3, 8008da6 <_lseek_r+0x1e>
 8008da4:	6023      	str	r3, [r4, #0]
 8008da6:	bd38      	pop	{r3, r4, r5, pc}
 8008da8:	20002354 	.word	0x20002354

08008dac <__malloc_lock>:
 8008dac:	4801      	ldr	r0, [pc, #4]	; (8008db4 <__malloc_lock+0x8>)
 8008dae:	f7ff bb1d 	b.w	80083ec <__retarget_lock_acquire_recursive>
 8008db2:	bf00      	nop
 8008db4:	20002348 	.word	0x20002348

08008db8 <__malloc_unlock>:
 8008db8:	4801      	ldr	r0, [pc, #4]	; (8008dc0 <__malloc_unlock+0x8>)
 8008dba:	f7ff bb18 	b.w	80083ee <__retarget_lock_release_recursive>
 8008dbe:	bf00      	nop
 8008dc0:	20002348 	.word	0x20002348

08008dc4 <_read_r>:
 8008dc4:	b538      	push	{r3, r4, r5, lr}
 8008dc6:	4d07      	ldr	r5, [pc, #28]	; (8008de4 <_read_r+0x20>)
 8008dc8:	4604      	mov	r4, r0
 8008dca:	4608      	mov	r0, r1
 8008dcc:	4611      	mov	r1, r2
 8008dce:	2200      	movs	r2, #0
 8008dd0:	602a      	str	r2, [r5, #0]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	f7f8 f8ac 	bl	8000f30 <_read>
 8008dd8:	1c43      	adds	r3, r0, #1
 8008dda:	d102      	bne.n	8008de2 <_read_r+0x1e>
 8008ddc:	682b      	ldr	r3, [r5, #0]
 8008dde:	b103      	cbz	r3, 8008de2 <_read_r+0x1e>
 8008de0:	6023      	str	r3, [r4, #0]
 8008de2:	bd38      	pop	{r3, r4, r5, pc}
 8008de4:	20002354 	.word	0x20002354

08008de8 <_init>:
 8008de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dea:	bf00      	nop
 8008dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dee:	bc08      	pop	{r3}
 8008df0:	469e      	mov	lr, r3
 8008df2:	4770      	bx	lr

08008df4 <_fini>:
 8008df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df6:	bf00      	nop
 8008df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dfa:	bc08      	pop	{r3}
 8008dfc:	469e      	mov	lr, r3
 8008dfe:	4770      	bx	lr
