
SDIO_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f64  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08009134  08009134  00019134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009378  08009378  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009378  08009378  00019378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009380  08009380  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009380  08009380  00019380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009384  08009384  00019384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000070  080093f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  080093f8  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014605  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031e0  00000000  00000000  000346a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  00037888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  000388e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025ac0  00000000  00000000  00039808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016fe2  00000000  00000000  0005f2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc679  00000000  00000000  000762aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00152923  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004668  00000000  00000000  00152974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800911c 	.word	0x0800911c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800911c 	.word	0x0800911c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <Uart_write>:
    return c;
  }
}

void Uart_write(int c)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	if (c>0)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	dd21      	ble.n	8000606 <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 80005c2:	4b14      	ldr	r3, [pc, #80]	; (8000614 <Uart_write+0x60>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	3301      	adds	r3, #1
 80005ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005ce:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 80005d0:	bf00      	nop
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <Uart_write+0x60>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	429a      	cmp	r2, r3
 80005dc:	d0f9      	beq.n	80005d2 <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 80005de:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <Uart_write+0x60>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <Uart_write+0x60>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	6879      	ldr	r1, [r7, #4]
 80005ea:	b2c9      	uxtb	r1, r1
 80005ec:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <Uart_write+0x60>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <Uart_write+0x64>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	68da      	ldr	r2, [r3, #12]
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <Uart_write+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000604:	60da      	str	r2, [r3, #12]
	}
}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	200000d0 	.word	0x200000d0
 8000618:	2000008c 	.word	0x2000008c

0800061c <Uart_sendstring>:
	}
  else return -1;
}

void Uart_sendstring (const char *s)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 8000624:	e006      	b.n	8000634 <Uart_sendstring+0x18>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	1c5a      	adds	r2, r3, #1
 800062a:	607a      	str	r2, [r7, #4]
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff ffc0 	bl	80005b4 <Uart_write>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d1f4      	bne.n	8000626 <Uart_sendstring+0xa>
}
 800063c:	bf00      	nop
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <clear_buffer>:
	while (*buf++ != '\0') i++;
	return i;
}

void clear_buffer (void)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	e007      	b.n	8000664 <clear_buffer+0x1c>
 8000654:	4a08      	ldr	r2, [pc, #32]	; (8000678 <clear_buffer+0x30>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3301      	adds	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2b7f      	cmp	r3, #127	; 0x7f
 8000668:	ddf4      	ble.n	8000654 <clear_buffer+0xc>
}
 800066a:	bf00      	nop
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	200000d4 	.word	0x200000d4

0800067c <send_uart>:
{
	for (int i=0; i<PATH_SIZE; i++) path[i] = '\0';
}

void send_uart (char *string)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
//	uint8_t len = strlen ((const char *) string);
//	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, 2000);
	Uart_sendstring(string);
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f7ff ffc9 	bl	800061c <Uart_sendstring>
	clear_buffer();
 800068a:	f7ff ffdd 	bl	8000648 <clear_buffer>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
	FATFS *pfs;
	DWORD fre_clust;
	uint32_t total, free_space;

	//mount_sd();
	fresult = f_mount(&fs, "/", 1);
 80006a2:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80006a6:	f103 0308 	add.w	r3, r3, #8
 80006aa:	3b1c      	subs	r3, #28
 80006ac:	2201      	movs	r2, #1
 80006ae:	495d      	ldr	r1, [pc, #372]	; (8000824 <main+0x18c>)
 80006b0:	4618      	mov	r0, r3
 80006b2:	f007 fd43 	bl	800813c <f_mount>
 80006b6:	4603      	mov	r3, r0
 80006b8:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80006bc:	f102 0207 	add.w	r2, r2, #7
 80006c0:	7013      	strb	r3, [r2, #0]
	if (fresult != FR_OK) send_uart ("error in mounting SD CARD...\n");
 80006c2:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80006c6:	f103 0307 	add.w	r3, r3, #7
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d003      	beq.n	80006d8 <main+0x40>
 80006d0:	4855      	ldr	r0, [pc, #340]	; (8000828 <main+0x190>)
 80006d2:	f7ff ffd3 	bl	800067c <send_uart>
 80006d6:	e002      	b.n	80006de <main+0x46>
	else send_uart("SD CARD mounted successfully...\n");
 80006d8:	4854      	ldr	r0, [pc, #336]	; (800082c <main+0x194>)
 80006da:	f7ff ffcf 	bl	800067c <send_uart>

//	create_file("FILE1.TXT");
//	create_file("FILE2.TXT");
	char *name = "file_1.txt";
 80006de:	4b54      	ldr	r3, [pc, #336]	; (8000830 <main+0x198>)
 80006e0:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80006e4:	6013      	str	r3, [r2, #0]

	fresult = f_stat (name, &fno);
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	3b04      	subs	r3, #4
 80006ec:	4619      	mov	r1, r3
 80006ee:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80006f2:	6818      	ldr	r0, [r3, #0]
 80006f4:	f007 ffdc 	bl	80086b0 <f_stat>
 80006f8:	4603      	mov	r3, r0
 80006fa:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80006fe:	f102 0207 	add.w	r2, r2, #7
 8000702:	7013      	strb	r3, [r2, #0]
	if (fresult == FR_OK)
 8000704:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000708:	f103 0307 	add.w	r3, r3, #7
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d10a      	bne.n	8000728 <main+0x90>
	{
		sprintf (buffer, "*%s* already exists!!!!\n",name);
 8000712:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4946      	ldr	r1, [pc, #280]	; (8000834 <main+0x19c>)
 800071a:	4847      	ldr	r0, [pc, #284]	; (8000838 <main+0x1a0>)
 800071c:	f008 f890 	bl	8008840 <siprintf>
		send_uart(buffer);
 8000720:	4845      	ldr	r0, [pc, #276]	; (8000838 <main+0x1a0>)
 8000722:	f7ff ffab 	bl	800067c <send_uart>
 8000726:	e052      	b.n	80007ce <main+0x136>
	}
	else {
	fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000728:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800072c:	3b2c      	subs	r3, #44	; 0x2c
 800072e:	220b      	movs	r2, #11
 8000730:	f507 5102 	add.w	r1, r7, #8320	; 0x2080
 8000734:	6809      	ldr	r1, [r1, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f007 fd46 	bl	80081c8 <f_open>
 800073c:	4603      	mov	r3, r0
 800073e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000742:	f102 0207 	add.w	r2, r2, #7
 8000746:	7013      	strb	r3, [r2, #0]
	if (fresult != FR_OK)
 8000748:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800074c:	f103 0307 	add.w	r3, r3, #7
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d00f      	beq.n	8000776 <main+0xde>
	{
		sprintf (buffer, "error no %d in creating file *%s*\n", fresult, name);
 8000756:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800075a:	f103 0307 	add.w	r3, r3, #7
 800075e:	781a      	ldrb	r2, [r3, #0]
 8000760:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4935      	ldr	r1, [pc, #212]	; (800083c <main+0x1a4>)
 8000768:	4833      	ldr	r0, [pc, #204]	; (8000838 <main+0x1a0>)
 800076a:	f008 f869 	bl	8008840 <siprintf>
		send_uart(buffer);
 800076e:	4832      	ldr	r0, [pc, #200]	; (8000838 <main+0x1a0>)
 8000770:	f7ff ff84 	bl	800067c <send_uart>
 8000774:	e009      	b.n	800078a <main+0xf2>
	}
	else
	{
		sprintf (buffer, "*%s* created successfully\n",name);
 8000776:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4930      	ldr	r1, [pc, #192]	; (8000840 <main+0x1a8>)
 800077e:	482e      	ldr	r0, [pc, #184]	; (8000838 <main+0x1a0>)
 8000780:	f008 f85e 	bl	8008840 <siprintf>
		send_uart(buffer);
 8000784:	482c      	ldr	r0, [pc, #176]	; (8000838 <main+0x1a0>)
 8000786:	f7ff ff79 	bl	800067c <send_uart>
	}

	fresult = f_close(&fil);
 800078a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800078e:	3b2c      	subs	r3, #44	; 0x2c
 8000790:	4618      	mov	r0, r3
 8000792:	f007 ff63 	bl	800865c <f_close>
 8000796:	4603      	mov	r3, r0
 8000798:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 800079c:	f102 0207 	add.w	r2, r2, #7
 80007a0:	7013      	strb	r3, [r2, #0]
	if (fresult != FR_OK)
 80007a2:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80007a6:	f103 0307 	add.w	r3, r3, #7
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d00e      	beq.n	80007ce <main+0x136>
	{
		sprintf (buffer, "error no %d in closing file *%s*\n", fresult, name);
 80007b0:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80007b4:	f103 0307 	add.w	r3, r3, #7
 80007b8:	781a      	ldrb	r2, [r3, #0]
 80007ba:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4920      	ldr	r1, [pc, #128]	; (8000844 <main+0x1ac>)
 80007c2:	481d      	ldr	r0, [pc, #116]	; (8000838 <main+0x1a0>)
 80007c4:	f008 f83c 	bl	8008840 <siprintf>
		send_uart(buffer);
 80007c8:	481b      	ldr	r0, [pc, #108]	; (8000838 <main+0x1a0>)
 80007ca:	f7ff ff57 	bl	800067c <send_uart>
	}
	}

	//unmount_sd();
	fresult = f_mount(NULL, "/", 1);
 80007ce:	2201      	movs	r2, #1
 80007d0:	4914      	ldr	r1, [pc, #80]	; (8000824 <main+0x18c>)
 80007d2:	2000      	movs	r0, #0
 80007d4:	f007 fcb2 	bl	800813c <f_mount>
 80007d8:	4603      	mov	r3, r0
 80007da:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80007de:	f102 0207 	add.w	r2, r2, #7
 80007e2:	7013      	strb	r3, [r2, #0]
	if (fresult == FR_OK) send_uart ("SD CARD UNMOUNTED successfully...\n");
 80007e4:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80007e8:	f103 0307 	add.w	r3, r3, #7
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d103      	bne.n	80007fa <main+0x162>
 80007f2:	4815      	ldr	r0, [pc, #84]	; (8000848 <main+0x1b0>)
 80007f4:	f7ff ff42 	bl	800067c <send_uart>
 80007f8:	e002      	b.n	8000800 <main+0x168>
	else send_uart("error!!! in UNMOUNTING SD CARD\n");
 80007fa:	4814      	ldr	r0, [pc, #80]	; (800084c <main+0x1b4>)
 80007fc:	f7ff ff3e 	bl	800067c <send_uart>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000800:	f000 fc3a 	bl	8001078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000804:	f000 f824 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000808:	f000 f952 	bl	8000ab0 <MX_GPIO_Init>
  MX_DMA_Init();
 800080c:	f000 f930 	bl	8000a70 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000810:	f000 f904 	bl	8000a1c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000814:	f000 f88e 	bl	8000934 <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 8000818:	f000 f8de 	bl	80009d8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800081c:	f005 fce4 	bl	80061e8 <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000820:	e7fe      	b.n	8000820 <main+0x188>
 8000822:	bf00      	nop
 8000824:	08009134 	.word	0x08009134
 8000828:	08009138 	.word	0x08009138
 800082c:	08009158 	.word	0x08009158
 8000830:	0800917c 	.word	0x0800917c
 8000834:	08009188 	.word	0x08009188
 8000838:	200000d4 	.word	0x200000d4
 800083c:	080091a4 	.word	0x080091a4
 8000840:	080091c8 	.word	0x080091c8
 8000844:	080091e4 	.word	0x080091e4
 8000848:	08009208 	.word	0x08009208
 800084c:	0800922c 	.word	0x0800922c

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b094      	sub	sp, #80	; 0x50
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	2234      	movs	r2, #52	; 0x34
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f007 ffe6 	bl	8008830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	f107 0308 	add.w	r3, r7, #8
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	4b2c      	ldr	r3, [pc, #176]	; (800092c <SystemClock_Config+0xdc>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	4a2b      	ldr	r2, [pc, #172]	; (800092c <SystemClock_Config+0xdc>)
 800087e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000882:	6413      	str	r3, [r2, #64]	; 0x40
 8000884:	4b29      	ldr	r3, [pc, #164]	; (800092c <SystemClock_Config+0xdc>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000890:	2300      	movs	r3, #0
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	4b26      	ldr	r3, [pc, #152]	; (8000930 <SystemClock_Config+0xe0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a25      	ldr	r2, [pc, #148]	; (8000930 <SystemClock_Config+0xe0>)
 800089a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800089e:	6013      	str	r3, [r2, #0]
 80008a0:	4b23      	ldr	r3, [pc, #140]	; (8000930 <SystemClock_Config+0xe0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ac:	2302      	movs	r3, #2
 80008ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b0:	2301      	movs	r3, #1
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b4:	2310      	movs	r3, #16
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b8:	2302      	movs	r3, #2
 80008ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008bc:	2300      	movs	r3, #0
 80008be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008c0:	2308      	movs	r3, #8
 80008c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80008c4:	23b4      	movs	r3, #180	; 0xb4
 80008c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80008cc:	2309      	movs	r3, #9
 80008ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4618      	mov	r0, r3
 80008da:	f002 fbd5 	bl	8003088 <HAL_RCC_OscConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008e4:	f000 f960 	bl	8000ba8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008e8:	f001 fd0a 	bl	8002300 <HAL_PWREx_EnableOverDrive>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008f2:	f000 f959 	bl	8000ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f6:	230f      	movs	r3, #15
 80008f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fa:	2302      	movs	r3, #2
 80008fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000902:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000906:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	2105      	movs	r1, #5
 8000914:	4618      	mov	r0, r3
 8000916:	f001 fd43 	bl	80023a0 <HAL_RCC_ClockConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000920:	f000 f942 	bl	8000ba8 <Error_Handler>
  }
}
 8000924:	bf00      	nop
 8000926:	3750      	adds	r7, #80	; 0x50
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800
 8000930:	40007000 	.word	0x40007000

08000934 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800093a:	463b      	mov	r3, r7
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000946:	4b21      	ldr	r3, [pc, #132]	; (80009cc <MX_ADC1_Init+0x98>)
 8000948:	4a21      	ldr	r2, [pc, #132]	; (80009d0 <MX_ADC1_Init+0x9c>)
 800094a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800094c:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <MX_ADC1_Init+0x98>)
 800094e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000952:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000954:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <MX_ADC1_Init+0x98>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MX_ADC1_Init+0x98>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_ADC1_Init+0x98>)
 8000962:	2200      	movs	r2, #0
 8000964:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <MX_ADC1_Init+0x98>)
 8000968:	2200      	movs	r2, #0
 800096a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_ADC1_Init+0x98>)
 8000970:	2200      	movs	r2, #0
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_ADC1_Init+0x98>)
 8000976:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <MX_ADC1_Init+0xa0>)
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_ADC1_Init+0x98>)
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_ADC1_Init+0x98>)
 8000982:	2201      	movs	r2, #1
 8000984:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_ADC1_Init+0x98>)
 8000988:	2200      	movs	r2, #0
 800098a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_ADC1_Init+0x98>)
 8000990:	2201      	movs	r2, #1
 8000992:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000994:	480d      	ldr	r0, [pc, #52]	; (80009cc <MX_ADC1_Init+0x98>)
 8000996:	f000 fc05 	bl	80011a4 <HAL_ADC_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009a0:	f000 f902 	bl	8000ba8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009a8:	2301      	movs	r3, #1
 80009aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b0:	463b      	mov	r3, r7
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_ADC1_Init+0x98>)
 80009b6:	f000 fc39 	bl	800122c <HAL_ADC_ConfigChannel>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009c0:	f000 f8f2 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000154 	.word	0x20000154
 80009d0:	40012000 	.word	0x40012000
 80009d4:	0f000001 	.word	0x0f000001

080009d8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80009dc:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <MX_SDIO_SD_Init+0x3c>)
 80009de:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <MX_SDIO_SD_Init+0x40>)
 80009e0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_SDIO_SD_Init+0x3c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <MX_SDIO_SD_Init+0x3c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_SDIO_SD_Init+0x3c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <MX_SDIO_SD_Init+0x3c>)
 80009f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009fa:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <MX_SDIO_SD_Init+0x3c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 18;
 8000a02:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <MX_SDIO_SD_Init+0x3c>)
 8000a04:	2212      	movs	r2, #18
 8000a06:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	200001fc 	.word	0x200001fc
 8000a18:	40012c00 	.word	0x40012c00

08000a1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <MX_USART2_UART_Init+0x50>)
 8000a24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a54:	f003 ff41 	bl	80048da <HAL_UART_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a5e:	f000 f8a3 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000280 	.word	0x20000280
 8000a6c:	40004400 	.word	0x40004400

08000a70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_DMA_Init+0x3c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a0b      	ldr	r2, [pc, #44]	; (8000aac <MX_DMA_Init+0x3c>)
 8000a80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_DMA_Init+0x3c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	2038      	movs	r0, #56	; 0x38
 8000a98:	f000 fed1 	bl	800183e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a9c:	2038      	movs	r0, #56	; 0x38
 8000a9e:	f000 feea 	bl	8001876 <HAL_NVIC_EnableIRQ>

}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800

08000ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	4b34      	ldr	r3, [pc, #208]	; (8000b9c <MX_GPIO_Init+0xec>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a33      	ldr	r2, [pc, #204]	; (8000b9c <MX_GPIO_Init+0xec>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b31      	ldr	r3, [pc, #196]	; (8000b9c <MX_GPIO_Init+0xec>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0304 	and.w	r3, r3, #4
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <MX_GPIO_Init+0xec>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a2c      	ldr	r2, [pc, #176]	; (8000b9c <MX_GPIO_Init+0xec>)
 8000aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <MX_GPIO_Init+0xec>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <MX_GPIO_Init+0xec>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a25      	ldr	r2, [pc, #148]	; (8000b9c <MX_GPIO_Init+0xec>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <MX_GPIO_Init+0xec>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <MX_GPIO_Init+0xec>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a1e      	ldr	r2, [pc, #120]	; (8000b9c <MX_GPIO_Init+0xec>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <MX_GPIO_Init+0xec>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	603b      	str	r3, [r7, #0]
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <MX_GPIO_Init+0xec>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <MX_GPIO_Init+0xec>)
 8000b40:	f043 0308 	orr.w	r3, r3, #8
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <MX_GPIO_Init+0xec>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0308 	and.w	r3, r3, #8
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2120      	movs	r1, #32
 8000b56:	4812      	ldr	r0, [pc, #72]	; (8000ba0 <MX_GPIO_Init+0xf0>)
 8000b58:	f001 fbb8 	bl	80022cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b62:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <MX_GPIO_Init+0xf4>)
 8000b74:	f001 fa16 	bl	8001fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b78:	2320      	movs	r3, #32
 8000b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_GPIO_Init+0xf0>)
 8000b90:	f001 fa08 	bl	8001fa4 <HAL_GPIO_Init>

}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	; 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000
 8000ba4:	40020800 	.word	0x40020800

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bac:	b672      	cpsid	i
}
 8000bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <Error_Handler+0x8>
	...

08000bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	4a0f      	ldr	r2, [pc, #60]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <HAL_MspInit+0x4c>)
 8000be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be4:	6413      	str	r3, [r2, #64]	; 0x40
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_MspInit+0x4c>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bf2:	2007      	movs	r0, #7
 8000bf4:	f000 fe18 	bl	8001828 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40023800 	.word	0x40023800

08000c04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a3c      	ldr	r2, [pc, #240]	; (8000d14 <HAL_ADC_MspInit+0x110>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d171      	bne.n	8000d0a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b3b      	ldr	r3, [pc, #236]	; (8000d18 <HAL_ADC_MspInit+0x114>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	4a3a      	ldr	r2, [pc, #232]	; (8000d18 <HAL_ADC_MspInit+0x114>)
 8000c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c34:	6453      	str	r3, [r2, #68]	; 0x44
 8000c36:	4b38      	ldr	r3, [pc, #224]	; (8000d18 <HAL_ADC_MspInit+0x114>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b34      	ldr	r3, [pc, #208]	; (8000d18 <HAL_ADC_MspInit+0x114>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a33      	ldr	r2, [pc, #204]	; (8000d18 <HAL_ADC_MspInit+0x114>)
 8000c4c:	f043 0304 	orr.w	r3, r3, #4
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b31      	ldr	r3, [pc, #196]	; (8000d18 <HAL_ADC_MspInit+0x114>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0304 	and.w	r3, r3, #4
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	4b2d      	ldr	r3, [pc, #180]	; (8000d18 <HAL_ADC_MspInit+0x114>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a2c      	ldr	r2, [pc, #176]	; (8000d18 <HAL_ADC_MspInit+0x114>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b2a      	ldr	r3, [pc, #168]	; (8000d18 <HAL_ADC_MspInit+0x114>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c7a:	230c      	movs	r3, #12
 8000c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4823      	ldr	r0, [pc, #140]	; (8000d1c <HAL_ADC_MspInit+0x118>)
 8000c8e:	f001 f989 	bl	8001fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000c92:	2313      	movs	r3, #19
 8000c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c96:	2303      	movs	r3, #3
 8000c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	481e      	ldr	r0, [pc, #120]	; (8000d20 <HAL_ADC_MspInit+0x11c>)
 8000ca6:	f001 f97d 	bl	8001fa4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000caa:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <HAL_ADC_MspInit+0x120>)
 8000cac:	4a1e      	ldr	r2, [pc, #120]	; (8000d28 <HAL_ADC_MspInit+0x124>)
 8000cae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000cb0:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <HAL_ADC_MspInit+0x120>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cb6:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <HAL_ADC_MspInit+0x120>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cbc:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <HAL_ADC_MspInit+0x120>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <HAL_ADC_MspInit+0x120>)
 8000cc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cc8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cca:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <HAL_ADC_MspInit+0x120>)
 8000ccc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cd0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <HAL_ADC_MspInit+0x120>)
 8000cd4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cd8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_ADC_MspInit+0x120>)
 8000cdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ce0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <HAL_ADC_MspInit+0x120>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_ADC_MspInit+0x120>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cee:	480d      	ldr	r0, [pc, #52]	; (8000d24 <HAL_ADC_MspInit+0x120>)
 8000cf0:	f000 fddc 	bl	80018ac <HAL_DMA_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000cfa:	f7ff ff55 	bl	8000ba8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <HAL_ADC_MspInit+0x120>)
 8000d02:	639a      	str	r2, [r3, #56]	; 0x38
 8000d04:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <HAL_ADC_MspInit+0x120>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d0a:	bf00      	nop
 8000d0c:	3728      	adds	r7, #40	; 0x28
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40012000 	.word	0x40012000
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020800 	.word	0x40020800
 8000d20:	40020000 	.word	0x40020000
 8000d24:	2000019c 	.word	0x2000019c
 8000d28:	40026410 	.word	0x40026410

08000d2c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b0a2      	sub	sp, #136	; 0x88
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d44:	f107 0318 	add.w	r3, r7, #24
 8000d48:	225c      	movs	r2, #92	; 0x5c
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f007 fd6f 	bl	8008830 <memset>
  if(hsd->Instance==SDIO)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a43      	ldr	r2, [pc, #268]	; (8000e64 <HAL_SD_MspInit+0x138>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d17f      	bne.n	8000e5c <HAL_SD_MspInit+0x130>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8000d5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d60:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000d62:	2300      	movs	r3, #0
 8000d64:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000d66:	2300      	movs	r3, #0
 8000d68:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6a:	f107 0318 	add.w	r3, r7, #24
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 fc30 	bl	80025d4 <HAL_RCCEx_PeriphCLKConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8000d7a:	f7ff ff15 	bl	8000ba8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	4b39      	ldr	r3, [pc, #228]	; (8000e68 <HAL_SD_MspInit+0x13c>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	4a38      	ldr	r2, [pc, #224]	; (8000e68 <HAL_SD_MspInit+0x13c>)
 8000d88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8e:	4b36      	ldr	r3, [pc, #216]	; (8000e68 <HAL_SD_MspInit+0x13c>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b32      	ldr	r3, [pc, #200]	; (8000e68 <HAL_SD_MspInit+0x13c>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a31      	ldr	r2, [pc, #196]	; (8000e68 <HAL_SD_MspInit+0x13c>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b2f      	ldr	r3, [pc, #188]	; (8000e68 <HAL_SD_MspInit+0x13c>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <HAL_SD_MspInit+0x13c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a2a      	ldr	r2, [pc, #168]	; (8000e68 <HAL_SD_MspInit+0x13c>)
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <HAL_SD_MspInit+0x13c>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <HAL_SD_MspInit+0x13c>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a23      	ldr	r2, [pc, #140]	; (8000e68 <HAL_SD_MspInit+0x13c>)
 8000ddc:	f043 0308 	orr.w	r3, r3, #8
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <HAL_SD_MspInit+0x13c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0308 	and.w	r3, r3, #8
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PC11     ------> SDIO_D3
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000dee:	2307      	movs	r3, #7
 8000df0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e00:	230c      	movs	r3, #12
 8000e02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4817      	ldr	r0, [pc, #92]	; (8000e6c <HAL_SD_MspInit+0x140>)
 8000e0e:	f001 f8c9 	bl	8001fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8000e12:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000e16:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e26:	230c      	movs	r3, #12
 8000e28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e30:	4619      	mov	r1, r3
 8000e32:	480f      	ldr	r0, [pc, #60]	; (8000e70 <HAL_SD_MspInit+0x144>)
 8000e34:	f001 f8b6 	bl	8001fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e4a:	230c      	movs	r3, #12
 8000e4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e50:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e54:	4619      	mov	r1, r3
 8000e56:	4807      	ldr	r0, [pc, #28]	; (8000e74 <HAL_SD_MspInit+0x148>)
 8000e58:	f001 f8a4 	bl	8001fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000e5c:	bf00      	nop
 8000e5e:	3788      	adds	r7, #136	; 0x88
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40012c00 	.word	0x40012c00
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020400 	.word	0x40020400
 8000e70:	40020800 	.word	0x40020800
 8000e74:	40020c00 	.word	0x40020c00

08000e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a1d      	ldr	r2, [pc, #116]	; (8000f0c <HAL_UART_MspInit+0x94>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d133      	bne.n	8000f02 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <HAL_UART_MspInit+0x98>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a1b      	ldr	r2, [pc, #108]	; (8000f10 <HAL_UART_MspInit+0x98>)
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_UART_MspInit+0x98>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_UART_MspInit+0x98>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <HAL_UART_MspInit+0x98>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_UART_MspInit+0x98>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ed2:	230c      	movs	r3, #12
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ee2:	2307      	movs	r3, #7
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	4809      	ldr	r0, [pc, #36]	; (8000f14 <HAL_UART_MspInit+0x9c>)
 8000eee:	f001 f859 	bl	8001fa4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2026      	movs	r0, #38	; 0x26
 8000ef8:	f000 fca1 	bl	800183e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000efc:	2026      	movs	r0, #38	; 0x26
 8000efe:	f000 fcba 	bl	8001876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	3728      	adds	r7, #40	; 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40004400 	.word	0x40004400
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020000 	.word	0x40020000

08000f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <NMI_Handler+0x4>

08000f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <HardFault_Handler+0x4>

08000f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <MemManage_Handler+0x4>

08000f2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <BusFault_Handler+0x4>

08000f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <UsageFault_Handler+0x4>

08000f36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f64:	f000 f8da 	bl	800111c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <USART2_IRQHandler+0x10>)
 8000f72:	f003 fcff 	bl	8004974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000280 	.word	0x20000280

08000f80 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <DMA2_Stream0_IRQHandler+0x10>)
 8000f86:	f000 fdd1 	bl	8001b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	2000019c 	.word	0x2000019c

08000f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f9c:	4a14      	ldr	r2, [pc, #80]	; (8000ff0 <_sbrk+0x5c>)
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <_sbrk+0x60>)
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa8:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <_sbrk+0x64>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d102      	bne.n	8000fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <_sbrk+0x64>)
 8000fb2:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <_sbrk+0x68>)
 8000fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d207      	bcs.n	8000fd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc4:	f007 fc0a 	bl	80087dc <__errno>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	220c      	movs	r2, #12
 8000fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd2:	e009      	b.n	8000fe8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <_sbrk+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fda:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <_sbrk+0x64>)
 8000fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20020000 	.word	0x20020000
 8000ff4:	00000400 	.word	0x00000400
 8000ff8:	200002c4 	.word	0x200002c4
 8000ffc:	20000318 	.word	0x20000318

08001000 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <SystemInit+0x20>)
 8001006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <SystemInit+0x20>)
 800100c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800105c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001028:	480d      	ldr	r0, [pc, #52]	; (8001060 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800102a:	490e      	ldr	r1, [pc, #56]	; (8001064 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800102c:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001040:	4c0b      	ldr	r4, [pc, #44]	; (8001070 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800104e:	f7ff ffd7 	bl	8001000 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001052:	f007 fbc9 	bl	80087e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001056:	f7ff fb1f 	bl	8000698 <main>
  bx  lr    
 800105a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800105c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001064:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001068:	08009388 	.word	0x08009388
  ldr r2, =_sbss
 800106c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001070:	20000318 	.word	0x20000318

08001074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC_IRQHandler>
	...

08001078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <HAL_Init+0x40>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <HAL_Init+0x40>)
 8001082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001086:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <HAL_Init+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <HAL_Init+0x40>)
 800108e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001092:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <HAL_Init+0x40>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <HAL_Init+0x40>)
 800109a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a0:	2003      	movs	r0, #3
 80010a2:	f000 fbc1 	bl	8001828 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f000 f808 	bl	80010bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ac:	f7ff fd82 	bl	8000bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023c00 	.word	0x40023c00

080010bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_InitTick+0x54>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_InitTick+0x58>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 fbd9 	bl	8001892 <HAL_SYSTICK_Config>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00e      	b.n	8001108 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d80a      	bhi.n	8001106 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f0:	2200      	movs	r2, #0
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f000 fba1 	bl	800183e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010fc:	4a06      	ldr	r2, [pc, #24]	; (8001118 <HAL_InitTick+0x5c>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	e000      	b.n	8001108 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000000 	.word	0x20000000
 8001114:	20000008 	.word	0x20000008
 8001118:	20000004 	.word	0x20000004

0800111c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_IncTick+0x20>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_IncTick+0x24>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4413      	add	r3, r2
 800112c:	4a04      	ldr	r2, [pc, #16]	; (8001140 <HAL_IncTick+0x24>)
 800112e:	6013      	str	r3, [r2, #0]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000008 	.word	0x20000008
 8001140:	200002c8 	.word	0x200002c8

08001144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return uwTick;
 8001148:	4b03      	ldr	r3, [pc, #12]	; (8001158 <HAL_GetTick+0x14>)
 800114a:	681b      	ldr	r3, [r3, #0]
}
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	200002c8 	.word	0x200002c8

0800115c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001164:	f7ff ffee 	bl	8001144 <HAL_GetTick>
 8001168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001174:	d005      	beq.n	8001182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <HAL_Delay+0x44>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4413      	add	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001182:	bf00      	nop
 8001184:	f7ff ffde 	bl	8001144 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	429a      	cmp	r2, r3
 8001192:	d8f7      	bhi.n	8001184 <HAL_Delay+0x28>
  {
  }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000008 	.word	0x20000008

080011a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e033      	b.n	8001222 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d109      	bne.n	80011d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff fd1e 	bl	8000c04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f003 0310 	and.w	r3, r3, #16
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d118      	bne.n	8001214 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011ea:	f023 0302 	bic.w	r3, r3, #2
 80011ee:	f043 0202 	orr.w	r2, r3, #2
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 f94a 	bl	8001490 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f023 0303 	bic.w	r3, r3, #3
 800120a:	f043 0201 	orr.w	r2, r3, #1
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	641a      	str	r2, [r3, #64]	; 0x40
 8001212:	e001      	b.n	8001218 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001240:	2b01      	cmp	r3, #1
 8001242:	d101      	bne.n	8001248 <HAL_ADC_ConfigChannel+0x1c>
 8001244:	2302      	movs	r3, #2
 8001246:	e113      	b.n	8001470 <HAL_ADC_ConfigChannel+0x244>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2201      	movs	r2, #1
 800124c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b09      	cmp	r3, #9
 8001256:	d925      	bls.n	80012a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68d9      	ldr	r1, [r3, #12]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	b29b      	uxth	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	4613      	mov	r3, r2
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4413      	add	r3, r2
 800126c:	3b1e      	subs	r3, #30
 800126e:	2207      	movs	r2, #7
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43da      	mvns	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	400a      	ands	r2, r1
 800127c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68d9      	ldr	r1, [r3, #12]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	b29b      	uxth	r3, r3
 800128e:	4618      	mov	r0, r3
 8001290:	4603      	mov	r3, r0
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	4403      	add	r3, r0
 8001296:	3b1e      	subs	r3, #30
 8001298:	409a      	lsls	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	e022      	b.n	80012ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6919      	ldr	r1, [r3, #16]
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	461a      	mov	r2, r3
 80012b2:	4613      	mov	r3, r2
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	4413      	add	r3, r2
 80012b8:	2207      	movs	r2, #7
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	400a      	ands	r2, r1
 80012c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6919      	ldr	r1, [r3, #16]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	4618      	mov	r0, r3
 80012da:	4603      	mov	r3, r0
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4403      	add	r3, r0
 80012e0:	409a      	lsls	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	430a      	orrs	r2, r1
 80012e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b06      	cmp	r3, #6
 80012f0:	d824      	bhi.n	800133c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	3b05      	subs	r3, #5
 8001304:	221f      	movs	r2, #31
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43da      	mvns	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	400a      	ands	r2, r1
 8001312:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	b29b      	uxth	r3, r3
 8001320:	4618      	mov	r0, r3
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	4613      	mov	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	3b05      	subs	r3, #5
 800132e:	fa00 f203 	lsl.w	r2, r0, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	635a      	str	r2, [r3, #52]	; 0x34
 800133a:	e04c      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b0c      	cmp	r3, #12
 8001342:	d824      	bhi.n	800138e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	3b23      	subs	r3, #35	; 0x23
 8001356:	221f      	movs	r2, #31
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43da      	mvns	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	400a      	ands	r2, r1
 8001364:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	b29b      	uxth	r3, r3
 8001372:	4618      	mov	r0, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	3b23      	subs	r3, #35	; 0x23
 8001380:	fa00 f203 	lsl.w	r2, r0, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	430a      	orrs	r2, r1
 800138a:	631a      	str	r2, [r3, #48]	; 0x30
 800138c:	e023      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	4613      	mov	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	3b41      	subs	r3, #65	; 0x41
 80013a0:	221f      	movs	r2, #31
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	400a      	ands	r2, r1
 80013ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	4618      	mov	r0, r3
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	3b41      	subs	r3, #65	; 0x41
 80013ca:	fa00 f203 	lsl.w	r2, r0, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013d6:	4b29      	ldr	r3, [pc, #164]	; (800147c <HAL_ADC_ConfigChannel+0x250>)
 80013d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a28      	ldr	r2, [pc, #160]	; (8001480 <HAL_ADC_ConfigChannel+0x254>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d10f      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x1d8>
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b12      	cmp	r3, #18
 80013ea:	d10b      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a1d      	ldr	r2, [pc, #116]	; (8001480 <HAL_ADC_ConfigChannel+0x254>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d12b      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x23a>
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a1c      	ldr	r2, [pc, #112]	; (8001484 <HAL_ADC_ConfigChannel+0x258>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d003      	beq.n	8001420 <HAL_ADC_ConfigChannel+0x1f4>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b11      	cmp	r3, #17
 800141e:	d122      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a11      	ldr	r2, [pc, #68]	; (8001484 <HAL_ADC_ConfigChannel+0x258>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d111      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <HAL_ADC_ConfigChannel+0x25c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a11      	ldr	r2, [pc, #68]	; (800148c <HAL_ADC_ConfigChannel+0x260>)
 8001448:	fba2 2303 	umull	r2, r3, r2, r3
 800144c:	0c9a      	lsrs	r2, r3, #18
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001458:	e002      	b.n	8001460 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	3b01      	subs	r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f9      	bne.n	800145a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	40012300 	.word	0x40012300
 8001480:	40012000 	.word	0x40012000
 8001484:	10000012 	.word	0x10000012
 8001488:	20000000 	.word	0x20000000
 800148c:	431bde83 	.word	0x431bde83

08001490 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001498:	4b79      	ldr	r3, [pc, #484]	; (8001680 <ADC_Init+0x1f0>)
 800149a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	431a      	orrs	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6859      	ldr	r1, [r3, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	021a      	lsls	r2, r3, #8
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6859      	ldr	r1, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800150a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6899      	ldr	r1, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68da      	ldr	r2, [r3, #12]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001522:	4a58      	ldr	r2, [pc, #352]	; (8001684 <ADC_Init+0x1f4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d022      	beq.n	800156e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001536:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6899      	ldr	r1, [r3, #8]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001558:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6899      	ldr	r1, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	e00f      	b.n	800158e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800157c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800158c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 0202 	bic.w	r2, r2, #2
 800159c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6899      	ldr	r1, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	7e1b      	ldrb	r3, [r3, #24]
 80015a8:	005a      	lsls	r2, r3, #1
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d01b      	beq.n	80015f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6859      	ldr	r1, [r3, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	3b01      	subs	r3, #1
 80015e8:	035a      	lsls	r2, r3, #13
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	e007      	b.n	8001604 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001602:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001612:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	3b01      	subs	r3, #1
 8001620:	051a      	lsls	r2, r3, #20
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001638:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6899      	ldr	r1, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001646:	025a      	lsls	r2, r3, #9
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800165e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6899      	ldr	r1, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	029a      	lsls	r2, r3, #10
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	609a      	str	r2, [r3, #8]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	40012300 	.word	0x40012300
 8001684:	0f000001 	.word	0x0f000001

08001688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a4:	4013      	ands	r3, r2
 80016a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	60d3      	str	r3, [r2, #12]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <__NVIC_GetPriorityGrouping+0x18>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	f003 0307 	and.w	r3, r3, #7
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	db0b      	blt.n	8001716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	f003 021f 	and.w	r2, r3, #31
 8001704:	4907      	ldr	r1, [pc, #28]	; (8001724 <__NVIC_EnableIRQ+0x38>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	2001      	movs	r0, #1
 800170e:	fa00 f202 	lsl.w	r2, r0, r2
 8001712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000e100 	.word	0xe000e100

08001728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	2b00      	cmp	r3, #0
 800173a:	db0a      	blt.n	8001752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	490c      	ldr	r1, [pc, #48]	; (8001774 <__NVIC_SetPriority+0x4c>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	0112      	lsls	r2, r2, #4
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	440b      	add	r3, r1
 800174c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001750:	e00a      	b.n	8001768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4908      	ldr	r1, [pc, #32]	; (8001778 <__NVIC_SetPriority+0x50>)
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	3b04      	subs	r3, #4
 8001760:	0112      	lsls	r2, r2, #4
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	440b      	add	r3, r1
 8001766:	761a      	strb	r2, [r3, #24]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000e100 	.word	0xe000e100
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177c:	b480      	push	{r7}
 800177e:	b089      	sub	sp, #36	; 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f1c3 0307 	rsb	r3, r3, #7
 8001796:	2b04      	cmp	r3, #4
 8001798:	bf28      	it	cs
 800179a:	2304      	movcs	r3, #4
 800179c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3304      	adds	r3, #4
 80017a2:	2b06      	cmp	r3, #6
 80017a4:	d902      	bls.n	80017ac <NVIC_EncodePriority+0x30>
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3b03      	subs	r3, #3
 80017aa:	e000      	b.n	80017ae <NVIC_EncodePriority+0x32>
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	f04f 32ff 	mov.w	r2, #4294967295
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43da      	mvns	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	401a      	ands	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c4:	f04f 31ff 	mov.w	r1, #4294967295
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	43d9      	mvns	r1, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	4313      	orrs	r3, r2
         );
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3724      	adds	r7, #36	; 0x24
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f4:	d301      	bcc.n	80017fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017f6:	2301      	movs	r3, #1
 80017f8:	e00f      	b.n	800181a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <SysTick_Config+0x40>)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001802:	210f      	movs	r1, #15
 8001804:	f04f 30ff 	mov.w	r0, #4294967295
 8001808:	f7ff ff8e 	bl	8001728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <SysTick_Config+0x40>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001812:	4b04      	ldr	r3, [pc, #16]	; (8001824 <SysTick_Config+0x40>)
 8001814:	2207      	movs	r2, #7
 8001816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	e000e010 	.word	0xe000e010

08001828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff ff29 	bl	8001688 <__NVIC_SetPriorityGrouping>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800183e:	b580      	push	{r7, lr}
 8001840:	b086      	sub	sp, #24
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
 800184a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001850:	f7ff ff3e 	bl	80016d0 <__NVIC_GetPriorityGrouping>
 8001854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	6978      	ldr	r0, [r7, #20]
 800185c:	f7ff ff8e 	bl	800177c <NVIC_EncodePriority>
 8001860:	4602      	mov	r2, r0
 8001862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff5d 	bl	8001728 <__NVIC_SetPriority>
}
 800186e:	bf00      	nop
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff31 	bl	80016ec <__NVIC_EnableIRQ>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ffa2 	bl	80017e4 <SysTick_Config>
 80018a0:	4603      	mov	r3, r0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018b8:	f7ff fc44 	bl	8001144 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e099      	b.n	80019fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2202      	movs	r2, #2
 80018cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0201 	bic.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018e8:	e00f      	b.n	800190a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018ea:	f7ff fc2b 	bl	8001144 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b05      	cmp	r3, #5
 80018f6:	d908      	bls.n	800190a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2220      	movs	r2, #32
 80018fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2203      	movs	r2, #3
 8001902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e078      	b.n	80019fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1e8      	bne.n	80018ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <HAL_DMA_Init+0x158>)
 8001924:	4013      	ands	r3, r2
 8001926:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001936:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001942:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800194e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	4313      	orrs	r3, r2
 800195a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	2b04      	cmp	r3, #4
 8001962:	d107      	bne.n	8001974 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	4313      	orrs	r3, r2
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	4313      	orrs	r3, r2
 8001972:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f023 0307 	bic.w	r3, r3, #7
 800198a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	4313      	orrs	r3, r2
 8001994:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	2b04      	cmp	r3, #4
 800199c:	d117      	bne.n	80019ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00e      	beq.n	80019ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 fa7b 	bl	8001eac <DMA_CheckFifoParam>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2240      	movs	r2, #64	; 0x40
 80019c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019ca:	2301      	movs	r3, #1
 80019cc:	e016      	b.n	80019fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 fa32 	bl	8001e40 <DMA_CalcBaseAndBitshift>
 80019dc:	4603      	mov	r3, r0
 80019de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e4:	223f      	movs	r2, #63	; 0x3f
 80019e6:	409a      	lsls	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	f010803f 	.word	0xf010803f

08001a08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a16:	f7ff fb95 	bl	8001144 <HAL_GetTick>
 8001a1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d008      	beq.n	8001a3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2280      	movs	r2, #128	; 0x80
 8001a2c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e052      	b.n	8001ae0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0216 	bic.w	r2, r2, #22
 8001a48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	695a      	ldr	r2, [r3, #20]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d103      	bne.n	8001a6a <HAL_DMA_Abort+0x62>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d007      	beq.n	8001a7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0208 	bic.w	r2, r2, #8
 8001a78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0201 	bic.w	r2, r2, #1
 8001a88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a8a:	e013      	b.n	8001ab4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a8c:	f7ff fb5a 	bl	8001144 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b05      	cmp	r3, #5
 8001a98:	d90c      	bls.n	8001ab4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2220      	movs	r2, #32
 8001a9e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e015      	b.n	8001ae0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1e4      	bne.n	8001a8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac6:	223f      	movs	r2, #63	; 0x3f
 8001ac8:	409a      	lsls	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d004      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2280      	movs	r2, #128	; 0x80
 8001b00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00c      	b.n	8001b20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2205      	movs	r2, #5
 8001b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0201 	bic.w	r2, r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b38:	4b8e      	ldr	r3, [pc, #568]	; (8001d74 <HAL_DMA_IRQHandler+0x248>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a8e      	ldr	r2, [pc, #568]	; (8001d78 <HAL_DMA_IRQHandler+0x24c>)
 8001b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b42:	0a9b      	lsrs	r3, r3, #10
 8001b44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b56:	2208      	movs	r2, #8
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01a      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d013      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0204 	bic.w	r2, r2, #4
 8001b7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b84:	2208      	movs	r2, #8
 8001b86:	409a      	lsls	r2, r3
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b90:	f043 0201 	orr.w	r2, r3, #1
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d012      	beq.n	8001bce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00b      	beq.n	8001bce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bba:	2201      	movs	r2, #1
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc6:	f043 0202 	orr.w	r2, r3, #2
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d012      	beq.n	8001c04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00b      	beq.n	8001c04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf0:	2204      	movs	r2, #4
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfc:	f043 0204 	orr.w	r2, r3, #4
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c08:	2210      	movs	r2, #16
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d043      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d03c      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c26:	2210      	movs	r2, #16
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d018      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d108      	bne.n	8001c5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d024      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	4798      	blx	r3
 8001c5a:	e01f      	b.n	8001c9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d01b      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	4798      	blx	r3
 8001c6c:	e016      	b.n	8001c9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d107      	bne.n	8001c8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0208 	bic.w	r2, r2, #8
 8001c8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 808f 	beq.w	8001dcc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0310 	and.w	r3, r3, #16
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 8087 	beq.w	8001dcc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b05      	cmp	r3, #5
 8001cd4:	d136      	bne.n	8001d44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0216 	bic.w	r2, r2, #22
 8001ce4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cf4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d103      	bne.n	8001d06 <HAL_DMA_IRQHandler+0x1da>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d007      	beq.n	8001d16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0208 	bic.w	r2, r2, #8
 8001d14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1a:	223f      	movs	r2, #63	; 0x3f
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d07e      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	4798      	blx	r3
        }
        return;
 8001d42:	e079      	b.n	8001e38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d01d      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10d      	bne.n	8001d7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d031      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	4798      	blx	r3
 8001d70:	e02c      	b.n	8001dcc <HAL_DMA_IRQHandler+0x2a0>
 8001d72:	bf00      	nop
 8001d74:	20000000 	.word	0x20000000
 8001d78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d023      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	4798      	blx	r3
 8001d8c:	e01e      	b.n	8001dcc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10f      	bne.n	8001dbc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0210 	bic.w	r2, r2, #16
 8001daa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d032      	beq.n	8001e3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d022      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2205      	movs	r2, #5
 8001de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0201 	bic.w	r2, r2, #1
 8001df6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d307      	bcc.n	8001e14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f2      	bne.n	8001df8 <HAL_DMA_IRQHandler+0x2cc>
 8001e12:	e000      	b.n	8001e16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d005      	beq.n	8001e3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	4798      	blx	r3
 8001e36:	e000      	b.n	8001e3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e38:	bf00      	nop
    }
  }
}
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	3b10      	subs	r3, #16
 8001e50:	4a14      	ldr	r2, [pc, #80]	; (8001ea4 <DMA_CalcBaseAndBitshift+0x64>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	091b      	lsrs	r3, r3, #4
 8001e58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e5a:	4a13      	ldr	r2, [pc, #76]	; (8001ea8 <DMA_CalcBaseAndBitshift+0x68>)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4413      	add	r3, r2
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d909      	bls.n	8001e82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e76:	f023 0303 	bic.w	r3, r3, #3
 8001e7a:	1d1a      	adds	r2, r3, #4
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	659a      	str	r2, [r3, #88]	; 0x58
 8001e80:	e007      	b.n	8001e92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e8a:	f023 0303 	bic.w	r3, r3, #3
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	aaaaaaab 	.word	0xaaaaaaab
 8001ea8:	080092a8 	.word	0x080092a8

08001eac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d11f      	bne.n	8001f06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	2b03      	cmp	r3, #3
 8001eca:	d856      	bhi.n	8001f7a <DMA_CheckFifoParam+0xce>
 8001ecc:	a201      	add	r2, pc, #4	; (adr r2, 8001ed4 <DMA_CheckFifoParam+0x28>)
 8001ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed2:	bf00      	nop
 8001ed4:	08001ee5 	.word	0x08001ee5
 8001ed8:	08001ef7 	.word	0x08001ef7
 8001edc:	08001ee5 	.word	0x08001ee5
 8001ee0:	08001f7b 	.word	0x08001f7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d046      	beq.n	8001f7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ef4:	e043      	b.n	8001f7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001efe:	d140      	bne.n	8001f82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f04:	e03d      	b.n	8001f82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f0e:	d121      	bne.n	8001f54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d837      	bhi.n	8001f86 <DMA_CheckFifoParam+0xda>
 8001f16:	a201      	add	r2, pc, #4	; (adr r2, 8001f1c <DMA_CheckFifoParam+0x70>)
 8001f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1c:	08001f2d 	.word	0x08001f2d
 8001f20:	08001f33 	.word	0x08001f33
 8001f24:	08001f2d 	.word	0x08001f2d
 8001f28:	08001f45 	.word	0x08001f45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f30:	e030      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d025      	beq.n	8001f8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f42:	e022      	b.n	8001f8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f4c:	d11f      	bne.n	8001f8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f52:	e01c      	b.n	8001f8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d903      	bls.n	8001f62 <DMA_CheckFifoParam+0xb6>
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d003      	beq.n	8001f68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f60:	e018      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	73fb      	strb	r3, [r7, #15]
      break;
 8001f66:	e015      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00e      	beq.n	8001f92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
      break;
 8001f78:	e00b      	b.n	8001f92 <DMA_CheckFifoParam+0xe6>
      break;
 8001f7a:	bf00      	nop
 8001f7c:	e00a      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
      break;
 8001f7e:	bf00      	nop
 8001f80:	e008      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
      break;
 8001f82:	bf00      	nop
 8001f84:	e006      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
      break;
 8001f86:	bf00      	nop
 8001f88:	e004      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
      break;
 8001f8a:	bf00      	nop
 8001f8c:	e002      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f8e:	bf00      	nop
 8001f90:	e000      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
      break;
 8001f92:	bf00      	nop
    }
  } 
  
  return status; 
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop

08001fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b089      	sub	sp, #36	; 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
 8001fbe:	e165      	b.n	800228c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	f040 8154 	bne.w	8002286 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d005      	beq.n	8001ff6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d130      	bne.n	8002058 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	2203      	movs	r2, #3
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800202c:	2201      	movs	r2, #1
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 0201 	and.w	r2, r3, #1
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	2b03      	cmp	r3, #3
 8002062:	d017      	beq.n	8002094 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	2203      	movs	r2, #3
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d123      	bne.n	80020e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	08da      	lsrs	r2, r3, #3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3208      	adds	r2, #8
 80020a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	220f      	movs	r2, #15
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	08da      	lsrs	r2, r3, #3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3208      	adds	r2, #8
 80020e2:	69b9      	ldr	r1, [r7, #24]
 80020e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0203 	and.w	r2, r3, #3
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80ae 	beq.w	8002286 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	4b5d      	ldr	r3, [pc, #372]	; (80022a4 <HAL_GPIO_Init+0x300>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	4a5c      	ldr	r2, [pc, #368]	; (80022a4 <HAL_GPIO_Init+0x300>)
 8002134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002138:	6453      	str	r3, [r2, #68]	; 0x44
 800213a:	4b5a      	ldr	r3, [pc, #360]	; (80022a4 <HAL_GPIO_Init+0x300>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002146:	4a58      	ldr	r2, [pc, #352]	; (80022a8 <HAL_GPIO_Init+0x304>)
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	089b      	lsrs	r3, r3, #2
 800214c:	3302      	adds	r3, #2
 800214e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	220f      	movs	r2, #15
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a4f      	ldr	r2, [pc, #316]	; (80022ac <HAL_GPIO_Init+0x308>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d025      	beq.n	80021be <HAL_GPIO_Init+0x21a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a4e      	ldr	r2, [pc, #312]	; (80022b0 <HAL_GPIO_Init+0x30c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01f      	beq.n	80021ba <HAL_GPIO_Init+0x216>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a4d      	ldr	r2, [pc, #308]	; (80022b4 <HAL_GPIO_Init+0x310>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d019      	beq.n	80021b6 <HAL_GPIO_Init+0x212>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a4c      	ldr	r2, [pc, #304]	; (80022b8 <HAL_GPIO_Init+0x314>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_GPIO_Init+0x20e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4b      	ldr	r2, [pc, #300]	; (80022bc <HAL_GPIO_Init+0x318>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00d      	beq.n	80021ae <HAL_GPIO_Init+0x20a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4a      	ldr	r2, [pc, #296]	; (80022c0 <HAL_GPIO_Init+0x31c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d007      	beq.n	80021aa <HAL_GPIO_Init+0x206>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a49      	ldr	r2, [pc, #292]	; (80022c4 <HAL_GPIO_Init+0x320>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d101      	bne.n	80021a6 <HAL_GPIO_Init+0x202>
 80021a2:	2306      	movs	r3, #6
 80021a4:	e00c      	b.n	80021c0 <HAL_GPIO_Init+0x21c>
 80021a6:	2307      	movs	r3, #7
 80021a8:	e00a      	b.n	80021c0 <HAL_GPIO_Init+0x21c>
 80021aa:	2305      	movs	r3, #5
 80021ac:	e008      	b.n	80021c0 <HAL_GPIO_Init+0x21c>
 80021ae:	2304      	movs	r3, #4
 80021b0:	e006      	b.n	80021c0 <HAL_GPIO_Init+0x21c>
 80021b2:	2303      	movs	r3, #3
 80021b4:	e004      	b.n	80021c0 <HAL_GPIO_Init+0x21c>
 80021b6:	2302      	movs	r3, #2
 80021b8:	e002      	b.n	80021c0 <HAL_GPIO_Init+0x21c>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <HAL_GPIO_Init+0x21c>
 80021be:	2300      	movs	r3, #0
 80021c0:	69fa      	ldr	r2, [r7, #28]
 80021c2:	f002 0203 	and.w	r2, r2, #3
 80021c6:	0092      	lsls	r2, r2, #2
 80021c8:	4093      	lsls	r3, r2
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d0:	4935      	ldr	r1, [pc, #212]	; (80022a8 <HAL_GPIO_Init+0x304>)
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	089b      	lsrs	r3, r3, #2
 80021d6:	3302      	adds	r3, #2
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021de:	4b3a      	ldr	r3, [pc, #232]	; (80022c8 <HAL_GPIO_Init+0x324>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002202:	4a31      	ldr	r2, [pc, #196]	; (80022c8 <HAL_GPIO_Init+0x324>)
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002208:	4b2f      	ldr	r3, [pc, #188]	; (80022c8 <HAL_GPIO_Init+0x324>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800222c:	4a26      	ldr	r2, [pc, #152]	; (80022c8 <HAL_GPIO_Init+0x324>)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002232:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <HAL_GPIO_Init+0x324>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002256:	4a1c      	ldr	r2, [pc, #112]	; (80022c8 <HAL_GPIO_Init+0x324>)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800225c:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <HAL_GPIO_Init+0x324>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002280:	4a11      	ldr	r2, [pc, #68]	; (80022c8 <HAL_GPIO_Init+0x324>)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3301      	adds	r3, #1
 800228a:	61fb      	str	r3, [r7, #28]
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	2b0f      	cmp	r3, #15
 8002290:	f67f ae96 	bls.w	8001fc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	3724      	adds	r7, #36	; 0x24
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40013800 	.word	0x40013800
 80022ac:	40020000 	.word	0x40020000
 80022b0:	40020400 	.word	0x40020400
 80022b4:	40020800 	.word	0x40020800
 80022b8:	40020c00 	.word	0x40020c00
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40021400 	.word	0x40021400
 80022c4:	40021800 	.word	0x40021800
 80022c8:	40013c00 	.word	0x40013c00

080022cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	807b      	strh	r3, [r7, #2]
 80022d8:	4613      	mov	r3, r2
 80022da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022dc:	787b      	ldrb	r3, [r7, #1]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022e2:	887a      	ldrh	r2, [r7, #2]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022e8:	e003      	b.n	80022f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022ea:	887b      	ldrh	r3, [r7, #2]
 80022ec:	041a      	lsls	r2, r3, #16
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	619a      	str	r2, [r3, #24]
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	603b      	str	r3, [r7, #0]
 800230e:	4b20      	ldr	r3, [pc, #128]	; (8002390 <HAL_PWREx_EnableOverDrive+0x90>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	4a1f      	ldr	r2, [pc, #124]	; (8002390 <HAL_PWREx_EnableOverDrive+0x90>)
 8002314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002318:	6413      	str	r3, [r2, #64]	; 0x40
 800231a:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <HAL_PWREx_EnableOverDrive+0x90>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002326:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <HAL_PWREx_EnableOverDrive+0x94>)
 8002328:	2201      	movs	r2, #1
 800232a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800232c:	f7fe ff0a 	bl	8001144 <HAL_GetTick>
 8002330:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002332:	e009      	b.n	8002348 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002334:	f7fe ff06 	bl	8001144 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002342:	d901      	bls.n	8002348 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e01f      	b.n	8002388 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002348:	4b13      	ldr	r3, [pc, #76]	; (8002398 <HAL_PWREx_EnableOverDrive+0x98>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002354:	d1ee      	bne.n	8002334 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002356:	4b11      	ldr	r3, [pc, #68]	; (800239c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002358:	2201      	movs	r2, #1
 800235a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800235c:	f7fe fef2 	bl	8001144 <HAL_GetTick>
 8002360:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002362:	e009      	b.n	8002378 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002364:	f7fe feee 	bl	8001144 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002372:	d901      	bls.n	8002378 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e007      	b.n	8002388 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002378:	4b07      	ldr	r3, [pc, #28]	; (8002398 <HAL_PWREx_EnableOverDrive+0x98>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002380:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002384:	d1ee      	bne.n	8002364 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40023800 	.word	0x40023800
 8002394:	420e0040 	.word	0x420e0040
 8002398:	40007000 	.word	0x40007000
 800239c:	420e0044 	.word	0x420e0044

080023a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0cc      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023b4:	4b68      	ldr	r3, [pc, #416]	; (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 030f 	and.w	r3, r3, #15
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d90c      	bls.n	80023dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c2:	4b65      	ldr	r3, [pc, #404]	; (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b63      	ldr	r3, [pc, #396]	; (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0b8      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d020      	beq.n	800242a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f4:	4b59      	ldr	r3, [pc, #356]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	4a58      	ldr	r2, [pc, #352]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800240c:	4b53      	ldr	r3, [pc, #332]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4a52      	ldr	r2, [pc, #328]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002416:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002418:	4b50      	ldr	r3, [pc, #320]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	494d      	ldr	r1, [pc, #308]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	4313      	orrs	r3, r2
 8002428:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d044      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d107      	bne.n	800244e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	4b47      	ldr	r3, [pc, #284]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d119      	bne.n	800247e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e07f      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d003      	beq.n	800245e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800245a:	2b03      	cmp	r3, #3
 800245c:	d107      	bne.n	800246e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245e:	4b3f      	ldr	r3, [pc, #252]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d109      	bne.n	800247e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e06f      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246e:	4b3b      	ldr	r3, [pc, #236]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e067      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800247e:	4b37      	ldr	r3, [pc, #220]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f023 0203 	bic.w	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	4934      	ldr	r1, [pc, #208]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 800248c:	4313      	orrs	r3, r2
 800248e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002490:	f7fe fe58 	bl	8001144 <HAL_GetTick>
 8002494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	e00a      	b.n	80024ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002498:	f7fe fe54 	bl	8001144 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e04f      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ae:	4b2b      	ldr	r3, [pc, #172]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 020c 	and.w	r2, r3, #12
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	429a      	cmp	r2, r3
 80024be:	d1eb      	bne.n	8002498 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024c0:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 030f 	and.w	r3, r3, #15
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d20c      	bcs.n	80024e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b22      	ldr	r3, [pc, #136]	; (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	4b20      	ldr	r3, [pc, #128]	; (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e032      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f4:	4b19      	ldr	r3, [pc, #100]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4916      	ldr	r1, [pc, #88]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	4313      	orrs	r3, r2
 8002504:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d009      	beq.n	8002526 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002512:	4b12      	ldr	r3, [pc, #72]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	490e      	ldr	r1, [pc, #56]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002526:	f000 fb7f 	bl	8002c28 <HAL_RCC_GetSysClockFreq>
 800252a:	4602      	mov	r2, r0
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	091b      	lsrs	r3, r3, #4
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	490a      	ldr	r1, [pc, #40]	; (8002560 <HAL_RCC_ClockConfig+0x1c0>)
 8002538:	5ccb      	ldrb	r3, [r1, r3]
 800253a:	fa22 f303 	lsr.w	r3, r2, r3
 800253e:	4a09      	ldr	r2, [pc, #36]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7fe fdb8 	bl	80010bc <HAL_InitTick>

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40023c00 	.word	0x40023c00
 800255c:	40023800 	.word	0x40023800
 8002560:	08009290 	.word	0x08009290
 8002564:	20000000 	.word	0x20000000
 8002568:	20000004 	.word	0x20000004

0800256c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002570:	4b03      	ldr	r3, [pc, #12]	; (8002580 <HAL_RCC_GetHCLKFreq+0x14>)
 8002572:	681b      	ldr	r3, [r3, #0]
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000000 	.word	0x20000000

08002584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002588:	f7ff fff0 	bl	800256c <HAL_RCC_GetHCLKFreq>
 800258c:	4602      	mov	r2, r0
 800258e:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	0a9b      	lsrs	r3, r3, #10
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	4903      	ldr	r1, [pc, #12]	; (80025a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800259a:	5ccb      	ldrb	r3, [r1, r3]
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40023800 	.word	0x40023800
 80025a8:	080092a0 	.word	0x080092a0

080025ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025b0:	f7ff ffdc 	bl	800256c <HAL_RCC_GetHCLKFreq>
 80025b4:	4602      	mov	r2, r0
 80025b6:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	0b5b      	lsrs	r3, r3, #13
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	4903      	ldr	r1, [pc, #12]	; (80025d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025c2:	5ccb      	ldrb	r3, [r1, r3]
 80025c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40023800 	.word	0x40023800
 80025d0:	080092a0 	.word	0x080092a0

080025d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08c      	sub	sp, #48	; 0x30
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b00      	cmp	r3, #0
 800260a:	d010      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800260c:	4b6f      	ldr	r3, [pc, #444]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800260e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002612:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261a:	496c      	ldr	r1, [pc, #432]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800262a:	2301      	movs	r3, #1
 800262c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d010      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800263a:	4b64      	ldr	r3, [pc, #400]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800263c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002640:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002648:	4960      	ldr	r1, [pc, #384]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002658:	2301      	movs	r3, #1
 800265a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d017      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002668:	4b58      	ldr	r3, [pc, #352]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800266a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800266e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	4955      	ldr	r1, [pc, #340]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002686:	d101      	bne.n	800268c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002688:	2301      	movs	r3, #1
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002694:	2301      	movs	r3, #1
 8002696:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d017      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026a4:	4b49      	ldr	r3, [pc, #292]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b2:	4946      	ldr	r1, [pc, #280]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026c2:	d101      	bne.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80026c4:	2301      	movs	r3, #1
 80026c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80026d0:	2301      	movs	r3, #1
 80026d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 808a 	beq.w	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	4b39      	ldr	r3, [pc, #228]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	4a38      	ldr	r2, [pc, #224]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f0:	6413      	str	r3, [r2, #64]	; 0x40
 80026f2:	4b36      	ldr	r3, [pc, #216]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80026fe:	4b34      	ldr	r3, [pc, #208]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a33      	ldr	r2, [pc, #204]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002708:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800270a:	f7fe fd1b 	bl	8001144 <HAL_GetTick>
 800270e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002712:	f7fe fd17 	bl	8001144 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e278      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002724:	4b2a      	ldr	r3, [pc, #168]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002730:	4b26      	ldr	r3, [pc, #152]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002734:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002738:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d02f      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002748:	6a3a      	ldr	r2, [r7, #32]
 800274a:	429a      	cmp	r2, r3
 800274c:	d028      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800274e:	4b1f      	ldr	r3, [pc, #124]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002756:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002758:	4b1e      	ldr	r3, [pc, #120]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800275a:	2201      	movs	r2, #1
 800275c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800275e:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002764:	4a19      	ldr	r2, [pc, #100]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800276a:	4b18      	ldr	r3, [pc, #96]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b01      	cmp	r3, #1
 8002774:	d114      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002776:	f7fe fce5 	bl	8001144 <HAL_GetTick>
 800277a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277c:	e00a      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800277e:	f7fe fce1 	bl	8001144 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f241 3288 	movw	r2, #5000	; 0x1388
 800278c:	4293      	cmp	r3, r2
 800278e:	d901      	bls.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e240      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002794:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0ee      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027ac:	d114      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80027ae:	4b07      	ldr	r3, [pc, #28]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80027be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027c2:	4902      	ldr	r1, [pc, #8]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	608b      	str	r3, [r1, #8]
 80027c8:	e00c      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40007000 	.word	0x40007000
 80027d4:	42470e40 	.word	0x42470e40
 80027d8:	4b4a      	ldr	r3, [pc, #296]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	4a49      	ldr	r2, [pc, #292]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80027e2:	6093      	str	r3, [r2, #8]
 80027e4:	4b47      	ldr	r3, [pc, #284]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f0:	4944      	ldr	r1, [pc, #272]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0310 	and.w	r3, r3, #16
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d004      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002808:	4b3f      	ldr	r3, [pc, #252]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800280a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002818:	4b3a      	ldr	r3, [pc, #232]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800281a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800281e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002826:	4937      	ldr	r1, [pc, #220]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800283a:	4b32      	ldr	r3, [pc, #200]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800283c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002840:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002848:	492e      	ldr	r1, [pc, #184]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	d011      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800285c:	4b29      	ldr	r3, [pc, #164]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800285e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002862:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286a:	4926      	ldr	r1, [pc, #152]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002876:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800287a:	d101      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800287c:	2301      	movs	r3, #1
 800287e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00a      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800288c:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800288e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002892:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	491a      	ldr	r1, [pc, #104]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d011      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80028ae:	4b15      	ldr	r3, [pc, #84]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028b4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028bc:	4911      	ldr	r1, [pc, #68]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028cc:	d101      	bne.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80028ce:	2301      	movs	r3, #1
 80028d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80028d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d005      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028e0:	f040 80ff 	bne.w	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028e4:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80028ea:	f7fe fc2b 	bl	8001144 <HAL_GetTick>
 80028ee:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028f0:	e00e      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80028f2:	f7fe fc27 	bl	8001144 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d907      	bls.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e188      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002904:	40023800 	.word	0x40023800
 8002908:	424711e0 	.word	0x424711e0
 800290c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002910:	4b7e      	ldr	r3, [pc, #504]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1ea      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292c:	2b00      	cmp	r3, #0
 800292e:	d009      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002938:	2b00      	cmp	r3, #0
 800293a:	d028      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002940:	2b00      	cmp	r3, #0
 8002942:	d124      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002944:	4b71      	ldr	r3, [pc, #452]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800294a:	0c1b      	lsrs	r3, r3, #16
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	3301      	adds	r3, #1
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002956:	4b6d      	ldr	r3, [pc, #436]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800295c:	0e1b      	lsrs	r3, r3, #24
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	019b      	lsls	r3, r3, #6
 800296e:	431a      	orrs	r2, r3
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	085b      	lsrs	r3, r3, #1
 8002974:	3b01      	subs	r3, #1
 8002976:	041b      	lsls	r3, r3, #16
 8002978:	431a      	orrs	r2, r3
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	061b      	lsls	r3, r3, #24
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	071b      	lsls	r3, r3, #28
 8002986:	4961      	ldr	r1, [pc, #388]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	2b00      	cmp	r3, #0
 8002998:	d004      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029a2:	d00a      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d035      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b8:	d130      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80029ba:	4b54      	ldr	r3, [pc, #336]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c0:	0c1b      	lsrs	r3, r3, #16
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	3301      	adds	r3, #1
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029cc:	4b4f      	ldr	r3, [pc, #316]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029d2:	0f1b      	lsrs	r3, r3, #28
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	019b      	lsls	r3, r3, #6
 80029e4:	431a      	orrs	r2, r3
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	085b      	lsrs	r3, r3, #1
 80029ea:	3b01      	subs	r3, #1
 80029ec:	041b      	lsls	r3, r3, #16
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	061b      	lsls	r3, r3, #24
 80029f6:	431a      	orrs	r2, r3
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	071b      	lsls	r3, r3, #28
 80029fc:	4943      	ldr	r1, [pc, #268]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a04:	4b41      	ldr	r3, [pc, #260]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a0a:	f023 021f 	bic.w	r2, r3, #31
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	3b01      	subs	r3, #1
 8002a14:	493d      	ldr	r1, [pc, #244]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d029      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a30:	d124      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a32:	4b36      	ldr	r3, [pc, #216]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a38:	0c1b      	lsrs	r3, r3, #16
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a44:	4b31      	ldr	r3, [pc, #196]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a4a:	0f1b      	lsrs	r3, r3, #28
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	019b      	lsls	r3, r3, #6
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	085b      	lsrs	r3, r3, #1
 8002a64:	3b01      	subs	r3, #1
 8002a66:	041b      	lsls	r3, r3, #16
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	061b      	lsls	r3, r3, #24
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	071b      	lsls	r3, r3, #28
 8002a74:	4925      	ldr	r1, [pc, #148]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d016      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	019b      	lsls	r3, r3, #6
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	085b      	lsrs	r3, r3, #1
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	041b      	lsls	r3, r3, #16
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	061b      	lsls	r3, r3, #24
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	071b      	lsls	r3, r3, #28
 8002aae:	4917      	ldr	r1, [pc, #92]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ab6:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002abc:	f7fe fb42 	bl	8001144 <HAL_GetTick>
 8002ac0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ac4:	f7fe fb3e 	bl	8001144 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e09f      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	f040 8095 	bne.w	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002aea:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002af0:	f7fe fb28 	bl	8001144 <HAL_GetTick>
 8002af4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002af6:	e00f      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002af8:	f7fe fb24 	bl	8001144 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d908      	bls.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e085      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	42470068 	.word	0x42470068
 8002b14:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b18:	4b41      	ldr	r3, [pc, #260]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b24:	d0e8      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d009      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d02b      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d127      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002b4e:	4b34      	ldr	r3, [pc, #208]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b54:	0c1b      	lsrs	r3, r3, #16
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	699a      	ldr	r2, [r3, #24]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	019b      	lsls	r3, r3, #6
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	085b      	lsrs	r3, r3, #1
 8002b70:	3b01      	subs	r3, #1
 8002b72:	041b      	lsls	r3, r3, #16
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	061b      	lsls	r3, r3, #24
 8002b7c:	4928      	ldr	r1, [pc, #160]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b84:	4b26      	ldr	r3, [pc, #152]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b8a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	3b01      	subs	r3, #1
 8002b94:	021b      	lsls	r3, r3, #8
 8002b96:	4922      	ldr	r1, [pc, #136]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d01d      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bb2:	d118      	bne.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bb4:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bba:	0e1b      	lsrs	r3, r3, #24
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	019b      	lsls	r3, r3, #6
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	085b      	lsrs	r3, r3, #1
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	041b      	lsls	r3, r3, #16
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	061b      	lsls	r3, r3, #24
 8002bde:	4910      	ldr	r1, [pc, #64]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002be6:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002be8:	2201      	movs	r2, #1
 8002bea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bec:	f7fe faaa 	bl	8001144 <HAL_GetTick>
 8002bf0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002bf4:	f7fe faa6 	bl	8001144 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e007      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c06:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c12:	d1ef      	bne.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3730      	adds	r7, #48	; 0x30
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40023800 	.word	0x40023800
 8002c24:	42470070 	.word	0x42470070

08002c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c2c:	b0ae      	sub	sp, #184	; 0xb8
 8002c2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c4e:	4bcb      	ldr	r3, [pc, #812]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	f200 8206 	bhi.w	8003068 <HAL_RCC_GetSysClockFreq+0x440>
 8002c5c:	a201      	add	r2, pc, #4	; (adr r2, 8002c64 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c62:	bf00      	nop
 8002c64:	08002c99 	.word	0x08002c99
 8002c68:	08003069 	.word	0x08003069
 8002c6c:	08003069 	.word	0x08003069
 8002c70:	08003069 	.word	0x08003069
 8002c74:	08002ca1 	.word	0x08002ca1
 8002c78:	08003069 	.word	0x08003069
 8002c7c:	08003069 	.word	0x08003069
 8002c80:	08003069 	.word	0x08003069
 8002c84:	08002ca9 	.word	0x08002ca9
 8002c88:	08003069 	.word	0x08003069
 8002c8c:	08003069 	.word	0x08003069
 8002c90:	08003069 	.word	0x08003069
 8002c94:	08002e99 	.word	0x08002e99
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c98:	4bb9      	ldr	r3, [pc, #740]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002c9e:	e1e7      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ca0:	4bb8      	ldr	r3, [pc, #736]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ca6:	e1e3      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ca8:	4bb4      	ldr	r3, [pc, #720]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cb4:	4bb1      	ldr	r3, [pc, #708]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d071      	beq.n	8002da4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cc0:	4bae      	ldr	r3, [pc, #696]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	099b      	lsrs	r3, r3, #6
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ccc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002cd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ce2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ce6:	4622      	mov	r2, r4
 8002ce8:	462b      	mov	r3, r5
 8002cea:	f04f 0000 	mov.w	r0, #0
 8002cee:	f04f 0100 	mov.w	r1, #0
 8002cf2:	0159      	lsls	r1, r3, #5
 8002cf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cf8:	0150      	lsls	r0, r2, #5
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4621      	mov	r1, r4
 8002d00:	1a51      	subs	r1, r2, r1
 8002d02:	6439      	str	r1, [r7, #64]	; 0x40
 8002d04:	4629      	mov	r1, r5
 8002d06:	eb63 0301 	sbc.w	r3, r3, r1
 8002d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002d18:	4649      	mov	r1, r9
 8002d1a:	018b      	lsls	r3, r1, #6
 8002d1c:	4641      	mov	r1, r8
 8002d1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d22:	4641      	mov	r1, r8
 8002d24:	018a      	lsls	r2, r1, #6
 8002d26:	4641      	mov	r1, r8
 8002d28:	1a51      	subs	r1, r2, r1
 8002d2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d2c:	4649      	mov	r1, r9
 8002d2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002d40:	4649      	mov	r1, r9
 8002d42:	00cb      	lsls	r3, r1, #3
 8002d44:	4641      	mov	r1, r8
 8002d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d4a:	4641      	mov	r1, r8
 8002d4c:	00ca      	lsls	r2, r1, #3
 8002d4e:	4610      	mov	r0, r2
 8002d50:	4619      	mov	r1, r3
 8002d52:	4603      	mov	r3, r0
 8002d54:	4622      	mov	r2, r4
 8002d56:	189b      	adds	r3, r3, r2
 8002d58:	633b      	str	r3, [r7, #48]	; 0x30
 8002d5a:	462b      	mov	r3, r5
 8002d5c:	460a      	mov	r2, r1
 8002d5e:	eb42 0303 	adc.w	r3, r2, r3
 8002d62:	637b      	str	r3, [r7, #52]	; 0x34
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d70:	4629      	mov	r1, r5
 8002d72:	024b      	lsls	r3, r1, #9
 8002d74:	4621      	mov	r1, r4
 8002d76:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	024a      	lsls	r2, r1, #9
 8002d7e:	4610      	mov	r0, r2
 8002d80:	4619      	mov	r1, r3
 8002d82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d86:	2200      	movs	r2, #0
 8002d88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d90:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002d94:	f7fd fa8c 	bl	80002b0 <__aeabi_uldivmod>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002da2:	e067      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002da4:	4b75      	ldr	r3, [pc, #468]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	099b      	lsrs	r3, r3, #6
 8002daa:	2200      	movs	r2, #0
 8002dac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002db0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002db4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002dc2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002dc6:	4622      	mov	r2, r4
 8002dc8:	462b      	mov	r3, r5
 8002dca:	f04f 0000 	mov.w	r0, #0
 8002dce:	f04f 0100 	mov.w	r1, #0
 8002dd2:	0159      	lsls	r1, r3, #5
 8002dd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dd8:	0150      	lsls	r0, r2, #5
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4621      	mov	r1, r4
 8002de0:	1a51      	subs	r1, r2, r1
 8002de2:	62b9      	str	r1, [r7, #40]	; 0x28
 8002de4:	4629      	mov	r1, r5
 8002de6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002df8:	4649      	mov	r1, r9
 8002dfa:	018b      	lsls	r3, r1, #6
 8002dfc:	4641      	mov	r1, r8
 8002dfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e02:	4641      	mov	r1, r8
 8002e04:	018a      	lsls	r2, r1, #6
 8002e06:	4641      	mov	r1, r8
 8002e08:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e0c:	4649      	mov	r1, r9
 8002e0e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e1e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e26:	4692      	mov	sl, r2
 8002e28:	469b      	mov	fp, r3
 8002e2a:	4623      	mov	r3, r4
 8002e2c:	eb1a 0303 	adds.w	r3, sl, r3
 8002e30:	623b      	str	r3, [r7, #32]
 8002e32:	462b      	mov	r3, r5
 8002e34:	eb4b 0303 	adc.w	r3, fp, r3
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e46:	4629      	mov	r1, r5
 8002e48:	028b      	lsls	r3, r1, #10
 8002e4a:	4621      	mov	r1, r4
 8002e4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e50:	4621      	mov	r1, r4
 8002e52:	028a      	lsls	r2, r1, #10
 8002e54:	4610      	mov	r0, r2
 8002e56:	4619      	mov	r1, r3
 8002e58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	673b      	str	r3, [r7, #112]	; 0x70
 8002e60:	677a      	str	r2, [r7, #116]	; 0x74
 8002e62:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002e66:	f7fd fa23 	bl	80002b0 <__aeabi_uldivmod>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4613      	mov	r3, r2
 8002e70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e74:	4b41      	ldr	r3, [pc, #260]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	3301      	adds	r3, #1
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002e86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e96:	e0eb      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e98:	4b38      	ldr	r3, [pc, #224]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ea0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ea4:	4b35      	ldr	r3, [pc, #212]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d06b      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eb0:	4b32      	ldr	r3, [pc, #200]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x354>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	099b      	lsrs	r3, r3, #6
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002eba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec2:	663b      	str	r3, [r7, #96]	; 0x60
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	667b      	str	r3, [r7, #100]	; 0x64
 8002ec8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002ecc:	4622      	mov	r2, r4
 8002ece:	462b      	mov	r3, r5
 8002ed0:	f04f 0000 	mov.w	r0, #0
 8002ed4:	f04f 0100 	mov.w	r1, #0
 8002ed8:	0159      	lsls	r1, r3, #5
 8002eda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ede:	0150      	lsls	r0, r2, #5
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	1a51      	subs	r1, r2, r1
 8002ee8:	61b9      	str	r1, [r7, #24]
 8002eea:	4629      	mov	r1, r5
 8002eec:	eb63 0301 	sbc.w	r3, r3, r1
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002efe:	4659      	mov	r1, fp
 8002f00:	018b      	lsls	r3, r1, #6
 8002f02:	4651      	mov	r1, sl
 8002f04:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f08:	4651      	mov	r1, sl
 8002f0a:	018a      	lsls	r2, r1, #6
 8002f0c:	4651      	mov	r1, sl
 8002f0e:	ebb2 0801 	subs.w	r8, r2, r1
 8002f12:	4659      	mov	r1, fp
 8002f14:	eb63 0901 	sbc.w	r9, r3, r1
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f24:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f28:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f2c:	4690      	mov	r8, r2
 8002f2e:	4699      	mov	r9, r3
 8002f30:	4623      	mov	r3, r4
 8002f32:	eb18 0303 	adds.w	r3, r8, r3
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	462b      	mov	r3, r5
 8002f3a:	eb49 0303 	adc.w	r3, r9, r3
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f4c:	4629      	mov	r1, r5
 8002f4e:	024b      	lsls	r3, r1, #9
 8002f50:	4621      	mov	r1, r4
 8002f52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f56:	4621      	mov	r1, r4
 8002f58:	024a      	lsls	r2, r1, #9
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f62:	2200      	movs	r2, #0
 8002f64:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f66:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002f68:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f6c:	f7fd f9a0 	bl	80002b0 <__aeabi_uldivmod>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4613      	mov	r3, r2
 8002f76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f7a:	e065      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0x420>
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	00f42400 	.word	0x00f42400
 8002f84:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f88:	4b3d      	ldr	r3, [pc, #244]	; (8003080 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	099b      	lsrs	r3, r3, #6
 8002f8e:	2200      	movs	r2, #0
 8002f90:	4618      	mov	r0, r3
 8002f92:	4611      	mov	r1, r2
 8002f94:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f98:	653b      	str	r3, [r7, #80]	; 0x50
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	657b      	str	r3, [r7, #84]	; 0x54
 8002f9e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002fa2:	4642      	mov	r2, r8
 8002fa4:	464b      	mov	r3, r9
 8002fa6:	f04f 0000 	mov.w	r0, #0
 8002faa:	f04f 0100 	mov.w	r1, #0
 8002fae:	0159      	lsls	r1, r3, #5
 8002fb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fb4:	0150      	lsls	r0, r2, #5
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4641      	mov	r1, r8
 8002fbc:	1a51      	subs	r1, r2, r1
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	4649      	mov	r1, r9
 8002fc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002fd4:	4659      	mov	r1, fp
 8002fd6:	018b      	lsls	r3, r1, #6
 8002fd8:	4651      	mov	r1, sl
 8002fda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fde:	4651      	mov	r1, sl
 8002fe0:	018a      	lsls	r2, r1, #6
 8002fe2:	4651      	mov	r1, sl
 8002fe4:	1a54      	subs	r4, r2, r1
 8002fe6:	4659      	mov	r1, fp
 8002fe8:	eb63 0501 	sbc.w	r5, r3, r1
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	00eb      	lsls	r3, r5, #3
 8002ff6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ffa:	00e2      	lsls	r2, r4, #3
 8002ffc:	4614      	mov	r4, r2
 8002ffe:	461d      	mov	r5, r3
 8003000:	4643      	mov	r3, r8
 8003002:	18e3      	adds	r3, r4, r3
 8003004:	603b      	str	r3, [r7, #0]
 8003006:	464b      	mov	r3, r9
 8003008:	eb45 0303 	adc.w	r3, r5, r3
 800300c:	607b      	str	r3, [r7, #4]
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	e9d7 4500 	ldrd	r4, r5, [r7]
 800301a:	4629      	mov	r1, r5
 800301c:	028b      	lsls	r3, r1, #10
 800301e:	4621      	mov	r1, r4
 8003020:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003024:	4621      	mov	r1, r4
 8003026:	028a      	lsls	r2, r1, #10
 8003028:	4610      	mov	r0, r2
 800302a:	4619      	mov	r1, r3
 800302c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003030:	2200      	movs	r2, #0
 8003032:	64bb      	str	r3, [r7, #72]	; 0x48
 8003034:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003036:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800303a:	f7fd f939 	bl	80002b0 <__aeabi_uldivmod>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4613      	mov	r3, r2
 8003044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003048:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <HAL_RCC_GetSysClockFreq+0x458>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	0f1b      	lsrs	r3, r3, #28
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003056:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800305a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800305e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003066:	e003      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <HAL_RCC_GetSysClockFreq+0x45c>)
 800306a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800306e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003070:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003074:	4618      	mov	r0, r3
 8003076:	37b8      	adds	r7, #184	; 0xb8
 8003078:	46bd      	mov	sp, r7
 800307a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800
 8003084:	00f42400 	.word	0x00f42400

08003088 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e28d      	b.n	80035b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 8083 	beq.w	80031ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030a8:	4b94      	ldr	r3, [pc, #592]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 030c 	and.w	r3, r3, #12
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d019      	beq.n	80030e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030b4:	4b91      	ldr	r3, [pc, #580]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d106      	bne.n	80030ce <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030c0:	4b8e      	ldr	r3, [pc, #568]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030cc:	d00c      	beq.n	80030e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ce:	4b8b      	ldr	r3, [pc, #556]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030d6:	2b0c      	cmp	r3, #12
 80030d8:	d112      	bne.n	8003100 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030da:	4b88      	ldr	r3, [pc, #544]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030e6:	d10b      	bne.n	8003100 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e8:	4b84      	ldr	r3, [pc, #528]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d05b      	beq.n	80031ac <HAL_RCC_OscConfig+0x124>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d157      	bne.n	80031ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e25a      	b.n	80035b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003108:	d106      	bne.n	8003118 <HAL_RCC_OscConfig+0x90>
 800310a:	4b7c      	ldr	r3, [pc, #496]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a7b      	ldr	r2, [pc, #492]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e01d      	b.n	8003154 <HAL_RCC_OscConfig+0xcc>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003120:	d10c      	bne.n	800313c <HAL_RCC_OscConfig+0xb4>
 8003122:	4b76      	ldr	r3, [pc, #472]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a75      	ldr	r2, [pc, #468]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 8003128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	4b73      	ldr	r3, [pc, #460]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a72      	ldr	r2, [pc, #456]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 8003134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e00b      	b.n	8003154 <HAL_RCC_OscConfig+0xcc>
 800313c:	4b6f      	ldr	r3, [pc, #444]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a6e      	ldr	r2, [pc, #440]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 8003142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	4b6c      	ldr	r3, [pc, #432]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a6b      	ldr	r2, [pc, #428]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 800314e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d013      	beq.n	8003184 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fd fff2 	bl	8001144 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003164:	f7fd ffee 	bl	8001144 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	; 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e21f      	b.n	80035b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	4b61      	ldr	r3, [pc, #388]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0xdc>
 8003182:	e014      	b.n	80031ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7fd ffde 	bl	8001144 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800318c:	f7fd ffda 	bl	8001144 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	; 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e20b      	b.n	80035b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319e:	4b57      	ldr	r3, [pc, #348]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0x104>
 80031aa:	e000      	b.n	80031ae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d06f      	beq.n	800329a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031ba:	4b50      	ldr	r3, [pc, #320]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d017      	beq.n	80031f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031c6:	4b4d      	ldr	r3, [pc, #308]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d105      	bne.n	80031de <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031d2:	4b4a      	ldr	r3, [pc, #296]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00b      	beq.n	80031f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031de:	4b47      	ldr	r3, [pc, #284]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031e6:	2b0c      	cmp	r3, #12
 80031e8:	d11c      	bne.n	8003224 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ea:	4b44      	ldr	r3, [pc, #272]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d116      	bne.n	8003224 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031f6:	4b41      	ldr	r3, [pc, #260]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d005      	beq.n	800320e <HAL_RCC_OscConfig+0x186>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d001      	beq.n	800320e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e1d3      	b.n	80035b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320e:	4b3b      	ldr	r3, [pc, #236]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	4937      	ldr	r1, [pc, #220]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 800321e:	4313      	orrs	r3, r2
 8003220:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003222:	e03a      	b.n	800329a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d020      	beq.n	800326e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800322c:	4b34      	ldr	r3, [pc, #208]	; (8003300 <HAL_RCC_OscConfig+0x278>)
 800322e:	2201      	movs	r2, #1
 8003230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003232:	f7fd ff87 	bl	8001144 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800323a:	f7fd ff83 	bl	8001144 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e1b4      	b.n	80035b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324c:	4b2b      	ldr	r3, [pc, #172]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003258:	4b28      	ldr	r3, [pc, #160]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	4925      	ldr	r1, [pc, #148]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 8003268:	4313      	orrs	r3, r2
 800326a:	600b      	str	r3, [r1, #0]
 800326c:	e015      	b.n	800329a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800326e:	4b24      	ldr	r3, [pc, #144]	; (8003300 <HAL_RCC_OscConfig+0x278>)
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fd ff66 	bl	8001144 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800327c:	f7fd ff62 	bl	8001144 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e193      	b.n	80035b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800328e:	4b1b      	ldr	r3, [pc, #108]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d036      	beq.n	8003314 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d016      	beq.n	80032dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ae:	4b15      	ldr	r3, [pc, #84]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b4:	f7fd ff46 	bl	8001144 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032bc:	f7fd ff42 	bl	8001144 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e173      	b.n	80035b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ce:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <HAL_RCC_OscConfig+0x274>)
 80032d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f0      	beq.n	80032bc <HAL_RCC_OscConfig+0x234>
 80032da:	e01b      	b.n	8003314 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032dc:	4b09      	ldr	r3, [pc, #36]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e2:	f7fd ff2f 	bl	8001144 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e8:	e00e      	b.n	8003308 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ea:	f7fd ff2b 	bl	8001144 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d907      	bls.n	8003308 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e15c      	b.n	80035b6 <HAL_RCC_OscConfig+0x52e>
 80032fc:	40023800 	.word	0x40023800
 8003300:	42470000 	.word	0x42470000
 8003304:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003308:	4b8a      	ldr	r3, [pc, #552]	; (8003534 <HAL_RCC_OscConfig+0x4ac>)
 800330a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1ea      	bne.n	80032ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 8097 	beq.w	8003450 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003322:	2300      	movs	r3, #0
 8003324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003326:	4b83      	ldr	r3, [pc, #524]	; (8003534 <HAL_RCC_OscConfig+0x4ac>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10f      	bne.n	8003352 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003332:	2300      	movs	r3, #0
 8003334:	60bb      	str	r3, [r7, #8]
 8003336:	4b7f      	ldr	r3, [pc, #508]	; (8003534 <HAL_RCC_OscConfig+0x4ac>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	4a7e      	ldr	r2, [pc, #504]	; (8003534 <HAL_RCC_OscConfig+0x4ac>)
 800333c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003340:	6413      	str	r3, [r2, #64]	; 0x40
 8003342:	4b7c      	ldr	r3, [pc, #496]	; (8003534 <HAL_RCC_OscConfig+0x4ac>)
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334a:	60bb      	str	r3, [r7, #8]
 800334c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800334e:	2301      	movs	r3, #1
 8003350:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003352:	4b79      	ldr	r3, [pc, #484]	; (8003538 <HAL_RCC_OscConfig+0x4b0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335a:	2b00      	cmp	r3, #0
 800335c:	d118      	bne.n	8003390 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800335e:	4b76      	ldr	r3, [pc, #472]	; (8003538 <HAL_RCC_OscConfig+0x4b0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a75      	ldr	r2, [pc, #468]	; (8003538 <HAL_RCC_OscConfig+0x4b0>)
 8003364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800336a:	f7fd feeb 	bl	8001144 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003372:	f7fd fee7 	bl	8001144 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e118      	b.n	80035b6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003384:	4b6c      	ldr	r3, [pc, #432]	; (8003538 <HAL_RCC_OscConfig+0x4b0>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0f0      	beq.n	8003372 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d106      	bne.n	80033a6 <HAL_RCC_OscConfig+0x31e>
 8003398:	4b66      	ldr	r3, [pc, #408]	; (8003534 <HAL_RCC_OscConfig+0x4ac>)
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339c:	4a65      	ldr	r2, [pc, #404]	; (8003534 <HAL_RCC_OscConfig+0x4ac>)
 800339e:	f043 0301 	orr.w	r3, r3, #1
 80033a2:	6713      	str	r3, [r2, #112]	; 0x70
 80033a4:	e01c      	b.n	80033e0 <HAL_RCC_OscConfig+0x358>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	2b05      	cmp	r3, #5
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCC_OscConfig+0x340>
 80033ae:	4b61      	ldr	r3, [pc, #388]	; (8003534 <HAL_RCC_OscConfig+0x4ac>)
 80033b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b2:	4a60      	ldr	r2, [pc, #384]	; (8003534 <HAL_RCC_OscConfig+0x4ac>)
 80033b4:	f043 0304 	orr.w	r3, r3, #4
 80033b8:	6713      	str	r3, [r2, #112]	; 0x70
 80033ba:	4b5e      	ldr	r3, [pc, #376]	; (8003534 <HAL_RCC_OscConfig+0x4ac>)
 80033bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033be:	4a5d      	ldr	r2, [pc, #372]	; (8003534 <HAL_RCC_OscConfig+0x4ac>)
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	6713      	str	r3, [r2, #112]	; 0x70
 80033c6:	e00b      	b.n	80033e0 <HAL_RCC_OscConfig+0x358>
 80033c8:	4b5a      	ldr	r3, [pc, #360]	; (8003534 <HAL_RCC_OscConfig+0x4ac>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	4a59      	ldr	r2, [pc, #356]	; (8003534 <HAL_RCC_OscConfig+0x4ac>)
 80033ce:	f023 0301 	bic.w	r3, r3, #1
 80033d2:	6713      	str	r3, [r2, #112]	; 0x70
 80033d4:	4b57      	ldr	r3, [pc, #348]	; (8003534 <HAL_RCC_OscConfig+0x4ac>)
 80033d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d8:	4a56      	ldr	r2, [pc, #344]	; (8003534 <HAL_RCC_OscConfig+0x4ac>)
 80033da:	f023 0304 	bic.w	r3, r3, #4
 80033de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d015      	beq.n	8003414 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e8:	f7fd feac 	bl	8001144 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ee:	e00a      	b.n	8003406 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f0:	f7fd fea8 	bl	8001144 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fe:	4293      	cmp	r3, r2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e0d7      	b.n	80035b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003406:	4b4b      	ldr	r3, [pc, #300]	; (8003534 <HAL_RCC_OscConfig+0x4ac>)
 8003408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0ee      	beq.n	80033f0 <HAL_RCC_OscConfig+0x368>
 8003412:	e014      	b.n	800343e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003414:	f7fd fe96 	bl	8001144 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800341a:	e00a      	b.n	8003432 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800341c:	f7fd fe92 	bl	8001144 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	f241 3288 	movw	r2, #5000	; 0x1388
 800342a:	4293      	cmp	r3, r2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e0c1      	b.n	80035b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003432:	4b40      	ldr	r3, [pc, #256]	; (8003534 <HAL_RCC_OscConfig+0x4ac>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1ee      	bne.n	800341c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800343e:	7dfb      	ldrb	r3, [r7, #23]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d105      	bne.n	8003450 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003444:	4b3b      	ldr	r3, [pc, #236]	; (8003534 <HAL_RCC_OscConfig+0x4ac>)
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	4a3a      	ldr	r2, [pc, #232]	; (8003534 <HAL_RCC_OscConfig+0x4ac>)
 800344a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800344e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 80ad 	beq.w	80035b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800345a:	4b36      	ldr	r3, [pc, #216]	; (8003534 <HAL_RCC_OscConfig+0x4ac>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	2b08      	cmp	r3, #8
 8003464:	d060      	beq.n	8003528 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	2b02      	cmp	r3, #2
 800346c:	d145      	bne.n	80034fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346e:	4b33      	ldr	r3, [pc, #204]	; (800353c <HAL_RCC_OscConfig+0x4b4>)
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7fd fe66 	bl	8001144 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800347c:	f7fd fe62 	bl	8001144 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e093      	b.n	80035b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348e:	4b29      	ldr	r3, [pc, #164]	; (8003534 <HAL_RCC_OscConfig+0x4ac>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69da      	ldr	r2, [r3, #28]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	019b      	lsls	r3, r3, #6
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	3b01      	subs	r3, #1
 80034b4:	041b      	lsls	r3, r3, #16
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	061b      	lsls	r3, r3, #24
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	071b      	lsls	r3, r3, #28
 80034c6:	491b      	ldr	r1, [pc, #108]	; (8003534 <HAL_RCC_OscConfig+0x4ac>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034cc:	4b1b      	ldr	r3, [pc, #108]	; (800353c <HAL_RCC_OscConfig+0x4b4>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d2:	f7fd fe37 	bl	8001144 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034da:	f7fd fe33 	bl	8001144 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e064      	b.n	80035b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ec:	4b11      	ldr	r3, [pc, #68]	; (8003534 <HAL_RCC_OscConfig+0x4ac>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f0      	beq.n	80034da <HAL_RCC_OscConfig+0x452>
 80034f8:	e05c      	b.n	80035b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fa:	4b10      	ldr	r3, [pc, #64]	; (800353c <HAL_RCC_OscConfig+0x4b4>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fd fe20 	bl	8001144 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003508:	f7fd fe1c 	bl	8001144 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e04d      	b.n	80035b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351a:	4b06      	ldr	r3, [pc, #24]	; (8003534 <HAL_RCC_OscConfig+0x4ac>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x480>
 8003526:	e045      	b.n	80035b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d107      	bne.n	8003540 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e040      	b.n	80035b6 <HAL_RCC_OscConfig+0x52e>
 8003534:	40023800 	.word	0x40023800
 8003538:	40007000 	.word	0x40007000
 800353c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003540:	4b1f      	ldr	r3, [pc, #124]	; (80035c0 <HAL_RCC_OscConfig+0x538>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d030      	beq.n	80035b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003558:	429a      	cmp	r2, r3
 800355a:	d129      	bne.n	80035b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d122      	bne.n	80035b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003570:	4013      	ands	r3, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003576:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003578:	4293      	cmp	r3, r2
 800357a:	d119      	bne.n	80035b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003586:	085b      	lsrs	r3, r3, #1
 8003588:	3b01      	subs	r3, #1
 800358a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800358c:	429a      	cmp	r2, r3
 800358e:	d10f      	bne.n	80035b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800359c:	429a      	cmp	r2, r3
 800359e:	d107      	bne.n	80035b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e000      	b.n	80035b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40023800 	.word	0x40023800

080035c4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e022      	b.n	800361c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d105      	bne.n	80035ee <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7fd fb9f 	bl	8000d2c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2203      	movs	r2, #3
 80035f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f814 	bl	8003624 <HAL_SD_InitCard>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e00a      	b.n	800361c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003624:	b5b0      	push	{r4, r5, r7, lr}
 8003626:	b08e      	sub	sp, #56	; 0x38
 8003628:	af04      	add	r7, sp, #16
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800362c:	2300      	movs	r3, #0
 800362e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003630:	2300      	movs	r3, #0
 8003632:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003634:	2300      	movs	r3, #0
 8003636:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800363c:	2300      	movs	r3, #0
 800363e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003640:	2376      	movs	r3, #118	; 0x76
 8003642:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681d      	ldr	r5, [r3, #0]
 8003648:	466c      	mov	r4, sp
 800364a:	f107 0314 	add.w	r3, r7, #20
 800364e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003652:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003656:	f107 0308 	add.w	r3, r7, #8
 800365a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800365c:	4628      	mov	r0, r5
 800365e:	f002 f84f 	bl	8005700 <SDIO_Init>
 8003662:	4603      	mov	r3, r0
 8003664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e04f      	b.n	8003714 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003674:	4b29      	ldr	r3, [pc, #164]	; (800371c <HAL_SD_InitCard+0xf8>)
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f002 f887 	bl	8005792 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003684:	4b25      	ldr	r3, [pc, #148]	; (800371c <HAL_SD_InitCard+0xf8>)
 8003686:	2201      	movs	r2, #1
 8003688:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800368a:	2002      	movs	r0, #2
 800368c:	f7fd fd66 	bl	800115c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 ff03 	bl	800449c <SD_PowerON>
 8003696:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00b      	beq.n	80036b6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	431a      	orrs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e02e      	b.n	8003714 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fe22 	bl	8004300 <SD_InitCard>
 80036bc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00b      	beq.n	80036dc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e01b      	b.n	8003714 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036e4:	4618      	mov	r0, r3
 80036e6:	f002 f8e6 	bl	80058b6 <SDMMC_CmdBlockLength>
 80036ea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00f      	beq.n	8003712 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a0a      	ldr	r2, [pc, #40]	; (8003720 <HAL_SD_InitCard+0xfc>)
 80036f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	431a      	orrs	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3728      	adds	r7, #40	; 0x28
 8003718:	46bd      	mov	sp, r7
 800371a:	bdb0      	pop	{r4, r5, r7, pc}
 800371c:	422580a0 	.word	0x422580a0
 8003720:	004005ff 	.word	0x004005ff

08003724 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b092      	sub	sp, #72	; 0x48
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003732:	f7fd fd07 	bl	8001144 <HAL_GetTick>
 8003736:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d107      	bne.n	8003756 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e1bd      	b.n	8003ad2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b01      	cmp	r3, #1
 8003760:	f040 81b0 	bne.w	8003ac4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800376a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	441a      	add	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003774:	429a      	cmp	r2, r3
 8003776:	d907      	bls.n	8003788 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e1a4      	b.n	8003ad2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2203      	movs	r2, #3
 800378c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2200      	movs	r2, #0
 8003796:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379c:	2b01      	cmp	r3, #1
 800379e:	d002      	beq.n	80037a6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80037a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a2:	025b      	lsls	r3, r3, #9
 80037a4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80037a6:	f04f 33ff 	mov.w	r3, #4294967295
 80037aa:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	025b      	lsls	r3, r3, #9
 80037b0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80037b2:	2390      	movs	r3, #144	; 0x90
 80037b4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80037b6:	2302      	movs	r3, #2
 80037b8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80037be:	2301      	movs	r3, #1
 80037c0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f107 0214 	add.w	r2, r7, #20
 80037ca:	4611      	mov	r1, r2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f002 f846 	bl	800585e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d90a      	bls.n	80037ee <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2202      	movs	r2, #2
 80037dc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037e4:	4618      	mov	r0, r3
 80037e6:	f002 f8aa 	bl	800593e <SDMMC_CmdReadMultiBlock>
 80037ea:	6478      	str	r0, [r7, #68]	; 0x44
 80037ec:	e009      	b.n	8003802 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2201      	movs	r2, #1
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037fa:	4618      	mov	r0, r3
 80037fc:	f002 f87d 	bl	80058fa <SDMMC_CmdReadSingleBlock>
 8003800:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003804:	2b00      	cmp	r3, #0
 8003806:	d012      	beq.n	800382e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a7a      	ldr	r2, [pc, #488]	; (80039f8 <HAL_SD_ReadBlocks+0x2d4>)
 800380e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003816:	431a      	orrs	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e151      	b.n	8003ad2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003832:	e061      	b.n	80038f8 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d03c      	beq.n	80038bc <HAL_SD_ReadBlocks+0x198>
 8003842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003844:	2b00      	cmp	r3, #0
 8003846:	d039      	beq.n	80038bc <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003848:	2300      	movs	r3, #0
 800384a:	643b      	str	r3, [r7, #64]	; 0x40
 800384c:	e033      	b.n	80038b6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f001 ff7f 	bl	8005756 <SDIO_ReadFIFO>
 8003858:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800385a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385c:	b2da      	uxtb	r2, r3
 800385e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003860:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003864:	3301      	adds	r3, #1
 8003866:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800386a:	3b01      	subs	r3, #1
 800386c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	0a1b      	lsrs	r3, r3, #8
 8003872:	b2da      	uxtb	r2, r3
 8003874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003876:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800387a:	3301      	adds	r3, #1
 800387c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800387e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003880:	3b01      	subs	r3, #1
 8003882:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003886:	0c1b      	lsrs	r3, r3, #16
 8003888:	b2da      	uxtb	r2, r3
 800388a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800388e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003890:	3301      	adds	r3, #1
 8003892:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003896:	3b01      	subs	r3, #1
 8003898:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800389a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389c:	0e1b      	lsrs	r3, r3, #24
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80038a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a6:	3301      	adds	r3, #1
 80038a8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80038aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ac:	3b01      	subs	r3, #1
 80038ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80038b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038b2:	3301      	adds	r3, #1
 80038b4:	643b      	str	r3, [r7, #64]	; 0x40
 80038b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038b8:	2b07      	cmp	r3, #7
 80038ba:	d9c8      	bls.n	800384e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80038bc:	f7fd fc42 	bl	8001144 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d902      	bls.n	80038d2 <HAL_SD_ReadBlocks+0x1ae>
 80038cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d112      	bne.n	80038f8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a48      	ldr	r2, [pc, #288]	; (80039f8 <HAL_SD_ReadBlocks+0x2d4>)
 80038d8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038de:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e0ec      	b.n	8003ad2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fe:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003902:	2b00      	cmp	r3, #0
 8003904:	d096      	beq.n	8003834 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d022      	beq.n	800395a <HAL_SD_ReadBlocks+0x236>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d91f      	bls.n	800395a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391e:	2b03      	cmp	r3, #3
 8003920:	d01b      	beq.n	800395a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f002 f870 	bl	8005a0c <SDMMC_CmdStopTransfer>
 800392c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800392e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003930:	2b00      	cmp	r3, #0
 8003932:	d012      	beq.n	800395a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a2f      	ldr	r2, [pc, #188]	; (80039f8 <HAL_SD_ReadBlocks+0x2d4>)
 800393a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003942:	431a      	orrs	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e0bb      	b.n	8003ad2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003960:	f003 0308 	and.w	r3, r3, #8
 8003964:	2b00      	cmp	r3, #0
 8003966:	d012      	beq.n	800398e <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a22      	ldr	r2, [pc, #136]	; (80039f8 <HAL_SD_ReadBlocks+0x2d4>)
 800396e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	f043 0208 	orr.w	r2, r3, #8
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e0a1      	b.n	8003ad2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d012      	beq.n	80039c2 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a15      	ldr	r2, [pc, #84]	; (80039f8 <HAL_SD_ReadBlocks+0x2d4>)
 80039a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a8:	f043 0202 	orr.w	r2, r3, #2
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e087      	b.n	8003ad2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c8:	f003 0320 	and.w	r3, r3, #32
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d064      	beq.n	8003a9a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a08      	ldr	r2, [pc, #32]	; (80039f8 <HAL_SD_ReadBlocks+0x2d4>)
 80039d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039dc:	f043 0220 	orr.w	r2, r3, #32
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e06d      	b.n	8003ad2 <HAL_SD_ReadBlocks+0x3ae>
 80039f6:	bf00      	nop
 80039f8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f001 fea8 	bl	8005756 <SDIO_ReadFIFO>
 8003a06:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a0e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a12:	3301      	adds	r3, #1
 8003a14:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1e:	0a1b      	lsrs	r3, r3, #8
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a24:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a28:	3301      	adds	r3, #1
 8003a2a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a34:	0c1b      	lsrs	r3, r3, #16
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a3a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a3e:	3301      	adds	r3, #1
 8003a40:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a44:	3b01      	subs	r3, #1
 8003a46:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4a:	0e1b      	lsrs	r3, r3, #24
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a50:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a54:	3301      	adds	r3, #1
 8003a56:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003a5e:	f7fd fb71 	bl	8001144 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d902      	bls.n	8003a74 <HAL_SD_ReadBlocks+0x350>
 8003a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d112      	bne.n	8003a9a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a18      	ldr	r2, [pc, #96]	; (8003adc <HAL_SD_ReadBlocks+0x3b8>)
 8003a7a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e01b      	b.n	8003ad2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_SD_ReadBlocks+0x38a>
 8003aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1a6      	bne.n	80039fc <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f240 523a 	movw	r2, #1338	; 0x53a
 8003ab6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	e006      	b.n	8003ad2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
  }
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3748      	adds	r7, #72	; 0x48
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	004005ff 	.word	0x004005ff

08003ae0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b092      	sub	sp, #72	; 0x48
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003aee:	f7fd fb29 	bl	8001144 <HAL_GetTick>
 8003af2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d107      	bne.n	8003b12 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b06:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e165      	b.n	8003dde <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	f040 8158 	bne.w	8003dd0 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003b26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	441a      	add	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d907      	bls.n	8003b44 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b38:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e14c      	b.n	8003dde <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2203      	movs	r2, #3
 8003b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2200      	movs	r2, #0
 8003b52:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d002      	beq.n	8003b62 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5e:	025b      	lsls	r3, r3, #9
 8003b60:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003b62:	f04f 33ff 	mov.w	r3, #4294967295
 8003b66:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	025b      	lsls	r3, r3, #9
 8003b6c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003b6e:	2390      	movs	r3, #144	; 0x90
 8003b70:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003b72:	2300      	movs	r3, #0
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f107 0218 	add.w	r2, r7, #24
 8003b86:	4611      	mov	r1, r2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f001 fe68 	bl	800585e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d90a      	bls.n	8003baa <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2220      	movs	r2, #32
 8003b98:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f001 ff10 	bl	80059c6 <SDMMC_CmdWriteMultiBlock>
 8003ba6:	6478      	str	r0, [r7, #68]	; 0x44
 8003ba8:	e009      	b.n	8003bbe <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2210      	movs	r2, #16
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f001 fee3 	bl	8005982 <SDMMC_CmdWriteSingleBlock>
 8003bbc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d012      	beq.n	8003bea <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a87      	ldr	r2, [pc, #540]	; (8003de8 <HAL_SD_WriteBlocks+0x308>)
 8003bca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e0f9      	b.n	8003dde <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003bee:	e065      	b.n	8003cbc <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d040      	beq.n	8003c80 <HAL_SD_WriteBlocks+0x1a0>
 8003bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d03d      	beq.n	8003c80 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003c04:	2300      	movs	r3, #0
 8003c06:	643b      	str	r3, [r7, #64]	; 0x40
 8003c08:	e037      	b.n	8003c7a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c12:	3301      	adds	r3, #1
 8003c14:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	021a      	lsls	r2, r3, #8
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c30:	3b01      	subs	r3, #1
 8003c32:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	041a      	lsls	r2, r3, #16
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c42:	3301      	adds	r3, #1
 8003c44:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	061a      	lsls	r2, r3, #24
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c60:	3b01      	subs	r3, #1
 8003c62:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f107 0214 	add.w	r2, r7, #20
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f001 fd7e 	bl	8005770 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c76:	3301      	adds	r3, #1
 8003c78:	643b      	str	r3, [r7, #64]	; 0x40
 8003c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c7c:	2b07      	cmp	r3, #7
 8003c7e:	d9c4      	bls.n	8003c0a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003c80:	f7fd fa60 	bl	8001144 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d902      	bls.n	8003c96 <HAL_SD_WriteBlocks+0x1b6>
 8003c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d112      	bne.n	8003cbc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a53      	ldr	r2, [pc, #332]	; (8003de8 <HAL_SD_WriteBlocks+0x308>)
 8003c9c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e090      	b.n	8003dde <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc2:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d092      	beq.n	8003bf0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d022      	beq.n	8003d1e <HAL_SD_WriteBlocks+0x23e>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d91f      	bls.n	8003d1e <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	2b03      	cmp	r3, #3
 8003ce4:	d01b      	beq.n	8003d1e <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f001 fe8e 	bl	8005a0c <SDMMC_CmdStopTransfer>
 8003cf0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d012      	beq.n	8003d1e <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a3a      	ldr	r2, [pc, #232]	; (8003de8 <HAL_SD_WriteBlocks+0x308>)
 8003cfe:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d06:	431a      	orrs	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e05f      	b.n	8003dde <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d012      	beq.n	8003d52 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a2d      	ldr	r2, [pc, #180]	; (8003de8 <HAL_SD_WriteBlocks+0x308>)
 8003d32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d38:	f043 0208 	orr.w	r2, r3, #8
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e045      	b.n	8003dde <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d012      	beq.n	8003d86 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a20      	ldr	r2, [pc, #128]	; (8003de8 <HAL_SD_WriteBlocks+0x308>)
 8003d66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	f043 0202 	orr.w	r2, r3, #2
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e02b      	b.n	8003dde <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d012      	beq.n	8003dba <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a13      	ldr	r2, [pc, #76]	; (8003de8 <HAL_SD_WriteBlocks+0x308>)
 8003d9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da0:	f043 0210 	orr.w	r2, r3, #16
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e011      	b.n	8003dde <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f240 523a 	movw	r2, #1338	; 0x53a
 8003dc2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	e006      	b.n	8003dde <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
  }
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3748      	adds	r7, #72	; 0x48
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	004005ff 	.word	0x004005ff

08003dec <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dfa:	0f9b      	lsrs	r3, r3, #30
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e06:	0e9b      	lsrs	r3, r3, #26
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e18:	0e1b      	lsrs	r3, r3, #24
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	f003 0303 	and.w	r3, r3, #3
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e2a:	0c1b      	lsrs	r3, r3, #16
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e36:	0a1b      	lsrs	r3, r3, #8
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e4c:	0d1b      	lsrs	r3, r3, #20
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e58:	0c1b      	lsrs	r3, r3, #16
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	f003 030f 	and.w	r3, r3, #15
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e6a:	0bdb      	lsrs	r3, r3, #15
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e7c:	0b9b      	lsrs	r3, r3, #14
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e8e:	0b5b      	lsrs	r3, r3, #13
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ea0:	0b1b      	lsrs	r3, r3, #12
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d163      	bne.n	8003f84 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ec0:	009a      	lsls	r2, r3, #2
 8003ec2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003ecc:	0f92      	lsrs	r2, r2, #30
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ed8:	0edb      	lsrs	r3, r3, #27
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eea:	0e1b      	lsrs	r3, r3, #24
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003efc:	0d5b      	lsrs	r3, r3, #21
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f0e:	0c9b      	lsrs	r3, r3, #18
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f20:	0bdb      	lsrs	r3, r3, #15
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	7e1b      	ldrb	r3, [r3, #24]
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	3302      	adds	r3, #2
 8003f44:	2201      	movs	r2, #1
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003f4e:	fb03 f202 	mul.w	r2, r3, r2
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	7a1b      	ldrb	r3, [r3, #8]
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	2201      	movs	r2, #1
 8003f62:	409a      	lsls	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003f70:	0a52      	lsrs	r2, r2, #9
 8003f72:	fb03 f202 	mul.w	r2, r3, r2
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f80:	661a      	str	r2, [r3, #96]	; 0x60
 8003f82:	e031      	b.n	8003fe8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d11d      	bne.n	8003fc8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f90:	041b      	lsls	r3, r3, #16
 8003f92:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f9a:	0c1b      	lsrs	r3, r3, #16
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	029a      	lsls	r2, r3, #10
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fbc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	661a      	str	r2, [r3, #96]	; 0x60
 8003fc6:	e00f      	b.n	8003fe8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a58      	ldr	r2, [pc, #352]	; (8004130 <HAL_SD_GetCardCSD+0x344>)
 8003fce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e09d      	b.n	8004124 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fec:	0b9b      	lsrs	r3, r3, #14
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ffe:	09db      	lsrs	r3, r3, #7
 8004000:	b2db      	uxtb	r3, r3
 8004002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004006:	b2da      	uxtb	r2, r3
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004010:	b2db      	uxtb	r3, r3
 8004012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004016:	b2da      	uxtb	r2, r3
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004020:	0fdb      	lsrs	r3, r3, #31
 8004022:	b2da      	uxtb	r2, r3
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402c:	0f5b      	lsrs	r3, r3, #29
 800402e:	b2db      	uxtb	r3, r3
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	b2da      	uxtb	r2, r3
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403e:	0e9b      	lsrs	r3, r3, #26
 8004040:	b2db      	uxtb	r3, r3
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	b2da      	uxtb	r2, r3
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004050:	0d9b      	lsrs	r3, r3, #22
 8004052:	b2db      	uxtb	r3, r3
 8004054:	f003 030f 	and.w	r3, r3, #15
 8004058:	b2da      	uxtb	r2, r3
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004062:	0d5b      	lsrs	r3, r3, #21
 8004064:	b2db      	uxtb	r3, r3
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	b2da      	uxtb	r2, r3
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407e:	0c1b      	lsrs	r3, r3, #16
 8004080:	b2db      	uxtb	r3, r3
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	b2da      	uxtb	r2, r3
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004092:	0bdb      	lsrs	r3, r3, #15
 8004094:	b2db      	uxtb	r3, r3
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	b2da      	uxtb	r2, r3
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a6:	0b9b      	lsrs	r3, r3, #14
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	0b5b      	lsrs	r3, r3, #13
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ce:	0b1b      	lsrs	r3, r3, #12
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e2:	0a9b      	lsrs	r3, r3, #10
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f6:	0a1b      	lsrs	r3, r3, #8
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410a:	085b      	lsrs	r3, r3, #1
 800410c:	b2db      	uxtb	r3, r3
 800410e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004112:	b2da      	uxtb	r2, r3
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	004005ff 	.word	0x004005ff

08004134 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800418c:	b5b0      	push	{r4, r5, r7, lr}
 800418e:	b08e      	sub	sp, #56	; 0x38
 8004190:	af04      	add	r7, sp, #16
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2203      	movs	r2, #3
 80041a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a8:	2b03      	cmp	r3, #3
 80041aa:	d02e      	beq.n	800420a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b2:	d106      	bne.n	80041c2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	639a      	str	r2, [r3, #56]	; 0x38
 80041c0:	e029      	b.n	8004216 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041c8:	d10a      	bne.n	80041e0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 fa1c 	bl	8004608 <SD_WideBus_Enable>
 80041d0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	639a      	str	r2, [r3, #56]	; 0x38
 80041de:	e01a      	b.n	8004216 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10a      	bne.n	80041fc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fa59 	bl	800469e <SD_WideBus_Disable>
 80041ec:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	639a      	str	r2, [r3, #56]	; 0x38
 80041fa:	e00c      	b.n	8004216 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38
 8004208:	e005      	b.n	8004216 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00b      	beq.n	8004236 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a26      	ldr	r2, [pc, #152]	; (80042bc <HAL_SD_ConfigWideBusOperation+0x130>)
 8004224:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004234:	e01f      	b.n	8004276 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681d      	ldr	r5, [r3, #0]
 800425c:	466c      	mov	r4, sp
 800425e:	f107 0314 	add.w	r3, r7, #20
 8004262:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004266:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800426a:	f107 0308 	add.w	r3, r7, #8
 800426e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004270:	4628      	mov	r0, r5
 8004272:	f001 fa45 	bl	8005700 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800427e:	4618      	mov	r0, r3
 8004280:	f001 fb19 	bl	80058b6 <SDMMC_CmdBlockLength>
 8004284:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00c      	beq.n	80042a6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a0a      	ldr	r2, [pc, #40]	; (80042bc <HAL_SD_ConfigWideBusOperation+0x130>)
 8004292:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80042ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3728      	adds	r7, #40	; 0x28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bdb0      	pop	{r4, r5, r7, pc}
 80042ba:	bf00      	nop
 80042bc:	004005ff 	.word	0x004005ff

080042c0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80042cc:	f107 030c 	add.w	r3, r7, #12
 80042d0:	4619      	mov	r1, r3
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f970 	bl	80045b8 <SD_SendStatus>
 80042d8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d005      	beq.n	80042ec <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	431a      	orrs	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	0a5b      	lsrs	r3, r3, #9
 80042f0:	f003 030f 	and.w	r3, r3, #15
 80042f4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80042f6:	693b      	ldr	r3, [r7, #16]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004300:	b5b0      	push	{r4, r5, r7, lr}
 8004302:	b094      	sub	sp, #80	; 0x50
 8004304:	af04      	add	r7, sp, #16
 8004306:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004308:	2301      	movs	r3, #1
 800430a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f001 fa4c 	bl	80057ae <SDIO_GetPowerState>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d102      	bne.n	8004322 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800431c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004320:	e0b8      	b.n	8004494 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004326:	2b03      	cmp	r3, #3
 8004328:	d02f      	beq.n	800438a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f001 fc76 	bl	8005c20 <SDMMC_CmdSendCID>
 8004334:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <SD_InitCard+0x40>
    {
      return errorstate;
 800433c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800433e:	e0a9      	b.n	8004494 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2100      	movs	r1, #0
 8004346:	4618      	mov	r0, r3
 8004348:	f001 fa76 	bl	8005838 <SDIO_GetResponse>
 800434c:	4602      	mov	r2, r0
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2104      	movs	r1, #4
 8004358:	4618      	mov	r0, r3
 800435a:	f001 fa6d 	bl	8005838 <SDIO_GetResponse>
 800435e:	4602      	mov	r2, r0
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2108      	movs	r1, #8
 800436a:	4618      	mov	r0, r3
 800436c:	f001 fa64 	bl	8005838 <SDIO_GetResponse>
 8004370:	4602      	mov	r2, r0
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	210c      	movs	r1, #12
 800437c:	4618      	mov	r0, r3
 800437e:	f001 fa5b 	bl	8005838 <SDIO_GetResponse>
 8004382:	4602      	mov	r2, r0
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438e:	2b03      	cmp	r3, #3
 8004390:	d00d      	beq.n	80043ae <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f107 020e 	add.w	r2, r7, #14
 800439a:	4611      	mov	r1, r2
 800439c:	4618      	mov	r0, r3
 800439e:	f001 fc7c 	bl	8005c9a <SDMMC_CmdSetRelAdd>
 80043a2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80043a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <SD_InitCard+0xae>
    {
      return errorstate;
 80043aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ac:	e072      	b.n	8004494 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	d036      	beq.n	8004424 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80043b6:	89fb      	ldrh	r3, [r7, #14]
 80043b8:	461a      	mov	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c6:	041b      	lsls	r3, r3, #16
 80043c8:	4619      	mov	r1, r3
 80043ca:	4610      	mov	r0, r2
 80043cc:	f001 fc46 	bl	8005c5c <SDMMC_CmdSendCSD>
 80043d0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80043d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <SD_InitCard+0xdc>
    {
      return errorstate;
 80043d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043da:	e05b      	b.n	8004494 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2100      	movs	r1, #0
 80043e2:	4618      	mov	r0, r3
 80043e4:	f001 fa28 	bl	8005838 <SDIO_GetResponse>
 80043e8:	4602      	mov	r2, r0
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2104      	movs	r1, #4
 80043f4:	4618      	mov	r0, r3
 80043f6:	f001 fa1f 	bl	8005838 <SDIO_GetResponse>
 80043fa:	4602      	mov	r2, r0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2108      	movs	r1, #8
 8004406:	4618      	mov	r0, r3
 8004408:	f001 fa16 	bl	8005838 <SDIO_GetResponse>
 800440c:	4602      	mov	r2, r0
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	210c      	movs	r1, #12
 8004418:	4618      	mov	r0, r3
 800441a:	f001 fa0d 	bl	8005838 <SDIO_GetResponse>
 800441e:	4602      	mov	r2, r0
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2104      	movs	r1, #4
 800442a:	4618      	mov	r0, r3
 800442c:	f001 fa04 	bl	8005838 <SDIO_GetResponse>
 8004430:	4603      	mov	r3, r0
 8004432:	0d1a      	lsrs	r2, r3, #20
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004438:	f107 0310 	add.w	r3, r7, #16
 800443c:	4619      	mov	r1, r3
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7ff fcd4 	bl	8003dec <HAL_SD_GetCardCSD>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800444a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800444e:	e021      	b.n	8004494 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6819      	ldr	r1, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004458:	041b      	lsls	r3, r3, #16
 800445a:	2200      	movs	r2, #0
 800445c:	461c      	mov	r4, r3
 800445e:	4615      	mov	r5, r2
 8004460:	4622      	mov	r2, r4
 8004462:	462b      	mov	r3, r5
 8004464:	4608      	mov	r0, r1
 8004466:	f001 faf3 	bl	8005a50 <SDMMC_CmdSelDesel>
 800446a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800446c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <SD_InitCard+0x176>
  {
    return errorstate;
 8004472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004474:	e00e      	b.n	8004494 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681d      	ldr	r5, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	466c      	mov	r4, sp
 800447e:	f103 0210 	add.w	r2, r3, #16
 8004482:	ca07      	ldmia	r2, {r0, r1, r2}
 8004484:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004488:	3304      	adds	r3, #4
 800448a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800448c:	4628      	mov	r0, r5
 800448e:	f001 f937 	bl	8005700 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3740      	adds	r7, #64	; 0x40
 8004498:	46bd      	mov	sp, r7
 800449a:	bdb0      	pop	{r4, r5, r7, pc}

0800449c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	2300      	movs	r3, #0
 80044ae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f001 faee 	bl	8005a96 <SDMMC_CmdGoIdleState>
 80044ba:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	e072      	b.n	80045ac <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f001 fb01 	bl	8005ad2 <SDMMC_CmdOperCond>
 80044d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00d      	beq.n	80044f4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f001 fad7 	bl	8005a96 <SDMMC_CmdGoIdleState>
 80044e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d004      	beq.n	80044fa <SD_PowerON+0x5e>
    {
      return errorstate;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	e05b      	b.n	80045ac <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d137      	bne.n	8004572 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2100      	movs	r1, #0
 8004508:	4618      	mov	r0, r3
 800450a:	f001 fb01 	bl	8005b10 <SDMMC_CmdAppCommand>
 800450e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d02d      	beq.n	8004572 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004516:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800451a:	e047      	b.n	80045ac <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2100      	movs	r1, #0
 8004522:	4618      	mov	r0, r3
 8004524:	f001 faf4 	bl	8005b10 <SDMMC_CmdAppCommand>
 8004528:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <SD_PowerON+0x98>
    {
      return errorstate;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	e03b      	b.n	80045ac <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	491e      	ldr	r1, [pc, #120]	; (80045b4 <SD_PowerON+0x118>)
 800453a:	4618      	mov	r0, r3
 800453c:	f001 fb0a 	bl	8005b54 <SDMMC_CmdAppOperCommand>
 8004540:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004548:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800454c:	e02e      	b.n	80045ac <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2100      	movs	r1, #0
 8004554:	4618      	mov	r0, r3
 8004556:	f001 f96f 	bl	8005838 <SDIO_GetResponse>
 800455a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	0fdb      	lsrs	r3, r3, #31
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <SD_PowerON+0xcc>
 8004564:	2301      	movs	r3, #1
 8004566:	e000      	b.n	800456a <SD_PowerON+0xce>
 8004568:	2300      	movs	r3, #0
 800456a:	613b      	str	r3, [r7, #16]

    count++;
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	3301      	adds	r3, #1
 8004570:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004578:	4293      	cmp	r3, r2
 800457a:	d802      	bhi.n	8004582 <SD_PowerON+0xe6>
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0cc      	beq.n	800451c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004588:	4293      	cmp	r3, r2
 800458a:	d902      	bls.n	8004592 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800458c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004590:	e00c      	b.n	80045ac <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	645a      	str	r2, [r3, #68]	; 0x44
 80045a2:	e002      	b.n	80045aa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3718      	adds	r7, #24
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	c1100000 	.word	0xc1100000

080045b8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d102      	bne.n	80045ce <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80045c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045cc:	e018      	b.n	8004600 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d6:	041b      	lsls	r3, r3, #16
 80045d8:	4619      	mov	r1, r3
 80045da:	4610      	mov	r0, r2
 80045dc:	f001 fb7e 	bl	8005cdc <SDMMC_CmdSendStatus>
 80045e0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <SD_SendStatus+0x34>
  {
    return errorstate;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	e009      	b.n	8004600 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2100      	movs	r1, #0
 80045f2:	4618      	mov	r0, r3
 80045f4:	f001 f920 	bl	8005838 <SDIO_GetResponse>
 80045f8:	4602      	mov	r2, r0
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	2300      	movs	r3, #0
 8004616:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2100      	movs	r1, #0
 800461e:	4618      	mov	r0, r3
 8004620:	f001 f90a 	bl	8005838 <SDIO_GetResponse>
 8004624:	4603      	mov	r3, r0
 8004626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800462e:	d102      	bne.n	8004636 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004630:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004634:	e02f      	b.n	8004696 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004636:	f107 030c 	add.w	r3, r7, #12
 800463a:	4619      	mov	r1, r3
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f879 	bl	8004734 <SD_FindSCR>
 8004642:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	e023      	b.n	8004696 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01c      	beq.n	8004692 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004660:	041b      	lsls	r3, r3, #16
 8004662:	4619      	mov	r1, r3
 8004664:	4610      	mov	r0, r2
 8004666:	f001 fa53 	bl	8005b10 <SDMMC_CmdAppCommand>
 800466a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	e00f      	b.n	8004696 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2102      	movs	r1, #2
 800467c:	4618      	mov	r0, r3
 800467e:	f001 fa8c 	bl	8005b9a <SDMMC_CmdBusWidth>
 8004682:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	e003      	b.n	8004696 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800468e:	2300      	movs	r3, #0
 8004690:	e001      	b.n	8004696 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004692:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004696:	4618      	mov	r0, r3
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b086      	sub	sp, #24
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80046a6:	2300      	movs	r3, #0
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	2300      	movs	r3, #0
 80046ac:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2100      	movs	r1, #0
 80046b4:	4618      	mov	r0, r3
 80046b6:	f001 f8bf 	bl	8005838 <SDIO_GetResponse>
 80046ba:	4603      	mov	r3, r0
 80046bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046c4:	d102      	bne.n	80046cc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80046c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80046ca:	e02f      	b.n	800472c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80046cc:	f107 030c 	add.w	r3, r7, #12
 80046d0:	4619      	mov	r1, r3
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f82e 	bl	8004734 <SD_FindSCR>
 80046d8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	e023      	b.n	800472c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d01c      	beq.n	8004728 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f6:	041b      	lsls	r3, r3, #16
 80046f8:	4619      	mov	r1, r3
 80046fa:	4610      	mov	r0, r2
 80046fc:	f001 fa08 	bl	8005b10 <SDMMC_CmdAppCommand>
 8004700:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	e00f      	b.n	800472c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2100      	movs	r1, #0
 8004712:	4618      	mov	r0, r3
 8004714:	f001 fa41 	bl	8005b9a <SDMMC_CmdBusWidth>
 8004718:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	e003      	b.n	800472c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004724:	2300      	movs	r3, #0
 8004726:	e001      	b.n	800472c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004728:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800472c:	4618      	mov	r0, r3
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004734:	b590      	push	{r4, r7, lr}
 8004736:	b08f      	sub	sp, #60	; 0x3c
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800473e:	f7fc fd01 	bl	8001144 <HAL_GetTick>
 8004742:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004748:	2300      	movs	r3, #0
 800474a:	60bb      	str	r3, [r7, #8]
 800474c:	2300      	movs	r3, #0
 800474e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2108      	movs	r1, #8
 800475a:	4618      	mov	r0, r3
 800475c:	f001 f8ab 	bl	80058b6 <SDMMC_CmdBlockLength>
 8004760:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <SD_FindSCR+0x38>
  {
    return errorstate;
 8004768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476a:	e0b2      	b.n	80048d2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004774:	041b      	lsls	r3, r3, #16
 8004776:	4619      	mov	r1, r3
 8004778:	4610      	mov	r0, r2
 800477a:	f001 f9c9 	bl	8005b10 <SDMMC_CmdAppCommand>
 800477e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <SD_FindSCR+0x56>
  {
    return errorstate;
 8004786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004788:	e0a3      	b.n	80048d2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800478a:	f04f 33ff 	mov.w	r3, #4294967295
 800478e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004790:	2308      	movs	r3, #8
 8004792:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004794:	2330      	movs	r3, #48	; 0x30
 8004796:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004798:	2302      	movs	r3, #2
 800479a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800479c:	2300      	movs	r3, #0
 800479e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80047a0:	2301      	movs	r3, #1
 80047a2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f107 0210 	add.w	r2, r7, #16
 80047ac:	4611      	mov	r1, r2
 80047ae:	4618      	mov	r0, r3
 80047b0:	f001 f855 	bl	800585e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f001 fa10 	bl	8005bde <SDMMC_CmdSendSCR>
 80047be:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80047c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d02a      	beq.n	800481c <SD_FindSCR+0xe8>
  {
    return errorstate;
 80047c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c8:	e083      	b.n	80048d2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00f      	beq.n	80047f8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6819      	ldr	r1, [r3, #0]
 80047dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	f107 0208 	add.w	r2, r7, #8
 80047e4:	18d4      	adds	r4, r2, r3
 80047e6:	4608      	mov	r0, r1
 80047e8:	f000 ffb5 	bl	8005756 <SDIO_ReadFIFO>
 80047ec:	4603      	mov	r3, r0
 80047ee:	6023      	str	r3, [r4, #0]
      index++;
 80047f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f2:	3301      	adds	r3, #1
 80047f4:	637b      	str	r3, [r7, #52]	; 0x34
 80047f6:	e006      	b.n	8004806 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d012      	beq.n	800482c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004806:	f7fc fc9d 	bl	8001144 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004814:	d102      	bne.n	800481c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004816:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800481a:	e05a      	b.n	80048d2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004822:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0cf      	beq.n	80047ca <SD_FindSCR+0x96>
 800482a:	e000      	b.n	800482e <SD_FindSCR+0xfa>
      break;
 800482c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2208      	movs	r2, #8
 8004842:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004844:	2308      	movs	r3, #8
 8004846:	e044      	b.n	80048d2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d005      	beq.n	8004862 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2202      	movs	r2, #2
 800485c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800485e:	2302      	movs	r3, #2
 8004860:	e037      	b.n	80048d2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004868:	f003 0320 	and.w	r3, r3, #32
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2220      	movs	r2, #32
 8004876:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004878:	2320      	movs	r3, #32
 800487a:	e02a      	b.n	80048d2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f240 523a 	movw	r2, #1338	; 0x53a
 8004884:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	061a      	lsls	r2, r3, #24
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	021b      	lsls	r3, r3, #8
 800488e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004892:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	0a1b      	lsrs	r3, r3, #8
 8004898:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800489c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	0e1b      	lsrs	r3, r3, #24
 80048a2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80048a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a6:	601a      	str	r2, [r3, #0]
    scr++;
 80048a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048aa:	3304      	adds	r3, #4
 80048ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	061a      	lsls	r2, r3, #24
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	021b      	lsls	r3, r3, #8
 80048b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80048ba:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	0a1b      	lsrs	r3, r3, #8
 80048c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80048c4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	0e1b      	lsrs	r3, r3, #24
 80048ca:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80048cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ce:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	373c      	adds	r7, #60	; 0x3c
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd90      	pop	{r4, r7, pc}

080048da <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b082      	sub	sp, #8
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e03f      	b.n	800496c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d106      	bne.n	8004906 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7fc fab9 	bl	8000e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2224      	movs	r2, #36	; 0x24
 800490a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800491c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fc7a 	bl	8005218 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004932:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	695a      	ldr	r2, [r3, #20]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004942:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004952:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2220      	movs	r2, #32
 8004966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b0ba      	sub	sp, #232	; 0xe8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800499a:	2300      	movs	r3, #0
 800499c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80049b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10f      	bne.n	80049da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d009      	beq.n	80049da <HAL_UART_IRQHandler+0x66>
 80049c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ca:	f003 0320 	and.w	r3, r3, #32
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fb65 	bl	80050a2 <UART_Receive_IT>
      return;
 80049d8:	e256      	b.n	8004e88 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 80de 	beq.w	8004ba0 <HAL_UART_IRQHandler+0x22c>
 80049e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d106      	bne.n	80049fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 80d1 	beq.w	8004ba0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00b      	beq.n	8004a22 <HAL_UART_IRQHandler+0xae>
 8004a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d005      	beq.n	8004a22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	f043 0201 	orr.w	r2, r3, #1
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a26:	f003 0304 	and.w	r3, r3, #4
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00b      	beq.n	8004a46 <HAL_UART_IRQHandler+0xd2>
 8004a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d005      	beq.n	8004a46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	f043 0202 	orr.w	r2, r3, #2
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00b      	beq.n	8004a6a <HAL_UART_IRQHandler+0xf6>
 8004a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d005      	beq.n	8004a6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	f043 0204 	orr.w	r2, r3, #4
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a6e:	f003 0308 	and.w	r3, r3, #8
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d011      	beq.n	8004a9a <HAL_UART_IRQHandler+0x126>
 8004a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a7a:	f003 0320 	and.w	r3, r3, #32
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d105      	bne.n	8004a8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d005      	beq.n	8004a9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	f043 0208 	orr.w	r2, r3, #8
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 81ed 	beq.w	8004e7e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa8:	f003 0320 	and.w	r3, r3, #32
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d008      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x14e>
 8004ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ab4:	f003 0320 	and.w	r3, r3, #32
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d002      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 faf0 	bl	80050a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004acc:	2b40      	cmp	r3, #64	; 0x40
 8004ace:	bf0c      	ite	eq
 8004ad0:	2301      	moveq	r3, #1
 8004ad2:	2300      	movne	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d103      	bne.n	8004aee <HAL_UART_IRQHandler+0x17a>
 8004ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d04f      	beq.n	8004b8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f9f8 	bl	8004ee4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afe:	2b40      	cmp	r3, #64	; 0x40
 8004b00:	d141      	bne.n	8004b86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3314      	adds	r3, #20
 8004b08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b10:	e853 3f00 	ldrex	r3, [r3]
 8004b14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3314      	adds	r3, #20
 8004b2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1d9      	bne.n	8004b02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d013      	beq.n	8004b7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5a:	4a7d      	ldr	r2, [pc, #500]	; (8004d50 <HAL_UART_IRQHandler+0x3dc>)
 8004b5c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fc ffc0 	bl	8001ae8 <HAL_DMA_Abort_IT>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d016      	beq.n	8004b9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b78:	4610      	mov	r0, r2
 8004b7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b7c:	e00e      	b.n	8004b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f99a 	bl	8004eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b84:	e00a      	b.n	8004b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f996 	bl	8004eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b8c:	e006      	b.n	8004b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f992 	bl	8004eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004b9a:	e170      	b.n	8004e7e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b9c:	bf00      	nop
    return;
 8004b9e:	e16e      	b.n	8004e7e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	f040 814a 	bne.w	8004e3e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bae:	f003 0310 	and.w	r3, r3, #16
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 8143 	beq.w	8004e3e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bbc:	f003 0310 	and.w	r3, r3, #16
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 813c 	beq.w	8004e3e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60bb      	str	r3, [r7, #8]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	60bb      	str	r3, [r7, #8]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	60bb      	str	r3, [r7, #8]
 8004bda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be6:	2b40      	cmp	r3, #64	; 0x40
 8004be8:	f040 80b4 	bne.w	8004d54 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004bf8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 8140 	beq.w	8004e82 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	f080 8139 	bcs.w	8004e82 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c16:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c22:	f000 8088 	beq.w	8004d36 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	330c      	adds	r3, #12
 8004c2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c34:	e853 3f00 	ldrex	r3, [r3]
 8004c38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	330c      	adds	r3, #12
 8004c4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c62:	e841 2300 	strex	r3, r2, [r1]
 8004c66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1d9      	bne.n	8004c26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3314      	adds	r3, #20
 8004c78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c7c:	e853 3f00 	ldrex	r3, [r3]
 8004c80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c84:	f023 0301 	bic.w	r3, r3, #1
 8004c88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3314      	adds	r3, #20
 8004c92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ca2:	e841 2300 	strex	r3, r2, [r1]
 8004ca6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1e1      	bne.n	8004c72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3314      	adds	r3, #20
 8004cb4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cb8:	e853 3f00 	ldrex	r3, [r3]
 8004cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3314      	adds	r3, #20
 8004cce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004cd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004cd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004cd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004cda:	e841 2300 	strex	r3, r2, [r1]
 8004cde:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1e3      	bne.n	8004cae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	330c      	adds	r3, #12
 8004cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cfe:	e853 3f00 	ldrex	r3, [r3]
 8004d02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d06:	f023 0310 	bic.w	r3, r3, #16
 8004d0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	330c      	adds	r3, #12
 8004d14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004d18:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d1a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d20:	e841 2300 	strex	r3, r2, [r1]
 8004d24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e3      	bne.n	8004cf4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fc fe69 	bl	8001a08 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	4619      	mov	r1, r3
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f8c0 	bl	8004ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d4c:	e099      	b.n	8004e82 <HAL_UART_IRQHandler+0x50e>
 8004d4e:	bf00      	nop
 8004d50:	08004fab 	.word	0x08004fab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 808b 	beq.w	8004e86 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004d70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 8086 	beq.w	8004e86 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	330c      	adds	r3, #12
 8004d80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d84:	e853 3f00 	ldrex	r3, [r3]
 8004d88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	330c      	adds	r3, #12
 8004d9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d9e:	647a      	str	r2, [r7, #68]	; 0x44
 8004da0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004da4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004da6:	e841 2300 	strex	r3, r2, [r1]
 8004daa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1e3      	bne.n	8004d7a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3314      	adds	r3, #20
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	e853 3f00 	ldrex	r3, [r3]
 8004dc0:	623b      	str	r3, [r7, #32]
   return(result);
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	f023 0301 	bic.w	r3, r3, #1
 8004dc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3314      	adds	r3, #20
 8004dd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004dd6:	633a      	str	r2, [r7, #48]	; 0x30
 8004dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dde:	e841 2300 	strex	r3, r2, [r1]
 8004de2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1e3      	bne.n	8004db2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	330c      	adds	r3, #12
 8004dfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	e853 3f00 	ldrex	r3, [r3]
 8004e06:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 0310 	bic.w	r3, r3, #16
 8004e0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	330c      	adds	r3, #12
 8004e18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004e1c:	61fa      	str	r2, [r7, #28]
 8004e1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e20:	69b9      	ldr	r1, [r7, #24]
 8004e22:	69fa      	ldr	r2, [r7, #28]
 8004e24:	e841 2300 	strex	r3, r2, [r1]
 8004e28:	617b      	str	r3, [r7, #20]
   return(result);
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1e3      	bne.n	8004df8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e34:	4619      	mov	r1, r3
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f848 	bl	8004ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e3c:	e023      	b.n	8004e86 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d009      	beq.n	8004e5e <HAL_UART_IRQHandler+0x4ea>
 8004e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f8bb 	bl	8004fd2 <UART_Transmit_IT>
    return;
 8004e5c:	e014      	b.n	8004e88 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00e      	beq.n	8004e88 <HAL_UART_IRQHandler+0x514>
 8004e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d008      	beq.n	8004e88 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f8fb 	bl	8005072 <UART_EndTransmit_IT>
    return;
 8004e7c:	e004      	b.n	8004e88 <HAL_UART_IRQHandler+0x514>
    return;
 8004e7e:	bf00      	nop
 8004e80:	e002      	b.n	8004e88 <HAL_UART_IRQHandler+0x514>
      return;
 8004e82:	bf00      	nop
 8004e84:	e000      	b.n	8004e88 <HAL_UART_IRQHandler+0x514>
      return;
 8004e86:	bf00      	nop
  }
}
 8004e88:	37e8      	adds	r7, #232	; 0xe8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop

08004e90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b095      	sub	sp, #84	; 0x54
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	330c      	adds	r3, #12
 8004ef2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef6:	e853 3f00 	ldrex	r3, [r3]
 8004efa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	330c      	adds	r3, #12
 8004f0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f0c:	643a      	str	r2, [r7, #64]	; 0x40
 8004f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f14:	e841 2300 	strex	r3, r2, [r1]
 8004f18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1e5      	bne.n	8004eec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3314      	adds	r3, #20
 8004f26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	e853 3f00 	ldrex	r3, [r3]
 8004f2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	f023 0301 	bic.w	r3, r3, #1
 8004f36:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3314      	adds	r3, #20
 8004f3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f48:	e841 2300 	strex	r3, r2, [r1]
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1e5      	bne.n	8004f20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d119      	bne.n	8004f90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	330c      	adds	r3, #12
 8004f62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f023 0310 	bic.w	r3, r3, #16
 8004f72:	647b      	str	r3, [r7, #68]	; 0x44
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	330c      	adds	r3, #12
 8004f7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f7c:	61ba      	str	r2, [r7, #24]
 8004f7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	6979      	ldr	r1, [r7, #20]
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	613b      	str	r3, [r7, #16]
   return(result);
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e5      	bne.n	8004f5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f9e:	bf00      	nop
 8004fa0:	3754      	adds	r7, #84	; 0x54
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b084      	sub	sp, #16
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f7ff ff77 	bl	8004eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fca:	bf00      	nop
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b085      	sub	sp, #20
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b21      	cmp	r3, #33	; 0x21
 8004fe4:	d13e      	bne.n	8005064 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fee:	d114      	bne.n	800501a <UART_Transmit_IT+0x48>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d110      	bne.n	800501a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	461a      	mov	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800500c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	1c9a      	adds	r2, r3, #2
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	621a      	str	r2, [r3, #32]
 8005018:	e008      	b.n	800502c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	1c59      	adds	r1, r3, #1
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6211      	str	r1, [r2, #32]
 8005024:	781a      	ldrb	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005030:	b29b      	uxth	r3, r3
 8005032:	3b01      	subs	r3, #1
 8005034:	b29b      	uxth	r3, r3
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	4619      	mov	r1, r3
 800503a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10f      	bne.n	8005060 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800504e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68da      	ldr	r2, [r3, #12]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800505e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005060:	2300      	movs	r3, #0
 8005062:	e000      	b.n	8005066 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005064:	2302      	movs	r3, #2
  }
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b082      	sub	sp, #8
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005088:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2220      	movs	r2, #32
 800508e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7ff fefc 	bl	8004e90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b08c      	sub	sp, #48	; 0x30
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b22      	cmp	r3, #34	; 0x22
 80050b4:	f040 80ab 	bne.w	800520e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c0:	d117      	bne.n	80050f2 <UART_Receive_IT+0x50>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d113      	bne.n	80050f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050ca:	2300      	movs	r3, #0
 80050cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ea:	1c9a      	adds	r2, r3, #2
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	629a      	str	r2, [r3, #40]	; 0x28
 80050f0:	e026      	b.n	8005140 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80050f8:	2300      	movs	r3, #0
 80050fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005104:	d007      	beq.n	8005116 <UART_Receive_IT+0x74>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10a      	bne.n	8005124 <UART_Receive_IT+0x82>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d106      	bne.n	8005124 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	b2da      	uxtb	r2, r3
 800511e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005120:	701a      	strb	r2, [r3, #0]
 8005122:	e008      	b.n	8005136 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	b2db      	uxtb	r3, r3
 800512c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005130:	b2da      	uxtb	r2, r3
 8005132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005134:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29b      	uxth	r3, r3
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	4619      	mov	r1, r3
 800514e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005150:	2b00      	cmp	r3, #0
 8005152:	d15a      	bne.n	800520a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0220 	bic.w	r2, r2, #32
 8005162:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005172:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695a      	ldr	r2, [r3, #20]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 0201 	bic.w	r2, r2, #1
 8005182:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005190:	2b01      	cmp	r3, #1
 8005192:	d135      	bne.n	8005200 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	330c      	adds	r3, #12
 80051a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	e853 3f00 	ldrex	r3, [r3]
 80051a8:	613b      	str	r3, [r7, #16]
   return(result);
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f023 0310 	bic.w	r3, r3, #16
 80051b0:	627b      	str	r3, [r7, #36]	; 0x24
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	330c      	adds	r3, #12
 80051b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ba:	623a      	str	r2, [r7, #32]
 80051bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051be:	69f9      	ldr	r1, [r7, #28]
 80051c0:	6a3a      	ldr	r2, [r7, #32]
 80051c2:	e841 2300 	strex	r3, r2, [r1]
 80051c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1e5      	bne.n	800519a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0310 	and.w	r3, r3, #16
 80051d8:	2b10      	cmp	r3, #16
 80051da:	d10a      	bne.n	80051f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051dc:	2300      	movs	r3, #0
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	60fb      	str	r3, [r7, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051f6:	4619      	mov	r1, r3
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f7ff fe67 	bl	8004ecc <HAL_UARTEx_RxEventCallback>
 80051fe:	e002      	b.n	8005206 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7ff fe4f 	bl	8004ea4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	e002      	b.n	8005210 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	e000      	b.n	8005210 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800520e:	2302      	movs	r3, #2
  }
}
 8005210:	4618      	mov	r0, r3
 8005212:	3730      	adds	r7, #48	; 0x30
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800521c:	b0c0      	sub	sp, #256	; 0x100
 800521e:	af00      	add	r7, sp, #0
 8005220:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005234:	68d9      	ldr	r1, [r3, #12]
 8005236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	ea40 0301 	orr.w	r3, r0, r1
 8005240:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	431a      	orrs	r2, r3
 8005250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	431a      	orrs	r2, r3
 8005258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	4313      	orrs	r3, r2
 8005260:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005270:	f021 010c 	bic.w	r1, r1, #12
 8005274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800527e:	430b      	orrs	r3, r1
 8005280:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800528e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005292:	6999      	ldr	r1, [r3, #24]
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	ea40 0301 	orr.w	r3, r0, r1
 800529e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	4b8f      	ldr	r3, [pc, #572]	; (80054e4 <UART_SetConfig+0x2cc>)
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d005      	beq.n	80052b8 <UART_SetConfig+0xa0>
 80052ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	4b8d      	ldr	r3, [pc, #564]	; (80054e8 <UART_SetConfig+0x2d0>)
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d104      	bne.n	80052c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052b8:	f7fd f978 	bl	80025ac <HAL_RCC_GetPCLK2Freq>
 80052bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80052c0:	e003      	b.n	80052ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052c2:	f7fd f95f 	bl	8002584 <HAL_RCC_GetPCLK1Freq>
 80052c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052d4:	f040 810c 	bne.w	80054f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052dc:	2200      	movs	r2, #0
 80052de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80052ea:	4622      	mov	r2, r4
 80052ec:	462b      	mov	r3, r5
 80052ee:	1891      	adds	r1, r2, r2
 80052f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80052f2:	415b      	adcs	r3, r3
 80052f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052fa:	4621      	mov	r1, r4
 80052fc:	eb12 0801 	adds.w	r8, r2, r1
 8005300:	4629      	mov	r1, r5
 8005302:	eb43 0901 	adc.w	r9, r3, r1
 8005306:	f04f 0200 	mov.w	r2, #0
 800530a:	f04f 0300 	mov.w	r3, #0
 800530e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005312:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005316:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800531a:	4690      	mov	r8, r2
 800531c:	4699      	mov	r9, r3
 800531e:	4623      	mov	r3, r4
 8005320:	eb18 0303 	adds.w	r3, r8, r3
 8005324:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005328:	462b      	mov	r3, r5
 800532a:	eb49 0303 	adc.w	r3, r9, r3
 800532e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800533e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005342:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005346:	460b      	mov	r3, r1
 8005348:	18db      	adds	r3, r3, r3
 800534a:	653b      	str	r3, [r7, #80]	; 0x50
 800534c:	4613      	mov	r3, r2
 800534e:	eb42 0303 	adc.w	r3, r2, r3
 8005352:	657b      	str	r3, [r7, #84]	; 0x54
 8005354:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005358:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800535c:	f7fa ffa8 	bl	80002b0 <__aeabi_uldivmod>
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	4b61      	ldr	r3, [pc, #388]	; (80054ec <UART_SetConfig+0x2d4>)
 8005366:	fba3 2302 	umull	r2, r3, r3, r2
 800536a:	095b      	lsrs	r3, r3, #5
 800536c:	011c      	lsls	r4, r3, #4
 800536e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005372:	2200      	movs	r2, #0
 8005374:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005378:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800537c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005380:	4642      	mov	r2, r8
 8005382:	464b      	mov	r3, r9
 8005384:	1891      	adds	r1, r2, r2
 8005386:	64b9      	str	r1, [r7, #72]	; 0x48
 8005388:	415b      	adcs	r3, r3
 800538a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800538c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005390:	4641      	mov	r1, r8
 8005392:	eb12 0a01 	adds.w	sl, r2, r1
 8005396:	4649      	mov	r1, r9
 8005398:	eb43 0b01 	adc.w	fp, r3, r1
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053b0:	4692      	mov	sl, r2
 80053b2:	469b      	mov	fp, r3
 80053b4:	4643      	mov	r3, r8
 80053b6:	eb1a 0303 	adds.w	r3, sl, r3
 80053ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053be:	464b      	mov	r3, r9
 80053c0:	eb4b 0303 	adc.w	r3, fp, r3
 80053c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053dc:	460b      	mov	r3, r1
 80053de:	18db      	adds	r3, r3, r3
 80053e0:	643b      	str	r3, [r7, #64]	; 0x40
 80053e2:	4613      	mov	r3, r2
 80053e4:	eb42 0303 	adc.w	r3, r2, r3
 80053e8:	647b      	str	r3, [r7, #68]	; 0x44
 80053ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80053f2:	f7fa ff5d 	bl	80002b0 <__aeabi_uldivmod>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	4611      	mov	r1, r2
 80053fc:	4b3b      	ldr	r3, [pc, #236]	; (80054ec <UART_SetConfig+0x2d4>)
 80053fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005402:	095b      	lsrs	r3, r3, #5
 8005404:	2264      	movs	r2, #100	; 0x64
 8005406:	fb02 f303 	mul.w	r3, r2, r3
 800540a:	1acb      	subs	r3, r1, r3
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005412:	4b36      	ldr	r3, [pc, #216]	; (80054ec <UART_SetConfig+0x2d4>)
 8005414:	fba3 2302 	umull	r2, r3, r3, r2
 8005418:	095b      	lsrs	r3, r3, #5
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005420:	441c      	add	r4, r3
 8005422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005426:	2200      	movs	r2, #0
 8005428:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800542c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005430:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005434:	4642      	mov	r2, r8
 8005436:	464b      	mov	r3, r9
 8005438:	1891      	adds	r1, r2, r2
 800543a:	63b9      	str	r1, [r7, #56]	; 0x38
 800543c:	415b      	adcs	r3, r3
 800543e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005440:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005444:	4641      	mov	r1, r8
 8005446:	1851      	adds	r1, r2, r1
 8005448:	6339      	str	r1, [r7, #48]	; 0x30
 800544a:	4649      	mov	r1, r9
 800544c:	414b      	adcs	r3, r1
 800544e:	637b      	str	r3, [r7, #52]	; 0x34
 8005450:	f04f 0200 	mov.w	r2, #0
 8005454:	f04f 0300 	mov.w	r3, #0
 8005458:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800545c:	4659      	mov	r1, fp
 800545e:	00cb      	lsls	r3, r1, #3
 8005460:	4651      	mov	r1, sl
 8005462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005466:	4651      	mov	r1, sl
 8005468:	00ca      	lsls	r2, r1, #3
 800546a:	4610      	mov	r0, r2
 800546c:	4619      	mov	r1, r3
 800546e:	4603      	mov	r3, r0
 8005470:	4642      	mov	r2, r8
 8005472:	189b      	adds	r3, r3, r2
 8005474:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005478:	464b      	mov	r3, r9
 800547a:	460a      	mov	r2, r1
 800547c:	eb42 0303 	adc.w	r3, r2, r3
 8005480:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005490:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005494:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005498:	460b      	mov	r3, r1
 800549a:	18db      	adds	r3, r3, r3
 800549c:	62bb      	str	r3, [r7, #40]	; 0x28
 800549e:	4613      	mov	r3, r2
 80054a0:	eb42 0303 	adc.w	r3, r2, r3
 80054a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80054ae:	f7fa feff 	bl	80002b0 <__aeabi_uldivmod>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	4b0d      	ldr	r3, [pc, #52]	; (80054ec <UART_SetConfig+0x2d4>)
 80054b8:	fba3 1302 	umull	r1, r3, r3, r2
 80054bc:	095b      	lsrs	r3, r3, #5
 80054be:	2164      	movs	r1, #100	; 0x64
 80054c0:	fb01 f303 	mul.w	r3, r1, r3
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	3332      	adds	r3, #50	; 0x32
 80054ca:	4a08      	ldr	r2, [pc, #32]	; (80054ec <UART_SetConfig+0x2d4>)
 80054cc:	fba2 2303 	umull	r2, r3, r2, r3
 80054d0:	095b      	lsrs	r3, r3, #5
 80054d2:	f003 0207 	and.w	r2, r3, #7
 80054d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4422      	add	r2, r4
 80054de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054e0:	e105      	b.n	80056ee <UART_SetConfig+0x4d6>
 80054e2:	bf00      	nop
 80054e4:	40011000 	.word	0x40011000
 80054e8:	40011400 	.word	0x40011400
 80054ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054f4:	2200      	movs	r2, #0
 80054f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80054fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005502:	4642      	mov	r2, r8
 8005504:	464b      	mov	r3, r9
 8005506:	1891      	adds	r1, r2, r2
 8005508:	6239      	str	r1, [r7, #32]
 800550a:	415b      	adcs	r3, r3
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
 800550e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005512:	4641      	mov	r1, r8
 8005514:	1854      	adds	r4, r2, r1
 8005516:	4649      	mov	r1, r9
 8005518:	eb43 0501 	adc.w	r5, r3, r1
 800551c:	f04f 0200 	mov.w	r2, #0
 8005520:	f04f 0300 	mov.w	r3, #0
 8005524:	00eb      	lsls	r3, r5, #3
 8005526:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800552a:	00e2      	lsls	r2, r4, #3
 800552c:	4614      	mov	r4, r2
 800552e:	461d      	mov	r5, r3
 8005530:	4643      	mov	r3, r8
 8005532:	18e3      	adds	r3, r4, r3
 8005534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005538:	464b      	mov	r3, r9
 800553a:	eb45 0303 	adc.w	r3, r5, r3
 800553e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800554e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005552:	f04f 0200 	mov.w	r2, #0
 8005556:	f04f 0300 	mov.w	r3, #0
 800555a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800555e:	4629      	mov	r1, r5
 8005560:	008b      	lsls	r3, r1, #2
 8005562:	4621      	mov	r1, r4
 8005564:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005568:	4621      	mov	r1, r4
 800556a:	008a      	lsls	r2, r1, #2
 800556c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005570:	f7fa fe9e 	bl	80002b0 <__aeabi_uldivmod>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	4b60      	ldr	r3, [pc, #384]	; (80056fc <UART_SetConfig+0x4e4>)
 800557a:	fba3 2302 	umull	r2, r3, r3, r2
 800557e:	095b      	lsrs	r3, r3, #5
 8005580:	011c      	lsls	r4, r3, #4
 8005582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005586:	2200      	movs	r2, #0
 8005588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800558c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005590:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005594:	4642      	mov	r2, r8
 8005596:	464b      	mov	r3, r9
 8005598:	1891      	adds	r1, r2, r2
 800559a:	61b9      	str	r1, [r7, #24]
 800559c:	415b      	adcs	r3, r3
 800559e:	61fb      	str	r3, [r7, #28]
 80055a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055a4:	4641      	mov	r1, r8
 80055a6:	1851      	adds	r1, r2, r1
 80055a8:	6139      	str	r1, [r7, #16]
 80055aa:	4649      	mov	r1, r9
 80055ac:	414b      	adcs	r3, r1
 80055ae:	617b      	str	r3, [r7, #20]
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	f04f 0300 	mov.w	r3, #0
 80055b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055bc:	4659      	mov	r1, fp
 80055be:	00cb      	lsls	r3, r1, #3
 80055c0:	4651      	mov	r1, sl
 80055c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055c6:	4651      	mov	r1, sl
 80055c8:	00ca      	lsls	r2, r1, #3
 80055ca:	4610      	mov	r0, r2
 80055cc:	4619      	mov	r1, r3
 80055ce:	4603      	mov	r3, r0
 80055d0:	4642      	mov	r2, r8
 80055d2:	189b      	adds	r3, r3, r2
 80055d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055d8:	464b      	mov	r3, r9
 80055da:	460a      	mov	r2, r1
 80055dc:	eb42 0303 	adc.w	r3, r2, r3
 80055e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80055ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	f04f 0300 	mov.w	r3, #0
 80055f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80055fc:	4649      	mov	r1, r9
 80055fe:	008b      	lsls	r3, r1, #2
 8005600:	4641      	mov	r1, r8
 8005602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005606:	4641      	mov	r1, r8
 8005608:	008a      	lsls	r2, r1, #2
 800560a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800560e:	f7fa fe4f 	bl	80002b0 <__aeabi_uldivmod>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4b39      	ldr	r3, [pc, #228]	; (80056fc <UART_SetConfig+0x4e4>)
 8005618:	fba3 1302 	umull	r1, r3, r3, r2
 800561c:	095b      	lsrs	r3, r3, #5
 800561e:	2164      	movs	r1, #100	; 0x64
 8005620:	fb01 f303 	mul.w	r3, r1, r3
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	3332      	adds	r3, #50	; 0x32
 800562a:	4a34      	ldr	r2, [pc, #208]	; (80056fc <UART_SetConfig+0x4e4>)
 800562c:	fba2 2303 	umull	r2, r3, r2, r3
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005636:	441c      	add	r4, r3
 8005638:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800563c:	2200      	movs	r2, #0
 800563e:	673b      	str	r3, [r7, #112]	; 0x70
 8005640:	677a      	str	r2, [r7, #116]	; 0x74
 8005642:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005646:	4642      	mov	r2, r8
 8005648:	464b      	mov	r3, r9
 800564a:	1891      	adds	r1, r2, r2
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	415b      	adcs	r3, r3
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005656:	4641      	mov	r1, r8
 8005658:	1851      	adds	r1, r2, r1
 800565a:	6039      	str	r1, [r7, #0]
 800565c:	4649      	mov	r1, r9
 800565e:	414b      	adcs	r3, r1
 8005660:	607b      	str	r3, [r7, #4]
 8005662:	f04f 0200 	mov.w	r2, #0
 8005666:	f04f 0300 	mov.w	r3, #0
 800566a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800566e:	4659      	mov	r1, fp
 8005670:	00cb      	lsls	r3, r1, #3
 8005672:	4651      	mov	r1, sl
 8005674:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005678:	4651      	mov	r1, sl
 800567a:	00ca      	lsls	r2, r1, #3
 800567c:	4610      	mov	r0, r2
 800567e:	4619      	mov	r1, r3
 8005680:	4603      	mov	r3, r0
 8005682:	4642      	mov	r2, r8
 8005684:	189b      	adds	r3, r3, r2
 8005686:	66bb      	str	r3, [r7, #104]	; 0x68
 8005688:	464b      	mov	r3, r9
 800568a:	460a      	mov	r2, r1
 800568c:	eb42 0303 	adc.w	r3, r2, r3
 8005690:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	663b      	str	r3, [r7, #96]	; 0x60
 800569c:	667a      	str	r2, [r7, #100]	; 0x64
 800569e:	f04f 0200 	mov.w	r2, #0
 80056a2:	f04f 0300 	mov.w	r3, #0
 80056a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80056aa:	4649      	mov	r1, r9
 80056ac:	008b      	lsls	r3, r1, #2
 80056ae:	4641      	mov	r1, r8
 80056b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056b4:	4641      	mov	r1, r8
 80056b6:	008a      	lsls	r2, r1, #2
 80056b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80056bc:	f7fa fdf8 	bl	80002b0 <__aeabi_uldivmod>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	4b0d      	ldr	r3, [pc, #52]	; (80056fc <UART_SetConfig+0x4e4>)
 80056c6:	fba3 1302 	umull	r1, r3, r3, r2
 80056ca:	095b      	lsrs	r3, r3, #5
 80056cc:	2164      	movs	r1, #100	; 0x64
 80056ce:	fb01 f303 	mul.w	r3, r1, r3
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	3332      	adds	r3, #50	; 0x32
 80056d8:	4a08      	ldr	r2, [pc, #32]	; (80056fc <UART_SetConfig+0x4e4>)
 80056da:	fba2 2303 	umull	r2, r3, r2, r3
 80056de:	095b      	lsrs	r3, r3, #5
 80056e0:	f003 020f 	and.w	r2, r3, #15
 80056e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4422      	add	r2, r4
 80056ec:	609a      	str	r2, [r3, #8]
}
 80056ee:	bf00      	nop
 80056f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80056f4:	46bd      	mov	sp, r7
 80056f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056fa:	bf00      	nop
 80056fc:	51eb851f 	.word	0x51eb851f

08005700 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005700:	b084      	sub	sp, #16
 8005702:	b480      	push	{r7}
 8005704:	b085      	sub	sp, #20
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
 800570a:	f107 001c 	add.w	r0, r7, #28
 800570e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005712:	2300      	movs	r3, #0
 8005714:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005716:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005718:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800571a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800571e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005720:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005722:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005726:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800572a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800573a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	431a      	orrs	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	b004      	add	sp, #16
 8005754:	4770      	bx	lr

08005756 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005764:	4618      	mov	r0, r3
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2203      	movs	r2, #3
 800579e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0303 	and.w	r3, r3, #3
}
 80057be:	4618      	mov	r0, r3
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b085      	sub	sp, #20
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80057d4:	2300      	movs	r3, #0
 80057d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80057e8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80057ee:	431a      	orrs	r2, r3
                       Command->CPSM);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80057f4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005804:	f023 030f 	bic.w	r3, r3, #15
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	431a      	orrs	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800581e:	b480      	push	{r7}
 8005820:	b083      	sub	sp, #12
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	b2db      	uxtb	r3, r3
}
 800582c:	4618      	mov	r0, r3
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	3314      	adds	r3, #20
 8005846:	461a      	mov	r2, r3
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	4413      	add	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
}  
 8005852:	4618      	mov	r0, r3
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800585e:	b480      	push	{r7}
 8005860:	b085      	sub	sp, #20
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005868:	2300      	movs	r3, #0
 800586a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005884:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800588a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005890:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	4313      	orrs	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	431a      	orrs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0

}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b088      	sub	sp, #32
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80058c4:	2310      	movs	r3, #16
 80058c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058c8:	2340      	movs	r3, #64	; 0x40
 80058ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058cc:	2300      	movs	r3, #0
 80058ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058d6:	f107 0308 	add.w	r3, r7, #8
 80058da:	4619      	mov	r1, r3
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7ff ff74 	bl	80057ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80058e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e6:	2110      	movs	r1, #16
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fa19 	bl	8005d20 <SDMMC_GetCmdResp1>
 80058ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058f0:	69fb      	ldr	r3, [r7, #28]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3720      	adds	r7, #32
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b088      	sub	sp, #32
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005908:	2311      	movs	r3, #17
 800590a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800590c:	2340      	movs	r3, #64	; 0x40
 800590e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005910:	2300      	movs	r3, #0
 8005912:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005918:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800591a:	f107 0308 	add.w	r3, r7, #8
 800591e:	4619      	mov	r1, r3
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7ff ff52 	bl	80057ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005926:	f241 3288 	movw	r2, #5000	; 0x1388
 800592a:	2111      	movs	r1, #17
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f9f7 	bl	8005d20 <SDMMC_GetCmdResp1>
 8005932:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005934:	69fb      	ldr	r3, [r7, #28]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3720      	adds	r7, #32
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b088      	sub	sp, #32
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800594c:	2312      	movs	r3, #18
 800594e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005950:	2340      	movs	r3, #64	; 0x40
 8005952:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005954:	2300      	movs	r3, #0
 8005956:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800595c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800595e:	f107 0308 	add.w	r3, r7, #8
 8005962:	4619      	mov	r1, r3
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f7ff ff30 	bl	80057ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800596a:	f241 3288 	movw	r2, #5000	; 0x1388
 800596e:	2112      	movs	r1, #18
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f9d5 	bl	8005d20 <SDMMC_GetCmdResp1>
 8005976:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005978:	69fb      	ldr	r3, [r7, #28]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3720      	adds	r7, #32
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b088      	sub	sp, #32
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
 800598a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005990:	2318      	movs	r3, #24
 8005992:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005994:	2340      	movs	r3, #64	; 0x40
 8005996:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005998:	2300      	movs	r3, #0
 800599a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800599c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059a2:	f107 0308 	add.w	r3, r7, #8
 80059a6:	4619      	mov	r1, r3
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f7ff ff0e 	bl	80057ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80059ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b2:	2118      	movs	r1, #24
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 f9b3 	bl	8005d20 <SDMMC_GetCmdResp1>
 80059ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059bc:	69fb      	ldr	r3, [r7, #28]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3720      	adds	r7, #32
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b088      	sub	sp, #32
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80059d4:	2319      	movs	r3, #25
 80059d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80059d8:	2340      	movs	r3, #64	; 0x40
 80059da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80059dc:	2300      	movs	r3, #0
 80059de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059e6:	f107 0308 	add.w	r3, r7, #8
 80059ea:	4619      	mov	r1, r3
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7ff feec 	bl	80057ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80059f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f6:	2119      	movs	r1, #25
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 f991 	bl	8005d20 <SDMMC_GetCmdResp1>
 80059fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a00:	69fb      	ldr	r3, [r7, #28]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3720      	adds	r7, #32
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
	...

08005a0c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b088      	sub	sp, #32
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005a18:	230c      	movs	r3, #12
 8005a1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a1c:	2340      	movs	r3, #64	; 0x40
 8005a1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a20:	2300      	movs	r3, #0
 8005a22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a2a:	f107 0308 	add.w	r3, r7, #8
 8005a2e:	4619      	mov	r1, r3
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7ff feca 	bl	80057ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005a36:	4a05      	ldr	r2, [pc, #20]	; (8005a4c <SDMMC_CmdStopTransfer+0x40>)
 8005a38:	210c      	movs	r1, #12
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f970 	bl	8005d20 <SDMMC_GetCmdResp1>
 8005a40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a42:	69fb      	ldr	r3, [r7, #28]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3720      	adds	r7, #32
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	05f5e100 	.word	0x05f5e100

08005a50 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08a      	sub	sp, #40	; 0x28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005a60:	2307      	movs	r3, #7
 8005a62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a64:	2340      	movs	r3, #64	; 0x40
 8005a66:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a70:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a72:	f107 0310 	add.w	r3, r7, #16
 8005a76:	4619      	mov	r1, r3
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f7ff fea6 	bl	80057ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a82:	2107      	movs	r1, #7
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f94b 	bl	8005d20 <SDMMC_GetCmdResp1>
 8005a8a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3728      	adds	r7, #40	; 0x28
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b088      	sub	sp, #32
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ab2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ab4:	f107 0308 	add.w	r3, r7, #8
 8005ab8:	4619      	mov	r1, r3
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7ff fe85 	bl	80057ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fb65 	bl	8006190 <SDMMC_GetCmdError>
 8005ac6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ac8:	69fb      	ldr	r3, [r7, #28]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3720      	adds	r7, #32
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b088      	sub	sp, #32
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005ada:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005ade:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005ae0:	2308      	movs	r3, #8
 8005ae2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ae4:	2340      	movs	r3, #64	; 0x40
 8005ae6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005af0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005af2:	f107 0308 	add.w	r3, r7, #8
 8005af6:	4619      	mov	r1, r3
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f7ff fe66 	bl	80057ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 faf8 	bl	80060f4 <SDMMC_GetCmdResp7>
 8005b04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b06:	69fb      	ldr	r3, [r7, #28]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3720      	adds	r7, #32
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b088      	sub	sp, #32
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005b1e:	2337      	movs	r3, #55	; 0x37
 8005b20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b22:	2340      	movs	r3, #64	; 0x40
 8005b24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b26:	2300      	movs	r3, #0
 8005b28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b30:	f107 0308 	add.w	r3, r7, #8
 8005b34:	4619      	mov	r1, r3
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7ff fe47 	bl	80057ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b40:	2137      	movs	r1, #55	; 0x37
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f8ec 	bl	8005d20 <SDMMC_GetCmdResp1>
 8005b48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b4a:	69fb      	ldr	r3, [r7, #28]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3720      	adds	r7, #32
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b088      	sub	sp, #32
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005b6a:	2329      	movs	r3, #41	; 0x29
 8005b6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b6e:	2340      	movs	r3, #64	; 0x40
 8005b70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b72:	2300      	movs	r3, #0
 8005b74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b7c:	f107 0308 	add.w	r3, r7, #8
 8005b80:	4619      	mov	r1, r3
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7ff fe21 	bl	80057ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f9ff 	bl	8005f8c <SDMMC_GetCmdResp3>
 8005b8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b90:	69fb      	ldr	r3, [r7, #28]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3720      	adds	r7, #32
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b088      	sub	sp, #32
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005ba8:	2306      	movs	r3, #6
 8005baa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005bac:	2340      	movs	r3, #64	; 0x40
 8005bae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bb8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005bba:	f107 0308 	add.w	r3, r7, #8
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7ff fe02 	bl	80057ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bca:	2106      	movs	r1, #6
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f8a7 	bl	8005d20 <SDMMC_GetCmdResp1>
 8005bd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005bd4:	69fb      	ldr	r3, [r7, #28]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3720      	adds	r7, #32
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b088      	sub	sp, #32
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005be6:	2300      	movs	r3, #0
 8005be8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005bea:	2333      	movs	r3, #51	; 0x33
 8005bec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005bee:	2340      	movs	r3, #64	; 0x40
 8005bf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bfa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005bfc:	f107 0308 	add.w	r3, r7, #8
 8005c00:	4619      	mov	r1, r3
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7ff fde1 	bl	80057ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c0c:	2133      	movs	r1, #51	; 0x33
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f886 	bl	8005d20 <SDMMC_GetCmdResp1>
 8005c14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c16:	69fb      	ldr	r3, [r7, #28]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3720      	adds	r7, #32
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b088      	sub	sp, #32
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005c30:	23c0      	movs	r3, #192	; 0xc0
 8005c32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c34:	2300      	movs	r3, #0
 8005c36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c3e:	f107 0308 	add.w	r3, r7, #8
 8005c42:	4619      	mov	r1, r3
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f7ff fdc0 	bl	80057ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f956 	bl	8005efc <SDMMC_GetCmdResp2>
 8005c50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c52:	69fb      	ldr	r3, [r7, #28]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3720      	adds	r7, #32
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005c6a:	2309      	movs	r3, #9
 8005c6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005c6e:	23c0      	movs	r3, #192	; 0xc0
 8005c70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c72:	2300      	movs	r3, #0
 8005c74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c7c:	f107 0308 	add.w	r3, r7, #8
 8005c80:	4619      	mov	r1, r3
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7ff fda1 	bl	80057ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f937 	bl	8005efc <SDMMC_GetCmdResp2>
 8005c8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c90:	69fb      	ldr	r3, [r7, #28]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3720      	adds	r7, #32
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b088      	sub	sp, #32
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005cac:	2340      	movs	r3, #64	; 0x40
 8005cae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cb8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005cba:	f107 0308 	add.w	r3, r7, #8
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7ff fd82 	bl	80057ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	2103      	movs	r1, #3
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f99c 	bl	8006008 <SDMMC_GetCmdResp6>
 8005cd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cd2:	69fb      	ldr	r3, [r7, #28]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3720      	adds	r7, #32
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b088      	sub	sp, #32
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005cea:	230d      	movs	r3, #13
 8005cec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005cee:	2340      	movs	r3, #64	; 0x40
 8005cf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cfa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005cfc:	f107 0308 	add.w	r3, r7, #8
 8005d00:	4619      	mov	r1, r3
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7ff fd61 	bl	80057ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d0c:	210d      	movs	r1, #13
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f806 	bl	8005d20 <SDMMC_GetCmdResp1>
 8005d14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d16:	69fb      	ldr	r3, [r7, #28]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3720      	adds	r7, #32
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	460b      	mov	r3, r1
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005d2e:	4b70      	ldr	r3, [pc, #448]	; (8005ef0 <SDMMC_GetCmdResp1+0x1d0>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a70      	ldr	r2, [pc, #448]	; (8005ef4 <SDMMC_GetCmdResp1+0x1d4>)
 8005d34:	fba2 2303 	umull	r2, r3, r2, r3
 8005d38:	0a5a      	lsrs	r2, r3, #9
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	fb02 f303 	mul.w	r3, r2, r3
 8005d40:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	1e5a      	subs	r2, r3, #1
 8005d46:	61fa      	str	r2, [r7, #28]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d102      	bne.n	8005d52 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d50:	e0c9      	b.n	8005ee6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d56:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d0ef      	beq.n	8005d42 <SDMMC_GetCmdResp1+0x22>
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1ea      	bne.n	8005d42 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d004      	beq.n	8005d82 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2204      	movs	r2, #4
 8005d7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d7e:	2304      	movs	r3, #4
 8005d80:	e0b1      	b.n	8005ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d004      	beq.n	8005d98 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e0a6      	b.n	8005ee6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	22c5      	movs	r2, #197	; 0xc5
 8005d9c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f7ff fd3d 	bl	800581e <SDIO_GetCommandResponse>
 8005da4:	4603      	mov	r3, r0
 8005da6:	461a      	mov	r2, r3
 8005da8:	7afb      	ldrb	r3, [r7, #11]
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d001      	beq.n	8005db2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e099      	b.n	8005ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005db2:	2100      	movs	r1, #0
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f7ff fd3f 	bl	8005838 <SDIO_GetResponse>
 8005dba:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	4b4e      	ldr	r3, [pc, #312]	; (8005ef8 <SDMMC_GetCmdResp1+0x1d8>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	e08d      	b.n	8005ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	da02      	bge.n	8005dd6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005dd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dd4:	e087      	b.n	8005ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005de0:	2340      	movs	r3, #64	; 0x40
 8005de2:	e080      	b.n	8005ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005dee:	2380      	movs	r3, #128	; 0x80
 8005df0:	e079      	b.n	8005ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e00:	e071      	b.n	8005ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e10:	e069      	b.n	8005ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d002      	beq.n	8005e22 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005e1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e20:	e061      	b.n	8005ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d002      	beq.n	8005e32 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005e2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e30:	e059      	b.n	8005ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e40:	e051      	b.n	8005ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d002      	beq.n	8005e52 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005e4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e50:	e049      	b.n	8005ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005e5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e60:	e041      	b.n	8005ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005e6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e70:	e039      	b.n	8005ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005e7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e80:	e031      	b.n	8005ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d002      	beq.n	8005e92 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005e8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005e90:	e029      	b.n	8005ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d002      	beq.n	8005ea2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005e9c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005ea0:	e021      	b.n	8005ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005eac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005eb0:	e019      	b.n	8005ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d002      	beq.n	8005ec2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005ebc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005ec0:	e011      	b.n	8005ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005ecc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005ed0:	e009      	b.n	8005ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f003 0308 	and.w	r3, r3, #8
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005edc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005ee0:	e001      	b.n	8005ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005ee2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3720      	adds	r7, #32
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20000000 	.word	0x20000000
 8005ef4:	10624dd3 	.word	0x10624dd3
 8005ef8:	fdffe008 	.word	0xfdffe008

08005efc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005f04:	4b1f      	ldr	r3, [pc, #124]	; (8005f84 <SDMMC_GetCmdResp2+0x88>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a1f      	ldr	r2, [pc, #124]	; (8005f88 <SDMMC_GetCmdResp2+0x8c>)
 8005f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0e:	0a5b      	lsrs	r3, r3, #9
 8005f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f14:	fb02 f303 	mul.w	r3, r2, r3
 8005f18:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	1e5a      	subs	r2, r3, #1
 8005f1e:	60fa      	str	r2, [r7, #12]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d102      	bne.n	8005f2a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005f24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005f28:	e026      	b.n	8005f78 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d0ef      	beq.n	8005f1a <SDMMC_GetCmdResp2+0x1e>
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1ea      	bne.n	8005f1a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f48:	f003 0304 	and.w	r3, r3, #4
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d004      	beq.n	8005f5a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2204      	movs	r2, #4
 8005f54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005f56:	2304      	movs	r3, #4
 8005f58:	e00e      	b.n	8005f78 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d004      	beq.n	8005f70 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e003      	b.n	8005f78 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	22c5      	movs	r2, #197	; 0xc5
 8005f74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	20000000 	.word	0x20000000
 8005f88:	10624dd3 	.word	0x10624dd3

08005f8c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005f94:	4b1a      	ldr	r3, [pc, #104]	; (8006000 <SDMMC_GetCmdResp3+0x74>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a1a      	ldr	r2, [pc, #104]	; (8006004 <SDMMC_GetCmdResp3+0x78>)
 8005f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9e:	0a5b      	lsrs	r3, r3, #9
 8005fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa4:	fb02 f303 	mul.w	r3, r2, r3
 8005fa8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	1e5a      	subs	r2, r3, #1
 8005fae:	60fa      	str	r2, [r7, #12]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d102      	bne.n	8005fba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005fb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005fb8:	e01b      	b.n	8005ff2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fbe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d0ef      	beq.n	8005faa <SDMMC_GetCmdResp3+0x1e>
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1ea      	bne.n	8005faa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd8:	f003 0304 	and.w	r3, r3, #4
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d004      	beq.n	8005fea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2204      	movs	r2, #4
 8005fe4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005fe6:	2304      	movs	r3, #4
 8005fe8:	e003      	b.n	8005ff2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	22c5      	movs	r2, #197	; 0xc5
 8005fee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	20000000 	.word	0x20000000
 8006004:	10624dd3 	.word	0x10624dd3

08006008 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b088      	sub	sp, #32
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	460b      	mov	r3, r1
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006016:	4b35      	ldr	r3, [pc, #212]	; (80060ec <SDMMC_GetCmdResp6+0xe4>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a35      	ldr	r2, [pc, #212]	; (80060f0 <SDMMC_GetCmdResp6+0xe8>)
 800601c:	fba2 2303 	umull	r2, r3, r2, r3
 8006020:	0a5b      	lsrs	r3, r3, #9
 8006022:	f241 3288 	movw	r2, #5000	; 0x1388
 8006026:	fb02 f303 	mul.w	r3, r2, r3
 800602a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	1e5a      	subs	r2, r3, #1
 8006030:	61fa      	str	r2, [r7, #28]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d102      	bne.n	800603c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006036:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800603a:	e052      	b.n	80060e2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006040:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006048:	2b00      	cmp	r3, #0
 800604a:	d0ef      	beq.n	800602c <SDMMC_GetCmdResp6+0x24>
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1ea      	bne.n	800602c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605a:	f003 0304 	and.w	r3, r3, #4
 800605e:	2b00      	cmp	r3, #0
 8006060:	d004      	beq.n	800606c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2204      	movs	r2, #4
 8006066:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006068:	2304      	movs	r3, #4
 800606a:	e03a      	b.n	80060e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b00      	cmp	r3, #0
 8006076:	d004      	beq.n	8006082 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2201      	movs	r2, #1
 800607c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800607e:	2301      	movs	r3, #1
 8006080:	e02f      	b.n	80060e2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f7ff fbcb 	bl	800581e <SDIO_GetCommandResponse>
 8006088:	4603      	mov	r3, r0
 800608a:	461a      	mov	r2, r3
 800608c:	7afb      	ldrb	r3, [r7, #11]
 800608e:	4293      	cmp	r3, r2
 8006090:	d001      	beq.n	8006096 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006092:	2301      	movs	r3, #1
 8006094:	e025      	b.n	80060e2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	22c5      	movs	r2, #197	; 0xc5
 800609a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800609c:	2100      	movs	r1, #0
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f7ff fbca 	bl	8005838 <SDIO_GetResponse>
 80060a4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d106      	bne.n	80060be <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	0c1b      	lsrs	r3, r3, #16
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80060ba:	2300      	movs	r3, #0
 80060bc:	e011      	b.n	80060e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d002      	beq.n	80060ce <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80060c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80060cc:	e009      	b.n	80060e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80060d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060dc:	e001      	b.n	80060e2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80060de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3720      	adds	r7, #32
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000000 	.word	0x20000000
 80060f0:	10624dd3 	.word	0x10624dd3

080060f4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80060fc:	4b22      	ldr	r3, [pc, #136]	; (8006188 <SDMMC_GetCmdResp7+0x94>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a22      	ldr	r2, [pc, #136]	; (800618c <SDMMC_GetCmdResp7+0x98>)
 8006102:	fba2 2303 	umull	r2, r3, r2, r3
 8006106:	0a5b      	lsrs	r3, r3, #9
 8006108:	f241 3288 	movw	r2, #5000	; 0x1388
 800610c:	fb02 f303 	mul.w	r3, r2, r3
 8006110:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	1e5a      	subs	r2, r3, #1
 8006116:	60fa      	str	r2, [r7, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d102      	bne.n	8006122 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800611c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006120:	e02c      	b.n	800617c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006126:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800612e:	2b00      	cmp	r3, #0
 8006130:	d0ef      	beq.n	8006112 <SDMMC_GetCmdResp7+0x1e>
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1ea      	bne.n	8006112 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b00      	cmp	r3, #0
 8006146:	d004      	beq.n	8006152 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2204      	movs	r2, #4
 800614c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800614e:	2304      	movs	r3, #4
 8006150:	e014      	b.n	800617c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d004      	beq.n	8006168 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006164:	2301      	movs	r3, #1
 8006166:	e009      	b.n	800617c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800616c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2240      	movs	r2, #64	; 0x40
 8006178:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800617a:	2300      	movs	r3, #0
  
}
 800617c:	4618      	mov	r0, r3
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	20000000 	.word	0x20000000
 800618c:	10624dd3 	.word	0x10624dd3

08006190 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006198:	4b11      	ldr	r3, [pc, #68]	; (80061e0 <SDMMC_GetCmdError+0x50>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a11      	ldr	r2, [pc, #68]	; (80061e4 <SDMMC_GetCmdError+0x54>)
 800619e:	fba2 2303 	umull	r2, r3, r2, r3
 80061a2:	0a5b      	lsrs	r3, r3, #9
 80061a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061a8:	fb02 f303 	mul.w	r3, r2, r3
 80061ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	1e5a      	subs	r2, r3, #1
 80061b2:	60fa      	str	r2, [r7, #12]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d102      	bne.n	80061be <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80061b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80061bc:	e009      	b.n	80061d2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d0f1      	beq.n	80061ae <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	22c5      	movs	r2, #197	; 0xc5
 80061ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	20000000 	.word	0x20000000
 80061e4:	10624dd3 	.word	0x10624dd3

080061e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80061ec:	4904      	ldr	r1, [pc, #16]	; (8006200 <MX_FATFS_Init+0x18>)
 80061ee:	4805      	ldr	r0, [pc, #20]	; (8006204 <MX_FATFS_Init+0x1c>)
 80061f0:	f002 fae4 	bl	80087bc <FATFS_LinkDriver>
 80061f4:	4603      	mov	r3, r0
 80061f6:	461a      	mov	r2, r3
 80061f8:	4b03      	ldr	r3, [pc, #12]	; (8006208 <MX_FATFS_Init+0x20>)
 80061fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80061fc:	bf00      	nop
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	200002d0 	.word	0x200002d0
 8006204:	080092b0 	.word	0x080092b0
 8006208:	200002cc 	.word	0x200002cc

0800620c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006210:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006212:	4618      	mov	r0, r3
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006226:	f000 f879 	bl	800631c <BSP_SD_IsDetected>
 800622a:	4603      	mov	r3, r0
 800622c:	2b01      	cmp	r3, #1
 800622e:	d001      	beq.n	8006234 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e012      	b.n	800625a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006234:	480b      	ldr	r0, [pc, #44]	; (8006264 <BSP_SD_Init+0x48>)
 8006236:	f7fd f9c5 	bl	80035c4 <HAL_SD_Init>
 800623a:	4603      	mov	r3, r0
 800623c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800623e:	79fb      	ldrb	r3, [r7, #7]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d109      	bne.n	8006258 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006244:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006248:	4806      	ldr	r0, [pc, #24]	; (8006264 <BSP_SD_Init+0x48>)
 800624a:	f7fd ff9f 	bl	800418c <HAL_SD_ConfigWideBusOperation>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006258:	79fb      	ldrb	r3, [r7, #7]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	200001fc 	.word	0x200001fc

08006268 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b088      	sub	sp, #32
 800626c:	af02      	add	r7, sp, #8
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	68f9      	ldr	r1, [r7, #12]
 8006284:	4806      	ldr	r0, [pc, #24]	; (80062a0 <BSP_SD_ReadBlocks+0x38>)
 8006286:	f7fd fa4d 	bl	8003724 <HAL_SD_ReadBlocks>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006294:	7dfb      	ldrb	r3, [r7, #23]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3718      	adds	r7, #24
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	200001fc 	.word	0x200001fc

080062a4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af02      	add	r7, sp, #8
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	68f9      	ldr	r1, [r7, #12]
 80062c0:	4806      	ldr	r0, [pc, #24]	; (80062dc <BSP_SD_WriteBlocks+0x38>)
 80062c2:	f7fd fc0d 	bl	8003ae0 <HAL_SD_WriteBlocks>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80062d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3718      	adds	r7, #24
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	200001fc 	.word	0x200001fc

080062e0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80062e4:	4805      	ldr	r0, [pc, #20]	; (80062fc <BSP_SD_GetCardState+0x1c>)
 80062e6:	f7fd ffeb 	bl	80042c0 <HAL_SD_GetCardState>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b04      	cmp	r3, #4
 80062ee:	bf14      	ite	ne
 80062f0:	2301      	movne	r3, #1
 80062f2:	2300      	moveq	r3, #0
 80062f4:	b2db      	uxtb	r3, r3
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	200001fc 	.word	0x200001fc

08006300 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	4803      	ldr	r0, [pc, #12]	; (8006318 <BSP_SD_GetCardInfo+0x18>)
 800630c:	f7fd ff12 	bl	8004134 <HAL_SD_GetCardInfo>
}
 8006310:	bf00      	nop
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	200001fc 	.word	0x200001fc

0800631c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006322:	2301      	movs	r3, #1
 8006324:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8006326:	79fb      	ldrb	r3, [r7, #7]
 8006328:	b2db      	uxtb	r3, r3
}
 800632a:	4618      	mov	r0, r3
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
	...

08006338 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	4603      	mov	r3, r0
 8006340:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006342:	4b0b      	ldr	r3, [pc, #44]	; (8006370 <SD_CheckStatus+0x38>)
 8006344:	2201      	movs	r2, #1
 8006346:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006348:	f7ff ffca 	bl	80062e0 <BSP_SD_GetCardState>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d107      	bne.n	8006362 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006352:	4b07      	ldr	r3, [pc, #28]	; (8006370 <SD_CheckStatus+0x38>)
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	b2db      	uxtb	r3, r3
 8006358:	f023 0301 	bic.w	r3, r3, #1
 800635c:	b2da      	uxtb	r2, r3
 800635e:	4b04      	ldr	r3, [pc, #16]	; (8006370 <SD_CheckStatus+0x38>)
 8006360:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006362:	4b03      	ldr	r3, [pc, #12]	; (8006370 <SD_CheckStatus+0x38>)
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	b2db      	uxtb	r3, r3
}
 8006368:	4618      	mov	r0, r3
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	20000009 	.word	0x20000009

08006374 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	4603      	mov	r3, r0
 800637c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800637e:	4b0b      	ldr	r3, [pc, #44]	; (80063ac <SD_initialize+0x38>)
 8006380:	2201      	movs	r2, #1
 8006382:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006384:	f7ff ff4a 	bl	800621c <BSP_SD_Init>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d107      	bne.n	800639e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800638e:	79fb      	ldrb	r3, [r7, #7]
 8006390:	4618      	mov	r0, r3
 8006392:	f7ff ffd1 	bl	8006338 <SD_CheckStatus>
 8006396:	4603      	mov	r3, r0
 8006398:	461a      	mov	r2, r3
 800639a:	4b04      	ldr	r3, [pc, #16]	; (80063ac <SD_initialize+0x38>)
 800639c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800639e:	4b03      	ldr	r3, [pc, #12]	; (80063ac <SD_initialize+0x38>)
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	b2db      	uxtb	r3, r3
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	20000009 	.word	0x20000009

080063b0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	4603      	mov	r3, r0
 80063b8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80063ba:	79fb      	ldrb	r3, [r7, #7]
 80063bc:	4618      	mov	r0, r3
 80063be:	f7ff ffbb 	bl	8006338 <SD_CheckStatus>
 80063c2:	4603      	mov	r3, r0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60b9      	str	r1, [r7, #8]
 80063d4:	607a      	str	r2, [r7, #4]
 80063d6:	603b      	str	r3, [r7, #0]
 80063d8:	4603      	mov	r3, r0
 80063da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80063e0:	f04f 33ff 	mov.w	r3, #4294967295
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	68b8      	ldr	r0, [r7, #8]
 80063ea:	f7ff ff3d 	bl	8006268 <BSP_SD_ReadBlocks>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d107      	bne.n	8006404 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80063f4:	bf00      	nop
 80063f6:	f7ff ff73 	bl	80062e0 <BSP_SD_GetCardState>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1fa      	bne.n	80063f6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8006400:	2300      	movs	r3, #0
 8006402:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006404:	7dfb      	ldrb	r3, [r7, #23]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3718      	adds	r7, #24
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b086      	sub	sp, #24
 8006412:	af00      	add	r7, sp, #0
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	603b      	str	r3, [r7, #0]
 800641a:	4603      	mov	r3, r0
 800641c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8006422:	f04f 33ff 	mov.w	r3, #4294967295
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	6879      	ldr	r1, [r7, #4]
 800642a:	68b8      	ldr	r0, [r7, #8]
 800642c:	f7ff ff3a 	bl	80062a4 <BSP_SD_WriteBlocks>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d107      	bne.n	8006446 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8006436:	bf00      	nop
 8006438:	f7ff ff52 	bl	80062e0 <BSP_SD_GetCardState>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1fa      	bne.n	8006438 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006446:	7dfb      	ldrb	r3, [r7, #23]
}
 8006448:	4618      	mov	r0, r3
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b08c      	sub	sp, #48	; 0x30
 8006454:	af00      	add	r7, sp, #0
 8006456:	4603      	mov	r3, r0
 8006458:	603a      	str	r2, [r7, #0]
 800645a:	71fb      	strb	r3, [r7, #7]
 800645c:	460b      	mov	r3, r1
 800645e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006466:	4b25      	ldr	r3, [pc, #148]	; (80064fc <SD_ioctl+0xac>)
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	b2db      	uxtb	r3, r3
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <SD_ioctl+0x28>
 8006474:	2303      	movs	r3, #3
 8006476:	e03c      	b.n	80064f2 <SD_ioctl+0xa2>

  switch (cmd)
 8006478:	79bb      	ldrb	r3, [r7, #6]
 800647a:	2b03      	cmp	r3, #3
 800647c:	d834      	bhi.n	80064e8 <SD_ioctl+0x98>
 800647e:	a201      	add	r2, pc, #4	; (adr r2, 8006484 <SD_ioctl+0x34>)
 8006480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006484:	08006495 	.word	0x08006495
 8006488:	0800649d 	.word	0x0800649d
 800648c:	080064b5 	.word	0x080064b5
 8006490:	080064cf 	.word	0x080064cf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006494:	2300      	movs	r3, #0
 8006496:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800649a:	e028      	b.n	80064ee <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800649c:	f107 030c 	add.w	r3, r7, #12
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7ff ff2d 	bl	8006300 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80064a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80064b2:	e01c      	b.n	80064ee <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80064b4:	f107 030c 	add.w	r3, r7, #12
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7ff ff21 	bl	8006300 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80064be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80064cc:	e00f      	b.n	80064ee <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80064ce:	f107 030c 	add.w	r3, r7, #12
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7ff ff14 	bl	8006300 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80064d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064da:	0a5a      	lsrs	r2, r3, #9
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80064e6:	e002      	b.n	80064ee <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80064e8:	2304      	movs	r3, #4
 80064ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80064ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3730      	adds	r7, #48	; 0x30
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20000009 	.word	0x20000009

08006500 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	4603      	mov	r3, r0
 8006508:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800650a:	79fb      	ldrb	r3, [r7, #7]
 800650c:	4a08      	ldr	r2, [pc, #32]	; (8006530 <disk_status+0x30>)
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	79fa      	ldrb	r2, [r7, #7]
 8006518:	4905      	ldr	r1, [pc, #20]	; (8006530 <disk_status+0x30>)
 800651a:	440a      	add	r2, r1
 800651c:	7a12      	ldrb	r2, [r2, #8]
 800651e:	4610      	mov	r0, r2
 8006520:	4798      	blx	r3
 8006522:	4603      	mov	r3, r0
 8006524:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006526:	7bfb      	ldrb	r3, [r7, #15]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	200002fc 	.word	0x200002fc

08006534 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	4603      	mov	r3, r0
 800653c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006542:	79fb      	ldrb	r3, [r7, #7]
 8006544:	4a0d      	ldr	r2, [pc, #52]	; (800657c <disk_initialize+0x48>)
 8006546:	5cd3      	ldrb	r3, [r2, r3]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d111      	bne.n	8006570 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800654c:	79fb      	ldrb	r3, [r7, #7]
 800654e:	4a0b      	ldr	r2, [pc, #44]	; (800657c <disk_initialize+0x48>)
 8006550:	2101      	movs	r1, #1
 8006552:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006554:	79fb      	ldrb	r3, [r7, #7]
 8006556:	4a09      	ldr	r2, [pc, #36]	; (800657c <disk_initialize+0x48>)
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	79fa      	ldrb	r2, [r7, #7]
 8006562:	4906      	ldr	r1, [pc, #24]	; (800657c <disk_initialize+0x48>)
 8006564:	440a      	add	r2, r1
 8006566:	7a12      	ldrb	r2, [r2, #8]
 8006568:	4610      	mov	r0, r2
 800656a:	4798      	blx	r3
 800656c:	4603      	mov	r3, r0
 800656e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006570:	7bfb      	ldrb	r3, [r7, #15]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	200002fc 	.word	0x200002fc

08006580 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006580:	b590      	push	{r4, r7, lr}
 8006582:	b087      	sub	sp, #28
 8006584:	af00      	add	r7, sp, #0
 8006586:	60b9      	str	r1, [r7, #8]
 8006588:	607a      	str	r2, [r7, #4]
 800658a:	603b      	str	r3, [r7, #0]
 800658c:	4603      	mov	r3, r0
 800658e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006590:	7bfb      	ldrb	r3, [r7, #15]
 8006592:	4a0a      	ldr	r2, [pc, #40]	; (80065bc <disk_read+0x3c>)
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	689c      	ldr	r4, [r3, #8]
 800659c:	7bfb      	ldrb	r3, [r7, #15]
 800659e:	4a07      	ldr	r2, [pc, #28]	; (80065bc <disk_read+0x3c>)
 80065a0:	4413      	add	r3, r2
 80065a2:	7a18      	ldrb	r0, [r3, #8]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	68b9      	ldr	r1, [r7, #8]
 80065aa:	47a0      	blx	r4
 80065ac:	4603      	mov	r3, r0
 80065ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80065b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	371c      	adds	r7, #28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd90      	pop	{r4, r7, pc}
 80065ba:	bf00      	nop
 80065bc:	200002fc 	.word	0x200002fc

080065c0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80065c0:	b590      	push	{r4, r7, lr}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60b9      	str	r1, [r7, #8]
 80065c8:	607a      	str	r2, [r7, #4]
 80065ca:	603b      	str	r3, [r7, #0]
 80065cc:	4603      	mov	r3, r0
 80065ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
 80065d2:	4a0a      	ldr	r2, [pc, #40]	; (80065fc <disk_write+0x3c>)
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	68dc      	ldr	r4, [r3, #12]
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
 80065de:	4a07      	ldr	r2, [pc, #28]	; (80065fc <disk_write+0x3c>)
 80065e0:	4413      	add	r3, r2
 80065e2:	7a18      	ldrb	r0, [r3, #8]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	68b9      	ldr	r1, [r7, #8]
 80065ea:	47a0      	blx	r4
 80065ec:	4603      	mov	r3, r0
 80065ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80065f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	371c      	adds	r7, #28
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd90      	pop	{r4, r7, pc}
 80065fa:	bf00      	nop
 80065fc:	200002fc 	.word	0x200002fc

08006600 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	4603      	mov	r3, r0
 8006608:	603a      	str	r2, [r7, #0]
 800660a:	71fb      	strb	r3, [r7, #7]
 800660c:	460b      	mov	r3, r1
 800660e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006610:	79fb      	ldrb	r3, [r7, #7]
 8006612:	4a09      	ldr	r2, [pc, #36]	; (8006638 <disk_ioctl+0x38>)
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	79fa      	ldrb	r2, [r7, #7]
 800661e:	4906      	ldr	r1, [pc, #24]	; (8006638 <disk_ioctl+0x38>)
 8006620:	440a      	add	r2, r1
 8006622:	7a10      	ldrb	r0, [r2, #8]
 8006624:	79b9      	ldrb	r1, [r7, #6]
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	4798      	blx	r3
 800662a:	4603      	mov	r3, r0
 800662c:	73fb      	strb	r3, [r7, #15]
  return res;
 800662e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	200002fc 	.word	0x200002fc

0800663c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3301      	adds	r3, #1
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800664c:	89fb      	ldrh	r3, [r7, #14]
 800664e:	021b      	lsls	r3, r3, #8
 8006650:	b21a      	sxth	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	b21b      	sxth	r3, r3
 8006658:	4313      	orrs	r3, r2
 800665a:	b21b      	sxth	r3, r3
 800665c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800665e:	89fb      	ldrh	r3, [r7, #14]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	3303      	adds	r3, #3
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	021b      	lsls	r3, r3, #8
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	3202      	adds	r2, #2
 8006684:	7812      	ldrb	r2, [r2, #0]
 8006686:	4313      	orrs	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	021b      	lsls	r3, r3, #8
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	3201      	adds	r2, #1
 8006692:	7812      	ldrb	r2, [r2, #0]
 8006694:	4313      	orrs	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	021b      	lsls	r3, r3, #8
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	7812      	ldrb	r2, [r2, #0]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	60fb      	str	r3, [r7, #12]
	return rv;
 80066a4:	68fb      	ldr	r3, [r7, #12]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80066b2:	b480      	push	{r7}
 80066b4:	b083      	sub	sp, #12
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	460b      	mov	r3, r1
 80066bc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	1c5a      	adds	r2, r3, #1
 80066c2:	607a      	str	r2, [r7, #4]
 80066c4:	887a      	ldrh	r2, [r7, #2]
 80066c6:	b2d2      	uxtb	r2, r2
 80066c8:	701a      	strb	r2, [r3, #0]
 80066ca:	887b      	ldrh	r3, [r7, #2]
 80066cc:	0a1b      	lsrs	r3, r3, #8
 80066ce:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	1c5a      	adds	r2, r3, #1
 80066d4:	607a      	str	r2, [r7, #4]
 80066d6:	887a      	ldrh	r2, [r7, #2]
 80066d8:	b2d2      	uxtb	r2, r2
 80066da:	701a      	strb	r2, [r3, #0]
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	607a      	str	r2, [r7, #4]
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	b2d2      	uxtb	r2, r2
 80066fc:	701a      	strb	r2, [r3, #0]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	0a1b      	lsrs	r3, r3, #8
 8006702:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	607a      	str	r2, [r7, #4]
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	701a      	strb	r2, [r3, #0]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	0a1b      	lsrs	r3, r3, #8
 8006714:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	1c5a      	adds	r2, r3, #1
 800671a:	607a      	str	r2, [r7, #4]
 800671c:	683a      	ldr	r2, [r7, #0]
 800671e:	b2d2      	uxtb	r2, r2
 8006720:	701a      	strb	r2, [r3, #0]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	0a1b      	lsrs	r3, r3, #8
 8006726:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	1c5a      	adds	r2, r3, #1
 800672c:	607a      	str	r2, [r7, #4]
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	b2d2      	uxtb	r2, r2
 8006732:	701a      	strb	r2, [r3, #0]
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006740:	b480      	push	{r7}
 8006742:	b087      	sub	sp, #28
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00d      	beq.n	8006776 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	1c53      	adds	r3, r2, #1
 800675e:	613b      	str	r3, [r7, #16]
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	1c59      	adds	r1, r3, #1
 8006764:	6179      	str	r1, [r7, #20]
 8006766:	7812      	ldrb	r2, [r2, #0]
 8006768:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	3b01      	subs	r3, #1
 800676e:	607b      	str	r3, [r7, #4]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1f1      	bne.n	800675a <mem_cpy+0x1a>
	}
}
 8006776:	bf00      	nop
 8006778:	371c      	adds	r7, #28
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006782:	b480      	push	{r7}
 8006784:	b087      	sub	sp, #28
 8006786:	af00      	add	r7, sp, #0
 8006788:	60f8      	str	r0, [r7, #12]
 800678a:	60b9      	str	r1, [r7, #8]
 800678c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	1c5a      	adds	r2, r3, #1
 8006796:	617a      	str	r2, [r7, #20]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	3b01      	subs	r3, #1
 80067a2:	607b      	str	r3, [r7, #4]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1f3      	bne.n	8006792 <mem_set+0x10>
}
 80067aa:	bf00      	nop
 80067ac:	bf00      	nop
 80067ae:	371c      	adds	r7, #28
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80067b8:	b480      	push	{r7}
 80067ba:	b089      	sub	sp, #36	; 0x24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	61fb      	str	r3, [r7, #28]
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80067cc:	2300      	movs	r3, #0
 80067ce:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	1c5a      	adds	r2, r3, #1
 80067d4:	61fa      	str	r2, [r7, #28]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	4619      	mov	r1, r3
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	61ba      	str	r2, [r7, #24]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	1acb      	subs	r3, r1, r3
 80067e4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	3b01      	subs	r3, #1
 80067ea:	607b      	str	r3, [r7, #4]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <mem_cmp+0x40>
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d0eb      	beq.n	80067d0 <mem_cmp+0x18>

	return r;
 80067f8:	697b      	ldr	r3, [r7, #20]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3724      	adds	r7, #36	; 0x24
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006806:	b480      	push	{r7}
 8006808:	b083      	sub	sp, #12
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006810:	e002      	b.n	8006818 <chk_chr+0x12>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	3301      	adds	r3, #1
 8006816:	607b      	str	r3, [r7, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d005      	beq.n	800682c <chk_chr+0x26>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	461a      	mov	r2, r3
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	4293      	cmp	r3, r2
 800682a:	d1f2      	bne.n	8006812 <chk_chr+0xc>
	return *str;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	781b      	ldrb	r3, [r3, #0]
}
 8006830:	4618      	mov	r0, r3
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006846:	2300      	movs	r3, #0
 8006848:	60bb      	str	r3, [r7, #8]
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	60fb      	str	r3, [r7, #12]
 800684e:	e029      	b.n	80068a4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006850:	4a27      	ldr	r2, [pc, #156]	; (80068f0 <chk_lock+0xb4>)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	4413      	add	r3, r2
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d01d      	beq.n	800689a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800685e:	4a24      	ldr	r2, [pc, #144]	; (80068f0 <chk_lock+0xb4>)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	011b      	lsls	r3, r3, #4
 8006864:	4413      	add	r3, r2
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	429a      	cmp	r2, r3
 800686e:	d116      	bne.n	800689e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006870:	4a1f      	ldr	r2, [pc, #124]	; (80068f0 <chk_lock+0xb4>)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	011b      	lsls	r3, r3, #4
 8006876:	4413      	add	r3, r2
 8006878:	3304      	adds	r3, #4
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006880:	429a      	cmp	r2, r3
 8006882:	d10c      	bne.n	800689e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006884:	4a1a      	ldr	r2, [pc, #104]	; (80068f0 <chk_lock+0xb4>)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	011b      	lsls	r3, r3, #4
 800688a:	4413      	add	r3, r2
 800688c:	3308      	adds	r3, #8
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006894:	429a      	cmp	r2, r3
 8006896:	d102      	bne.n	800689e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006898:	e007      	b.n	80068aa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800689a:	2301      	movs	r3, #1
 800689c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	3301      	adds	r3, #1
 80068a2:	60fb      	str	r3, [r7, #12]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d9d2      	bls.n	8006850 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d109      	bne.n	80068c4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d102      	bne.n	80068bc <chk_lock+0x80>
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d101      	bne.n	80068c0 <chk_lock+0x84>
 80068bc:	2300      	movs	r3, #0
 80068be:	e010      	b.n	80068e2 <chk_lock+0xa6>
 80068c0:	2312      	movs	r3, #18
 80068c2:	e00e      	b.n	80068e2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d108      	bne.n	80068dc <chk_lock+0xa0>
 80068ca:	4a09      	ldr	r2, [pc, #36]	; (80068f0 <chk_lock+0xb4>)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	011b      	lsls	r3, r3, #4
 80068d0:	4413      	add	r3, r2
 80068d2:	330c      	adds	r3, #12
 80068d4:	881b      	ldrh	r3, [r3, #0]
 80068d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068da:	d101      	bne.n	80068e0 <chk_lock+0xa4>
 80068dc:	2310      	movs	r3, #16
 80068de:	e000      	b.n	80068e2 <chk_lock+0xa6>
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	200002dc 	.word	0x200002dc

080068f4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80068fa:	2300      	movs	r3, #0
 80068fc:	607b      	str	r3, [r7, #4]
 80068fe:	e002      	b.n	8006906 <enq_lock+0x12>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	3301      	adds	r3, #1
 8006904:	607b      	str	r3, [r7, #4]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d806      	bhi.n	800691a <enq_lock+0x26>
 800690c:	4a09      	ldr	r2, [pc, #36]	; (8006934 <enq_lock+0x40>)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	011b      	lsls	r3, r3, #4
 8006912:	4413      	add	r3, r2
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1f2      	bne.n	8006900 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b02      	cmp	r3, #2
 800691e:	bf14      	ite	ne
 8006920:	2301      	movne	r3, #1
 8006922:	2300      	moveq	r3, #0
 8006924:	b2db      	uxtb	r3, r3
}
 8006926:	4618      	mov	r0, r3
 8006928:	370c      	adds	r7, #12
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	200002dc 	.word	0x200002dc

08006938 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006942:	2300      	movs	r3, #0
 8006944:	60fb      	str	r3, [r7, #12]
 8006946:	e01f      	b.n	8006988 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006948:	4a41      	ldr	r2, [pc, #260]	; (8006a50 <inc_lock+0x118>)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	011b      	lsls	r3, r3, #4
 800694e:	4413      	add	r3, r2
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	429a      	cmp	r2, r3
 8006958:	d113      	bne.n	8006982 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800695a:	4a3d      	ldr	r2, [pc, #244]	; (8006a50 <inc_lock+0x118>)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	011b      	lsls	r3, r3, #4
 8006960:	4413      	add	r3, r2
 8006962:	3304      	adds	r3, #4
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800696a:	429a      	cmp	r2, r3
 800696c:	d109      	bne.n	8006982 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800696e:	4a38      	ldr	r2, [pc, #224]	; (8006a50 <inc_lock+0x118>)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	011b      	lsls	r3, r3, #4
 8006974:	4413      	add	r3, r2
 8006976:	3308      	adds	r3, #8
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800697e:	429a      	cmp	r2, r3
 8006980:	d006      	beq.n	8006990 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	3301      	adds	r3, #1
 8006986:	60fb      	str	r3, [r7, #12]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d9dc      	bls.n	8006948 <inc_lock+0x10>
 800698e:	e000      	b.n	8006992 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006990:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b02      	cmp	r3, #2
 8006996:	d132      	bne.n	80069fe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006998:	2300      	movs	r3, #0
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	e002      	b.n	80069a4 <inc_lock+0x6c>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	3301      	adds	r3, #1
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d806      	bhi.n	80069b8 <inc_lock+0x80>
 80069aa:	4a29      	ldr	r2, [pc, #164]	; (8006a50 <inc_lock+0x118>)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	4413      	add	r3, r2
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1f2      	bne.n	800699e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d101      	bne.n	80069c2 <inc_lock+0x8a>
 80069be:	2300      	movs	r3, #0
 80069c0:	e040      	b.n	8006a44 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	4922      	ldr	r1, [pc, #136]	; (8006a50 <inc_lock+0x118>)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	011b      	lsls	r3, r3, #4
 80069cc:	440b      	add	r3, r1
 80069ce:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	491e      	ldr	r1, [pc, #120]	; (8006a50 <inc_lock+0x118>)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	011b      	lsls	r3, r3, #4
 80069da:	440b      	add	r3, r1
 80069dc:	3304      	adds	r3, #4
 80069de:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	695a      	ldr	r2, [r3, #20]
 80069e4:	491a      	ldr	r1, [pc, #104]	; (8006a50 <inc_lock+0x118>)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	011b      	lsls	r3, r3, #4
 80069ea:	440b      	add	r3, r1
 80069ec:	3308      	adds	r3, #8
 80069ee:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80069f0:	4a17      	ldr	r2, [pc, #92]	; (8006a50 <inc_lock+0x118>)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	011b      	lsls	r3, r3, #4
 80069f6:	4413      	add	r3, r2
 80069f8:	330c      	adds	r3, #12
 80069fa:	2200      	movs	r2, #0
 80069fc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d009      	beq.n	8006a18 <inc_lock+0xe0>
 8006a04:	4a12      	ldr	r2, [pc, #72]	; (8006a50 <inc_lock+0x118>)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	011b      	lsls	r3, r3, #4
 8006a0a:	4413      	add	r3, r2
 8006a0c:	330c      	adds	r3, #12
 8006a0e:	881b      	ldrh	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <inc_lock+0xe0>
 8006a14:	2300      	movs	r3, #0
 8006a16:	e015      	b.n	8006a44 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d108      	bne.n	8006a30 <inc_lock+0xf8>
 8006a1e:	4a0c      	ldr	r2, [pc, #48]	; (8006a50 <inc_lock+0x118>)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	011b      	lsls	r3, r3, #4
 8006a24:	4413      	add	r3, r2
 8006a26:	330c      	adds	r3, #12
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	e001      	b.n	8006a34 <inc_lock+0xfc>
 8006a30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a34:	4906      	ldr	r1, [pc, #24]	; (8006a50 <inc_lock+0x118>)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	011b      	lsls	r3, r3, #4
 8006a3a:	440b      	add	r3, r1
 8006a3c:	330c      	adds	r3, #12
 8006a3e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	3301      	adds	r3, #1
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	200002dc 	.word	0x200002dc

08006a54 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	607b      	str	r3, [r7, #4]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d825      	bhi.n	8006ab4 <dec_lock+0x60>
		n = Files[i].ctr;
 8006a68:	4a17      	ldr	r2, [pc, #92]	; (8006ac8 <dec_lock+0x74>)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	011b      	lsls	r3, r3, #4
 8006a6e:	4413      	add	r3, r2
 8006a70:	330c      	adds	r3, #12
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006a76:	89fb      	ldrh	r3, [r7, #14]
 8006a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a7c:	d101      	bne.n	8006a82 <dec_lock+0x2e>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006a82:	89fb      	ldrh	r3, [r7, #14]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d002      	beq.n	8006a8e <dec_lock+0x3a>
 8006a88:	89fb      	ldrh	r3, [r7, #14]
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006a8e:	4a0e      	ldr	r2, [pc, #56]	; (8006ac8 <dec_lock+0x74>)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	011b      	lsls	r3, r3, #4
 8006a94:	4413      	add	r3, r2
 8006a96:	330c      	adds	r3, #12
 8006a98:	89fa      	ldrh	r2, [r7, #14]
 8006a9a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006a9c:	89fb      	ldrh	r3, [r7, #14]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d105      	bne.n	8006aae <dec_lock+0x5a>
 8006aa2:	4a09      	ldr	r2, [pc, #36]	; (8006ac8 <dec_lock+0x74>)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	011b      	lsls	r3, r3, #4
 8006aa8:	4413      	add	r3, r2
 8006aaa:	2200      	movs	r2, #0
 8006aac:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	737b      	strb	r3, [r7, #13]
 8006ab2:	e001      	b.n	8006ab8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006ab8:	7b7b      	ldrb	r3, [r7, #13]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	200002dc 	.word	0x200002dc

08006acc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	e010      	b.n	8006afc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006ada:	4a0d      	ldr	r2, [pc, #52]	; (8006b10 <clear_lock+0x44>)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	011b      	lsls	r3, r3, #4
 8006ae0:	4413      	add	r3, r2
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d105      	bne.n	8006af6 <clear_lock+0x2a>
 8006aea:	4a09      	ldr	r2, [pc, #36]	; (8006b10 <clear_lock+0x44>)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	011b      	lsls	r3, r3, #4
 8006af0:	4413      	add	r3, r2
 8006af2:	2200      	movs	r2, #0
 8006af4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	3301      	adds	r3, #1
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d9eb      	bls.n	8006ada <clear_lock+0xe>
	}
}
 8006b02:	bf00      	nop
 8006b04:	bf00      	nop
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	200002dc 	.word	0x200002dc

08006b14 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	78db      	ldrb	r3, [r3, #3]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d034      	beq.n	8006b92 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	7858      	ldrb	r0, [r3, #1]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006b38:	2301      	movs	r3, #1
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	f7ff fd40 	bl	80065c0 <disk_write>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <sync_window+0x38>
			res = FR_DISK_ERR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	73fb      	strb	r3, [r7, #15]
 8006b4a:	e022      	b.n	8006b92 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	1ad2      	subs	r2, r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d217      	bcs.n	8006b92 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	789b      	ldrb	r3, [r3, #2]
 8006b66:	613b      	str	r3, [r7, #16]
 8006b68:	e010      	b.n	8006b8c <sync_window+0x78>
					wsect += fs->fsize;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	4413      	add	r3, r2
 8006b72:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	7858      	ldrb	r0, [r3, #1]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006b7e:	2301      	movs	r3, #1
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	f7ff fd1d 	bl	80065c0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	613b      	str	r3, [r7, #16]
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d8eb      	bhi.n	8006b6a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d01b      	beq.n	8006bec <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7ff ffad 	bl	8006b14 <sync_window>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d113      	bne.n	8006bec <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	7858      	ldrb	r0, [r3, #1]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006bce:	2301      	movs	r3, #1
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	f7ff fcd5 	bl	8006580 <disk_read>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d004      	beq.n	8006be6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8006be0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
	...

08006bf8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7ff ff87 	bl	8006b14 <sync_window>
 8006c06:	4603      	mov	r3, r0
 8006c08:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d159      	bne.n	8006cc4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	d149      	bne.n	8006cac <sync_fs+0xb4>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	791b      	ldrb	r3, [r3, #4]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d145      	bne.n	8006cac <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	899b      	ldrh	r3, [r3, #12]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	f7ff fda8 	bl	8006782 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	3334      	adds	r3, #52	; 0x34
 8006c36:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006c3a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7ff fd37 	bl	80066b2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	3334      	adds	r3, #52	; 0x34
 8006c48:	4921      	ldr	r1, [pc, #132]	; (8006cd0 <sync_fs+0xd8>)
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7ff fd4c 	bl	80066e8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	3334      	adds	r3, #52	; 0x34
 8006c54:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006c58:	491e      	ldr	r1, [pc, #120]	; (8006cd4 <sync_fs+0xdc>)
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7ff fd44 	bl	80066e8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3334      	adds	r3, #52	; 0x34
 8006c64:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	4610      	mov	r0, r2
 8006c70:	f7ff fd3a 	bl	80066e8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	3334      	adds	r3, #52	; 0x34
 8006c78:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	4619      	mov	r1, r3
 8006c82:	4610      	mov	r0, r2
 8006c84:	f7ff fd30 	bl	80066e8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	7858      	ldrb	r0, [r3, #1]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	f7ff fc8d 	bl	80065c0 <disk_write>
			fs->fsi_flag = 0;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	785b      	ldrb	r3, [r3, #1]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7ff fca3 	bl	8006600 <disk_ioctl>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d001      	beq.n	8006cc4 <sync_fs+0xcc>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	41615252 	.word	0x41615252
 8006cd4:	61417272 	.word	0x61417272

08006cd8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	3b02      	subs	r3, #2
 8006ce6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	3b02      	subs	r3, #2
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d301      	bcc.n	8006cf8 <clust2sect+0x20>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	e008      	b.n	8006d0a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	895b      	ldrh	r3, [r3, #10]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	fb03 f202 	mul.w	r2, r3, r2
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d08:	4413      	add	r3, r2
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b086      	sub	sp, #24
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d904      	bls.n	8006d36 <get_fat+0x20>
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d302      	bcc.n	8006d3c <get_fat+0x26>
		val = 1;	/* Internal error */
 8006d36:	2301      	movs	r3, #1
 8006d38:	617b      	str	r3, [r7, #20]
 8006d3a:	e0bb      	b.n	8006eb4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d40:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	2b03      	cmp	r3, #3
 8006d48:	f000 8083 	beq.w	8006e52 <get_fat+0x13c>
 8006d4c:	2b03      	cmp	r3, #3
 8006d4e:	f300 80a7 	bgt.w	8006ea0 <get_fat+0x18a>
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d002      	beq.n	8006d5c <get_fat+0x46>
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d056      	beq.n	8006e08 <get_fat+0xf2>
 8006d5a:	e0a1      	b.n	8006ea0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	085b      	lsrs	r3, r3, #1
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	4413      	add	r3, r2
 8006d68:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	899b      	ldrh	r3, [r3, #12]
 8006d72:	4619      	mov	r1, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d7a:	4413      	add	r3, r2
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	6938      	ldr	r0, [r7, #16]
 8006d80:	f7ff ff0c 	bl	8006b9c <move_window>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f040 808d 	bne.w	8006ea6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	1c5a      	adds	r2, r3, #1
 8006d90:	60fa      	str	r2, [r7, #12]
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	8992      	ldrh	r2, [r2, #12]
 8006d96:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d9a:	fb01 f202 	mul.w	r2, r1, r2
 8006d9e:	1a9b      	subs	r3, r3, r2
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	4413      	add	r3, r2
 8006da4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006da8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	899b      	ldrh	r3, [r3, #12]
 8006db2:	4619      	mov	r1, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006dba:	4413      	add	r3, r2
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	6938      	ldr	r0, [r7, #16]
 8006dc0:	f7ff feec 	bl	8006b9c <move_window>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d16f      	bne.n	8006eaa <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	899b      	ldrh	r3, [r3, #12]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	fbb3 f1f2 	udiv	r1, r3, r2
 8006dd6:	fb01 f202 	mul.w	r2, r1, r2
 8006dda:	1a9b      	subs	r3, r3, r2
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	4413      	add	r3, r2
 8006de0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006de4:	021b      	lsls	r3, r3, #8
 8006de6:	461a      	mov	r2, r3
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	f003 0301 	and.w	r3, r3, #1
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <get_fat+0xe8>
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	091b      	lsrs	r3, r3, #4
 8006dfc:	e002      	b.n	8006e04 <get_fat+0xee>
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e04:	617b      	str	r3, [r7, #20]
			break;
 8006e06:	e055      	b.n	8006eb4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	899b      	ldrh	r3, [r3, #12]
 8006e10:	085b      	lsrs	r3, r3, #1
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	4619      	mov	r1, r3
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e1c:	4413      	add	r3, r2
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6938      	ldr	r0, [r7, #16]
 8006e22:	f7ff febb 	bl	8006b9c <move_window>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d140      	bne.n	8006eae <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	005b      	lsls	r3, r3, #1
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	8992      	ldrh	r2, [r2, #12]
 8006e3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e3e:	fb00 f202 	mul.w	r2, r0, r2
 8006e42:	1a9b      	subs	r3, r3, r2
 8006e44:	440b      	add	r3, r1
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7ff fbf8 	bl	800663c <ld_word>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	617b      	str	r3, [r7, #20]
			break;
 8006e50:	e030      	b.n	8006eb4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	899b      	ldrh	r3, [r3, #12]
 8006e5a:	089b      	lsrs	r3, r3, #2
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	4619      	mov	r1, r3
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e66:	4413      	add	r3, r2
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6938      	ldr	r0, [r7, #16]
 8006e6c:	f7ff fe96 	bl	8006b9c <move_window>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d11d      	bne.n	8006eb2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	8992      	ldrh	r2, [r2, #12]
 8006e84:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e88:	fb00 f202 	mul.w	r2, r0, r2
 8006e8c:	1a9b      	subs	r3, r3, r2
 8006e8e:	440b      	add	r3, r1
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7ff fbeb 	bl	800666c <ld_dword>
 8006e96:	4603      	mov	r3, r0
 8006e98:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006e9c:	617b      	str	r3, [r7, #20]
			break;
 8006e9e:	e009      	b.n	8006eb4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	617b      	str	r3, [r7, #20]
 8006ea4:	e006      	b.n	8006eb4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ea6:	bf00      	nop
 8006ea8:	e004      	b.n	8006eb4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006eaa:	bf00      	nop
 8006eac:	e002      	b.n	8006eb4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006eae:	bf00      	nop
 8006eb0:	e000      	b.n	8006eb4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006eb2:	bf00      	nop
		}
	}

	return val;
 8006eb4:	697b      	ldr	r3, [r7, #20]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3718      	adds	r7, #24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006ebe:	b590      	push	{r4, r7, lr}
 8006ec0:	b089      	sub	sp, #36	; 0x24
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	60f8      	str	r0, [r7, #12]
 8006ec6:	60b9      	str	r1, [r7, #8]
 8006ec8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006eca:	2302      	movs	r3, #2
 8006ecc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	f240 8102 	bls.w	80070da <put_fat+0x21c>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	f080 80fc 	bcs.w	80070da <put_fat+0x21c>
		switch (fs->fs_type) {
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	f000 80b6 	beq.w	8007058 <put_fat+0x19a>
 8006eec:	2b03      	cmp	r3, #3
 8006eee:	f300 80fd 	bgt.w	80070ec <put_fat+0x22e>
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d003      	beq.n	8006efe <put_fat+0x40>
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	f000 8083 	beq.w	8007002 <put_fat+0x144>
 8006efc:	e0f6      	b.n	80070ec <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	61bb      	str	r3, [r7, #24]
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	085b      	lsrs	r3, r3, #1
 8006f06:	69ba      	ldr	r2, [r7, #24]
 8006f08:	4413      	add	r3, r2
 8006f0a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	899b      	ldrh	r3, [r3, #12]
 8006f14:	4619      	mov	r1, r3
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f1c:	4413      	add	r3, r2
 8006f1e:	4619      	mov	r1, r3
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f7ff fe3b 	bl	8006b9c <move_window>
 8006f26:	4603      	mov	r3, r0
 8006f28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006f2a:	7ffb      	ldrb	r3, [r7, #31]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f040 80d6 	bne.w	80070de <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	1c5a      	adds	r2, r3, #1
 8006f3c:	61ba      	str	r2, [r7, #24]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	8992      	ldrh	r2, [r2, #12]
 8006f42:	fbb3 f0f2 	udiv	r0, r3, r2
 8006f46:	fb00 f202 	mul.w	r2, r0, r2
 8006f4a:	1a9b      	subs	r3, r3, r2
 8006f4c:	440b      	add	r3, r1
 8006f4e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00d      	beq.n	8006f76 <put_fat+0xb8>
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	b25b      	sxtb	r3, r3
 8006f60:	f003 030f 	and.w	r3, r3, #15
 8006f64:	b25a      	sxtb	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	011b      	lsls	r3, r3, #4
 8006f6c:	b25b      	sxtb	r3, r3
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	b25b      	sxtb	r3, r3
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	e001      	b.n	8006f7a <put_fat+0xbc>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2201      	movs	r2, #1
 8006f82:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	899b      	ldrh	r3, [r3, #12]
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f94:	4413      	add	r3, r2
 8006f96:	4619      	mov	r1, r3
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f7ff fdff 	bl	8006b9c <move_window>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006fa2:	7ffb      	ldrb	r3, [r7, #31]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f040 809c 	bne.w	80070e2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	899b      	ldrh	r3, [r3, #12]
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006fbc:	fb00 f202 	mul.w	r2, r0, r2
 8006fc0:	1a9b      	subs	r3, r3, r2
 8006fc2:	440b      	add	r3, r1
 8006fc4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d003      	beq.n	8006fd8 <put_fat+0x11a>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	091b      	lsrs	r3, r3, #4
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	e00e      	b.n	8006ff6 <put_fat+0x138>
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	b25b      	sxtb	r3, r3
 8006fde:	f023 030f 	bic.w	r3, r3, #15
 8006fe2:	b25a      	sxtb	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	0a1b      	lsrs	r3, r3, #8
 8006fe8:	b25b      	sxtb	r3, r3
 8006fea:	f003 030f 	and.w	r3, r3, #15
 8006fee:	b25b      	sxtb	r3, r3
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	b25b      	sxtb	r3, r3
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	70da      	strb	r2, [r3, #3]
			break;
 8007000:	e074      	b.n	80070ec <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	899b      	ldrh	r3, [r3, #12]
 800700a:	085b      	lsrs	r3, r3, #1
 800700c:	b29b      	uxth	r3, r3
 800700e:	4619      	mov	r1, r3
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	fbb3 f3f1 	udiv	r3, r3, r1
 8007016:	4413      	add	r3, r2
 8007018:	4619      	mov	r1, r3
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f7ff fdbe 	bl	8006b9c <move_window>
 8007020:	4603      	mov	r3, r0
 8007022:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007024:	7ffb      	ldrb	r3, [r7, #31]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d15d      	bne.n	80070e6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	8992      	ldrh	r2, [r2, #12]
 8007038:	fbb3 f0f2 	udiv	r0, r3, r2
 800703c:	fb00 f202 	mul.w	r2, r0, r2
 8007040:	1a9b      	subs	r3, r3, r2
 8007042:	440b      	add	r3, r1
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	b292      	uxth	r2, r2
 8007048:	4611      	mov	r1, r2
 800704a:	4618      	mov	r0, r3
 800704c:	f7ff fb31 	bl	80066b2 <st_word>
			fs->wflag = 1;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2201      	movs	r2, #1
 8007054:	70da      	strb	r2, [r3, #3]
			break;
 8007056:	e049      	b.n	80070ec <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	899b      	ldrh	r3, [r3, #12]
 8007060:	089b      	lsrs	r3, r3, #2
 8007062:	b29b      	uxth	r3, r3
 8007064:	4619      	mov	r1, r3
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	fbb3 f3f1 	udiv	r3, r3, r1
 800706c:	4413      	add	r3, r2
 800706e:	4619      	mov	r1, r3
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f7ff fd93 	bl	8006b9c <move_window>
 8007076:	4603      	mov	r3, r0
 8007078:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800707a:	7ffb      	ldrb	r3, [r7, #31]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d134      	bne.n	80070ea <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	8992      	ldrh	r2, [r2, #12]
 8007094:	fbb3 f0f2 	udiv	r0, r3, r2
 8007098:	fb00 f202 	mul.w	r2, r0, r2
 800709c:	1a9b      	subs	r3, r3, r2
 800709e:	440b      	add	r3, r1
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7ff fae3 	bl	800666c <ld_dword>
 80070a6:	4603      	mov	r3, r0
 80070a8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80070ac:	4323      	orrs	r3, r4
 80070ae:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	8992      	ldrh	r2, [r2, #12]
 80070be:	fbb3 f0f2 	udiv	r0, r3, r2
 80070c2:	fb00 f202 	mul.w	r2, r0, r2
 80070c6:	1a9b      	subs	r3, r3, r2
 80070c8:	440b      	add	r3, r1
 80070ca:	6879      	ldr	r1, [r7, #4]
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7ff fb0b 	bl	80066e8 <st_dword>
			fs->wflag = 1;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2201      	movs	r2, #1
 80070d6:	70da      	strb	r2, [r3, #3]
			break;
 80070d8:	e008      	b.n	80070ec <put_fat+0x22e>
		}
	}
 80070da:	bf00      	nop
 80070dc:	e006      	b.n	80070ec <put_fat+0x22e>
			if (res != FR_OK) break;
 80070de:	bf00      	nop
 80070e0:	e004      	b.n	80070ec <put_fat+0x22e>
			if (res != FR_OK) break;
 80070e2:	bf00      	nop
 80070e4:	e002      	b.n	80070ec <put_fat+0x22e>
			if (res != FR_OK) break;
 80070e6:	bf00      	nop
 80070e8:	e000      	b.n	80070ec <put_fat+0x22e>
			if (res != FR_OK) break;
 80070ea:	bf00      	nop
	return res;
 80070ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3724      	adds	r7, #36	; 0x24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd90      	pop	{r4, r7, pc}

080070f6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b088      	sub	sp, #32
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	60f8      	str	r0, [r7, #12]
 80070fe:	60b9      	str	r1, [r7, #8]
 8007100:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d904      	bls.n	800711c <remove_chain+0x26>
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	429a      	cmp	r2, r3
 800711a:	d301      	bcc.n	8007120 <remove_chain+0x2a>
 800711c:	2302      	movs	r3, #2
 800711e:	e04b      	b.n	80071b8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00c      	beq.n	8007140 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007126:	f04f 32ff 	mov.w	r2, #4294967295
 800712a:	6879      	ldr	r1, [r7, #4]
 800712c:	69b8      	ldr	r0, [r7, #24]
 800712e:	f7ff fec6 	bl	8006ebe <put_fat>
 8007132:	4603      	mov	r3, r0
 8007134:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007136:	7ffb      	ldrb	r3, [r7, #31]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d001      	beq.n	8007140 <remove_chain+0x4a>
 800713c:	7ffb      	ldrb	r3, [r7, #31]
 800713e:	e03b      	b.n	80071b8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007140:	68b9      	ldr	r1, [r7, #8]
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f7ff fde7 	bl	8006d16 <get_fat>
 8007148:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d031      	beq.n	80071b4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d101      	bne.n	800715a <remove_chain+0x64>
 8007156:	2302      	movs	r3, #2
 8007158:	e02e      	b.n	80071b8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007160:	d101      	bne.n	8007166 <remove_chain+0x70>
 8007162:	2301      	movs	r3, #1
 8007164:	e028      	b.n	80071b8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007166:	2200      	movs	r2, #0
 8007168:	68b9      	ldr	r1, [r7, #8]
 800716a:	69b8      	ldr	r0, [r7, #24]
 800716c:	f7ff fea7 	bl	8006ebe <put_fat>
 8007170:	4603      	mov	r3, r0
 8007172:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007174:	7ffb      	ldrb	r3, [r7, #31]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <remove_chain+0x88>
 800717a:	7ffb      	ldrb	r3, [r7, #31]
 800717c:	e01c      	b.n	80071b8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	695a      	ldr	r2, [r3, #20]
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	3b02      	subs	r3, #2
 8007188:	429a      	cmp	r2, r3
 800718a:	d20b      	bcs.n	80071a4 <remove_chain+0xae>
			fs->free_clst++;
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	695b      	ldr	r3, [r3, #20]
 8007190:	1c5a      	adds	r2, r3, #1
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	791b      	ldrb	r3, [r3, #4]
 800719a:	f043 0301 	orr.w	r3, r3, #1
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d3c6      	bcc.n	8007140 <remove_chain+0x4a>
 80071b2:	e000      	b.n	80071b6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80071b4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3720      	adds	r7, #32
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b088      	sub	sp, #32
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10d      	bne.n	80071f2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d004      	beq.n	80071ec <create_chain+0x2c>
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d31b      	bcc.n	8007224 <create_chain+0x64>
 80071ec:	2301      	movs	r3, #1
 80071ee:	61bb      	str	r3, [r7, #24]
 80071f0:	e018      	b.n	8007224 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7ff fd8e 	bl	8006d16 <get_fat>
 80071fa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d801      	bhi.n	8007206 <create_chain+0x46>
 8007202:	2301      	movs	r3, #1
 8007204:	e070      	b.n	80072e8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720c:	d101      	bne.n	8007212 <create_chain+0x52>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	e06a      	b.n	80072e8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	429a      	cmp	r2, r3
 800721a:	d201      	bcs.n	8007220 <create_chain+0x60>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	e063      	b.n	80072e8 <create_chain+0x128>
		scl = clst;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	3301      	adds	r3, #1
 800722c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	69fa      	ldr	r2, [r7, #28]
 8007234:	429a      	cmp	r2, r3
 8007236:	d307      	bcc.n	8007248 <create_chain+0x88>
				ncl = 2;
 8007238:	2302      	movs	r3, #2
 800723a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800723c:	69fa      	ldr	r2, [r7, #28]
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	429a      	cmp	r2, r3
 8007242:	d901      	bls.n	8007248 <create_chain+0x88>
 8007244:	2300      	movs	r3, #0
 8007246:	e04f      	b.n	80072e8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007248:	69f9      	ldr	r1, [r7, #28]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7ff fd63 	bl	8006d16 <get_fat>
 8007250:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00e      	beq.n	8007276 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d003      	beq.n	8007266 <create_chain+0xa6>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007264:	d101      	bne.n	800726a <create_chain+0xaa>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	e03e      	b.n	80072e8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800726a:	69fa      	ldr	r2, [r7, #28]
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	429a      	cmp	r2, r3
 8007270:	d1da      	bne.n	8007228 <create_chain+0x68>
 8007272:	2300      	movs	r3, #0
 8007274:	e038      	b.n	80072e8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007276:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007278:	f04f 32ff 	mov.w	r2, #4294967295
 800727c:	69f9      	ldr	r1, [r7, #28]
 800727e:	6938      	ldr	r0, [r7, #16]
 8007280:	f7ff fe1d 	bl	8006ebe <put_fat>
 8007284:	4603      	mov	r3, r0
 8007286:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007288:	7dfb      	ldrb	r3, [r7, #23]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d109      	bne.n	80072a2 <create_chain+0xe2>
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d006      	beq.n	80072a2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007294:	69fa      	ldr	r2, [r7, #28]
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6938      	ldr	r0, [r7, #16]
 800729a:	f7ff fe10 	bl	8006ebe <put_fat>
 800729e:	4603      	mov	r3, r0
 80072a0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80072a2:	7dfb      	ldrb	r3, [r7, #23]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d116      	bne.n	80072d6 <create_chain+0x116>
		fs->last_clst = ncl;
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	69fa      	ldr	r2, [r7, #28]
 80072ac:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	695a      	ldr	r2, [r3, #20]
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	3b02      	subs	r3, #2
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d804      	bhi.n	80072c6 <create_chain+0x106>
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	695b      	ldr	r3, [r3, #20]
 80072c0:	1e5a      	subs	r2, r3, #1
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	791b      	ldrb	r3, [r3, #4]
 80072ca:	f043 0301 	orr.w	r3, r3, #1
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	711a      	strb	r2, [r3, #4]
 80072d4:	e007      	b.n	80072e6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80072d6:	7dfb      	ldrb	r3, [r7, #23]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d102      	bne.n	80072e2 <create_chain+0x122>
 80072dc:	f04f 33ff 	mov.w	r3, #4294967295
 80072e0:	e000      	b.n	80072e4 <create_chain+0x124>
 80072e2:	2301      	movs	r3, #1
 80072e4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80072e6:	69fb      	ldr	r3, [r7, #28]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3720      	adds	r7, #32
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007306:	d204      	bcs.n	8007312 <dir_sdi+0x22>
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	f003 031f 	and.w	r3, r3, #31
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007312:	2302      	movs	r3, #2
 8007314:	e071      	b.n	80073fa <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d106      	bne.n	8007336 <dir_sdi+0x46>
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	2b02      	cmp	r3, #2
 800732e:	d902      	bls.n	8007336 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007334:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10c      	bne.n	8007356 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	095b      	lsrs	r3, r3, #5
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	8912      	ldrh	r2, [r2, #8]
 8007344:	4293      	cmp	r3, r2
 8007346:	d301      	bcc.n	800734c <dir_sdi+0x5c>
 8007348:	2302      	movs	r3, #2
 800734a:	e056      	b.n	80073fa <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	61da      	str	r2, [r3, #28]
 8007354:	e02d      	b.n	80073b2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	895b      	ldrh	r3, [r3, #10]
 800735a:	461a      	mov	r2, r3
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	899b      	ldrh	r3, [r3, #12]
 8007360:	fb02 f303 	mul.w	r3, r2, r3
 8007364:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007366:	e019      	b.n	800739c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6979      	ldr	r1, [r7, #20]
 800736c:	4618      	mov	r0, r3
 800736e:	f7ff fcd2 	bl	8006d16 <get_fat>
 8007372:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737a:	d101      	bne.n	8007380 <dir_sdi+0x90>
 800737c:	2301      	movs	r3, #1
 800737e:	e03c      	b.n	80073fa <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d904      	bls.n	8007390 <dir_sdi+0xa0>
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	429a      	cmp	r2, r3
 800738e:	d301      	bcc.n	8007394 <dir_sdi+0xa4>
 8007390:	2302      	movs	r3, #2
 8007392:	e032      	b.n	80073fa <dir_sdi+0x10a>
			ofs -= csz;
 8007394:	683a      	ldr	r2, [r7, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d2e1      	bcs.n	8007368 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80073a4:	6979      	ldr	r1, [r7, #20]
 80073a6:	6938      	ldr	r0, [r7, #16]
 80073a8:	f7ff fc96 	bl	8006cd8 <clust2sect>
 80073ac:	4602      	mov	r2, r0
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	69db      	ldr	r3, [r3, #28]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d101      	bne.n	80073c4 <dir_sdi+0xd4>
 80073c0:	2302      	movs	r3, #2
 80073c2:	e01a      	b.n	80073fa <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	69da      	ldr	r2, [r3, #28]
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	899b      	ldrh	r3, [r3, #12]
 80073cc:	4619      	mov	r1, r3
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80073d4:	441a      	add	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	899b      	ldrh	r3, [r3, #12]
 80073e4:	461a      	mov	r2, r3
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	fbb3 f0f2 	udiv	r0, r3, r2
 80073ec:	fb00 f202 	mul.w	r2, r0, r2
 80073f0:	1a9b      	subs	r3, r3, r2
 80073f2:	18ca      	adds	r2, r1, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3718      	adds	r7, #24
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b086      	sub	sp, #24
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	3320      	adds	r3, #32
 8007418:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d003      	beq.n	800742a <dir_next+0x28>
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007428:	d301      	bcc.n	800742e <dir_next+0x2c>
 800742a:	2304      	movs	r3, #4
 800742c:	e0bb      	b.n	80075a6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	899b      	ldrh	r3, [r3, #12]
 8007432:	461a      	mov	r2, r3
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	fbb3 f1f2 	udiv	r1, r3, r2
 800743a:	fb01 f202 	mul.w	r2, r1, r2
 800743e:	1a9b      	subs	r3, r3, r2
 8007440:	2b00      	cmp	r3, #0
 8007442:	f040 809d 	bne.w	8007580 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	69db      	ldr	r3, [r3, #28]
 800744a:	1c5a      	adds	r2, r3, #1
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10b      	bne.n	8007470 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	095b      	lsrs	r3, r3, #5
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	8912      	ldrh	r2, [r2, #8]
 8007460:	4293      	cmp	r3, r2
 8007462:	f0c0 808d 	bcc.w	8007580 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	61da      	str	r2, [r3, #28]
 800746c:	2304      	movs	r3, #4
 800746e:	e09a      	b.n	80075a6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	899b      	ldrh	r3, [r3, #12]
 8007474:	461a      	mov	r2, r3
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	fbb3 f3f2 	udiv	r3, r3, r2
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	8952      	ldrh	r2, [r2, #10]
 8007480:	3a01      	subs	r2, #1
 8007482:	4013      	ands	r3, r2
 8007484:	2b00      	cmp	r3, #0
 8007486:	d17b      	bne.n	8007580 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	4619      	mov	r1, r3
 8007490:	4610      	mov	r0, r2
 8007492:	f7ff fc40 	bl	8006d16 <get_fat>
 8007496:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d801      	bhi.n	80074a2 <dir_next+0xa0>
 800749e:	2302      	movs	r3, #2
 80074a0:	e081      	b.n	80075a6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a8:	d101      	bne.n	80074ae <dir_next+0xac>
 80074aa:	2301      	movs	r3, #1
 80074ac:	e07b      	b.n	80075a6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d359      	bcc.n	800756c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d104      	bne.n	80074c8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	61da      	str	r2, [r3, #28]
 80074c4:	2304      	movs	r3, #4
 80074c6:	e06e      	b.n	80075a6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	4619      	mov	r1, r3
 80074d0:	4610      	mov	r0, r2
 80074d2:	f7ff fe75 	bl	80071c0 <create_chain>
 80074d6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <dir_next+0xe0>
 80074de:	2307      	movs	r3, #7
 80074e0:	e061      	b.n	80075a6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d101      	bne.n	80074ec <dir_next+0xea>
 80074e8:	2302      	movs	r3, #2
 80074ea:	e05c      	b.n	80075a6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f2:	d101      	bne.n	80074f8 <dir_next+0xf6>
 80074f4:	2301      	movs	r3, #1
 80074f6:	e056      	b.n	80075a6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f7ff fb0b 	bl	8006b14 <sync_window>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d001      	beq.n	8007508 <dir_next+0x106>
 8007504:	2301      	movs	r3, #1
 8007506:	e04e      	b.n	80075a6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	899b      	ldrh	r3, [r3, #12]
 8007512:	461a      	mov	r2, r3
 8007514:	2100      	movs	r1, #0
 8007516:	f7ff f934 	bl	8006782 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800751a:	2300      	movs	r3, #0
 800751c:	613b      	str	r3, [r7, #16]
 800751e:	6979      	ldr	r1, [r7, #20]
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f7ff fbd9 	bl	8006cd8 <clust2sect>
 8007526:	4602      	mov	r2, r0
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	631a      	str	r2, [r3, #48]	; 0x30
 800752c:	e012      	b.n	8007554 <dir_next+0x152>
						fs->wflag = 1;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2201      	movs	r2, #1
 8007532:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f7ff faed 	bl	8006b14 <sync_window>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <dir_next+0x142>
 8007540:	2301      	movs	r3, #1
 8007542:	e030      	b.n	80075a6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	3301      	adds	r3, #1
 8007548:	613b      	str	r3, [r7, #16]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754e:	1c5a      	adds	r2, r3, #1
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	631a      	str	r2, [r3, #48]	; 0x30
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	895b      	ldrh	r3, [r3, #10]
 8007558:	461a      	mov	r2, r3
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	4293      	cmp	r3, r2
 800755e:	d3e6      	bcc.n	800752e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	1ad2      	subs	r2, r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007572:	6979      	ldr	r1, [r7, #20]
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f7ff fbaf 	bl	8006cd8 <clust2sect>
 800757a:	4602      	mov	r2, r0
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	899b      	ldrh	r3, [r3, #12]
 8007590:	461a      	mov	r2, r3
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	fbb3 f0f2 	udiv	r0, r3, r2
 8007598:	fb00 f202 	mul.w	r2, r0, r2
 800759c:	1a9b      	subs	r3, r3, r2
 800759e:	18ca      	adds	r2, r1, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b086      	sub	sp, #24
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
 80075b6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80075be:	2100      	movs	r1, #0
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7ff fe95 	bl	80072f0 <dir_sdi>
 80075c6:	4603      	mov	r3, r0
 80075c8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80075ca:	7dfb      	ldrb	r3, [r7, #23]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d12b      	bne.n	8007628 <dir_alloc+0x7a>
		n = 0;
 80075d0:	2300      	movs	r3, #0
 80075d2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	69db      	ldr	r3, [r3, #28]
 80075d8:	4619      	mov	r1, r3
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f7ff fade 	bl	8006b9c <move_window>
 80075e0:	4603      	mov	r3, r0
 80075e2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80075e4:	7dfb      	ldrb	r3, [r7, #23]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d11d      	bne.n	8007626 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a1b      	ldr	r3, [r3, #32]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	2be5      	cmp	r3, #229	; 0xe5
 80075f2:	d004      	beq.n	80075fe <dir_alloc+0x50>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a1b      	ldr	r3, [r3, #32]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d107      	bne.n	800760e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	3301      	adds	r3, #1
 8007602:	613b      	str	r3, [r7, #16]
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	429a      	cmp	r2, r3
 800760a:	d102      	bne.n	8007612 <dir_alloc+0x64>
 800760c:	e00c      	b.n	8007628 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800760e:	2300      	movs	r3, #0
 8007610:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007612:	2101      	movs	r1, #1
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f7ff fef4 	bl	8007402 <dir_next>
 800761a:	4603      	mov	r3, r0
 800761c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800761e:	7dfb      	ldrb	r3, [r7, #23]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d0d7      	beq.n	80075d4 <dir_alloc+0x26>
 8007624:	e000      	b.n	8007628 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007626:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007628:	7dfb      	ldrb	r3, [r7, #23]
 800762a:	2b04      	cmp	r3, #4
 800762c:	d101      	bne.n	8007632 <dir_alloc+0x84>
 800762e:	2307      	movs	r3, #7
 8007630:	75fb      	strb	r3, [r7, #23]
	return res;
 8007632:	7dfb      	ldrb	r3, [r7, #23]
}
 8007634:	4618      	mov	r0, r3
 8007636:	3718      	adds	r7, #24
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	331a      	adds	r3, #26
 800764a:	4618      	mov	r0, r3
 800764c:	f7fe fff6 	bl	800663c <ld_word>
 8007650:	4603      	mov	r3, r0
 8007652:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	2b03      	cmp	r3, #3
 800765a:	d109      	bne.n	8007670 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	3314      	adds	r3, #20
 8007660:	4618      	mov	r0, r3
 8007662:	f7fe ffeb 	bl	800663c <ld_word>
 8007666:	4603      	mov	r3, r0
 8007668:	041b      	lsls	r3, r3, #16
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	4313      	orrs	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007670:	68fb      	ldr	r3, [r7, #12]
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b084      	sub	sp, #16
 800767e:	af00      	add	r7, sp, #0
 8007680:	60f8      	str	r0, [r7, #12]
 8007682:	60b9      	str	r1, [r7, #8]
 8007684:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	331a      	adds	r3, #26
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	b292      	uxth	r2, r2
 800768e:	4611      	mov	r1, r2
 8007690:	4618      	mov	r0, r3
 8007692:	f7ff f80e 	bl	80066b2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	2b03      	cmp	r3, #3
 800769c:	d109      	bne.n	80076b2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	f103 0214 	add.w	r2, r3, #20
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	0c1b      	lsrs	r3, r3, #16
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	4619      	mov	r1, r3
 80076ac:	4610      	mov	r0, r2
 80076ae:	f7ff f800 	bl	80066b2 <st_word>
	}
}
 80076b2:	bf00      	nop
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b086      	sub	sp, #24
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80076c8:	2100      	movs	r1, #0
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7ff fe10 	bl	80072f0 <dir_sdi>
 80076d0:	4603      	mov	r3, r0
 80076d2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80076d4:	7dfb      	ldrb	r3, [r7, #23]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <dir_find+0x24>
 80076da:	7dfb      	ldrb	r3, [r7, #23]
 80076dc:	e03e      	b.n	800775c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	4619      	mov	r1, r3
 80076e4:	6938      	ldr	r0, [r7, #16]
 80076e6:	f7ff fa59 	bl	8006b9c <move_window>
 80076ea:	4603      	mov	r3, r0
 80076ec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80076ee:	7dfb      	ldrb	r3, [r7, #23]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d12f      	bne.n	8007754 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a1b      	ldr	r3, [r3, #32]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d102      	bne.n	8007708 <dir_find+0x4e>
 8007702:	2304      	movs	r3, #4
 8007704:	75fb      	strb	r3, [r7, #23]
 8007706:	e028      	b.n	800775a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a1b      	ldr	r3, [r3, #32]
 800770c:	330b      	adds	r3, #11
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007714:	b2da      	uxtb	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	330b      	adds	r3, #11
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	f003 0308 	and.w	r3, r3, #8
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10a      	bne.n	8007740 <dir_find+0x86>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a18      	ldr	r0, [r3, #32]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	3324      	adds	r3, #36	; 0x24
 8007732:	220b      	movs	r2, #11
 8007734:	4619      	mov	r1, r3
 8007736:	f7ff f83f 	bl	80067b8 <mem_cmp>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00b      	beq.n	8007758 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007740:	2100      	movs	r1, #0
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7ff fe5d 	bl	8007402 <dir_next>
 8007748:	4603      	mov	r3, r0
 800774a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800774c:	7dfb      	ldrb	r3, [r7, #23]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d0c5      	beq.n	80076de <dir_find+0x24>
 8007752:	e002      	b.n	800775a <dir_find+0xa0>
		if (res != FR_OK) break;
 8007754:	bf00      	nop
 8007756:	e000      	b.n	800775a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007758:	bf00      	nop

	return res;
 800775a:	7dfb      	ldrb	r3, [r7, #23]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3718      	adds	r7, #24
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007772:	2101      	movs	r1, #1
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f7ff ff1a 	bl	80075ae <dir_alloc>
 800777a:	4603      	mov	r3, r0
 800777c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800777e:	7bfb      	ldrb	r3, [r7, #15]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d11c      	bne.n	80077be <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	69db      	ldr	r3, [r3, #28]
 8007788:	4619      	mov	r1, r3
 800778a:	68b8      	ldr	r0, [r7, #8]
 800778c:	f7ff fa06 	bl	8006b9c <move_window>
 8007790:	4603      	mov	r3, r0
 8007792:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007794:	7bfb      	ldrb	r3, [r7, #15]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d111      	bne.n	80077be <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	2220      	movs	r2, #32
 80077a0:	2100      	movs	r1, #0
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fe ffed 	bl	8006782 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a18      	ldr	r0, [r3, #32]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	3324      	adds	r3, #36	; 0x24
 80077b0:	220b      	movs	r2, #11
 80077b2:	4619      	mov	r1, r3
 80077b4:	f7fe ffc4 	bl	8006740 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2201      	movs	r2, #1
 80077bc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80077be:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2200      	movs	r2, #0
 80077d6:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	69db      	ldr	r3, [r3, #28]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d04e      	beq.n	800787e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80077e0:	2300      	movs	r3, #0
 80077e2:	613b      	str	r3, [r7, #16]
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80077e8:	e021      	b.n	800782e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a1a      	ldr	r2, [r3, #32]
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	1c59      	adds	r1, r3, #1
 80077f2:	6179      	str	r1, [r7, #20]
 80077f4:	4413      	add	r3, r2
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
 80077fc:	2b20      	cmp	r3, #32
 80077fe:	d100      	bne.n	8007802 <get_fileinfo+0x3a>
 8007800:	e015      	b.n	800782e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007802:	7bfb      	ldrb	r3, [r7, #15]
 8007804:	2b05      	cmp	r3, #5
 8007806:	d101      	bne.n	800780c <get_fileinfo+0x44>
 8007808:	23e5      	movs	r3, #229	; 0xe5
 800780a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	2b09      	cmp	r3, #9
 8007810:	d106      	bne.n	8007820 <get_fileinfo+0x58>
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	1c5a      	adds	r2, r3, #1
 8007816:	613a      	str	r2, [r7, #16]
 8007818:	683a      	ldr	r2, [r7, #0]
 800781a:	4413      	add	r3, r2
 800781c:	222e      	movs	r2, #46	; 0x2e
 800781e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	1c5a      	adds	r2, r3, #1
 8007824:	613a      	str	r2, [r7, #16]
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	4413      	add	r3, r2
 800782a:	7bfa      	ldrb	r2, [r7, #15]
 800782c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2b0a      	cmp	r3, #10
 8007832:	d9da      	bls.n	80077ea <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	4413      	add	r3, r2
 800783a:	3309      	adds	r3, #9
 800783c:	2200      	movs	r2, #0
 800783e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a1b      	ldr	r3, [r3, #32]
 8007844:	7ada      	ldrb	r2, [r3, #11]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	331c      	adds	r3, #28
 8007850:	4618      	mov	r0, r3
 8007852:	f7fe ff0b 	bl	800666c <ld_dword>
 8007856:	4602      	mov	r2, r0
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a1b      	ldr	r3, [r3, #32]
 8007860:	3316      	adds	r3, #22
 8007862:	4618      	mov	r0, r3
 8007864:	f7fe ff02 	bl	800666c <ld_dword>
 8007868:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	b29a      	uxth	r2, r3
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	80da      	strh	r2, [r3, #6]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	0c1b      	lsrs	r3, r3, #16
 8007876:	b29a      	uxth	r2, r3
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	809a      	strh	r2, [r3, #4]
 800787c:	e000      	b.n	8007880 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800787e:	bf00      	nop
}
 8007880:	3718      	adds	r7, #24
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
	...

08007888 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b088      	sub	sp, #32
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	60fb      	str	r3, [r7, #12]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	3324      	adds	r3, #36	; 0x24
 800789c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800789e:	220b      	movs	r2, #11
 80078a0:	2120      	movs	r1, #32
 80078a2:	68b8      	ldr	r0, [r7, #8]
 80078a4:	f7fe ff6d 	bl	8006782 <mem_set>
	si = i = 0; ni = 8;
 80078a8:	2300      	movs	r3, #0
 80078aa:	613b      	str	r3, [r7, #16]
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	61fb      	str	r3, [r7, #28]
 80078b0:	2308      	movs	r3, #8
 80078b2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	1c5a      	adds	r2, r3, #1
 80078b8:	61fa      	str	r2, [r7, #28]
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	4413      	add	r3, r2
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80078c2:	7efb      	ldrb	r3, [r7, #27]
 80078c4:	2b20      	cmp	r3, #32
 80078c6:	d94e      	bls.n	8007966 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80078c8:	7efb      	ldrb	r3, [r7, #27]
 80078ca:	2b2f      	cmp	r3, #47	; 0x2f
 80078cc:	d006      	beq.n	80078dc <create_name+0x54>
 80078ce:	7efb      	ldrb	r3, [r7, #27]
 80078d0:	2b5c      	cmp	r3, #92	; 0x5c
 80078d2:	d110      	bne.n	80078f6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80078d4:	e002      	b.n	80078dc <create_name+0x54>
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	3301      	adds	r3, #1
 80078da:	61fb      	str	r3, [r7, #28]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	4413      	add	r3, r2
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	2b2f      	cmp	r3, #47	; 0x2f
 80078e6:	d0f6      	beq.n	80078d6 <create_name+0x4e>
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	4413      	add	r3, r2
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	2b5c      	cmp	r3, #92	; 0x5c
 80078f2:	d0f0      	beq.n	80078d6 <create_name+0x4e>
			break;
 80078f4:	e038      	b.n	8007968 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80078f6:	7efb      	ldrb	r3, [r7, #27]
 80078f8:	2b2e      	cmp	r3, #46	; 0x2e
 80078fa:	d003      	beq.n	8007904 <create_name+0x7c>
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	429a      	cmp	r2, r3
 8007902:	d30c      	bcc.n	800791e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	2b0b      	cmp	r3, #11
 8007908:	d002      	beq.n	8007910 <create_name+0x88>
 800790a:	7efb      	ldrb	r3, [r7, #27]
 800790c:	2b2e      	cmp	r3, #46	; 0x2e
 800790e:	d001      	beq.n	8007914 <create_name+0x8c>
 8007910:	2306      	movs	r3, #6
 8007912:	e044      	b.n	800799e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007914:	2308      	movs	r3, #8
 8007916:	613b      	str	r3, [r7, #16]
 8007918:	230b      	movs	r3, #11
 800791a:	617b      	str	r3, [r7, #20]
			continue;
 800791c:	e022      	b.n	8007964 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800791e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007922:	2b00      	cmp	r3, #0
 8007924:	da04      	bge.n	8007930 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007926:	7efb      	ldrb	r3, [r7, #27]
 8007928:	3b80      	subs	r3, #128	; 0x80
 800792a:	4a1f      	ldr	r2, [pc, #124]	; (80079a8 <create_name+0x120>)
 800792c:	5cd3      	ldrb	r3, [r2, r3]
 800792e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007930:	7efb      	ldrb	r3, [r7, #27]
 8007932:	4619      	mov	r1, r3
 8007934:	481d      	ldr	r0, [pc, #116]	; (80079ac <create_name+0x124>)
 8007936:	f7fe ff66 	bl	8006806 <chk_chr>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d001      	beq.n	8007944 <create_name+0xbc>
 8007940:	2306      	movs	r3, #6
 8007942:	e02c      	b.n	800799e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007944:	7efb      	ldrb	r3, [r7, #27]
 8007946:	2b60      	cmp	r3, #96	; 0x60
 8007948:	d905      	bls.n	8007956 <create_name+0xce>
 800794a:	7efb      	ldrb	r3, [r7, #27]
 800794c:	2b7a      	cmp	r3, #122	; 0x7a
 800794e:	d802      	bhi.n	8007956 <create_name+0xce>
 8007950:	7efb      	ldrb	r3, [r7, #27]
 8007952:	3b20      	subs	r3, #32
 8007954:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	1c5a      	adds	r2, r3, #1
 800795a:	613a      	str	r2, [r7, #16]
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	4413      	add	r3, r2
 8007960:	7efa      	ldrb	r2, [r7, #27]
 8007962:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007964:	e7a6      	b.n	80078b4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007966:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	441a      	add	r2, r3
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d101      	bne.n	800797c <create_name+0xf4>
 8007978:	2306      	movs	r3, #6
 800797a:	e010      	b.n	800799e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	2be5      	cmp	r3, #229	; 0xe5
 8007982:	d102      	bne.n	800798a <create_name+0x102>
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2205      	movs	r2, #5
 8007988:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800798a:	7efb      	ldrb	r3, [r7, #27]
 800798c:	2b20      	cmp	r3, #32
 800798e:	d801      	bhi.n	8007994 <create_name+0x10c>
 8007990:	2204      	movs	r2, #4
 8007992:	e000      	b.n	8007996 <create_name+0x10e>
 8007994:	2200      	movs	r2, #0
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	330b      	adds	r3, #11
 800799a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800799c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3720      	adds	r7, #32
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	080092c4 	.word	0x080092c4
 80079ac:	0800924c 	.word	0x0800924c

080079b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80079c4:	e002      	b.n	80079cc <follow_path+0x1c>
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	3301      	adds	r3, #1
 80079ca:	603b      	str	r3, [r7, #0]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	2b2f      	cmp	r3, #47	; 0x2f
 80079d2:	d0f8      	beq.n	80079c6 <follow_path+0x16>
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	2b5c      	cmp	r3, #92	; 0x5c
 80079da:	d0f4      	beq.n	80079c6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	2200      	movs	r2, #0
 80079e0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	2b1f      	cmp	r3, #31
 80079e8:	d80a      	bhi.n	8007a00 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2280      	movs	r2, #128	; 0x80
 80079ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80079f2:	2100      	movs	r1, #0
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7ff fc7b 	bl	80072f0 <dir_sdi>
 80079fa:	4603      	mov	r3, r0
 80079fc:	75fb      	strb	r3, [r7, #23]
 80079fe:	e048      	b.n	8007a92 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007a00:	463b      	mov	r3, r7
 8007a02:	4619      	mov	r1, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7ff ff3f 	bl	8007888 <create_name>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007a0e:	7dfb      	ldrb	r3, [r7, #23]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d139      	bne.n	8007a88 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7ff fe50 	bl	80076ba <dir_find>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007a24:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007a26:	7dfb      	ldrb	r3, [r7, #23]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00a      	beq.n	8007a42 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007a2c:	7dfb      	ldrb	r3, [r7, #23]
 8007a2e:	2b04      	cmp	r3, #4
 8007a30:	d12c      	bne.n	8007a8c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007a32:	7afb      	ldrb	r3, [r7, #11]
 8007a34:	f003 0304 	and.w	r3, r3, #4
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d127      	bne.n	8007a8c <follow_path+0xdc>
 8007a3c:	2305      	movs	r3, #5
 8007a3e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007a40:	e024      	b.n	8007a8c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007a42:	7afb      	ldrb	r3, [r7, #11]
 8007a44:	f003 0304 	and.w	r3, r3, #4
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d121      	bne.n	8007a90 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	799b      	ldrb	r3, [r3, #6]
 8007a50:	f003 0310 	and.w	r3, r3, #16
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d102      	bne.n	8007a5e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007a58:	2305      	movs	r3, #5
 8007a5a:	75fb      	strb	r3, [r7, #23]
 8007a5c:	e019      	b.n	8007a92 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	695b      	ldr	r3, [r3, #20]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	8992      	ldrh	r2, [r2, #12]
 8007a6c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a70:	fb00 f202 	mul.w	r2, r0, r2
 8007a74:	1a9b      	subs	r3, r3, r2
 8007a76:	440b      	add	r3, r1
 8007a78:	4619      	mov	r1, r3
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f7ff fdde 	bl	800763c <ld_clust>
 8007a80:	4602      	mov	r2, r0
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007a86:	e7bb      	b.n	8007a00 <follow_path+0x50>
			if (res != FR_OK) break;
 8007a88:	bf00      	nop
 8007a8a:	e002      	b.n	8007a92 <follow_path+0xe2>
				break;
 8007a8c:	bf00      	nop
 8007a8e:	e000      	b.n	8007a92 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007a90:	bf00      	nop
			}
		}
	}

	return res;
 8007a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3718      	adds	r7, #24
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b087      	sub	sp, #28
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8007aa8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d031      	beq.n	8007b16 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	617b      	str	r3, [r7, #20]
 8007ab8:	e002      	b.n	8007ac0 <get_ldnumber+0x24>
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	3301      	adds	r3, #1
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	2b20      	cmp	r3, #32
 8007ac6:	d903      	bls.n	8007ad0 <get_ldnumber+0x34>
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	2b3a      	cmp	r3, #58	; 0x3a
 8007ace:	d1f4      	bne.n	8007aba <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	2b3a      	cmp	r3, #58	; 0x3a
 8007ad6:	d11c      	bne.n	8007b12 <get_ldnumber+0x76>
			tp = *path;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	1c5a      	adds	r2, r3, #1
 8007ae2:	60fa      	str	r2, [r7, #12]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	3b30      	subs	r3, #48	; 0x30
 8007ae8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	2b09      	cmp	r3, #9
 8007aee:	d80e      	bhi.n	8007b0e <get_ldnumber+0x72>
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d10a      	bne.n	8007b0e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d107      	bne.n	8007b0e <get_ldnumber+0x72>
					vol = (int)i;
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	3301      	adds	r3, #1
 8007b06:	617b      	str	r3, [r7, #20]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	e002      	b.n	8007b18 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007b12:	2300      	movs	r3, #0
 8007b14:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007b16:	693b      	ldr	r3, [r7, #16]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	371c      	adds	r7, #28
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	70da      	strb	r2, [r3, #3]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f04f 32ff 	mov.w	r2, #4294967295
 8007b3a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007b3c:	6839      	ldr	r1, [r7, #0]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7ff f82c 	bl	8006b9c <move_window>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <check_fs+0x2a>
 8007b4a:	2304      	movs	r3, #4
 8007b4c:	e038      	b.n	8007bc0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	3334      	adds	r3, #52	; 0x34
 8007b52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fe fd70 	bl	800663c <ld_word>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	461a      	mov	r2, r3
 8007b60:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d001      	beq.n	8007b6c <check_fs+0x48>
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e029      	b.n	8007bc0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b72:	2be9      	cmp	r3, #233	; 0xe9
 8007b74:	d009      	beq.n	8007b8a <check_fs+0x66>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b7c:	2beb      	cmp	r3, #235	; 0xeb
 8007b7e:	d11e      	bne.n	8007bbe <check_fs+0x9a>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007b86:	2b90      	cmp	r3, #144	; 0x90
 8007b88:	d119      	bne.n	8007bbe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	3334      	adds	r3, #52	; 0x34
 8007b8e:	3336      	adds	r3, #54	; 0x36
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7fe fd6b 	bl	800666c <ld_dword>
 8007b96:	4603      	mov	r3, r0
 8007b98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007b9c:	4a0a      	ldr	r2, [pc, #40]	; (8007bc8 <check_fs+0xa4>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d101      	bne.n	8007ba6 <check_fs+0x82>
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	e00c      	b.n	8007bc0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	3334      	adds	r3, #52	; 0x34
 8007baa:	3352      	adds	r3, #82	; 0x52
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7fe fd5d 	bl	800666c <ld_dword>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	4a05      	ldr	r2, [pc, #20]	; (8007bcc <check_fs+0xa8>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d101      	bne.n	8007bbe <check_fs+0x9a>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	e000      	b.n	8007bc0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007bbe:	2302      	movs	r3, #2
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	00544146 	.word	0x00544146
 8007bcc:	33544146 	.word	0x33544146

08007bd0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b096      	sub	sp, #88	; 0x58
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	2200      	movs	r2, #0
 8007be2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f7ff ff59 	bl	8007a9c <get_ldnumber>
 8007bea:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	da01      	bge.n	8007bf6 <find_volume+0x26>
 8007bf2:	230b      	movs	r3, #11
 8007bf4:	e262      	b.n	80080bc <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007bf6:	4a9f      	ldr	r2, [pc, #636]	; (8007e74 <find_volume+0x2a4>)
 8007bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bfe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d101      	bne.n	8007c0a <find_volume+0x3a>
 8007c06:	230c      	movs	r3, #12
 8007c08:	e258      	b.n	80080bc <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c0e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007c10:	79fb      	ldrb	r3, [r7, #7]
 8007c12:	f023 0301 	bic.w	r3, r3, #1
 8007c16:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d01a      	beq.n	8007c56 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c22:	785b      	ldrb	r3, [r3, #1]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7fe fc6b 	bl	8006500 <disk_status>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007c30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c34:	f003 0301 	and.w	r3, r3, #1
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d10c      	bne.n	8007c56 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007c3c:	79fb      	ldrb	r3, [r7, #7]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d007      	beq.n	8007c52 <find_volume+0x82>
 8007c42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c46:	f003 0304 	and.w	r3, r3, #4
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d001      	beq.n	8007c52 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007c4e:	230a      	movs	r3, #10
 8007c50:	e234      	b.n	80080bc <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8007c52:	2300      	movs	r3, #0
 8007c54:	e232      	b.n	80080bc <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c58:	2200      	movs	r2, #0
 8007c5a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c62:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c66:	785b      	ldrb	r3, [r3, #1]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fe fc63 	bl	8006534 <disk_initialize>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007c74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007c80:	2303      	movs	r3, #3
 8007c82:	e21b      	b.n	80080bc <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007c84:	79fb      	ldrb	r3, [r7, #7]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d007      	beq.n	8007c9a <find_volume+0xca>
 8007c8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c8e:	f003 0304 	and.w	r3, r3, #4
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007c96:	230a      	movs	r3, #10
 8007c98:	e210      	b.n	80080bc <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9c:	7858      	ldrb	r0, [r3, #1]
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca0:	330c      	adds	r3, #12
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	2102      	movs	r1, #2
 8007ca6:	f7fe fcab 	bl	8006600 <disk_ioctl>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d001      	beq.n	8007cb4 <find_volume+0xe4>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e203      	b.n	80080bc <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb6:	899b      	ldrh	r3, [r3, #12]
 8007cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cbc:	d80d      	bhi.n	8007cda <find_volume+0x10a>
 8007cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc0:	899b      	ldrh	r3, [r3, #12]
 8007cc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cc6:	d308      	bcc.n	8007cda <find_volume+0x10a>
 8007cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cca:	899b      	ldrh	r3, [r3, #12]
 8007ccc:	461a      	mov	r2, r3
 8007cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd0:	899b      	ldrh	r3, [r3, #12]
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <find_volume+0x10e>
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e1ee      	b.n	80080bc <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007ce2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ce4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ce6:	f7ff ff1d 	bl	8007b24 <check_fs>
 8007cea:	4603      	mov	r3, r0
 8007cec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007cf0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d149      	bne.n	8007d8c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	643b      	str	r3, [r7, #64]	; 0x40
 8007cfc:	e01e      	b.n	8007d3c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d00:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d06:	011b      	lsls	r3, r3, #4
 8007d08:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007d0c:	4413      	add	r3, r2
 8007d0e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d12:	3304      	adds	r3, #4
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d006      	beq.n	8007d28 <find_volume+0x158>
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1c:	3308      	adds	r3, #8
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fe fca4 	bl	800666c <ld_dword>
 8007d24:	4602      	mov	r2, r0
 8007d26:	e000      	b.n	8007d2a <find_volume+0x15a>
 8007d28:	2200      	movs	r2, #0
 8007d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	3358      	adds	r3, #88	; 0x58
 8007d30:	443b      	add	r3, r7
 8007d32:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d38:	3301      	adds	r3, #1
 8007d3a:	643b      	str	r3, [r7, #64]	; 0x40
 8007d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d3e:	2b03      	cmp	r3, #3
 8007d40:	d9dd      	bls.n	8007cfe <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007d42:	2300      	movs	r3, #0
 8007d44:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <find_volume+0x182>
 8007d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	3358      	adds	r3, #88	; 0x58
 8007d58:	443b      	add	r3, r7
 8007d5a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007d5e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d005      	beq.n	8007d72 <find_volume+0x1a2>
 8007d66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d6a:	f7ff fedb 	bl	8007b24 <check_fs>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	e000      	b.n	8007d74 <find_volume+0x1a4>
 8007d72:	2303      	movs	r3, #3
 8007d74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007d78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d905      	bls.n	8007d8c <find_volume+0x1bc>
 8007d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d82:	3301      	adds	r3, #1
 8007d84:	643b      	str	r3, [r7, #64]	; 0x40
 8007d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d9e2      	bls.n	8007d52 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007d8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d90:	2b04      	cmp	r3, #4
 8007d92:	d101      	bne.n	8007d98 <find_volume+0x1c8>
 8007d94:	2301      	movs	r3, #1
 8007d96:	e191      	b.n	80080bc <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007d98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d901      	bls.n	8007da4 <find_volume+0x1d4>
 8007da0:	230d      	movs	r3, #13
 8007da2:	e18b      	b.n	80080bc <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da6:	3334      	adds	r3, #52	; 0x34
 8007da8:	330b      	adds	r3, #11
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe fc46 	bl	800663c <ld_word>
 8007db0:	4603      	mov	r3, r0
 8007db2:	461a      	mov	r2, r3
 8007db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db6:	899b      	ldrh	r3, [r3, #12]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d001      	beq.n	8007dc0 <find_volume+0x1f0>
 8007dbc:	230d      	movs	r3, #13
 8007dbe:	e17d      	b.n	80080bc <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc2:	3334      	adds	r3, #52	; 0x34
 8007dc4:	3316      	adds	r3, #22
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fe fc38 	bl	800663c <ld_word>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d106      	bne.n	8007de4 <find_volume+0x214>
 8007dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd8:	3334      	adds	r3, #52	; 0x34
 8007dda:	3324      	adds	r3, #36	; 0x24
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7fe fc45 	bl	800666c <ld_dword>
 8007de2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007de8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dec:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df6:	789b      	ldrb	r3, [r3, #2]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d005      	beq.n	8007e08 <find_volume+0x238>
 8007dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfe:	789b      	ldrb	r3, [r3, #2]
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d001      	beq.n	8007e08 <find_volume+0x238>
 8007e04:	230d      	movs	r3, #13
 8007e06:	e159      	b.n	80080bc <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0a:	789b      	ldrb	r3, [r3, #2]
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e10:	fb02 f303 	mul.w	r3, r2, r3
 8007e14:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e20:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e24:	895b      	ldrh	r3, [r3, #10]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d008      	beq.n	8007e3c <find_volume+0x26c>
 8007e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2c:	895b      	ldrh	r3, [r3, #10]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e32:	895b      	ldrh	r3, [r3, #10]
 8007e34:	3b01      	subs	r3, #1
 8007e36:	4013      	ands	r3, r2
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d001      	beq.n	8007e40 <find_volume+0x270>
 8007e3c:	230d      	movs	r3, #13
 8007e3e:	e13d      	b.n	80080bc <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e42:	3334      	adds	r3, #52	; 0x34
 8007e44:	3311      	adds	r3, #17
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7fe fbf8 	bl	800663c <ld_word>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	461a      	mov	r2, r3
 8007e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e52:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e56:	891b      	ldrh	r3, [r3, #8]
 8007e58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e5a:	8992      	ldrh	r2, [r2, #12]
 8007e5c:	0952      	lsrs	r2, r2, #5
 8007e5e:	b292      	uxth	r2, r2
 8007e60:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e64:	fb01 f202 	mul.w	r2, r1, r2
 8007e68:	1a9b      	subs	r3, r3, r2
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d003      	beq.n	8007e78 <find_volume+0x2a8>
 8007e70:	230d      	movs	r3, #13
 8007e72:	e123      	b.n	80080bc <find_volume+0x4ec>
 8007e74:	200002d4 	.word	0x200002d4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7a:	3334      	adds	r3, #52	; 0x34
 8007e7c:	3313      	adds	r3, #19
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fe fbdc 	bl	800663c <ld_word>
 8007e84:	4603      	mov	r3, r0
 8007e86:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d106      	bne.n	8007e9c <find_volume+0x2cc>
 8007e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e90:	3334      	adds	r3, #52	; 0x34
 8007e92:	3320      	adds	r3, #32
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7fe fbe9 	bl	800666c <ld_dword>
 8007e9a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9e:	3334      	adds	r3, #52	; 0x34
 8007ea0:	330e      	adds	r3, #14
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fe fbca 	bl	800663c <ld_word>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007eac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <find_volume+0x2e6>
 8007eb2:	230d      	movs	r3, #13
 8007eb4:	e102      	b.n	80080bc <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007eb6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eba:	4413      	add	r3, r2
 8007ebc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ebe:	8911      	ldrh	r1, [r2, #8]
 8007ec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ec2:	8992      	ldrh	r2, [r2, #12]
 8007ec4:	0952      	lsrs	r2, r2, #5
 8007ec6:	b292      	uxth	r2, r2
 8007ec8:	fbb1 f2f2 	udiv	r2, r1, r2
 8007ecc:	b292      	uxth	r2, r2
 8007ece:	4413      	add	r3, r2
 8007ed0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007ed2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d201      	bcs.n	8007ede <find_volume+0x30e>
 8007eda:	230d      	movs	r3, #13
 8007edc:	e0ee      	b.n	80080bc <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007ede:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ee6:	8952      	ldrh	r2, [r2, #10]
 8007ee8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007eec:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d101      	bne.n	8007ef8 <find_volume+0x328>
 8007ef4:	230d      	movs	r3, #13
 8007ef6:	e0e1      	b.n	80080bc <find_volume+0x4ec>
		fmt = FS_FAT32;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f00:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d802      	bhi.n	8007f0e <find_volume+0x33e>
 8007f08:	2302      	movs	r3, #2
 8007f0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d802      	bhi.n	8007f1e <find_volume+0x34e>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	1c9a      	adds	r2, r3, #2
 8007f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f24:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f2a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007f2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f30:	441a      	add	r2, r3
 8007f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f34:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007f36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3a:	441a      	add	r2, r3
 8007f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8007f40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f44:	2b03      	cmp	r3, #3
 8007f46:	d11e      	bne.n	8007f86 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4a:	3334      	adds	r3, #52	; 0x34
 8007f4c:	332a      	adds	r3, #42	; 0x2a
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fe fb74 	bl	800663c <ld_word>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d001      	beq.n	8007f5e <find_volume+0x38e>
 8007f5a:	230d      	movs	r3, #13
 8007f5c:	e0ae      	b.n	80080bc <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f60:	891b      	ldrh	r3, [r3, #8]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <find_volume+0x39a>
 8007f66:	230d      	movs	r3, #13
 8007f68:	e0a8      	b.n	80080bc <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6c:	3334      	adds	r3, #52	; 0x34
 8007f6e:	332c      	adds	r3, #44	; 0x2c
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7fe fb7b 	bl	800666c <ld_dword>
 8007f76:	4602      	mov	r2, r0
 8007f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7e:	699b      	ldr	r3, [r3, #24]
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	647b      	str	r3, [r7, #68]	; 0x44
 8007f84:	e01f      	b.n	8007fc6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f88:	891b      	ldrh	r3, [r3, #8]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <find_volume+0x3c2>
 8007f8e:	230d      	movs	r3, #13
 8007f90:	e094      	b.n	80080bc <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f98:	441a      	add	r2, r3
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007f9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d103      	bne.n	8007fae <find_volume+0x3de>
 8007fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	005b      	lsls	r3, r3, #1
 8007fac:	e00a      	b.n	8007fc4 <find_volume+0x3f4>
 8007fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb0:	699a      	ldr	r2, [r3, #24]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	005b      	lsls	r3, r3, #1
 8007fb6:	4413      	add	r3, r2
 8007fb8:	085a      	lsrs	r2, r3, #1
 8007fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007fc4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc8:	69da      	ldr	r2, [r3, #28]
 8007fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fcc:	899b      	ldrh	r3, [r3, #12]
 8007fce:	4619      	mov	r1, r3
 8007fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fd2:	440b      	add	r3, r1
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007fd8:	8989      	ldrh	r1, [r1, #12]
 8007fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d201      	bcs.n	8007fe6 <find_volume+0x416>
 8007fe2:	230d      	movs	r3, #13
 8007fe4:	e06a      	b.n	80080bc <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fec:	615a      	str	r2, [r3, #20]
 8007fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff0:	695a      	ldr	r2, [r3, #20]
 8007ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff8:	2280      	movs	r2, #128	; 0x80
 8007ffa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007ffc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008000:	2b03      	cmp	r3, #3
 8008002:	d149      	bne.n	8008098 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008006:	3334      	adds	r3, #52	; 0x34
 8008008:	3330      	adds	r3, #48	; 0x30
 800800a:	4618      	mov	r0, r3
 800800c:	f7fe fb16 	bl	800663c <ld_word>
 8008010:	4603      	mov	r3, r0
 8008012:	2b01      	cmp	r3, #1
 8008014:	d140      	bne.n	8008098 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008018:	3301      	adds	r3, #1
 800801a:	4619      	mov	r1, r3
 800801c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800801e:	f7fe fdbd 	bl	8006b9c <move_window>
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d137      	bne.n	8008098 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802a:	2200      	movs	r2, #0
 800802c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800802e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008030:	3334      	adds	r3, #52	; 0x34
 8008032:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008036:	4618      	mov	r0, r3
 8008038:	f7fe fb00 	bl	800663c <ld_word>
 800803c:	4603      	mov	r3, r0
 800803e:	461a      	mov	r2, r3
 8008040:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008044:	429a      	cmp	r2, r3
 8008046:	d127      	bne.n	8008098 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804a:	3334      	adds	r3, #52	; 0x34
 800804c:	4618      	mov	r0, r3
 800804e:	f7fe fb0d 	bl	800666c <ld_dword>
 8008052:	4603      	mov	r3, r0
 8008054:	4a1b      	ldr	r2, [pc, #108]	; (80080c4 <find_volume+0x4f4>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d11e      	bne.n	8008098 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800805a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805c:	3334      	adds	r3, #52	; 0x34
 800805e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008062:	4618      	mov	r0, r3
 8008064:	f7fe fb02 	bl	800666c <ld_dword>
 8008068:	4603      	mov	r3, r0
 800806a:	4a17      	ldr	r2, [pc, #92]	; (80080c8 <find_volume+0x4f8>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d113      	bne.n	8008098 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008072:	3334      	adds	r3, #52	; 0x34
 8008074:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008078:	4618      	mov	r0, r3
 800807a:	f7fe faf7 	bl	800666c <ld_dword>
 800807e:	4602      	mov	r2, r0
 8008080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008082:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008086:	3334      	adds	r3, #52	; 0x34
 8008088:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800808c:	4618      	mov	r0, r3
 800808e:	f7fe faed 	bl	800666c <ld_dword>
 8008092:	4602      	mov	r2, r0
 8008094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008096:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800809e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80080a0:	4b0a      	ldr	r3, [pc, #40]	; (80080cc <find_volume+0x4fc>)
 80080a2:	881b      	ldrh	r3, [r3, #0]
 80080a4:	3301      	adds	r3, #1
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	4b08      	ldr	r3, [pc, #32]	; (80080cc <find_volume+0x4fc>)
 80080aa:	801a      	strh	r2, [r3, #0]
 80080ac:	4b07      	ldr	r3, [pc, #28]	; (80080cc <find_volume+0x4fc>)
 80080ae:	881a      	ldrh	r2, [r3, #0]
 80080b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80080b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080b6:	f7fe fd09 	bl	8006acc <clear_lock>
#endif
	return FR_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3758      	adds	r7, #88	; 0x58
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	41615252 	.word	0x41615252
 80080c8:	61417272 	.word	0x61417272
 80080cc:	200002d8 	.word	0x200002d8

080080d0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80080da:	2309      	movs	r3, #9
 80080dc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d01c      	beq.n	800811e <validate+0x4e>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d018      	beq.n	800811e <validate+0x4e>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d013      	beq.n	800811e <validate+0x4e>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	889a      	ldrh	r2, [r3, #4]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	88db      	ldrh	r3, [r3, #6]
 8008100:	429a      	cmp	r2, r3
 8008102:	d10c      	bne.n	800811e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	785b      	ldrb	r3, [r3, #1]
 800810a:	4618      	mov	r0, r3
 800810c:	f7fe f9f8 	bl	8006500 <disk_status>
 8008110:	4603      	mov	r3, r0
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	2b00      	cmp	r3, #0
 8008118:	d101      	bne.n	800811e <validate+0x4e>
			res = FR_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800811e:	7bfb      	ldrb	r3, [r7, #15]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d102      	bne.n	800812a <validate+0x5a>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	e000      	b.n	800812c <validate+0x5c>
 800812a:	2300      	movs	r3, #0
 800812c:	683a      	ldr	r2, [r7, #0]
 800812e:	6013      	str	r3, [r2, #0]
	return res;
 8008130:	7bfb      	ldrb	r3, [r7, #15]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
	...

0800813c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b088      	sub	sp, #32
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	4613      	mov	r3, r2
 8008148:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800814e:	f107 0310 	add.w	r3, r7, #16
 8008152:	4618      	mov	r0, r3
 8008154:	f7ff fca2 	bl	8007a9c <get_ldnumber>
 8008158:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	2b00      	cmp	r3, #0
 800815e:	da01      	bge.n	8008164 <f_mount+0x28>
 8008160:	230b      	movs	r3, #11
 8008162:	e02b      	b.n	80081bc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008164:	4a17      	ldr	r2, [pc, #92]	; (80081c4 <f_mount+0x88>)
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800816c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d005      	beq.n	8008180 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008174:	69b8      	ldr	r0, [r7, #24]
 8008176:	f7fe fca9 	bl	8006acc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	2200      	movs	r2, #0
 800817e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d002      	beq.n	800818c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	490d      	ldr	r1, [pc, #52]	; (80081c4 <f_mount+0x88>)
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d002      	beq.n	80081a2 <f_mount+0x66>
 800819c:	79fb      	ldrb	r3, [r7, #7]
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d001      	beq.n	80081a6 <f_mount+0x6a>
 80081a2:	2300      	movs	r3, #0
 80081a4:	e00a      	b.n	80081bc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80081a6:	f107 010c 	add.w	r1, r7, #12
 80081aa:	f107 0308 	add.w	r3, r7, #8
 80081ae:	2200      	movs	r2, #0
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7ff fd0d 	bl	8007bd0 <find_volume>
 80081b6:	4603      	mov	r3, r0
 80081b8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80081ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3720      	adds	r7, #32
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	200002d4 	.word	0x200002d4

080081c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b098      	sub	sp, #96	; 0x60
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	4613      	mov	r3, r2
 80081d4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d101      	bne.n	80081e0 <f_open+0x18>
 80081dc:	2309      	movs	r3, #9
 80081de:	e1bb      	b.n	8008558 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80081e0:	79fb      	ldrb	r3, [r7, #7]
 80081e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081e6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80081e8:	79fa      	ldrb	r2, [r7, #7]
 80081ea:	f107 0110 	add.w	r1, r7, #16
 80081ee:	f107 0308 	add.w	r3, r7, #8
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7ff fcec 	bl	8007bd0 <find_volume>
 80081f8:	4603      	mov	r3, r0
 80081fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80081fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008202:	2b00      	cmp	r3, #0
 8008204:	f040 819f 	bne.w	8008546 <f_open+0x37e>
		dj.obj.fs = fs;
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	f107 0314 	add.w	r3, r7, #20
 8008212:	4611      	mov	r1, r2
 8008214:	4618      	mov	r0, r3
 8008216:	f7ff fbcb 	bl	80079b0 <follow_path>
 800821a:	4603      	mov	r3, r0
 800821c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008220:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008224:	2b00      	cmp	r3, #0
 8008226:	d11a      	bne.n	800825e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008228:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800822c:	b25b      	sxtb	r3, r3
 800822e:	2b00      	cmp	r3, #0
 8008230:	da03      	bge.n	800823a <f_open+0x72>
				res = FR_INVALID_NAME;
 8008232:	2306      	movs	r3, #6
 8008234:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008238:	e011      	b.n	800825e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800823a:	79fb      	ldrb	r3, [r7, #7]
 800823c:	f023 0301 	bic.w	r3, r3, #1
 8008240:	2b00      	cmp	r3, #0
 8008242:	bf14      	ite	ne
 8008244:	2301      	movne	r3, #1
 8008246:	2300      	moveq	r3, #0
 8008248:	b2db      	uxtb	r3, r3
 800824a:	461a      	mov	r2, r3
 800824c:	f107 0314 	add.w	r3, r7, #20
 8008250:	4611      	mov	r1, r2
 8008252:	4618      	mov	r0, r3
 8008254:	f7fe faf2 	bl	800683c <chk_lock>
 8008258:	4603      	mov	r3, r0
 800825a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800825e:	79fb      	ldrb	r3, [r7, #7]
 8008260:	f003 031c 	and.w	r3, r3, #28
 8008264:	2b00      	cmp	r3, #0
 8008266:	d07f      	beq.n	8008368 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008268:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800826c:	2b00      	cmp	r3, #0
 800826e:	d017      	beq.n	80082a0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008270:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008274:	2b04      	cmp	r3, #4
 8008276:	d10e      	bne.n	8008296 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008278:	f7fe fb3c 	bl	80068f4 <enq_lock>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d006      	beq.n	8008290 <f_open+0xc8>
 8008282:	f107 0314 	add.w	r3, r7, #20
 8008286:	4618      	mov	r0, r3
 8008288:	f7ff fa6c 	bl	8007764 <dir_register>
 800828c:	4603      	mov	r3, r0
 800828e:	e000      	b.n	8008292 <f_open+0xca>
 8008290:	2312      	movs	r3, #18
 8008292:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008296:	79fb      	ldrb	r3, [r7, #7]
 8008298:	f043 0308 	orr.w	r3, r3, #8
 800829c:	71fb      	strb	r3, [r7, #7]
 800829e:	e010      	b.n	80082c2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80082a0:	7ebb      	ldrb	r3, [r7, #26]
 80082a2:	f003 0311 	and.w	r3, r3, #17
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d003      	beq.n	80082b2 <f_open+0xea>
					res = FR_DENIED;
 80082aa:	2307      	movs	r3, #7
 80082ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80082b0:	e007      	b.n	80082c2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80082b2:	79fb      	ldrb	r3, [r7, #7]
 80082b4:	f003 0304 	and.w	r3, r3, #4
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <f_open+0xfa>
 80082bc:	2308      	movs	r3, #8
 80082be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80082c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d168      	bne.n	800839c <f_open+0x1d4>
 80082ca:	79fb      	ldrb	r3, [r7, #7]
 80082cc:	f003 0308 	and.w	r3, r3, #8
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d063      	beq.n	800839c <f_open+0x1d4>
				dw = GET_FATTIME();
 80082d4:	f7fd ff9a 	bl	800620c <get_fattime>
 80082d8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80082da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082dc:	330e      	adds	r3, #14
 80082de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fe fa01 	bl	80066e8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80082e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e8:	3316      	adds	r3, #22
 80082ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fe f9fb 	bl	80066e8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80082f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f4:	330b      	adds	r3, #11
 80082f6:	2220      	movs	r2, #32
 80082f8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082fe:	4611      	mov	r1, r2
 8008300:	4618      	mov	r0, r3
 8008302:	f7ff f99b 	bl	800763c <ld_clust>
 8008306:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800830c:	2200      	movs	r2, #0
 800830e:	4618      	mov	r0, r3
 8008310:	f7ff f9b3 	bl	800767a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008316:	331c      	adds	r3, #28
 8008318:	2100      	movs	r1, #0
 800831a:	4618      	mov	r0, r3
 800831c:	f7fe f9e4 	bl	80066e8 <st_dword>
					fs->wflag = 1;
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	2201      	movs	r2, #1
 8008324:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008328:	2b00      	cmp	r3, #0
 800832a:	d037      	beq.n	800839c <f_open+0x1d4>
						dw = fs->winsect;
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008330:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008332:	f107 0314 	add.w	r3, r7, #20
 8008336:	2200      	movs	r2, #0
 8008338:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800833a:	4618      	mov	r0, r3
 800833c:	f7fe fedb 	bl	80070f6 <remove_chain>
 8008340:	4603      	mov	r3, r0
 8008342:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008346:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800834a:	2b00      	cmp	r3, #0
 800834c:	d126      	bne.n	800839c <f_open+0x1d4>
							res = move_window(fs, dw);
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008352:	4618      	mov	r0, r3
 8008354:	f7fe fc22 	bl	8006b9c <move_window>
 8008358:	4603      	mov	r3, r0
 800835a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008362:	3a01      	subs	r2, #1
 8008364:	611a      	str	r2, [r3, #16]
 8008366:	e019      	b.n	800839c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008368:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800836c:	2b00      	cmp	r3, #0
 800836e:	d115      	bne.n	800839c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008370:	7ebb      	ldrb	r3, [r7, #26]
 8008372:	f003 0310 	and.w	r3, r3, #16
 8008376:	2b00      	cmp	r3, #0
 8008378:	d003      	beq.n	8008382 <f_open+0x1ba>
					res = FR_NO_FILE;
 800837a:	2304      	movs	r3, #4
 800837c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008380:	e00c      	b.n	800839c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008382:	79fb      	ldrb	r3, [r7, #7]
 8008384:	f003 0302 	and.w	r3, r3, #2
 8008388:	2b00      	cmp	r3, #0
 800838a:	d007      	beq.n	800839c <f_open+0x1d4>
 800838c:	7ebb      	ldrb	r3, [r7, #26]
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	d002      	beq.n	800839c <f_open+0x1d4>
						res = FR_DENIED;
 8008396:	2307      	movs	r3, #7
 8008398:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800839c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d128      	bne.n	80083f6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80083a4:	79fb      	ldrb	r3, [r7, #7]
 80083a6:	f003 0308 	and.w	r3, r3, #8
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d003      	beq.n	80083b6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80083ae:	79fb      	ldrb	r3, [r7, #7]
 80083b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083b4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80083be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80083c4:	79fb      	ldrb	r3, [r7, #7]
 80083c6:	f023 0301 	bic.w	r3, r3, #1
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	bf14      	ite	ne
 80083ce:	2301      	movne	r3, #1
 80083d0:	2300      	moveq	r3, #0
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	461a      	mov	r2, r3
 80083d6:	f107 0314 	add.w	r3, r7, #20
 80083da:	4611      	mov	r1, r2
 80083dc:	4618      	mov	r0, r3
 80083de:	f7fe faab 	bl	8006938 <inc_lock>
 80083e2:	4602      	mov	r2, r0
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d102      	bne.n	80083f6 <f_open+0x22e>
 80083f0:	2302      	movs	r3, #2
 80083f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80083f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f040 80a3 	bne.w	8008546 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008404:	4611      	mov	r1, r2
 8008406:	4618      	mov	r0, r3
 8008408:	f7ff f918 	bl	800763c <ld_clust>
 800840c:	4602      	mov	r2, r0
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008414:	331c      	adds	r3, #28
 8008416:	4618      	mov	r0, r3
 8008418:	f7fe f928 	bl	800666c <ld_dword>
 800841c:	4602      	mov	r2, r0
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	88da      	ldrh	r2, [r3, #6]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	79fa      	ldrb	r2, [r7, #7]
 800843a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	3330      	adds	r3, #48	; 0x30
 8008452:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008456:	2100      	movs	r1, #0
 8008458:	4618      	mov	r0, r3
 800845a:	f7fe f992 	bl	8006782 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800845e:	79fb      	ldrb	r3, [r7, #7]
 8008460:	f003 0320 	and.w	r3, r3, #32
 8008464:	2b00      	cmp	r3, #0
 8008466:	d06e      	beq.n	8008546 <f_open+0x37e>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d06a      	beq.n	8008546 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	68da      	ldr	r2, [r3, #12]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	895b      	ldrh	r3, [r3, #10]
 800847c:	461a      	mov	r2, r3
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	899b      	ldrh	r3, [r3, #12]
 8008482:	fb02 f303 	mul.w	r3, r2, r3
 8008486:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	657b      	str	r3, [r7, #84]	; 0x54
 8008494:	e016      	b.n	80084c4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800849a:	4618      	mov	r0, r3
 800849c:	f7fe fc3b 	bl	8006d16 <get_fat>
 80084a0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80084a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d802      	bhi.n	80084ae <f_open+0x2e6>
 80084a8:	2302      	movs	r3, #2
 80084aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80084ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b4:	d102      	bne.n	80084bc <f_open+0x2f4>
 80084b6:	2301      	movs	r3, #1
 80084b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80084bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	657b      	str	r3, [r7, #84]	; 0x54
 80084c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d103      	bne.n	80084d4 <f_open+0x30c>
 80084cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d8e0      	bhi.n	8008496 <f_open+0x2ce>
				}
				fp->clust = clst;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084d8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80084da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d131      	bne.n	8008546 <f_open+0x37e>
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	899b      	ldrh	r3, [r3, #12]
 80084e6:	461a      	mov	r2, r3
 80084e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80084ee:	fb01 f202 	mul.w	r2, r1, r2
 80084f2:	1a9b      	subs	r3, r3, r2
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d026      	beq.n	8008546 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7fe fbeb 	bl	8006cd8 <clust2sect>
 8008502:	6478      	str	r0, [r7, #68]	; 0x44
 8008504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008506:	2b00      	cmp	r3, #0
 8008508:	d103      	bne.n	8008512 <f_open+0x34a>
						res = FR_INT_ERR;
 800850a:	2302      	movs	r3, #2
 800850c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008510:	e019      	b.n	8008546 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	899b      	ldrh	r3, [r3, #12]
 8008516:	461a      	mov	r2, r3
 8008518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800851a:	fbb3 f2f2 	udiv	r2, r3, r2
 800851e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008520:	441a      	add	r2, r3
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	7858      	ldrb	r0, [r3, #1]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6a1a      	ldr	r2, [r3, #32]
 8008534:	2301      	movs	r3, #1
 8008536:	f7fe f823 	bl	8006580 <disk_read>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <f_open+0x37e>
 8008540:	2301      	movs	r3, #1
 8008542:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008546:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800854a:	2b00      	cmp	r3, #0
 800854c:	d002      	beq.n	8008554 <f_open+0x38c>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008554:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008558:	4618      	mov	r0, r3
 800855a:	3760      	adds	r7, #96	; 0x60
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f107 0208 	add.w	r2, r7, #8
 800856e:	4611      	mov	r1, r2
 8008570:	4618      	mov	r0, r3
 8008572:	f7ff fdad 	bl	80080d0 <validate>
 8008576:	4603      	mov	r3, r0
 8008578:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800857a:	7dfb      	ldrb	r3, [r7, #23]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d168      	bne.n	8008652 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	7d1b      	ldrb	r3, [r3, #20]
 8008584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008588:	2b00      	cmp	r3, #0
 800858a:	d062      	beq.n	8008652 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	7d1b      	ldrb	r3, [r3, #20]
 8008590:	b25b      	sxtb	r3, r3
 8008592:	2b00      	cmp	r3, #0
 8008594:	da15      	bge.n	80085c2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	7858      	ldrb	r0, [r3, #1]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a1a      	ldr	r2, [r3, #32]
 80085a4:	2301      	movs	r3, #1
 80085a6:	f7fe f80b 	bl	80065c0 <disk_write>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <f_sync+0x54>
 80085b0:	2301      	movs	r3, #1
 80085b2:	e04f      	b.n	8008654 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	7d1b      	ldrb	r3, [r3, #20]
 80085b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80085c2:	f7fd fe23 	bl	800620c <get_fattime>
 80085c6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80085c8:	68ba      	ldr	r2, [r7, #8]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ce:	4619      	mov	r1, r3
 80085d0:	4610      	mov	r0, r2
 80085d2:	f7fe fae3 	bl	8006b9c <move_window>
 80085d6:	4603      	mov	r3, r0
 80085d8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80085da:	7dfb      	ldrb	r3, [r7, #23]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d138      	bne.n	8008652 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	330b      	adds	r3, #11
 80085ea:	781a      	ldrb	r2, [r3, #0]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	330b      	adds	r3, #11
 80085f0:	f042 0220 	orr.w	r2, r2, #32
 80085f4:	b2d2      	uxtb	r2, r2
 80085f6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6818      	ldr	r0, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	461a      	mov	r2, r3
 8008602:	68f9      	ldr	r1, [r7, #12]
 8008604:	f7ff f839 	bl	800767a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f103 021c 	add.w	r2, r3, #28
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	4619      	mov	r1, r3
 8008614:	4610      	mov	r0, r2
 8008616:	f7fe f867 	bl	80066e8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	3316      	adds	r3, #22
 800861e:	6939      	ldr	r1, [r7, #16]
 8008620:	4618      	mov	r0, r3
 8008622:	f7fe f861 	bl	80066e8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	3312      	adds	r3, #18
 800862a:	2100      	movs	r1, #0
 800862c:	4618      	mov	r0, r3
 800862e:	f7fe f840 	bl	80066b2 <st_word>
					fs->wflag = 1;
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	2201      	movs	r2, #1
 8008636:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	4618      	mov	r0, r3
 800863c:	f7fe fadc 	bl	8006bf8 <sync_fs>
 8008640:	4603      	mov	r3, r0
 8008642:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	7d1b      	ldrb	r3, [r3, #20]
 8008648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800864c:	b2da      	uxtb	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008652:	7dfb      	ldrb	r3, [r7, #23]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3718      	adds	r7, #24
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f7ff ff7b 	bl	8008560 <f_sync>
 800866a:	4603      	mov	r3, r0
 800866c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800866e:	7bfb      	ldrb	r3, [r7, #15]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d118      	bne.n	80086a6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f107 0208 	add.w	r2, r7, #8
 800867a:	4611      	mov	r1, r2
 800867c:	4618      	mov	r0, r3
 800867e:	f7ff fd27 	bl	80080d0 <validate>
 8008682:	4603      	mov	r3, r0
 8008684:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008686:	7bfb      	ldrb	r3, [r7, #15]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10c      	bne.n	80086a6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	4618      	mov	r0, r3
 8008692:	f7fe f9df 	bl	8006a54 <dec_lock>
 8008696:	4603      	mov	r3, r0
 8008698:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800869a:	7bfb      	ldrb	r3, [r7, #15]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d102      	bne.n	80086a6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80086a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b090      	sub	sp, #64	; 0x40
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80086ba:	f107 010c 	add.w	r1, r7, #12
 80086be:	1d3b      	adds	r3, r7, #4
 80086c0:	2200      	movs	r2, #0
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7ff fa84 	bl	8007bd0 <find_volume>
 80086c8:	4603      	mov	r3, r0
 80086ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80086ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d11f      	bne.n	8008716 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	f107 030c 	add.w	r3, r7, #12
 80086dc:	4611      	mov	r1, r2
 80086de:	4618      	mov	r0, r3
 80086e0:	f7ff f966 	bl	80079b0 <follow_path>
 80086e4:	4603      	mov	r3, r0
 80086e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 80086ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d111      	bne.n	8008716 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80086f2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80086f6:	b25b      	sxtb	r3, r3
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	da03      	bge.n	8008704 <f_stat+0x54>
				res = FR_INVALID_NAME;
 80086fc:	2306      	movs	r3, #6
 80086fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008702:	e008      	b.n	8008716 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d005      	beq.n	8008716 <f_stat+0x66>
 800870a:	f107 030c 	add.w	r3, r7, #12
 800870e:	6839      	ldr	r1, [r7, #0]
 8008710:	4618      	mov	r0, r3
 8008712:	f7ff f859 	bl	80077c8 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8008716:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800871a:	4618      	mov	r0, r3
 800871c:	3740      	adds	r7, #64	; 0x40
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
	...

08008724 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008724:	b480      	push	{r7}
 8008726:	b087      	sub	sp, #28
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	4613      	mov	r3, r2
 8008730:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008732:	2301      	movs	r3, #1
 8008734:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008736:	2300      	movs	r3, #0
 8008738:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800873a:	4b1f      	ldr	r3, [pc, #124]	; (80087b8 <FATFS_LinkDriverEx+0x94>)
 800873c:	7a5b      	ldrb	r3, [r3, #9]
 800873e:	b2db      	uxtb	r3, r3
 8008740:	2b00      	cmp	r3, #0
 8008742:	d131      	bne.n	80087a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008744:	4b1c      	ldr	r3, [pc, #112]	; (80087b8 <FATFS_LinkDriverEx+0x94>)
 8008746:	7a5b      	ldrb	r3, [r3, #9]
 8008748:	b2db      	uxtb	r3, r3
 800874a:	461a      	mov	r2, r3
 800874c:	4b1a      	ldr	r3, [pc, #104]	; (80087b8 <FATFS_LinkDriverEx+0x94>)
 800874e:	2100      	movs	r1, #0
 8008750:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008752:	4b19      	ldr	r3, [pc, #100]	; (80087b8 <FATFS_LinkDriverEx+0x94>)
 8008754:	7a5b      	ldrb	r3, [r3, #9]
 8008756:	b2db      	uxtb	r3, r3
 8008758:	4a17      	ldr	r2, [pc, #92]	; (80087b8 <FATFS_LinkDriverEx+0x94>)
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	4413      	add	r3, r2
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008762:	4b15      	ldr	r3, [pc, #84]	; (80087b8 <FATFS_LinkDriverEx+0x94>)
 8008764:	7a5b      	ldrb	r3, [r3, #9]
 8008766:	b2db      	uxtb	r3, r3
 8008768:	461a      	mov	r2, r3
 800876a:	4b13      	ldr	r3, [pc, #76]	; (80087b8 <FATFS_LinkDriverEx+0x94>)
 800876c:	4413      	add	r3, r2
 800876e:	79fa      	ldrb	r2, [r7, #7]
 8008770:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008772:	4b11      	ldr	r3, [pc, #68]	; (80087b8 <FATFS_LinkDriverEx+0x94>)
 8008774:	7a5b      	ldrb	r3, [r3, #9]
 8008776:	b2db      	uxtb	r3, r3
 8008778:	1c5a      	adds	r2, r3, #1
 800877a:	b2d1      	uxtb	r1, r2
 800877c:	4a0e      	ldr	r2, [pc, #56]	; (80087b8 <FATFS_LinkDriverEx+0x94>)
 800877e:	7251      	strb	r1, [r2, #9]
 8008780:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008782:	7dbb      	ldrb	r3, [r7, #22]
 8008784:	3330      	adds	r3, #48	; 0x30
 8008786:	b2da      	uxtb	r2, r3
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	3301      	adds	r3, #1
 8008790:	223a      	movs	r2, #58	; 0x3a
 8008792:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	3302      	adds	r3, #2
 8008798:	222f      	movs	r2, #47	; 0x2f
 800879a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	3303      	adds	r3, #3
 80087a0:	2200      	movs	r2, #0
 80087a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80087a4:	2300      	movs	r3, #0
 80087a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80087a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	371c      	adds	r7, #28
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	200002fc 	.word	0x200002fc

080087bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80087c6:	2200      	movs	r2, #0
 80087c8:	6839      	ldr	r1, [r7, #0]
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7ff ffaa 	bl	8008724 <FATFS_LinkDriverEx>
 80087d0:	4603      	mov	r3, r0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3708      	adds	r7, #8
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
	...

080087dc <__errno>:
 80087dc:	4b01      	ldr	r3, [pc, #4]	; (80087e4 <__errno+0x8>)
 80087de:	6818      	ldr	r0, [r3, #0]
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	2000000c 	.word	0x2000000c

080087e8 <__libc_init_array>:
 80087e8:	b570      	push	{r4, r5, r6, lr}
 80087ea:	4d0d      	ldr	r5, [pc, #52]	; (8008820 <__libc_init_array+0x38>)
 80087ec:	4c0d      	ldr	r4, [pc, #52]	; (8008824 <__libc_init_array+0x3c>)
 80087ee:	1b64      	subs	r4, r4, r5
 80087f0:	10a4      	asrs	r4, r4, #2
 80087f2:	2600      	movs	r6, #0
 80087f4:	42a6      	cmp	r6, r4
 80087f6:	d109      	bne.n	800880c <__libc_init_array+0x24>
 80087f8:	4d0b      	ldr	r5, [pc, #44]	; (8008828 <__libc_init_array+0x40>)
 80087fa:	4c0c      	ldr	r4, [pc, #48]	; (800882c <__libc_init_array+0x44>)
 80087fc:	f000 fc8e 	bl	800911c <_init>
 8008800:	1b64      	subs	r4, r4, r5
 8008802:	10a4      	asrs	r4, r4, #2
 8008804:	2600      	movs	r6, #0
 8008806:	42a6      	cmp	r6, r4
 8008808:	d105      	bne.n	8008816 <__libc_init_array+0x2e>
 800880a:	bd70      	pop	{r4, r5, r6, pc}
 800880c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008810:	4798      	blx	r3
 8008812:	3601      	adds	r6, #1
 8008814:	e7ee      	b.n	80087f4 <__libc_init_array+0xc>
 8008816:	f855 3b04 	ldr.w	r3, [r5], #4
 800881a:	4798      	blx	r3
 800881c:	3601      	adds	r6, #1
 800881e:	e7f2      	b.n	8008806 <__libc_init_array+0x1e>
 8008820:	08009380 	.word	0x08009380
 8008824:	08009380 	.word	0x08009380
 8008828:	08009380 	.word	0x08009380
 800882c:	08009384 	.word	0x08009384

08008830 <memset>:
 8008830:	4402      	add	r2, r0
 8008832:	4603      	mov	r3, r0
 8008834:	4293      	cmp	r3, r2
 8008836:	d100      	bne.n	800883a <memset+0xa>
 8008838:	4770      	bx	lr
 800883a:	f803 1b01 	strb.w	r1, [r3], #1
 800883e:	e7f9      	b.n	8008834 <memset+0x4>

08008840 <siprintf>:
 8008840:	b40e      	push	{r1, r2, r3}
 8008842:	b500      	push	{lr}
 8008844:	b09c      	sub	sp, #112	; 0x70
 8008846:	ab1d      	add	r3, sp, #116	; 0x74
 8008848:	9002      	str	r0, [sp, #8]
 800884a:	9006      	str	r0, [sp, #24]
 800884c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008850:	4809      	ldr	r0, [pc, #36]	; (8008878 <siprintf+0x38>)
 8008852:	9107      	str	r1, [sp, #28]
 8008854:	9104      	str	r1, [sp, #16]
 8008856:	4909      	ldr	r1, [pc, #36]	; (800887c <siprintf+0x3c>)
 8008858:	f853 2b04 	ldr.w	r2, [r3], #4
 800885c:	9105      	str	r1, [sp, #20]
 800885e:	6800      	ldr	r0, [r0, #0]
 8008860:	9301      	str	r3, [sp, #4]
 8008862:	a902      	add	r1, sp, #8
 8008864:	f000 f868 	bl	8008938 <_svfiprintf_r>
 8008868:	9b02      	ldr	r3, [sp, #8]
 800886a:	2200      	movs	r2, #0
 800886c:	701a      	strb	r2, [r3, #0]
 800886e:	b01c      	add	sp, #112	; 0x70
 8008870:	f85d eb04 	ldr.w	lr, [sp], #4
 8008874:	b003      	add	sp, #12
 8008876:	4770      	bx	lr
 8008878:	2000000c 	.word	0x2000000c
 800887c:	ffff0208 	.word	0xffff0208

08008880 <__ssputs_r>:
 8008880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008884:	688e      	ldr	r6, [r1, #8]
 8008886:	429e      	cmp	r6, r3
 8008888:	4682      	mov	sl, r0
 800888a:	460c      	mov	r4, r1
 800888c:	4690      	mov	r8, r2
 800888e:	461f      	mov	r7, r3
 8008890:	d838      	bhi.n	8008904 <__ssputs_r+0x84>
 8008892:	898a      	ldrh	r2, [r1, #12]
 8008894:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008898:	d032      	beq.n	8008900 <__ssputs_r+0x80>
 800889a:	6825      	ldr	r5, [r4, #0]
 800889c:	6909      	ldr	r1, [r1, #16]
 800889e:	eba5 0901 	sub.w	r9, r5, r1
 80088a2:	6965      	ldr	r5, [r4, #20]
 80088a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088ac:	3301      	adds	r3, #1
 80088ae:	444b      	add	r3, r9
 80088b0:	106d      	asrs	r5, r5, #1
 80088b2:	429d      	cmp	r5, r3
 80088b4:	bf38      	it	cc
 80088b6:	461d      	movcc	r5, r3
 80088b8:	0553      	lsls	r3, r2, #21
 80088ba:	d531      	bpl.n	8008920 <__ssputs_r+0xa0>
 80088bc:	4629      	mov	r1, r5
 80088be:	f000 fb63 	bl	8008f88 <_malloc_r>
 80088c2:	4606      	mov	r6, r0
 80088c4:	b950      	cbnz	r0, 80088dc <__ssputs_r+0x5c>
 80088c6:	230c      	movs	r3, #12
 80088c8:	f8ca 3000 	str.w	r3, [sl]
 80088cc:	89a3      	ldrh	r3, [r4, #12]
 80088ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088d2:	81a3      	strh	r3, [r4, #12]
 80088d4:	f04f 30ff 	mov.w	r0, #4294967295
 80088d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088dc:	6921      	ldr	r1, [r4, #16]
 80088de:	464a      	mov	r2, r9
 80088e0:	f000 fabe 	bl	8008e60 <memcpy>
 80088e4:	89a3      	ldrh	r3, [r4, #12]
 80088e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ee:	81a3      	strh	r3, [r4, #12]
 80088f0:	6126      	str	r6, [r4, #16]
 80088f2:	6165      	str	r5, [r4, #20]
 80088f4:	444e      	add	r6, r9
 80088f6:	eba5 0509 	sub.w	r5, r5, r9
 80088fa:	6026      	str	r6, [r4, #0]
 80088fc:	60a5      	str	r5, [r4, #8]
 80088fe:	463e      	mov	r6, r7
 8008900:	42be      	cmp	r6, r7
 8008902:	d900      	bls.n	8008906 <__ssputs_r+0x86>
 8008904:	463e      	mov	r6, r7
 8008906:	6820      	ldr	r0, [r4, #0]
 8008908:	4632      	mov	r2, r6
 800890a:	4641      	mov	r1, r8
 800890c:	f000 fab6 	bl	8008e7c <memmove>
 8008910:	68a3      	ldr	r3, [r4, #8]
 8008912:	1b9b      	subs	r3, r3, r6
 8008914:	60a3      	str	r3, [r4, #8]
 8008916:	6823      	ldr	r3, [r4, #0]
 8008918:	4433      	add	r3, r6
 800891a:	6023      	str	r3, [r4, #0]
 800891c:	2000      	movs	r0, #0
 800891e:	e7db      	b.n	80088d8 <__ssputs_r+0x58>
 8008920:	462a      	mov	r2, r5
 8008922:	f000 fba5 	bl	8009070 <_realloc_r>
 8008926:	4606      	mov	r6, r0
 8008928:	2800      	cmp	r0, #0
 800892a:	d1e1      	bne.n	80088f0 <__ssputs_r+0x70>
 800892c:	6921      	ldr	r1, [r4, #16]
 800892e:	4650      	mov	r0, sl
 8008930:	f000 fabe 	bl	8008eb0 <_free_r>
 8008934:	e7c7      	b.n	80088c6 <__ssputs_r+0x46>
	...

08008938 <_svfiprintf_r>:
 8008938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800893c:	4698      	mov	r8, r3
 800893e:	898b      	ldrh	r3, [r1, #12]
 8008940:	061b      	lsls	r3, r3, #24
 8008942:	b09d      	sub	sp, #116	; 0x74
 8008944:	4607      	mov	r7, r0
 8008946:	460d      	mov	r5, r1
 8008948:	4614      	mov	r4, r2
 800894a:	d50e      	bpl.n	800896a <_svfiprintf_r+0x32>
 800894c:	690b      	ldr	r3, [r1, #16]
 800894e:	b963      	cbnz	r3, 800896a <_svfiprintf_r+0x32>
 8008950:	2140      	movs	r1, #64	; 0x40
 8008952:	f000 fb19 	bl	8008f88 <_malloc_r>
 8008956:	6028      	str	r0, [r5, #0]
 8008958:	6128      	str	r0, [r5, #16]
 800895a:	b920      	cbnz	r0, 8008966 <_svfiprintf_r+0x2e>
 800895c:	230c      	movs	r3, #12
 800895e:	603b      	str	r3, [r7, #0]
 8008960:	f04f 30ff 	mov.w	r0, #4294967295
 8008964:	e0d1      	b.n	8008b0a <_svfiprintf_r+0x1d2>
 8008966:	2340      	movs	r3, #64	; 0x40
 8008968:	616b      	str	r3, [r5, #20]
 800896a:	2300      	movs	r3, #0
 800896c:	9309      	str	r3, [sp, #36]	; 0x24
 800896e:	2320      	movs	r3, #32
 8008970:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008974:	f8cd 800c 	str.w	r8, [sp, #12]
 8008978:	2330      	movs	r3, #48	; 0x30
 800897a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b24 <_svfiprintf_r+0x1ec>
 800897e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008982:	f04f 0901 	mov.w	r9, #1
 8008986:	4623      	mov	r3, r4
 8008988:	469a      	mov	sl, r3
 800898a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800898e:	b10a      	cbz	r2, 8008994 <_svfiprintf_r+0x5c>
 8008990:	2a25      	cmp	r2, #37	; 0x25
 8008992:	d1f9      	bne.n	8008988 <_svfiprintf_r+0x50>
 8008994:	ebba 0b04 	subs.w	fp, sl, r4
 8008998:	d00b      	beq.n	80089b2 <_svfiprintf_r+0x7a>
 800899a:	465b      	mov	r3, fp
 800899c:	4622      	mov	r2, r4
 800899e:	4629      	mov	r1, r5
 80089a0:	4638      	mov	r0, r7
 80089a2:	f7ff ff6d 	bl	8008880 <__ssputs_r>
 80089a6:	3001      	adds	r0, #1
 80089a8:	f000 80aa 	beq.w	8008b00 <_svfiprintf_r+0x1c8>
 80089ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089ae:	445a      	add	r2, fp
 80089b0:	9209      	str	r2, [sp, #36]	; 0x24
 80089b2:	f89a 3000 	ldrb.w	r3, [sl]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f000 80a2 	beq.w	8008b00 <_svfiprintf_r+0x1c8>
 80089bc:	2300      	movs	r3, #0
 80089be:	f04f 32ff 	mov.w	r2, #4294967295
 80089c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089c6:	f10a 0a01 	add.w	sl, sl, #1
 80089ca:	9304      	str	r3, [sp, #16]
 80089cc:	9307      	str	r3, [sp, #28]
 80089ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089d2:	931a      	str	r3, [sp, #104]	; 0x68
 80089d4:	4654      	mov	r4, sl
 80089d6:	2205      	movs	r2, #5
 80089d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089dc:	4851      	ldr	r0, [pc, #324]	; (8008b24 <_svfiprintf_r+0x1ec>)
 80089de:	f7f7 fc17 	bl	8000210 <memchr>
 80089e2:	9a04      	ldr	r2, [sp, #16]
 80089e4:	b9d8      	cbnz	r0, 8008a1e <_svfiprintf_r+0xe6>
 80089e6:	06d0      	lsls	r0, r2, #27
 80089e8:	bf44      	itt	mi
 80089ea:	2320      	movmi	r3, #32
 80089ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089f0:	0711      	lsls	r1, r2, #28
 80089f2:	bf44      	itt	mi
 80089f4:	232b      	movmi	r3, #43	; 0x2b
 80089f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089fa:	f89a 3000 	ldrb.w	r3, [sl]
 80089fe:	2b2a      	cmp	r3, #42	; 0x2a
 8008a00:	d015      	beq.n	8008a2e <_svfiprintf_r+0xf6>
 8008a02:	9a07      	ldr	r2, [sp, #28]
 8008a04:	4654      	mov	r4, sl
 8008a06:	2000      	movs	r0, #0
 8008a08:	f04f 0c0a 	mov.w	ip, #10
 8008a0c:	4621      	mov	r1, r4
 8008a0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a12:	3b30      	subs	r3, #48	; 0x30
 8008a14:	2b09      	cmp	r3, #9
 8008a16:	d94e      	bls.n	8008ab6 <_svfiprintf_r+0x17e>
 8008a18:	b1b0      	cbz	r0, 8008a48 <_svfiprintf_r+0x110>
 8008a1a:	9207      	str	r2, [sp, #28]
 8008a1c:	e014      	b.n	8008a48 <_svfiprintf_r+0x110>
 8008a1e:	eba0 0308 	sub.w	r3, r0, r8
 8008a22:	fa09 f303 	lsl.w	r3, r9, r3
 8008a26:	4313      	orrs	r3, r2
 8008a28:	9304      	str	r3, [sp, #16]
 8008a2a:	46a2      	mov	sl, r4
 8008a2c:	e7d2      	b.n	80089d4 <_svfiprintf_r+0x9c>
 8008a2e:	9b03      	ldr	r3, [sp, #12]
 8008a30:	1d19      	adds	r1, r3, #4
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	9103      	str	r1, [sp, #12]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	bfbb      	ittet	lt
 8008a3a:	425b      	neglt	r3, r3
 8008a3c:	f042 0202 	orrlt.w	r2, r2, #2
 8008a40:	9307      	strge	r3, [sp, #28]
 8008a42:	9307      	strlt	r3, [sp, #28]
 8008a44:	bfb8      	it	lt
 8008a46:	9204      	strlt	r2, [sp, #16]
 8008a48:	7823      	ldrb	r3, [r4, #0]
 8008a4a:	2b2e      	cmp	r3, #46	; 0x2e
 8008a4c:	d10c      	bne.n	8008a68 <_svfiprintf_r+0x130>
 8008a4e:	7863      	ldrb	r3, [r4, #1]
 8008a50:	2b2a      	cmp	r3, #42	; 0x2a
 8008a52:	d135      	bne.n	8008ac0 <_svfiprintf_r+0x188>
 8008a54:	9b03      	ldr	r3, [sp, #12]
 8008a56:	1d1a      	adds	r2, r3, #4
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	9203      	str	r2, [sp, #12]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	bfb8      	it	lt
 8008a60:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a64:	3402      	adds	r4, #2
 8008a66:	9305      	str	r3, [sp, #20]
 8008a68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b34 <_svfiprintf_r+0x1fc>
 8008a6c:	7821      	ldrb	r1, [r4, #0]
 8008a6e:	2203      	movs	r2, #3
 8008a70:	4650      	mov	r0, sl
 8008a72:	f7f7 fbcd 	bl	8000210 <memchr>
 8008a76:	b140      	cbz	r0, 8008a8a <_svfiprintf_r+0x152>
 8008a78:	2340      	movs	r3, #64	; 0x40
 8008a7a:	eba0 000a 	sub.w	r0, r0, sl
 8008a7e:	fa03 f000 	lsl.w	r0, r3, r0
 8008a82:	9b04      	ldr	r3, [sp, #16]
 8008a84:	4303      	orrs	r3, r0
 8008a86:	3401      	adds	r4, #1
 8008a88:	9304      	str	r3, [sp, #16]
 8008a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a8e:	4826      	ldr	r0, [pc, #152]	; (8008b28 <_svfiprintf_r+0x1f0>)
 8008a90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a94:	2206      	movs	r2, #6
 8008a96:	f7f7 fbbb 	bl	8000210 <memchr>
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	d038      	beq.n	8008b10 <_svfiprintf_r+0x1d8>
 8008a9e:	4b23      	ldr	r3, [pc, #140]	; (8008b2c <_svfiprintf_r+0x1f4>)
 8008aa0:	bb1b      	cbnz	r3, 8008aea <_svfiprintf_r+0x1b2>
 8008aa2:	9b03      	ldr	r3, [sp, #12]
 8008aa4:	3307      	adds	r3, #7
 8008aa6:	f023 0307 	bic.w	r3, r3, #7
 8008aaa:	3308      	adds	r3, #8
 8008aac:	9303      	str	r3, [sp, #12]
 8008aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ab0:	4433      	add	r3, r6
 8008ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ab4:	e767      	b.n	8008986 <_svfiprintf_r+0x4e>
 8008ab6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008aba:	460c      	mov	r4, r1
 8008abc:	2001      	movs	r0, #1
 8008abe:	e7a5      	b.n	8008a0c <_svfiprintf_r+0xd4>
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	3401      	adds	r4, #1
 8008ac4:	9305      	str	r3, [sp, #20]
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	f04f 0c0a 	mov.w	ip, #10
 8008acc:	4620      	mov	r0, r4
 8008ace:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ad2:	3a30      	subs	r2, #48	; 0x30
 8008ad4:	2a09      	cmp	r2, #9
 8008ad6:	d903      	bls.n	8008ae0 <_svfiprintf_r+0x1a8>
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d0c5      	beq.n	8008a68 <_svfiprintf_r+0x130>
 8008adc:	9105      	str	r1, [sp, #20]
 8008ade:	e7c3      	b.n	8008a68 <_svfiprintf_r+0x130>
 8008ae0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ae4:	4604      	mov	r4, r0
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e7f0      	b.n	8008acc <_svfiprintf_r+0x194>
 8008aea:	ab03      	add	r3, sp, #12
 8008aec:	9300      	str	r3, [sp, #0]
 8008aee:	462a      	mov	r2, r5
 8008af0:	4b0f      	ldr	r3, [pc, #60]	; (8008b30 <_svfiprintf_r+0x1f8>)
 8008af2:	a904      	add	r1, sp, #16
 8008af4:	4638      	mov	r0, r7
 8008af6:	f3af 8000 	nop.w
 8008afa:	1c42      	adds	r2, r0, #1
 8008afc:	4606      	mov	r6, r0
 8008afe:	d1d6      	bne.n	8008aae <_svfiprintf_r+0x176>
 8008b00:	89ab      	ldrh	r3, [r5, #12]
 8008b02:	065b      	lsls	r3, r3, #25
 8008b04:	f53f af2c 	bmi.w	8008960 <_svfiprintf_r+0x28>
 8008b08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b0a:	b01d      	add	sp, #116	; 0x74
 8008b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b10:	ab03      	add	r3, sp, #12
 8008b12:	9300      	str	r3, [sp, #0]
 8008b14:	462a      	mov	r2, r5
 8008b16:	4b06      	ldr	r3, [pc, #24]	; (8008b30 <_svfiprintf_r+0x1f8>)
 8008b18:	a904      	add	r1, sp, #16
 8008b1a:	4638      	mov	r0, r7
 8008b1c:	f000 f87a 	bl	8008c14 <_printf_i>
 8008b20:	e7eb      	b.n	8008afa <_svfiprintf_r+0x1c2>
 8008b22:	bf00      	nop
 8008b24:	08009344 	.word	0x08009344
 8008b28:	0800934e 	.word	0x0800934e
 8008b2c:	00000000 	.word	0x00000000
 8008b30:	08008881 	.word	0x08008881
 8008b34:	0800934a 	.word	0x0800934a

08008b38 <_printf_common>:
 8008b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b3c:	4616      	mov	r6, r2
 8008b3e:	4699      	mov	r9, r3
 8008b40:	688a      	ldr	r2, [r1, #8]
 8008b42:	690b      	ldr	r3, [r1, #16]
 8008b44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	bfb8      	it	lt
 8008b4c:	4613      	movlt	r3, r2
 8008b4e:	6033      	str	r3, [r6, #0]
 8008b50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b54:	4607      	mov	r7, r0
 8008b56:	460c      	mov	r4, r1
 8008b58:	b10a      	cbz	r2, 8008b5e <_printf_common+0x26>
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	6033      	str	r3, [r6, #0]
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	0699      	lsls	r1, r3, #26
 8008b62:	bf42      	ittt	mi
 8008b64:	6833      	ldrmi	r3, [r6, #0]
 8008b66:	3302      	addmi	r3, #2
 8008b68:	6033      	strmi	r3, [r6, #0]
 8008b6a:	6825      	ldr	r5, [r4, #0]
 8008b6c:	f015 0506 	ands.w	r5, r5, #6
 8008b70:	d106      	bne.n	8008b80 <_printf_common+0x48>
 8008b72:	f104 0a19 	add.w	sl, r4, #25
 8008b76:	68e3      	ldr	r3, [r4, #12]
 8008b78:	6832      	ldr	r2, [r6, #0]
 8008b7a:	1a9b      	subs	r3, r3, r2
 8008b7c:	42ab      	cmp	r3, r5
 8008b7e:	dc26      	bgt.n	8008bce <_printf_common+0x96>
 8008b80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b84:	1e13      	subs	r3, r2, #0
 8008b86:	6822      	ldr	r2, [r4, #0]
 8008b88:	bf18      	it	ne
 8008b8a:	2301      	movne	r3, #1
 8008b8c:	0692      	lsls	r2, r2, #26
 8008b8e:	d42b      	bmi.n	8008be8 <_printf_common+0xb0>
 8008b90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b94:	4649      	mov	r1, r9
 8008b96:	4638      	mov	r0, r7
 8008b98:	47c0      	blx	r8
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	d01e      	beq.n	8008bdc <_printf_common+0xa4>
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	68e5      	ldr	r5, [r4, #12]
 8008ba2:	6832      	ldr	r2, [r6, #0]
 8008ba4:	f003 0306 	and.w	r3, r3, #6
 8008ba8:	2b04      	cmp	r3, #4
 8008baa:	bf08      	it	eq
 8008bac:	1aad      	subeq	r5, r5, r2
 8008bae:	68a3      	ldr	r3, [r4, #8]
 8008bb0:	6922      	ldr	r2, [r4, #16]
 8008bb2:	bf0c      	ite	eq
 8008bb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bb8:	2500      	movne	r5, #0
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	bfc4      	itt	gt
 8008bbe:	1a9b      	subgt	r3, r3, r2
 8008bc0:	18ed      	addgt	r5, r5, r3
 8008bc2:	2600      	movs	r6, #0
 8008bc4:	341a      	adds	r4, #26
 8008bc6:	42b5      	cmp	r5, r6
 8008bc8:	d11a      	bne.n	8008c00 <_printf_common+0xc8>
 8008bca:	2000      	movs	r0, #0
 8008bcc:	e008      	b.n	8008be0 <_printf_common+0xa8>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	4652      	mov	r2, sl
 8008bd2:	4649      	mov	r1, r9
 8008bd4:	4638      	mov	r0, r7
 8008bd6:	47c0      	blx	r8
 8008bd8:	3001      	adds	r0, #1
 8008bda:	d103      	bne.n	8008be4 <_printf_common+0xac>
 8008bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be4:	3501      	adds	r5, #1
 8008be6:	e7c6      	b.n	8008b76 <_printf_common+0x3e>
 8008be8:	18e1      	adds	r1, r4, r3
 8008bea:	1c5a      	adds	r2, r3, #1
 8008bec:	2030      	movs	r0, #48	; 0x30
 8008bee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bf2:	4422      	add	r2, r4
 8008bf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bfc:	3302      	adds	r3, #2
 8008bfe:	e7c7      	b.n	8008b90 <_printf_common+0x58>
 8008c00:	2301      	movs	r3, #1
 8008c02:	4622      	mov	r2, r4
 8008c04:	4649      	mov	r1, r9
 8008c06:	4638      	mov	r0, r7
 8008c08:	47c0      	blx	r8
 8008c0a:	3001      	adds	r0, #1
 8008c0c:	d0e6      	beq.n	8008bdc <_printf_common+0xa4>
 8008c0e:	3601      	adds	r6, #1
 8008c10:	e7d9      	b.n	8008bc6 <_printf_common+0x8e>
	...

08008c14 <_printf_i>:
 8008c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c18:	7e0f      	ldrb	r7, [r1, #24]
 8008c1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c1c:	2f78      	cmp	r7, #120	; 0x78
 8008c1e:	4691      	mov	r9, r2
 8008c20:	4680      	mov	r8, r0
 8008c22:	460c      	mov	r4, r1
 8008c24:	469a      	mov	sl, r3
 8008c26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c2a:	d807      	bhi.n	8008c3c <_printf_i+0x28>
 8008c2c:	2f62      	cmp	r7, #98	; 0x62
 8008c2e:	d80a      	bhi.n	8008c46 <_printf_i+0x32>
 8008c30:	2f00      	cmp	r7, #0
 8008c32:	f000 80d8 	beq.w	8008de6 <_printf_i+0x1d2>
 8008c36:	2f58      	cmp	r7, #88	; 0x58
 8008c38:	f000 80a3 	beq.w	8008d82 <_printf_i+0x16e>
 8008c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c44:	e03a      	b.n	8008cbc <_printf_i+0xa8>
 8008c46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c4a:	2b15      	cmp	r3, #21
 8008c4c:	d8f6      	bhi.n	8008c3c <_printf_i+0x28>
 8008c4e:	a101      	add	r1, pc, #4	; (adr r1, 8008c54 <_printf_i+0x40>)
 8008c50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c54:	08008cad 	.word	0x08008cad
 8008c58:	08008cc1 	.word	0x08008cc1
 8008c5c:	08008c3d 	.word	0x08008c3d
 8008c60:	08008c3d 	.word	0x08008c3d
 8008c64:	08008c3d 	.word	0x08008c3d
 8008c68:	08008c3d 	.word	0x08008c3d
 8008c6c:	08008cc1 	.word	0x08008cc1
 8008c70:	08008c3d 	.word	0x08008c3d
 8008c74:	08008c3d 	.word	0x08008c3d
 8008c78:	08008c3d 	.word	0x08008c3d
 8008c7c:	08008c3d 	.word	0x08008c3d
 8008c80:	08008dcd 	.word	0x08008dcd
 8008c84:	08008cf1 	.word	0x08008cf1
 8008c88:	08008daf 	.word	0x08008daf
 8008c8c:	08008c3d 	.word	0x08008c3d
 8008c90:	08008c3d 	.word	0x08008c3d
 8008c94:	08008def 	.word	0x08008def
 8008c98:	08008c3d 	.word	0x08008c3d
 8008c9c:	08008cf1 	.word	0x08008cf1
 8008ca0:	08008c3d 	.word	0x08008c3d
 8008ca4:	08008c3d 	.word	0x08008c3d
 8008ca8:	08008db7 	.word	0x08008db7
 8008cac:	682b      	ldr	r3, [r5, #0]
 8008cae:	1d1a      	adds	r2, r3, #4
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	602a      	str	r2, [r5, #0]
 8008cb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e0a3      	b.n	8008e08 <_printf_i+0x1f4>
 8008cc0:	6820      	ldr	r0, [r4, #0]
 8008cc2:	6829      	ldr	r1, [r5, #0]
 8008cc4:	0606      	lsls	r6, r0, #24
 8008cc6:	f101 0304 	add.w	r3, r1, #4
 8008cca:	d50a      	bpl.n	8008ce2 <_printf_i+0xce>
 8008ccc:	680e      	ldr	r6, [r1, #0]
 8008cce:	602b      	str	r3, [r5, #0]
 8008cd0:	2e00      	cmp	r6, #0
 8008cd2:	da03      	bge.n	8008cdc <_printf_i+0xc8>
 8008cd4:	232d      	movs	r3, #45	; 0x2d
 8008cd6:	4276      	negs	r6, r6
 8008cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cdc:	485e      	ldr	r0, [pc, #376]	; (8008e58 <_printf_i+0x244>)
 8008cde:	230a      	movs	r3, #10
 8008ce0:	e019      	b.n	8008d16 <_printf_i+0x102>
 8008ce2:	680e      	ldr	r6, [r1, #0]
 8008ce4:	602b      	str	r3, [r5, #0]
 8008ce6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cea:	bf18      	it	ne
 8008cec:	b236      	sxthne	r6, r6
 8008cee:	e7ef      	b.n	8008cd0 <_printf_i+0xbc>
 8008cf0:	682b      	ldr	r3, [r5, #0]
 8008cf2:	6820      	ldr	r0, [r4, #0]
 8008cf4:	1d19      	adds	r1, r3, #4
 8008cf6:	6029      	str	r1, [r5, #0]
 8008cf8:	0601      	lsls	r1, r0, #24
 8008cfa:	d501      	bpl.n	8008d00 <_printf_i+0xec>
 8008cfc:	681e      	ldr	r6, [r3, #0]
 8008cfe:	e002      	b.n	8008d06 <_printf_i+0xf2>
 8008d00:	0646      	lsls	r6, r0, #25
 8008d02:	d5fb      	bpl.n	8008cfc <_printf_i+0xe8>
 8008d04:	881e      	ldrh	r6, [r3, #0]
 8008d06:	4854      	ldr	r0, [pc, #336]	; (8008e58 <_printf_i+0x244>)
 8008d08:	2f6f      	cmp	r7, #111	; 0x6f
 8008d0a:	bf0c      	ite	eq
 8008d0c:	2308      	moveq	r3, #8
 8008d0e:	230a      	movne	r3, #10
 8008d10:	2100      	movs	r1, #0
 8008d12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d16:	6865      	ldr	r5, [r4, #4]
 8008d18:	60a5      	str	r5, [r4, #8]
 8008d1a:	2d00      	cmp	r5, #0
 8008d1c:	bfa2      	ittt	ge
 8008d1e:	6821      	ldrge	r1, [r4, #0]
 8008d20:	f021 0104 	bicge.w	r1, r1, #4
 8008d24:	6021      	strge	r1, [r4, #0]
 8008d26:	b90e      	cbnz	r6, 8008d2c <_printf_i+0x118>
 8008d28:	2d00      	cmp	r5, #0
 8008d2a:	d04d      	beq.n	8008dc8 <_printf_i+0x1b4>
 8008d2c:	4615      	mov	r5, r2
 8008d2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d32:	fb03 6711 	mls	r7, r3, r1, r6
 8008d36:	5dc7      	ldrb	r7, [r0, r7]
 8008d38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d3c:	4637      	mov	r7, r6
 8008d3e:	42bb      	cmp	r3, r7
 8008d40:	460e      	mov	r6, r1
 8008d42:	d9f4      	bls.n	8008d2e <_printf_i+0x11a>
 8008d44:	2b08      	cmp	r3, #8
 8008d46:	d10b      	bne.n	8008d60 <_printf_i+0x14c>
 8008d48:	6823      	ldr	r3, [r4, #0]
 8008d4a:	07de      	lsls	r6, r3, #31
 8008d4c:	d508      	bpl.n	8008d60 <_printf_i+0x14c>
 8008d4e:	6923      	ldr	r3, [r4, #16]
 8008d50:	6861      	ldr	r1, [r4, #4]
 8008d52:	4299      	cmp	r1, r3
 8008d54:	bfde      	ittt	le
 8008d56:	2330      	movle	r3, #48	; 0x30
 8008d58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d60:	1b52      	subs	r2, r2, r5
 8008d62:	6122      	str	r2, [r4, #16]
 8008d64:	f8cd a000 	str.w	sl, [sp]
 8008d68:	464b      	mov	r3, r9
 8008d6a:	aa03      	add	r2, sp, #12
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	4640      	mov	r0, r8
 8008d70:	f7ff fee2 	bl	8008b38 <_printf_common>
 8008d74:	3001      	adds	r0, #1
 8008d76:	d14c      	bne.n	8008e12 <_printf_i+0x1fe>
 8008d78:	f04f 30ff 	mov.w	r0, #4294967295
 8008d7c:	b004      	add	sp, #16
 8008d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d82:	4835      	ldr	r0, [pc, #212]	; (8008e58 <_printf_i+0x244>)
 8008d84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d88:	6829      	ldr	r1, [r5, #0]
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d90:	6029      	str	r1, [r5, #0]
 8008d92:	061d      	lsls	r5, r3, #24
 8008d94:	d514      	bpl.n	8008dc0 <_printf_i+0x1ac>
 8008d96:	07df      	lsls	r7, r3, #31
 8008d98:	bf44      	itt	mi
 8008d9a:	f043 0320 	orrmi.w	r3, r3, #32
 8008d9e:	6023      	strmi	r3, [r4, #0]
 8008da0:	b91e      	cbnz	r6, 8008daa <_printf_i+0x196>
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	f023 0320 	bic.w	r3, r3, #32
 8008da8:	6023      	str	r3, [r4, #0]
 8008daa:	2310      	movs	r3, #16
 8008dac:	e7b0      	b.n	8008d10 <_printf_i+0xfc>
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	f043 0320 	orr.w	r3, r3, #32
 8008db4:	6023      	str	r3, [r4, #0]
 8008db6:	2378      	movs	r3, #120	; 0x78
 8008db8:	4828      	ldr	r0, [pc, #160]	; (8008e5c <_printf_i+0x248>)
 8008dba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008dbe:	e7e3      	b.n	8008d88 <_printf_i+0x174>
 8008dc0:	0659      	lsls	r1, r3, #25
 8008dc2:	bf48      	it	mi
 8008dc4:	b2b6      	uxthmi	r6, r6
 8008dc6:	e7e6      	b.n	8008d96 <_printf_i+0x182>
 8008dc8:	4615      	mov	r5, r2
 8008dca:	e7bb      	b.n	8008d44 <_printf_i+0x130>
 8008dcc:	682b      	ldr	r3, [r5, #0]
 8008dce:	6826      	ldr	r6, [r4, #0]
 8008dd0:	6961      	ldr	r1, [r4, #20]
 8008dd2:	1d18      	adds	r0, r3, #4
 8008dd4:	6028      	str	r0, [r5, #0]
 8008dd6:	0635      	lsls	r5, r6, #24
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	d501      	bpl.n	8008de0 <_printf_i+0x1cc>
 8008ddc:	6019      	str	r1, [r3, #0]
 8008dde:	e002      	b.n	8008de6 <_printf_i+0x1d2>
 8008de0:	0670      	lsls	r0, r6, #25
 8008de2:	d5fb      	bpl.n	8008ddc <_printf_i+0x1c8>
 8008de4:	8019      	strh	r1, [r3, #0]
 8008de6:	2300      	movs	r3, #0
 8008de8:	6123      	str	r3, [r4, #16]
 8008dea:	4615      	mov	r5, r2
 8008dec:	e7ba      	b.n	8008d64 <_printf_i+0x150>
 8008dee:	682b      	ldr	r3, [r5, #0]
 8008df0:	1d1a      	adds	r2, r3, #4
 8008df2:	602a      	str	r2, [r5, #0]
 8008df4:	681d      	ldr	r5, [r3, #0]
 8008df6:	6862      	ldr	r2, [r4, #4]
 8008df8:	2100      	movs	r1, #0
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	f7f7 fa08 	bl	8000210 <memchr>
 8008e00:	b108      	cbz	r0, 8008e06 <_printf_i+0x1f2>
 8008e02:	1b40      	subs	r0, r0, r5
 8008e04:	6060      	str	r0, [r4, #4]
 8008e06:	6863      	ldr	r3, [r4, #4]
 8008e08:	6123      	str	r3, [r4, #16]
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e10:	e7a8      	b.n	8008d64 <_printf_i+0x150>
 8008e12:	6923      	ldr	r3, [r4, #16]
 8008e14:	462a      	mov	r2, r5
 8008e16:	4649      	mov	r1, r9
 8008e18:	4640      	mov	r0, r8
 8008e1a:	47d0      	blx	sl
 8008e1c:	3001      	adds	r0, #1
 8008e1e:	d0ab      	beq.n	8008d78 <_printf_i+0x164>
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	079b      	lsls	r3, r3, #30
 8008e24:	d413      	bmi.n	8008e4e <_printf_i+0x23a>
 8008e26:	68e0      	ldr	r0, [r4, #12]
 8008e28:	9b03      	ldr	r3, [sp, #12]
 8008e2a:	4298      	cmp	r0, r3
 8008e2c:	bfb8      	it	lt
 8008e2e:	4618      	movlt	r0, r3
 8008e30:	e7a4      	b.n	8008d7c <_printf_i+0x168>
 8008e32:	2301      	movs	r3, #1
 8008e34:	4632      	mov	r2, r6
 8008e36:	4649      	mov	r1, r9
 8008e38:	4640      	mov	r0, r8
 8008e3a:	47d0      	blx	sl
 8008e3c:	3001      	adds	r0, #1
 8008e3e:	d09b      	beq.n	8008d78 <_printf_i+0x164>
 8008e40:	3501      	adds	r5, #1
 8008e42:	68e3      	ldr	r3, [r4, #12]
 8008e44:	9903      	ldr	r1, [sp, #12]
 8008e46:	1a5b      	subs	r3, r3, r1
 8008e48:	42ab      	cmp	r3, r5
 8008e4a:	dcf2      	bgt.n	8008e32 <_printf_i+0x21e>
 8008e4c:	e7eb      	b.n	8008e26 <_printf_i+0x212>
 8008e4e:	2500      	movs	r5, #0
 8008e50:	f104 0619 	add.w	r6, r4, #25
 8008e54:	e7f5      	b.n	8008e42 <_printf_i+0x22e>
 8008e56:	bf00      	nop
 8008e58:	08009355 	.word	0x08009355
 8008e5c:	08009366 	.word	0x08009366

08008e60 <memcpy>:
 8008e60:	440a      	add	r2, r1
 8008e62:	4291      	cmp	r1, r2
 8008e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e68:	d100      	bne.n	8008e6c <memcpy+0xc>
 8008e6a:	4770      	bx	lr
 8008e6c:	b510      	push	{r4, lr}
 8008e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e76:	4291      	cmp	r1, r2
 8008e78:	d1f9      	bne.n	8008e6e <memcpy+0xe>
 8008e7a:	bd10      	pop	{r4, pc}

08008e7c <memmove>:
 8008e7c:	4288      	cmp	r0, r1
 8008e7e:	b510      	push	{r4, lr}
 8008e80:	eb01 0402 	add.w	r4, r1, r2
 8008e84:	d902      	bls.n	8008e8c <memmove+0x10>
 8008e86:	4284      	cmp	r4, r0
 8008e88:	4623      	mov	r3, r4
 8008e8a:	d807      	bhi.n	8008e9c <memmove+0x20>
 8008e8c:	1e43      	subs	r3, r0, #1
 8008e8e:	42a1      	cmp	r1, r4
 8008e90:	d008      	beq.n	8008ea4 <memmove+0x28>
 8008e92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e9a:	e7f8      	b.n	8008e8e <memmove+0x12>
 8008e9c:	4402      	add	r2, r0
 8008e9e:	4601      	mov	r1, r0
 8008ea0:	428a      	cmp	r2, r1
 8008ea2:	d100      	bne.n	8008ea6 <memmove+0x2a>
 8008ea4:	bd10      	pop	{r4, pc}
 8008ea6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008eaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008eae:	e7f7      	b.n	8008ea0 <memmove+0x24>

08008eb0 <_free_r>:
 8008eb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eb2:	2900      	cmp	r1, #0
 8008eb4:	d044      	beq.n	8008f40 <_free_r+0x90>
 8008eb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008eba:	9001      	str	r0, [sp, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f1a1 0404 	sub.w	r4, r1, #4
 8008ec2:	bfb8      	it	lt
 8008ec4:	18e4      	addlt	r4, r4, r3
 8008ec6:	f000 f913 	bl	80090f0 <__malloc_lock>
 8008eca:	4a1e      	ldr	r2, [pc, #120]	; (8008f44 <_free_r+0x94>)
 8008ecc:	9801      	ldr	r0, [sp, #4]
 8008ece:	6813      	ldr	r3, [r2, #0]
 8008ed0:	b933      	cbnz	r3, 8008ee0 <_free_r+0x30>
 8008ed2:	6063      	str	r3, [r4, #4]
 8008ed4:	6014      	str	r4, [r2, #0]
 8008ed6:	b003      	add	sp, #12
 8008ed8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008edc:	f000 b90e 	b.w	80090fc <__malloc_unlock>
 8008ee0:	42a3      	cmp	r3, r4
 8008ee2:	d908      	bls.n	8008ef6 <_free_r+0x46>
 8008ee4:	6825      	ldr	r5, [r4, #0]
 8008ee6:	1961      	adds	r1, r4, r5
 8008ee8:	428b      	cmp	r3, r1
 8008eea:	bf01      	itttt	eq
 8008eec:	6819      	ldreq	r1, [r3, #0]
 8008eee:	685b      	ldreq	r3, [r3, #4]
 8008ef0:	1949      	addeq	r1, r1, r5
 8008ef2:	6021      	streq	r1, [r4, #0]
 8008ef4:	e7ed      	b.n	8008ed2 <_free_r+0x22>
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	b10b      	cbz	r3, 8008f00 <_free_r+0x50>
 8008efc:	42a3      	cmp	r3, r4
 8008efe:	d9fa      	bls.n	8008ef6 <_free_r+0x46>
 8008f00:	6811      	ldr	r1, [r2, #0]
 8008f02:	1855      	adds	r5, r2, r1
 8008f04:	42a5      	cmp	r5, r4
 8008f06:	d10b      	bne.n	8008f20 <_free_r+0x70>
 8008f08:	6824      	ldr	r4, [r4, #0]
 8008f0a:	4421      	add	r1, r4
 8008f0c:	1854      	adds	r4, r2, r1
 8008f0e:	42a3      	cmp	r3, r4
 8008f10:	6011      	str	r1, [r2, #0]
 8008f12:	d1e0      	bne.n	8008ed6 <_free_r+0x26>
 8008f14:	681c      	ldr	r4, [r3, #0]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	6053      	str	r3, [r2, #4]
 8008f1a:	4421      	add	r1, r4
 8008f1c:	6011      	str	r1, [r2, #0]
 8008f1e:	e7da      	b.n	8008ed6 <_free_r+0x26>
 8008f20:	d902      	bls.n	8008f28 <_free_r+0x78>
 8008f22:	230c      	movs	r3, #12
 8008f24:	6003      	str	r3, [r0, #0]
 8008f26:	e7d6      	b.n	8008ed6 <_free_r+0x26>
 8008f28:	6825      	ldr	r5, [r4, #0]
 8008f2a:	1961      	adds	r1, r4, r5
 8008f2c:	428b      	cmp	r3, r1
 8008f2e:	bf04      	itt	eq
 8008f30:	6819      	ldreq	r1, [r3, #0]
 8008f32:	685b      	ldreq	r3, [r3, #4]
 8008f34:	6063      	str	r3, [r4, #4]
 8008f36:	bf04      	itt	eq
 8008f38:	1949      	addeq	r1, r1, r5
 8008f3a:	6021      	streq	r1, [r4, #0]
 8008f3c:	6054      	str	r4, [r2, #4]
 8008f3e:	e7ca      	b.n	8008ed6 <_free_r+0x26>
 8008f40:	b003      	add	sp, #12
 8008f42:	bd30      	pop	{r4, r5, pc}
 8008f44:	20000308 	.word	0x20000308

08008f48 <sbrk_aligned>:
 8008f48:	b570      	push	{r4, r5, r6, lr}
 8008f4a:	4e0e      	ldr	r6, [pc, #56]	; (8008f84 <sbrk_aligned+0x3c>)
 8008f4c:	460c      	mov	r4, r1
 8008f4e:	6831      	ldr	r1, [r6, #0]
 8008f50:	4605      	mov	r5, r0
 8008f52:	b911      	cbnz	r1, 8008f5a <sbrk_aligned+0x12>
 8008f54:	f000 f8bc 	bl	80090d0 <_sbrk_r>
 8008f58:	6030      	str	r0, [r6, #0]
 8008f5a:	4621      	mov	r1, r4
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	f000 f8b7 	bl	80090d0 <_sbrk_r>
 8008f62:	1c43      	adds	r3, r0, #1
 8008f64:	d00a      	beq.n	8008f7c <sbrk_aligned+0x34>
 8008f66:	1cc4      	adds	r4, r0, #3
 8008f68:	f024 0403 	bic.w	r4, r4, #3
 8008f6c:	42a0      	cmp	r0, r4
 8008f6e:	d007      	beq.n	8008f80 <sbrk_aligned+0x38>
 8008f70:	1a21      	subs	r1, r4, r0
 8008f72:	4628      	mov	r0, r5
 8008f74:	f000 f8ac 	bl	80090d0 <_sbrk_r>
 8008f78:	3001      	adds	r0, #1
 8008f7a:	d101      	bne.n	8008f80 <sbrk_aligned+0x38>
 8008f7c:	f04f 34ff 	mov.w	r4, #4294967295
 8008f80:	4620      	mov	r0, r4
 8008f82:	bd70      	pop	{r4, r5, r6, pc}
 8008f84:	2000030c 	.word	0x2000030c

08008f88 <_malloc_r>:
 8008f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f8c:	1ccd      	adds	r5, r1, #3
 8008f8e:	f025 0503 	bic.w	r5, r5, #3
 8008f92:	3508      	adds	r5, #8
 8008f94:	2d0c      	cmp	r5, #12
 8008f96:	bf38      	it	cc
 8008f98:	250c      	movcc	r5, #12
 8008f9a:	2d00      	cmp	r5, #0
 8008f9c:	4607      	mov	r7, r0
 8008f9e:	db01      	blt.n	8008fa4 <_malloc_r+0x1c>
 8008fa0:	42a9      	cmp	r1, r5
 8008fa2:	d905      	bls.n	8008fb0 <_malloc_r+0x28>
 8008fa4:	230c      	movs	r3, #12
 8008fa6:	603b      	str	r3, [r7, #0]
 8008fa8:	2600      	movs	r6, #0
 8008faa:	4630      	mov	r0, r6
 8008fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fb0:	4e2e      	ldr	r6, [pc, #184]	; (800906c <_malloc_r+0xe4>)
 8008fb2:	f000 f89d 	bl	80090f0 <__malloc_lock>
 8008fb6:	6833      	ldr	r3, [r6, #0]
 8008fb8:	461c      	mov	r4, r3
 8008fba:	bb34      	cbnz	r4, 800900a <_malloc_r+0x82>
 8008fbc:	4629      	mov	r1, r5
 8008fbe:	4638      	mov	r0, r7
 8008fc0:	f7ff ffc2 	bl	8008f48 <sbrk_aligned>
 8008fc4:	1c43      	adds	r3, r0, #1
 8008fc6:	4604      	mov	r4, r0
 8008fc8:	d14d      	bne.n	8009066 <_malloc_r+0xde>
 8008fca:	6834      	ldr	r4, [r6, #0]
 8008fcc:	4626      	mov	r6, r4
 8008fce:	2e00      	cmp	r6, #0
 8008fd0:	d140      	bne.n	8009054 <_malloc_r+0xcc>
 8008fd2:	6823      	ldr	r3, [r4, #0]
 8008fd4:	4631      	mov	r1, r6
 8008fd6:	4638      	mov	r0, r7
 8008fd8:	eb04 0803 	add.w	r8, r4, r3
 8008fdc:	f000 f878 	bl	80090d0 <_sbrk_r>
 8008fe0:	4580      	cmp	r8, r0
 8008fe2:	d13a      	bne.n	800905a <_malloc_r+0xd2>
 8008fe4:	6821      	ldr	r1, [r4, #0]
 8008fe6:	3503      	adds	r5, #3
 8008fe8:	1a6d      	subs	r5, r5, r1
 8008fea:	f025 0503 	bic.w	r5, r5, #3
 8008fee:	3508      	adds	r5, #8
 8008ff0:	2d0c      	cmp	r5, #12
 8008ff2:	bf38      	it	cc
 8008ff4:	250c      	movcc	r5, #12
 8008ff6:	4629      	mov	r1, r5
 8008ff8:	4638      	mov	r0, r7
 8008ffa:	f7ff ffa5 	bl	8008f48 <sbrk_aligned>
 8008ffe:	3001      	adds	r0, #1
 8009000:	d02b      	beq.n	800905a <_malloc_r+0xd2>
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	442b      	add	r3, r5
 8009006:	6023      	str	r3, [r4, #0]
 8009008:	e00e      	b.n	8009028 <_malloc_r+0xa0>
 800900a:	6822      	ldr	r2, [r4, #0]
 800900c:	1b52      	subs	r2, r2, r5
 800900e:	d41e      	bmi.n	800904e <_malloc_r+0xc6>
 8009010:	2a0b      	cmp	r2, #11
 8009012:	d916      	bls.n	8009042 <_malloc_r+0xba>
 8009014:	1961      	adds	r1, r4, r5
 8009016:	42a3      	cmp	r3, r4
 8009018:	6025      	str	r5, [r4, #0]
 800901a:	bf18      	it	ne
 800901c:	6059      	strne	r1, [r3, #4]
 800901e:	6863      	ldr	r3, [r4, #4]
 8009020:	bf08      	it	eq
 8009022:	6031      	streq	r1, [r6, #0]
 8009024:	5162      	str	r2, [r4, r5]
 8009026:	604b      	str	r3, [r1, #4]
 8009028:	4638      	mov	r0, r7
 800902a:	f104 060b 	add.w	r6, r4, #11
 800902e:	f000 f865 	bl	80090fc <__malloc_unlock>
 8009032:	f026 0607 	bic.w	r6, r6, #7
 8009036:	1d23      	adds	r3, r4, #4
 8009038:	1af2      	subs	r2, r6, r3
 800903a:	d0b6      	beq.n	8008faa <_malloc_r+0x22>
 800903c:	1b9b      	subs	r3, r3, r6
 800903e:	50a3      	str	r3, [r4, r2]
 8009040:	e7b3      	b.n	8008faa <_malloc_r+0x22>
 8009042:	6862      	ldr	r2, [r4, #4]
 8009044:	42a3      	cmp	r3, r4
 8009046:	bf0c      	ite	eq
 8009048:	6032      	streq	r2, [r6, #0]
 800904a:	605a      	strne	r2, [r3, #4]
 800904c:	e7ec      	b.n	8009028 <_malloc_r+0xa0>
 800904e:	4623      	mov	r3, r4
 8009050:	6864      	ldr	r4, [r4, #4]
 8009052:	e7b2      	b.n	8008fba <_malloc_r+0x32>
 8009054:	4634      	mov	r4, r6
 8009056:	6876      	ldr	r6, [r6, #4]
 8009058:	e7b9      	b.n	8008fce <_malloc_r+0x46>
 800905a:	230c      	movs	r3, #12
 800905c:	603b      	str	r3, [r7, #0]
 800905e:	4638      	mov	r0, r7
 8009060:	f000 f84c 	bl	80090fc <__malloc_unlock>
 8009064:	e7a1      	b.n	8008faa <_malloc_r+0x22>
 8009066:	6025      	str	r5, [r4, #0]
 8009068:	e7de      	b.n	8009028 <_malloc_r+0xa0>
 800906a:	bf00      	nop
 800906c:	20000308 	.word	0x20000308

08009070 <_realloc_r>:
 8009070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009074:	4680      	mov	r8, r0
 8009076:	4614      	mov	r4, r2
 8009078:	460e      	mov	r6, r1
 800907a:	b921      	cbnz	r1, 8009086 <_realloc_r+0x16>
 800907c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009080:	4611      	mov	r1, r2
 8009082:	f7ff bf81 	b.w	8008f88 <_malloc_r>
 8009086:	b92a      	cbnz	r2, 8009094 <_realloc_r+0x24>
 8009088:	f7ff ff12 	bl	8008eb0 <_free_r>
 800908c:	4625      	mov	r5, r4
 800908e:	4628      	mov	r0, r5
 8009090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009094:	f000 f838 	bl	8009108 <_malloc_usable_size_r>
 8009098:	4284      	cmp	r4, r0
 800909a:	4607      	mov	r7, r0
 800909c:	d802      	bhi.n	80090a4 <_realloc_r+0x34>
 800909e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80090a2:	d812      	bhi.n	80090ca <_realloc_r+0x5a>
 80090a4:	4621      	mov	r1, r4
 80090a6:	4640      	mov	r0, r8
 80090a8:	f7ff ff6e 	bl	8008f88 <_malloc_r>
 80090ac:	4605      	mov	r5, r0
 80090ae:	2800      	cmp	r0, #0
 80090b0:	d0ed      	beq.n	800908e <_realloc_r+0x1e>
 80090b2:	42bc      	cmp	r4, r7
 80090b4:	4622      	mov	r2, r4
 80090b6:	4631      	mov	r1, r6
 80090b8:	bf28      	it	cs
 80090ba:	463a      	movcs	r2, r7
 80090bc:	f7ff fed0 	bl	8008e60 <memcpy>
 80090c0:	4631      	mov	r1, r6
 80090c2:	4640      	mov	r0, r8
 80090c4:	f7ff fef4 	bl	8008eb0 <_free_r>
 80090c8:	e7e1      	b.n	800908e <_realloc_r+0x1e>
 80090ca:	4635      	mov	r5, r6
 80090cc:	e7df      	b.n	800908e <_realloc_r+0x1e>
	...

080090d0 <_sbrk_r>:
 80090d0:	b538      	push	{r3, r4, r5, lr}
 80090d2:	4d06      	ldr	r5, [pc, #24]	; (80090ec <_sbrk_r+0x1c>)
 80090d4:	2300      	movs	r3, #0
 80090d6:	4604      	mov	r4, r0
 80090d8:	4608      	mov	r0, r1
 80090da:	602b      	str	r3, [r5, #0]
 80090dc:	f7f7 ff5a 	bl	8000f94 <_sbrk>
 80090e0:	1c43      	adds	r3, r0, #1
 80090e2:	d102      	bne.n	80090ea <_sbrk_r+0x1a>
 80090e4:	682b      	ldr	r3, [r5, #0]
 80090e6:	b103      	cbz	r3, 80090ea <_sbrk_r+0x1a>
 80090e8:	6023      	str	r3, [r4, #0]
 80090ea:	bd38      	pop	{r3, r4, r5, pc}
 80090ec:	20000310 	.word	0x20000310

080090f0 <__malloc_lock>:
 80090f0:	4801      	ldr	r0, [pc, #4]	; (80090f8 <__malloc_lock+0x8>)
 80090f2:	f000 b811 	b.w	8009118 <__retarget_lock_acquire_recursive>
 80090f6:	bf00      	nop
 80090f8:	20000314 	.word	0x20000314

080090fc <__malloc_unlock>:
 80090fc:	4801      	ldr	r0, [pc, #4]	; (8009104 <__malloc_unlock+0x8>)
 80090fe:	f000 b80c 	b.w	800911a <__retarget_lock_release_recursive>
 8009102:	bf00      	nop
 8009104:	20000314 	.word	0x20000314

08009108 <_malloc_usable_size_r>:
 8009108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800910c:	1f18      	subs	r0, r3, #4
 800910e:	2b00      	cmp	r3, #0
 8009110:	bfbc      	itt	lt
 8009112:	580b      	ldrlt	r3, [r1, r0]
 8009114:	18c0      	addlt	r0, r0, r3
 8009116:	4770      	bx	lr

08009118 <__retarget_lock_acquire_recursive>:
 8009118:	4770      	bx	lr

0800911a <__retarget_lock_release_recursive>:
 800911a:	4770      	bx	lr

0800911c <_init>:
 800911c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911e:	bf00      	nop
 8009120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009122:	bc08      	pop	{r3}
 8009124:	469e      	mov	lr, r3
 8009126:	4770      	bx	lr

08009128 <_fini>:
 8009128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912a:	bf00      	nop
 800912c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800912e:	bc08      	pop	{r3}
 8009130:	469e      	mov	lr, r3
 8009132:	4770      	bx	lr
