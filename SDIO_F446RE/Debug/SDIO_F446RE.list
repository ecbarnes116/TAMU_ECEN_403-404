
SDIO_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af14  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  0800b0e4  0800b0e4  0001b0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b450  0800b450  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800b450  0800b450  0001b450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b458  0800b458  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b458  0800b458  0001b458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b45c  0800b45c  0001b45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800b460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002eb4  20000074  0800b4d4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002f28  0800b4d4  00022f28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015810  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003307  00000000  00000000  000358b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  00038bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  00039d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000054cc  00000000  00000000  0003ad28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d2a  00000000  00000000  000401f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3f9d  00000000  00000000  00057f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013bebb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050e0  00000000  00000000  0013bf0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b0cc 	.word	0x0800b0cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800b0cc 	.word	0x0800b0cc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d013      	beq.n	8000604 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005e4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d00b      	beq.n	8000604 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005ec:	e000      	b.n	80005f0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ee:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d0f9      	beq.n	80005ee <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005fa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	b2d2      	uxtb	r2, r2
 8000602:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000604:	687b      	ldr	r3, [r7, #4]
}
 8000606:	4618      	mov	r0, r3
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr

08000612 <_write>:
uint16_t delta_audio;
uint16_t delta_pressure;
uint16_t delta_acc;
//float delta_acc

int _write(int file, char *ptr, int length) {
 8000612:	b580      	push	{r7, lr}
 8000614:	b086      	sub	sp, #24
 8000616:	af00      	add	r7, sp, #0
 8000618:	60f8      	str	r0, [r7, #12]
 800061a:	60b9      	str	r1, [r7, #8]
 800061c:	607a      	str	r2, [r7, #4]
	int i = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]

	for(i = 0; i < length; i++) {
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
 8000626:	e009      	b.n	800063c <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	1c5a      	adds	r2, r3, #1
 800062c:	60ba      	str	r2, [r7, #8]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ffc7 	bl	80005c4 <ITM_SendChar>
	for(i = 0; i < length; i++) {
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	3301      	adds	r3, #1
 800063a:	617b      	str	r3, [r7, #20]
 800063c:	697a      	ldr	r2, [r7, #20]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	429a      	cmp	r2, r3
 8000642:	dbf1      	blt.n	8000628 <_write+0x16>
	}

	return length;
 8000644:	687b      	ldr	r3, [r7, #4]
}
 8000646:	4618      	mov	r0, r3
 8000648:	3718      	adds	r7, #24
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <bufclear>:
	return i;
}


// Clear UART buffer for debugging
void bufclear(void) {
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFFER_SIZE; i++){
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	e007      	b.n	800066c <bufclear+0x1c>
		buffer[i] = '\0';
 800065c:	4a08      	ldr	r2, [pc, #32]	; (8000680 <bufclear+0x30>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFFER_SIZE; i++){
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	3301      	adds	r3, #1
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2b7f      	cmp	r3, #127	; 0x7f
 8000670:	ddf4      	ble.n	800065c <bufclear+0xc>
	}
}
 8000672:	bf00      	nop
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	200005e0 	.word	0x200005e0

08000684 <SDbufclear>:

void SDbufclear(void) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
	for(int i = 0; i < SD_BUFFER_SIZE; i++){
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	e007      	b.n	80006a0 <SDbufclear+0x1c>
		SD_buffer[i] = '\0';
 8000690:	4a09      	ldr	r2, [pc, #36]	; (80006b8 <SDbufclear+0x34>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < SD_BUFFER_SIZE; i++){
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	3301      	adds	r3, #1
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80006a6:	dbf3      	blt.n	8000690 <SDbufclear+0xc>
	}
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000660 	.word	0x20000660

080006bc <HAL_ADC_ConvHalfCpltCallback>:
// Size of buffer needs to be a multiple of number of ADC channels (minimum of 5)
// Needs to be divisible by the number of bytes in each line
// that I am writing to the SD card				<-- What did I mean by this???

// Called when ADC buffer is half filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	fromADC_Ptr = &adc_data[0];
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 80006c6:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 80006c8:	601a      	str	r2, [r3, #0]
	toSD_Ptr 	= &SD_data[0];
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80006cc:	4a08      	ldr	r2, [pc, #32]	; (80006f0 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80006ce:	601a      	str	r2, [r3, #0]

	dataReady = 1;
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	701a      	strb	r2, [r3, #0]
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	200005dc 	.word	0x200005dc
 80006e8:	20000220 	.word	0x20000220
 80006ec:	20000000 	.word	0x20000000
 80006f0:	200003b0 	.word	0x200003b0
 80006f4:	20000e30 	.word	0x20000e30

080006f8 <HAL_ADC_ConvCpltCallback>:



// Called when ADC buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	fromADC_Ptr = &adc_data[ADC_BUFFER_SIZE/2];
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <HAL_ADC_ConvCpltCallback+0x28>)
 8000702:	4a08      	ldr	r2, [pc, #32]	; (8000724 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000704:	601a      	str	r2, [r3, #0]
	toSD_Ptr 	= &SD_data[ADC_BUFFER_SIZE/2];
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <HAL_ADC_ConvCpltCallback+0x30>)
 8000708:	4a08      	ldr	r2, [pc, #32]	; (800072c <HAL_ADC_ConvCpltCallback+0x34>)
 800070a:	601a      	str	r2, [r3, #0]

	dataReady = 1;
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <HAL_ADC_ConvCpltCallback+0x38>)
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	200005dc 	.word	0x200005dc
 8000724:	200002e8 	.word	0x200002e8
 8000728:	20000000 	.word	0x20000000
 800072c:	20000478 	.word	0x20000478
 8000730:	20000e30 	.word	0x20000e30

08000734 <writeSD>:



void writeSD(const void* buffer) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
//	fresult = f_lseek(&fil, f_size(&fil));
//	fresult = f_printf(&fil, "ADC channel 0 (audio) = %d\n", current_audio);

//	snprintf(buffer, BUFFER_SIZE, "This is a test (count): %d\n", count);

	fresult = f_lseek(&fil, f_size(&fil));
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <writeSD+0x48>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	4619      	mov	r1, r3
 8000742:	480e      	ldr	r0, [pc, #56]	; (800077c <writeSD+0x48>)
 8000744:	f008 fd4e 	bl	80091e4 <f_lseek>
 8000748:	4603      	mov	r3, r0
 800074a:	461a      	mov	r2, r3
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <writeSD+0x4c>)
 800074e:	701a      	strb	r2, [r3, #0]
	fresult = f_write(&fil, buffer, SD_BUFFER_SIZE, &bw);
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <writeSD+0x50>)
 8000752:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000756:	6879      	ldr	r1, [r7, #4]
 8000758:	4808      	ldr	r0, [pc, #32]	; (800077c <writeSD+0x48>)
 800075a:	f008 fb07 	bl	8008d6c <f_write>
 800075e:	4603      	mov	r3, r0
 8000760:	461a      	mov	r2, r3
 8000762:	4b07      	ldr	r3, [pc, #28]	; (8000780 <writeSD+0x4c>)
 8000764:	701a      	strb	r2, [r3, #0]
	fresult = f_sync(&fil);
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <writeSD+0x48>)
 8000768:	f008 fc94 	bl	8009094 <f_sync>
 800076c:	4603      	mov	r3, r0
 800076e:	461a      	mov	r2, r3
 8000770:	4b03      	ldr	r3, [pc, #12]	; (8000780 <writeSD+0x4c>)
 8000772:	701a      	strb	r2, [r3, #0]
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20001e68 	.word	0x20001e68
 8000780:	20002eb0 	.word	0x20002eb0
 8000784:	20002eb4 	.word	0x20002eb4

08000788 <processDataNew>:





void processDataNew() {
 8000788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800078a:	b089      	sub	sp, #36	; 0x24
 800078c:	af06      	add	r7, sp, #24
	uint8_t channel = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	71fb      	strb	r3, [r7, #7]

	// Keeps track of the "global sample" (i.e, every 4 ADC readings)
	uint8_t sample_index = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	71bb      	strb	r3, [r7, #6]

	snprintf(SD_buffer, SD_BUFFER_SIZE, "%s", "\r\n");
 8000796:	4b7b      	ldr	r3, [pc, #492]	; (8000984 <processDataNew+0x1fc>)
 8000798:	4a7b      	ldr	r2, [pc, #492]	; (8000988 <processDataNew+0x200>)
 800079a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800079e:	487b      	ldr	r0, [pc, #492]	; (800098c <processDataNew+0x204>)
 80007a0:	f009 fb2e 	bl	8009e00 <sniprintf>

	for(uint8_t i = 0; i < (ADC_BUFFER_SIZE)/2; i++) {
 80007a4:	2300      	movs	r3, #0
 80007a6:	717b      	strb	r3, [r7, #5]
 80007a8:	e0db      	b.n	8000962 <processDataNew+0x1da>
		// Store the new value read into its respective array
		// audio_arr 	= [0, 30, 56, 70, 56, 30, 0]
		// pressure_arr = [0, 30, 56, 70, 56, 30, 0]
		//
		// index 0 of audio_arr corresponds with the same reading for pressure_arr
		if	   (i == ((channel * 4) + 0)) {
 80007aa:	797a      	ldrb	r2, [r7, #5]
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d10f      	bne.n	80007d4 <processDataNew+0x4c>
			current_audio = fromADC_Ptr[i];
 80007b4:	4b76      	ldr	r3, [pc, #472]	; (8000990 <processDataNew+0x208>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	797b      	ldrb	r3, [r7, #5]
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	4413      	add	r3, r2
 80007be:	881b      	ldrh	r3, [r3, #0]
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	4b74      	ldr	r3, [pc, #464]	; (8000994 <processDataNew+0x20c>)
 80007c4:	801a      	strh	r2, [r3, #0]

			audio_arr[sample_index] = current_audio;
 80007c6:	79bb      	ldrb	r3, [r7, #6]
 80007c8:	4a72      	ldr	r2, [pc, #456]	; (8000994 <processDataNew+0x20c>)
 80007ca:	8811      	ldrh	r1, [r2, #0]
 80007cc:	4a72      	ldr	r2, [pc, #456]	; (8000998 <processDataNew+0x210>)
 80007ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80007d2:	e03e      	b.n	8000852 <processDataNew+0xca>
			// Get time here (first reading will count as the time the sample was read)
			// Write this value to the temp string when current_audio is written

			// time_arr[sample_index] = some_function_to_get_time_in_micro_seconds()
		}
		else if(i == ((channel * 4) + 1)) {
 80007d4:	797a      	ldrb	r2, [r7, #5]
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	3301      	adds	r3, #1
 80007dc:	429a      	cmp	r2, r3
 80007de:	d10f      	bne.n	8000800 <processDataNew+0x78>
			current_pressure = fromADC_Ptr[i];
 80007e0:	4b6b      	ldr	r3, [pc, #428]	; (8000990 <processDataNew+0x208>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	797b      	ldrb	r3, [r7, #5]
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	4413      	add	r3, r2
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	4b6b      	ldr	r3, [pc, #428]	; (800099c <processDataNew+0x214>)
 80007f0:	801a      	strh	r2, [r3, #0]

			pressure_arr[sample_index] = current_pressure;
 80007f2:	79bb      	ldrb	r3, [r7, #6]
 80007f4:	4a69      	ldr	r2, [pc, #420]	; (800099c <processDataNew+0x214>)
 80007f6:	8811      	ldrh	r1, [r2, #0]
 80007f8:	4a69      	ldr	r2, [pc, #420]	; (80009a0 <processDataNew+0x218>)
 80007fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80007fe:	e028      	b.n	8000852 <processDataNew+0xca>

		}
		else if(i == ((channel * 4) + 2)) {
 8000800:	797a      	ldrb	r2, [r7, #5]
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	3302      	adds	r3, #2
 8000808:	429a      	cmp	r2, r3
 800080a:	d109      	bne.n	8000820 <processDataNew+0x98>
			current_acc_x = fromADC_Ptr[i];
 800080c:	4b60      	ldr	r3, [pc, #384]	; (8000990 <processDataNew+0x208>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	797b      	ldrb	r3, [r7, #5]
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	4413      	add	r3, r2
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	b29a      	uxth	r2, r3
 800081a:	4b62      	ldr	r3, [pc, #392]	; (80009a4 <processDataNew+0x21c>)
 800081c:	801a      	strh	r2, [r3, #0]
 800081e:	e018      	b.n	8000852 <processDataNew+0xca>
		}
		else if(i == ((channel * 4) + 3)) {
 8000820:	797a      	ldrb	r2, [r7, #5]
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	3303      	adds	r3, #3
 8000828:	429a      	cmp	r2, r3
 800082a:	d112      	bne.n	8000852 <processDataNew+0xca>
			current_acc_y = fromADC_Ptr[i];
 800082c:	4b58      	ldr	r3, [pc, #352]	; (8000990 <processDataNew+0x208>)
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	797b      	ldrb	r3, [r7, #5]
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	4413      	add	r3, r2
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	b29a      	uxth	r2, r3
 800083a:	4b5b      	ldr	r3, [pc, #364]	; (80009a8 <processDataNew+0x220>)
 800083c:	801a      	strh	r2, [r3, #0]

			// current_acc = abs(current_acc_x) + abs(current_acc_y);
			current_acc = current_acc_x;
 800083e:	4b59      	ldr	r3, [pc, #356]	; (80009a4 <processDataNew+0x21c>)
 8000840:	881a      	ldrh	r2, [r3, #0]
 8000842:	4b5a      	ldr	r3, [pc, #360]	; (80009ac <processDataNew+0x224>)
 8000844:	801a      	strh	r2, [r3, #0]
			acc_arr[sample_index] = current_acc;
 8000846:	79bb      	ldrb	r3, [r7, #6]
 8000848:	4a58      	ldr	r2, [pc, #352]	; (80009ac <processDataNew+0x224>)
 800084a:	8811      	ldrh	r1, [r2, #0]
 800084c:	4a58      	ldr	r2, [pc, #352]	; (80009b0 <processDataNew+0x228>)
 800084e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		// USE MAGNITUDE
		// Don't take sqroot of int lol, assign to float
//		current_acc = abs(current_acc_x) + abs(current_acc_y);
		current_acc = current_acc_x;
 8000852:	4b54      	ldr	r3, [pc, #336]	; (80009a4 <processDataNew+0x21c>)
 8000854:	881a      	ldrh	r2, [r3, #0]
 8000856:	4b55      	ldr	r3, [pc, #340]	; (80009ac <processDataNew+0x224>)
 8000858:	801a      	strh	r2, [r3, #0]

		// Treat every 4th reading like one reading
		if((i % 4) == 3) {
 800085a:	797b      	ldrb	r3, [r7, #5]
 800085c:	f003 0303 	and.w	r3, r3, #3
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b03      	cmp	r3, #3
 8000864:	d16e      	bne.n	8000944 <processDataNew+0x1bc>
			printf("%d\n", sample_index);
 8000866:	79bb      	ldrb	r3, [r7, #6]
 8000868:	4619      	mov	r1, r3
 800086a:	4852      	ldr	r0, [pc, #328]	; (80009b4 <processDataNew+0x22c>)
 800086c:	f009 fa3a 	bl	8009ce4 <iprintf>

			// Only want to get deltas every 4 reading  on the 4th reading because
			// all values only update after 4 readings (4 values, one per reading)
			delta_audio = current_audio - previous_audio;
 8000870:	4b48      	ldr	r3, [pc, #288]	; (8000994 <processDataNew+0x20c>)
 8000872:	881a      	ldrh	r2, [r3, #0]
 8000874:	4b50      	ldr	r3, [pc, #320]	; (80009b8 <processDataNew+0x230>)
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	b29a      	uxth	r2, r3
 800087c:	4b4f      	ldr	r3, [pc, #316]	; (80009bc <processDataNew+0x234>)
 800087e:	801a      	strh	r2, [r3, #0]
			delta_pressure = current_pressure - previous_pressure;
 8000880:	4b46      	ldr	r3, [pc, #280]	; (800099c <processDataNew+0x214>)
 8000882:	881a      	ldrh	r2, [r3, #0]
 8000884:	4b4e      	ldr	r3, [pc, #312]	; (80009c0 <processDataNew+0x238>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	b29a      	uxth	r2, r3
 800088c:	4b4d      	ldr	r3, [pc, #308]	; (80009c4 <processDataNew+0x23c>)
 800088e:	801a      	strh	r2, [r3, #0]
			delta_acc = current_acc - previous_acc;
 8000890:	4b46      	ldr	r3, [pc, #280]	; (80009ac <processDataNew+0x224>)
 8000892:	881a      	ldrh	r2, [r3, #0]
 8000894:	4b4c      	ldr	r3, [pc, #304]	; (80009c8 <processDataNew+0x240>)
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	b29a      	uxth	r2, r3
 800089c:	4b4b      	ldr	r3, [pc, #300]	; (80009cc <processDataNew+0x244>)
 800089e:	801a      	strh	r2, [r3, #0]

			// Do explosion detection here
			if(delta_audio >= THRESHOLD_AUDIO) {
 80008a0:	4b46      	ldr	r3, [pc, #280]	; (80009bc <processDataNew+0x234>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	2b27      	cmp	r3, #39	; 0x27
 80008a6:	d903      	bls.n	80008b0 <processDataNew+0x128>
				explosionDetected = 1;
 80008a8:	4b49      	ldr	r3, [pc, #292]	; (80009d0 <processDataNew+0x248>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	701a      	strb	r2, [r3, #0]
 80008ae:	e00e      	b.n	80008ce <processDataNew+0x146>
			}
			else if(delta_pressure >= THRESHOLD_PRESSURE) {
 80008b0:	4b44      	ldr	r3, [pc, #272]	; (80009c4 <processDataNew+0x23c>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	2b27      	cmp	r3, #39	; 0x27
 80008b6:	d903      	bls.n	80008c0 <processDataNew+0x138>
				explosionDetected = 1;
 80008b8:	4b45      	ldr	r3, [pc, #276]	; (80009d0 <processDataNew+0x248>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	701a      	strb	r2, [r3, #0]
 80008be:	e006      	b.n	80008ce <processDataNew+0x146>
			}
			else if(delta_acc >= THRESHOLD_ACCELERATION) {
 80008c0:	4b42      	ldr	r3, [pc, #264]	; (80009cc <processDataNew+0x244>)
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	2b27      	cmp	r3, #39	; 0x27
 80008c6:	d902      	bls.n	80008ce <processDataNew+0x146>
				explosionDetected = 1;
 80008c8:	4b41      	ldr	r3, [pc, #260]	; (80009d0 <processDataNew+0x248>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	701a      	strb	r2, [r3, #0]

			// Create sample string here with time
			// DO THE STRING HERE

		    /* append new string using length of previously added string */
			snprintf(SD_buffer + strlen(SD_buffer), SD_BUFFER_SIZE - strlen(SD_buffer), "%d, %d, %d, %d, d_audio = %d, %s\r\n", count, i, explosionDetected, current_audio, delta_audio, "yo");
 80008ce:	482f      	ldr	r0, [pc, #188]	; (800098c <processDataNew+0x204>)
 80008d0:	f7ff fc9e 	bl	8000210 <strlen>
 80008d4:	4603      	mov	r3, r0
 80008d6:	4a2d      	ldr	r2, [pc, #180]	; (800098c <processDataNew+0x204>)
 80008d8:	189c      	adds	r4, r3, r2
 80008da:	482c      	ldr	r0, [pc, #176]	; (800098c <processDataNew+0x204>)
 80008dc:	f7ff fc98 	bl	8000210 <strlen>
 80008e0:	4603      	mov	r3, r0
 80008e2:	f5c3 61fa 	rsb	r1, r3, #2000	; 0x7d0
 80008e6:	4b3b      	ldr	r3, [pc, #236]	; (80009d4 <processDataNew+0x24c>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	469c      	mov	ip, r3
 80008ec:	797b      	ldrb	r3, [r7, #5]
 80008ee:	4a38      	ldr	r2, [pc, #224]	; (80009d0 <processDataNew+0x248>)
 80008f0:	7812      	ldrb	r2, [r2, #0]
 80008f2:	4610      	mov	r0, r2
 80008f4:	4a27      	ldr	r2, [pc, #156]	; (8000994 <processDataNew+0x20c>)
 80008f6:	8812      	ldrh	r2, [r2, #0]
 80008f8:	4615      	mov	r5, r2
 80008fa:	4a30      	ldr	r2, [pc, #192]	; (80009bc <processDataNew+0x234>)
 80008fc:	8812      	ldrh	r2, [r2, #0]
 80008fe:	4616      	mov	r6, r2
 8000900:	4a35      	ldr	r2, [pc, #212]	; (80009d8 <processDataNew+0x250>)
 8000902:	9204      	str	r2, [sp, #16]
 8000904:	9603      	str	r6, [sp, #12]
 8000906:	9502      	str	r5, [sp, #8]
 8000908:	9001      	str	r0, [sp, #4]
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	4663      	mov	r3, ip
 800090e:	4a33      	ldr	r2, [pc, #204]	; (80009dc <processDataNew+0x254>)
 8000910:	4620      	mov	r0, r4
 8000912:	f009 fa75 	bl	8009e00 <sniprintf>
			// snprintf(SD_buffer, SD_buffer_size, "%s, %s, %s, %s, %s", time_buff, explosion_buff, audio_buff, pressure_buff, acc_buff);
			// snprintf(sample_buffer, sample_buffer_size, "%d, %d, %d, %d, d_audio = %d\r\n", count, i, explosionDetected, current_audio, delta_audio);

			// The current samples will be the "previous" samples for the next samples
			// These are placed in this loop for the same reason that the deltas are placed here
			previous_audio = current_audio;
 8000916:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <processDataNew+0x20c>)
 8000918:	881a      	ldrh	r2, [r3, #0]
 800091a:	4b27      	ldr	r3, [pc, #156]	; (80009b8 <processDataNew+0x230>)
 800091c:	801a      	strh	r2, [r3, #0]
			previous_pressure = current_pressure;
 800091e:	4b1f      	ldr	r3, [pc, #124]	; (800099c <processDataNew+0x214>)
 8000920:	881a      	ldrh	r2, [r3, #0]
 8000922:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <processDataNew+0x238>)
 8000924:	801a      	strh	r2, [r3, #0]
			previous_acc = current_acc;
 8000926:	4b21      	ldr	r3, [pc, #132]	; (80009ac <processDataNew+0x224>)
 8000928:	881a      	ldrh	r2, [r3, #0]
 800092a:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <processDataNew+0x240>)
 800092c:	801a      	strh	r2, [r3, #0]

			previous_acc_x = current_acc_x;
 800092e:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <processDataNew+0x21c>)
 8000930:	881a      	ldrh	r2, [r3, #0]
 8000932:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <processDataNew+0x258>)
 8000934:	801a      	strh	r2, [r3, #0]
			previous_acc_y = current_acc_y;
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <processDataNew+0x220>)
 8000938:	881a      	ldrh	r2, [r3, #0]
 800093a:	4b2a      	ldr	r3, [pc, #168]	; (80009e4 <processDataNew+0x25c>)
 800093c:	801a      	strh	r2, [r3, #0]

			sample_index += 1;
 800093e:	79bb      	ldrb	r3, [r7, #6]
 8000940:	3301      	adds	r3, #1
 8000942:	71bb      	strb	r3, [r7, #6]
//		fresult = f_printf(&fil, "%d, %d, %d, %d, d_audio = %d\r\n", count, i, explosionDetected, current_audio, delta_audio);
//		fresult = f_sync(&fil);

		// Use Friedlander waveform to estimate how long the explosion will last for,
		// then set flag to 0 when time reaches that value
		explosionDetected = 0;
 8000944:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <processDataNew+0x248>)
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]

		// Increment channel counter to read from next channel
		if(channel < 3) {
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	2b02      	cmp	r3, #2
 800094e:	d803      	bhi.n	8000958 <processDataNew+0x1d0>
			channel += 1;
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	3301      	adds	r3, #1
 8000954:	71fb      	strb	r3, [r7, #7]
 8000956:	e001      	b.n	800095c <processDataNew+0x1d4>
		}
		else {
			channel = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < (ADC_BUFFER_SIZE)/2; i++) {
 800095c:	797b      	ldrb	r3, [r7, #5]
 800095e:	3301      	adds	r3, #1
 8000960:	717b      	strb	r3, [r7, #5]
 8000962:	797b      	ldrb	r3, [r7, #5]
 8000964:	2b63      	cmp	r3, #99	; 0x63
 8000966:	f67f af20 	bls.w	80007aa <processDataNew+0x22>
		}
	}
	// Finally write huge buffer to SD card here by calling writeSD and passing buffer
	writeSD(SD_buffer);
 800096a:	4808      	ldr	r0, [pc, #32]	; (800098c <processDataNew+0x204>)
 800096c:	f7ff fee2 	bl	8000734 <writeSD>
	SDbufclear();
 8000970:	f7ff fe88 	bl	8000684 <SDbufclear>

	dataReady = 0;
 8000974:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <processDataNew+0x260>)
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000982:	bf00      	nop
 8000984:	0800b104 	.word	0x0800b104
 8000988:	0800b108 	.word	0x0800b108
 800098c:	20000660 	.word	0x20000660
 8000990:	200005dc 	.word	0x200005dc
 8000994:	20002eba 	.word	0x20002eba
 8000998:	20000540 	.word	0x20000540
 800099c:	20002ebc 	.word	0x20002ebc
 80009a0:	20000574 	.word	0x20000574
 80009a4:	20002ec0 	.word	0x20002ec0
 80009a8:	20002ec2 	.word	0x20002ec2
 80009ac:	20002ebe 	.word	0x20002ebe
 80009b0:	200005a8 	.word	0x200005a8
 80009b4:	0800b10c 	.word	0x0800b10c
 80009b8:	20002ec4 	.word	0x20002ec4
 80009bc:	20002ece 	.word	0x20002ece
 80009c0:	20002ec6 	.word	0x20002ec6
 80009c4:	20002ed0 	.word	0x20002ed0
 80009c8:	20002ec8 	.word	0x20002ec8
 80009cc:	20002ed2 	.word	0x20002ed2
 80009d0:	20002eb9 	.word	0x20002eb9
 80009d4:	20002eb8 	.word	0x20002eb8
 80009d8:	0800b134 	.word	0x0800b134
 80009dc:	0800b110 	.word	0x0800b110
 80009e0:	20002eca 	.word	0x20002eca
 80009e4:	20002ecc 	.word	0x20002ecc
 80009e8:	20000e30 	.word	0x20000e30

080009ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f2:	f000 fe07 	bl	8001604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f6:	f000 f8e1 	bl	8000bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fa:	f000 fa95 	bl	8000f28 <MX_GPIO_Init>
  MX_DMA_Init();
 80009fe:	f000 fa73 	bl	8000ee8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a02:	f000 fa47 	bl	8000e94 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000a06:	f000 f94f 	bl	8000ca8 <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 8000a0a:	f000 fa23 	bl	8000e54 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000a0e:	f005 ff79 	bl	8006904 <MX_FATFS_Init>
  MX_RTC_Init();
 8000a12:	f000 f9c5 	bl	8000da0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  // Start DMA buffer
  // Might need to stop DMA at some point
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_data, ADC_BUFFER_SIZE);
 8000a16:	22c8      	movs	r2, #200	; 0xc8
 8000a18:	4953      	ldr	r1, [pc, #332]	; (8000b68 <main+0x17c>)
 8000a1a:	4854      	ldr	r0, [pc, #336]	; (8000b6c <main+0x180>)
 8000a1c:	f000 fecc 	bl	80017b8 <HAL_ADC_Start_DMA>

  // Mount SD card
  fresult = f_mount(&fs, "", 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	4953      	ldr	r1, [pc, #332]	; (8000b70 <main+0x184>)
 8000a24:	4853      	ldr	r0, [pc, #332]	; (8000b74 <main+0x188>)
 8000a26:	f007 ff8f 	bl	8008948 <f_mount>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b52      	ldr	r3, [pc, #328]	; (8000b78 <main+0x18c>)
 8000a30:	701a      	strb	r2, [r3, #0]

  if(fresult != FR_OK){
 8000a32:	4b51      	ldr	r3, [pc, #324]	; (8000b78 <main+0x18c>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d003      	beq.n	8000a42 <main+0x56>
	  printf("ERROR in mounting SD card...\n");
 8000a3a:	4850      	ldr	r0, [pc, #320]	; (8000b7c <main+0x190>)
 8000a3c:	f009 f9d8 	bl	8009df0 <puts>
 8000a40:	e002      	b.n	8000a48 <main+0x5c>
  }
  else {
	  printf("SD card mounted successfully...\n");
 8000a42:	484f      	ldr	r0, [pc, #316]	; (8000b80 <main+0x194>)
 8000a44:	f009 f9d4 	bl	8009df0 <puts>
//  bufclear();
//  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
//  printf("SD card free space: \t%lu\n", free_space);
//  bufclear();

  char *name = "adc_data.csv";
 8000a48:	4b4e      	ldr	r3, [pc, #312]	; (8000b84 <main+0x198>)
 8000a4a:	60fb      	str	r3, [r7, #12]

  fresult = f_stat(name, &fno);
 8000a4c:	494e      	ldr	r1, [pc, #312]	; (8000b88 <main+0x19c>)
 8000a4e:	68f8      	ldr	r0, [r7, #12]
 8000a50:	f008 fdec 	bl	800962c <f_stat>
 8000a54:	4603      	mov	r3, r0
 8000a56:	461a      	mov	r2, r3
 8000a58:	4b47      	ldr	r3, [pc, #284]	; (8000b78 <main+0x18c>)
 8000a5a:	701a      	strb	r2, [r3, #0]

  if (fresult == FR_OK) {
 8000a5c:	4b46      	ldr	r3, [pc, #280]	; (8000b78 <main+0x18c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d106      	bne.n	8000a72 <main+0x86>
	  printf("*%s* already exists!!!\n",name);
 8000a64:	68f9      	ldr	r1, [r7, #12]
 8000a66:	4849      	ldr	r0, [pc, #292]	; (8000b8c <main+0x1a0>)
 8000a68:	f009 f93c 	bl	8009ce4 <iprintf>
	  bufclear();
 8000a6c:	f7ff fdf0 	bl	8000650 <bufclear>
 8000a70:	e008      	b.n	8000a84 <main+0x98>
  }
  else {
	  fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000a72:	220b      	movs	r2, #11
 8000a74:	68f9      	ldr	r1, [r7, #12]
 8000a76:	4846      	ldr	r0, [pc, #280]	; (8000b90 <main+0x1a4>)
 8000a78:	f007 ffac 	bl	80089d4 <f_open>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <main+0x18c>)
 8000a82:	701a      	strb	r2, [r3, #0]
  }
	  if(fresult != FR_OK) {
 8000a84:	4b3c      	ldr	r3, [pc, #240]	; (8000b78 <main+0x18c>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d009      	beq.n	8000aa0 <main+0xb4>
		  printf ("ERROR: no %d in creating file *%s*\n", fresult, name);
 8000a8c:	4b3a      	ldr	r3, [pc, #232]	; (8000b78 <main+0x18c>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	68fa      	ldr	r2, [r7, #12]
 8000a92:	4619      	mov	r1, r3
 8000a94:	483f      	ldr	r0, [pc, #252]	; (8000b94 <main+0x1a8>)
 8000a96:	f009 f925 	bl	8009ce4 <iprintf>
		  bufclear();
 8000a9a:	f7ff fdd9 	bl	8000650 <bufclear>
 8000a9e:	e005      	b.n	8000aac <main+0xc0>
	  }
	  else {
		  printf ("*%s* created successfully\n",name);
 8000aa0:	68f9      	ldr	r1, [r7, #12]
 8000aa2:	483d      	ldr	r0, [pc, #244]	; (8000b98 <main+0x1ac>)
 8000aa4:	f009 f91e 	bl	8009ce4 <iprintf>
		  bufclear();
 8000aa8:	f7ff fdd2 	bl	8000650 <bufclear>
	  }

  fresult = f_printf(&fil, "time, explosion, audio, pressure, acceleration\r\n");
 8000aac:	493b      	ldr	r1, [pc, #236]	; (8000b9c <main+0x1b0>)
 8000aae:	4838      	ldr	r0, [pc, #224]	; (8000b90 <main+0x1a4>)
 8000ab0:	f008 fe6c 	bl	800978c <f_printf>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b2f      	ldr	r3, [pc, #188]	; (8000b78 <main+0x18c>)
 8000aba:	701a      	strb	r2, [r3, #0]

  // Get starting tick value (start timer)
  int start = HAL_GetTick();
 8000abc:	f000 fe08 	bl	80016d0 <HAL_GetTick>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	60bb      	str	r3, [r7, #8]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(dataReady) {
 8000ac4:	4b36      	ldr	r3, [pc, #216]	; (8000ba0 <main+0x1b4>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <main+0xf2>

		  processDataNew();
 8000ace:	f7ff fe5b 	bl	8000788 <processDataNew>

		  // Increment count
		  count++;
 8000ad2:	4b34      	ldr	r3, [pc, #208]	; (8000ba4 <main+0x1b8>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4b32      	ldr	r3, [pc, #200]	; (8000ba4 <main+0x1b8>)
 8000adc:	701a      	strb	r2, [r3, #0]

	  	  }

	  // Stop when count is a certain value (leads to unmount SD card)
	  if(count >= 100) {
 8000ade:	4b31      	ldr	r3, [pc, #196]	; (8000ba4 <main+0x1b8>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b63      	cmp	r3, #99	; 0x63
 8000ae4:	d800      	bhi.n	8000ae8 <main+0xfc>
	  if(dataReady) {
 8000ae6:	e7ed      	b.n	8000ac4 <main+0xd8>
		  break;
 8000ae8:	bf00      	nop
	  }

  }

  int stop = HAL_GetTick();
 8000aea:	f000 fdf1 	bl	80016d0 <HAL_GetTick>
 8000aee:	4603      	mov	r3, r0
 8000af0:	607b      	str	r3, [r7, #4]

  printf("Total time to write %d values to SD card (WITH printf): %d ms\n", count, (stop - start));
 8000af2:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <main+0x1b8>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	4619      	mov	r1, r3
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	461a      	mov	r2, r3
 8000b00:	4829      	ldr	r0, [pc, #164]	; (8000ba8 <main+0x1bc>)
 8000b02:	f009 f8ef 	bl	8009ce4 <iprintf>

  // Stop ADC DMA and disable ADC
  HAL_ADC_Stop_DMA(&hadc1);
 8000b06:	4819      	ldr	r0, [pc, #100]	; (8000b6c <main+0x180>)
 8000b08:	f000 ff66 	bl	80019d8 <HAL_ADC_Stop_DMA>

  // Close buffer file
  f_close(&fil);
 8000b0c:	4820      	ldr	r0, [pc, #128]	; (8000b90 <main+0x1a4>)
 8000b0e:	f008 fb3f 	bl	8009190 <f_close>
  if (fresult != FR_OK) {
 8000b12:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <main+0x18c>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d008      	beq.n	8000b2c <main+0x140>
	  printf ("ERROR: no %d in closing file *%s*\n", fresult, name);
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <main+0x18c>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	4619      	mov	r1, r3
 8000b22:	4822      	ldr	r0, [pc, #136]	; (8000bac <main+0x1c0>)
 8000b24:	f009 f8de 	bl	8009ce4 <iprintf>
	  bufclear();
 8000b28:	f7ff fd92 	bl	8000650 <bufclear>
  }

  // After while loop when break
  // Unmount SD card
  fresult = f_mount(NULL, "/", 1);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	4920      	ldr	r1, [pc, #128]	; (8000bb0 <main+0x1c4>)
 8000b30:	2000      	movs	r0, #0
 8000b32:	f007 ff09 	bl	8008948 <f_mount>
 8000b36:	4603      	mov	r3, r0
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <main+0x18c>)
 8000b3c:	701a      	strb	r2, [r3, #0]
  if (fresult == FR_OK) {
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <main+0x18c>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d105      	bne.n	8000b52 <main+0x166>
	  printf("SD card unmounted successfully...\n");
 8000b46:	481b      	ldr	r0, [pc, #108]	; (8000bb4 <main+0x1c8>)
 8000b48:	f009 f952 	bl	8009df0 <puts>
	  bufclear();
 8000b4c:	f7ff fd80 	bl	8000650 <bufclear>
 8000b50:	e004      	b.n	8000b5c <main+0x170>
  }
  else {
	  printf("ERROR: unmounting SD card\n");
 8000b52:	4819      	ldr	r0, [pc, #100]	; (8000bb8 <main+0x1cc>)
 8000b54:	f009 f94c 	bl	8009df0 <puts>
	  bufclear();
 8000b58:	f7ff fd7a 	bl	8000650 <bufclear>
 8000b5c:	2300      	movs	r3, #0
  }

  /* USER CODE END 3 */
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000220 	.word	0x20000220
 8000b6c:	20000090 	.word	0x20000090
 8000b70:	0800b138 	.word	0x0800b138
 8000b74:	20000e34 	.word	0x20000e34
 8000b78:	20002eb0 	.word	0x20002eb0
 8000b7c:	0800b13c 	.word	0x0800b13c
 8000b80:	0800b15c 	.word	0x0800b15c
 8000b84:	0800b17c 	.word	0x0800b17c
 8000b88:	20002e98 	.word	0x20002e98
 8000b8c:	0800b18c 	.word	0x0800b18c
 8000b90:	20001e68 	.word	0x20001e68
 8000b94:	0800b1a4 	.word	0x0800b1a4
 8000b98:	0800b1c8 	.word	0x0800b1c8
 8000b9c:	0800b1e4 	.word	0x0800b1e4
 8000ba0:	20000e30 	.word	0x20000e30
 8000ba4:	20002eb8 	.word	0x20002eb8
 8000ba8:	0800b218 	.word	0x0800b218
 8000bac:	0800b258 	.word	0x0800b258
 8000bb0:	0800b27c 	.word	0x0800b27c
 8000bb4:	0800b280 	.word	0x0800b280
 8000bb8:	0800b2a4 	.word	0x0800b2a4

08000bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b094      	sub	sp, #80	; 0x50
 8000bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	2234      	movs	r2, #52	; 0x34
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f009 f882 	bl	8009cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd0:	f107 0308 	add.w	r3, r7, #8
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	4b2e      	ldr	r3, [pc, #184]	; (8000ca0 <SystemClock_Config+0xe4>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	4a2d      	ldr	r2, [pc, #180]	; (8000ca0 <SystemClock_Config+0xe4>)
 8000bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bee:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf0:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <SystemClock_Config+0xe4>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <SystemClock_Config+0xe8>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a27      	ldr	r2, [pc, #156]	; (8000ca4 <SystemClock_Config+0xe8>)
 8000c06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c0a:	6013      	str	r3, [r2, #0]
 8000c0c:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <SystemClock_Config+0xe8>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c14:	603b      	str	r3, [r7, #0]
 8000c16:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000c18:	230a      	movs	r3, #10
 8000c1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c20:	2301      	movs	r3, #1
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c24:	2310      	movs	r3, #16
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c30:	2300      	movs	r3, #0
 8000c32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c34:	2308      	movs	r3, #8
 8000c36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000c38:	23b4      	movs	r3, #180	; 0xb4
 8000c3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000c40:	2309      	movs	r3, #9
 8000c42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c44:	2302      	movs	r3, #2
 8000c46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f002 ff75 	bl	8003b3c <HAL_RCC_OscConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000c58:	f000 f9ee 	bl	8001038 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c5c:	f002 f8aa 	bl	8002db4 <HAL_PWREx_EnableOverDrive>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c66:	f000 f9e7 	bl	8001038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6a:	230f      	movs	r3, #15
 8000c6c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c76:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c80:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	2105      	movs	r1, #5
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f002 f8e3 	bl	8002e54 <HAL_RCC_ClockConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000c94:	f000 f9d0 	bl	8001038 <Error_Handler>
  }
}
 8000c98:	bf00      	nop
 8000c9a:	3750      	adds	r7, #80	; 0x50
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40007000 	.word	0x40007000

08000ca8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cae:	463b      	mov	r3, r7
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cba:	4b36      	ldr	r3, [pc, #216]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000cbc:	4a36      	ldr	r2, [pc, #216]	; (8000d98 <MX_ADC1_Init+0xf0>)
 8000cbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cc0:	4b34      	ldr	r3, [pc, #208]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000cc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cc6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cc8:	4b32      	ldr	r3, [pc, #200]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000cce:	4b31      	ldr	r3, [pc, #196]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cd4:	4b2f      	ldr	r3, [pc, #188]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cda:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ce2:	4b2c      	ldr	r3, [pc, #176]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ce8:	4b2a      	ldr	r3, [pc, #168]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000cea:	4a2c      	ldr	r2, [pc, #176]	; (8000d9c <MX_ADC1_Init+0xf4>)
 8000cec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000cf4:	4b27      	ldr	r3, [pc, #156]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000cfa:	4b26      	ldr	r3, [pc, #152]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d02:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d08:	4822      	ldr	r0, [pc, #136]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000d0a:	f000 fd11 	bl	8001730 <HAL_ADC_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d14:	f000 f990 	bl	8001038 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000d20:	2307      	movs	r3, #7
 8000d22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d24:	463b      	mov	r3, r7
 8000d26:	4619      	mov	r1, r3
 8000d28:	481a      	ldr	r0, [pc, #104]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000d2a:	f000 feb9 	bl	8001aa0 <HAL_ADC_ConfigChannel>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d34:	f000 f980 	bl	8001038 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d40:	463b      	mov	r3, r7
 8000d42:	4619      	mov	r1, r3
 8000d44:	4813      	ldr	r0, [pc, #76]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000d46:	f000 feab 	bl	8001aa0 <HAL_ADC_ConfigChannel>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000d50:	f000 f972 	bl	8001038 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000d54:	230c      	movs	r3, #12
 8000d56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000d62:	f000 fe9d 	bl	8001aa0 <HAL_ADC_ConfigChannel>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000d6c:	f000 f964 	bl	8001038 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000d70:	230d      	movs	r3, #13
 8000d72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000d74:	2304      	movs	r3, #4
 8000d76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d78:	463b      	mov	r3, r7
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000d7e:	f000 fe8f 	bl	8001aa0 <HAL_ADC_ConfigChannel>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000d88:	f000 f956 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000090 	.word	0x20000090
 8000d98:	40012000 	.word	0x40012000
 8000d9c:	0f000001 	.word	0x0f000001

08000da0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000db4:	2300      	movs	r3, #0
 8000db6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000db8:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <MX_RTC_Init+0xac>)
 8000dba:	4a25      	ldr	r2, [pc, #148]	; (8000e50 <MX_RTC_Init+0xb0>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000dbe:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <MX_RTC_Init+0xac>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000dc4:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <MX_RTC_Init+0xac>)
 8000dc6:	227f      	movs	r2, #127	; 0x7f
 8000dc8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000dca:	4b20      	ldr	r3, [pc, #128]	; (8000e4c <MX_RTC_Init+0xac>)
 8000dcc:	22ff      	movs	r2, #255	; 0xff
 8000dce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000dd0:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <MX_RTC_Init+0xac>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000dd6:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <MX_RTC_Init+0xac>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <MX_RTC_Init+0xac>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000de2:	481a      	ldr	r0, [pc, #104]	; (8000e4c <MX_RTC_Init+0xac>)
 8000de4:	f003 f948 	bl	8004078 <HAL_RTC_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000dee:	f000 f923 	bl	8001038 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480f      	ldr	r0, [pc, #60]	; (8000e4c <MX_RTC_Init+0xac>)
 8000e0e:	f003 f9a9 	bl	8004164 <HAL_RTC_SetTime>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000e18:	f000 f90e 	bl	8001038 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8000e20:	2304      	movs	r3, #4
 8000e22:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x17;
 8000e24:	2317      	movs	r3, #23
 8000e26:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000e28:	2323      	movs	r3, #35	; 0x23
 8000e2a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	2201      	movs	r2, #1
 8000e30:	4619      	mov	r1, r3
 8000e32:	4806      	ldr	r0, [pc, #24]	; (8000e4c <MX_RTC_Init+0xac>)
 8000e34:	f003 fa30 	bl	8004298 <HAL_RTC_SetDate>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000e3e:	f000 f8fb 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000138 	.word	0x20000138
 8000e50:	40002800 	.word	0x40002800

08000e54 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_SDIO_SD_Init+0x38>)
 8000e5a:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <MX_SDIO_SD_Init+0x3c>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <MX_SDIO_SD_Init+0x38>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_SDIO_SD_Init+0x38>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <MX_SDIO_SD_Init+0x38>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_SDIO_SD_Init+0x38>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e76:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <MX_SDIO_SD_Init+0x38>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 18;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <MX_SDIO_SD_Init+0x38>)
 8000e7e:	2212      	movs	r2, #18
 8000e80:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	20000158 	.word	0x20000158
 8000e90:	40012c00 	.word	0x40012c00

08000e94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000e9a:	4a12      	ldr	r2, [pc, #72]	; (8000ee4 <MX_USART2_UART_Init+0x50>)
 8000e9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000ea0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ea4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000eba:	220c      	movs	r2, #12
 8000ebc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000ecc:	f004 fd26 	bl	800591c <HAL_UART_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ed6:	f000 f8af 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200001dc 	.word	0x200001dc
 8000ee4:	40004400 	.word	0x40004400

08000ee8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_DMA_Init+0x3c>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a0b      	ldr	r2, [pc, #44]	; (8000f24 <MX_DMA_Init+0x3c>)
 8000ef8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_DMA_Init+0x3c>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2038      	movs	r0, #56	; 0x38
 8000f10:	f001 f951 	bl	80021b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f14:	2038      	movs	r0, #56	; 0x38
 8000f16:	f001 f96a 	bl	80021ee <HAL_NVIC_EnableIRQ>

}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800

08000f28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	4b3a      	ldr	r3, [pc, #232]	; (800102c <MX_GPIO_Init+0x104>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a39      	ldr	r2, [pc, #228]	; (800102c <MX_GPIO_Init+0x104>)
 8000f48:	f043 0304 	orr.w	r3, r3, #4
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b37      	ldr	r3, [pc, #220]	; (800102c <MX_GPIO_Init+0x104>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0304 	and.w	r3, r3, #4
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b33      	ldr	r3, [pc, #204]	; (800102c <MX_GPIO_Init+0x104>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a32      	ldr	r2, [pc, #200]	; (800102c <MX_GPIO_Init+0x104>)
 8000f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b30      	ldr	r3, [pc, #192]	; (800102c <MX_GPIO_Init+0x104>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	4b2c      	ldr	r3, [pc, #176]	; (800102c <MX_GPIO_Init+0x104>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a2b      	ldr	r2, [pc, #172]	; (800102c <MX_GPIO_Init+0x104>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b29      	ldr	r3, [pc, #164]	; (800102c <MX_GPIO_Init+0x104>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	4b25      	ldr	r3, [pc, #148]	; (800102c <MX_GPIO_Init+0x104>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a24      	ldr	r2, [pc, #144]	; (800102c <MX_GPIO_Init+0x104>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b22      	ldr	r3, [pc, #136]	; (800102c <MX_GPIO_Init+0x104>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	603b      	str	r3, [r7, #0]
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	; (800102c <MX_GPIO_Init+0x104>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a1d      	ldr	r2, [pc, #116]	; (800102c <MX_GPIO_Init+0x104>)
 8000fb8:	f043 0308 	orr.w	r3, r3, #8
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	; (800102c <MX_GPIO_Init+0x104>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0308 	and.w	r3, r3, #8
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2120      	movs	r1, #32
 8000fce:	4818      	ldr	r0, [pc, #96]	; (8001030 <MX_GPIO_Init+0x108>)
 8000fd0:	f001 fed6 	bl	8002d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fda:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4812      	ldr	r0, [pc, #72]	; (8001034 <MX_GPIO_Init+0x10c>)
 8000fec:	f001 fd1c 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	480c      	ldr	r0, [pc, #48]	; (8001034 <MX_GPIO_Init+0x10c>)
 8001004:	f001 fd10 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001008:	2320      	movs	r3, #32
 800100a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	4619      	mov	r1, r3
 800101e:	4804      	ldr	r0, [pc, #16]	; (8001030 <MX_GPIO_Init+0x108>)
 8001020:	f001 fd02 	bl	8002a28 <HAL_GPIO_Init>

}
 8001024:	bf00      	nop
 8001026:	3728      	adds	r7, #40	; 0x28
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40023800 	.word	0x40023800
 8001030:	40020000 	.word	0x40020000
 8001034:	40020800 	.word	0x40020800

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
}
 800103e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001040:	e7fe      	b.n	8001040 <Error_Handler+0x8>
	...

08001044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <HAL_MspInit+0x4c>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <HAL_MspInit+0x4c>)
 8001054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001058:	6453      	str	r3, [r2, #68]	; 0x44
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <HAL_MspInit+0x4c>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	603b      	str	r3, [r7, #0]
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_MspInit+0x4c>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	4a08      	ldr	r2, [pc, #32]	; (8001090 <HAL_MspInit+0x4c>)
 8001070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001074:	6413      	str	r3, [r2, #64]	; 0x40
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_MspInit+0x4c>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001082:	2007      	movs	r0, #7
 8001084:	f001 f88c 	bl	80021a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40023800 	.word	0x40023800

08001094 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a3c      	ldr	r2, [pc, #240]	; (80011a4 <HAL_ADC_MspInit+0x110>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d171      	bne.n	800119a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	4b3b      	ldr	r3, [pc, #236]	; (80011a8 <HAL_ADC_MspInit+0x114>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	4a3a      	ldr	r2, [pc, #232]	; (80011a8 <HAL_ADC_MspInit+0x114>)
 80010c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
 80010c6:	4b38      	ldr	r3, [pc, #224]	; (80011a8 <HAL_ADC_MspInit+0x114>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	4b34      	ldr	r3, [pc, #208]	; (80011a8 <HAL_ADC_MspInit+0x114>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a33      	ldr	r2, [pc, #204]	; (80011a8 <HAL_ADC_MspInit+0x114>)
 80010dc:	f043 0304 	orr.w	r3, r3, #4
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b31      	ldr	r3, [pc, #196]	; (80011a8 <HAL_ADC_MspInit+0x114>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0304 	and.w	r3, r3, #4
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <HAL_ADC_MspInit+0x114>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a2c      	ldr	r2, [pc, #176]	; (80011a8 <HAL_ADC_MspInit+0x114>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <HAL_ADC_MspInit+0x114>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800110a:	230c      	movs	r3, #12
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110e:	2303      	movs	r3, #3
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4823      	ldr	r0, [pc, #140]	; (80011ac <HAL_ADC_MspInit+0x118>)
 800111e:	f001 fc83 	bl	8002a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001122:	2313      	movs	r3, #19
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001126:	2303      	movs	r3, #3
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	481e      	ldr	r0, [pc, #120]	; (80011b0 <HAL_ADC_MspInit+0x11c>)
 8001136:	f001 fc77 	bl	8002a28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800113a:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <HAL_ADC_MspInit+0x120>)
 800113c:	4a1e      	ldr	r2, [pc, #120]	; (80011b8 <HAL_ADC_MspInit+0x124>)
 800113e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001140:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <HAL_ADC_MspInit+0x120>)
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001146:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <HAL_ADC_MspInit+0x120>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <HAL_ADC_MspInit+0x120>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <HAL_ADC_MspInit+0x120>)
 8001154:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001158:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800115a:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <HAL_ADC_MspInit+0x120>)
 800115c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001160:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001162:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <HAL_ADC_MspInit+0x120>)
 8001164:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001168:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_ADC_MspInit+0x120>)
 800116c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001170:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <HAL_ADC_MspInit+0x120>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_ADC_MspInit+0x120>)
 800117a:	2200      	movs	r2, #0
 800117c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800117e:	480d      	ldr	r0, [pc, #52]	; (80011b4 <HAL_ADC_MspInit+0x120>)
 8001180:	f001 f850 	bl	8002224 <HAL_DMA_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800118a:	f7ff ff55 	bl	8001038 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a08      	ldr	r2, [pc, #32]	; (80011b4 <HAL_ADC_MspInit+0x120>)
 8001192:	639a      	str	r2, [r3, #56]	; 0x38
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <HAL_ADC_MspInit+0x120>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800119a:	bf00      	nop
 800119c:	3728      	adds	r7, #40	; 0x28
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40012000 	.word	0x40012000
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40020000 	.word	0x40020000
 80011b4:	200000d8 	.word	0x200000d8
 80011b8:	40026410 	.word	0x40026410

080011bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b09a      	sub	sp, #104	; 0x68
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	225c      	movs	r2, #92	; 0x5c
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f008 fd81 	bl	8009cd4 <memset>
  if(hrtc->Instance==RTC)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a0c      	ldr	r2, [pc, #48]	; (8001208 <HAL_RTC_MspInit+0x4c>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d111      	bne.n	8001200 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011dc:	2320      	movs	r3, #32
 80011de:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80011e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 ff4c 	bl	8003088 <HAL_RCCEx_PeriphCLKConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80011f6:	f7ff ff1f 	bl	8001038 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011fa:	4b04      	ldr	r3, [pc, #16]	; (800120c <HAL_RTC_MspInit+0x50>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001200:	bf00      	nop
 8001202:	3768      	adds	r7, #104	; 0x68
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40002800 	.word	0x40002800
 800120c:	42470e3c 	.word	0x42470e3c

08001210 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b0a2      	sub	sp, #136	; 0x88
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001228:	f107 0318 	add.w	r3, r7, #24
 800122c:	225c      	movs	r2, #92	; 0x5c
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f008 fd4f 	bl	8009cd4 <memset>
  if(hsd->Instance==SDIO)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a48      	ldr	r2, [pc, #288]	; (800135c <HAL_SD_MspInit+0x14c>)
 800123c:	4293      	cmp	r3, r2
 800123e:	f040 8088 	bne.w	8001352 <HAL_SD_MspInit+0x142>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001242:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001246:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001248:	2300      	movs	r3, #0
 800124a:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800124c:	2300      	movs	r3, #0
 800124e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001250:	f107 0318 	add.w	r3, r7, #24
 8001254:	4618      	mov	r0, r3
 8001256:	f001 ff17 	bl	8003088 <HAL_RCCEx_PeriphCLKConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001260:	f7ff feea 	bl	8001038 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	4b3d      	ldr	r3, [pc, #244]	; (8001360 <HAL_SD_MspInit+0x150>)
 800126a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126c:	4a3c      	ldr	r2, [pc, #240]	; (8001360 <HAL_SD_MspInit+0x150>)
 800126e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001272:	6453      	str	r3, [r2, #68]	; 0x44
 8001274:	4b3a      	ldr	r3, [pc, #232]	; (8001360 <HAL_SD_MspInit+0x150>)
 8001276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001280:	2300      	movs	r3, #0
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	4b36      	ldr	r3, [pc, #216]	; (8001360 <HAL_SD_MspInit+0x150>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	4a35      	ldr	r2, [pc, #212]	; (8001360 <HAL_SD_MspInit+0x150>)
 800128a:	f043 0302 	orr.w	r3, r3, #2
 800128e:	6313      	str	r3, [r2, #48]	; 0x30
 8001290:	4b33      	ldr	r3, [pc, #204]	; (8001360 <HAL_SD_MspInit+0x150>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <HAL_SD_MspInit+0x150>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	4a2e      	ldr	r2, [pc, #184]	; (8001360 <HAL_SD_MspInit+0x150>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	6313      	str	r3, [r2, #48]	; 0x30
 80012ac:	4b2c      	ldr	r3, [pc, #176]	; (8001360 <HAL_SD_MspInit+0x150>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	4b28      	ldr	r3, [pc, #160]	; (8001360 <HAL_SD_MspInit+0x150>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	4a27      	ldr	r2, [pc, #156]	; (8001360 <HAL_SD_MspInit+0x150>)
 80012c2:	f043 0308 	orr.w	r3, r3, #8
 80012c6:	6313      	str	r3, [r2, #48]	; 0x30
 80012c8:	4b25      	ldr	r3, [pc, #148]	; (8001360 <HAL_SD_MspInit+0x150>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012d4:	2304      	movs	r3, #4
 80012d6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80012e6:	230c      	movs	r3, #12
 80012e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012f0:	4619      	mov	r1, r3
 80012f2:	481c      	ldr	r0, [pc, #112]	; (8001364 <HAL_SD_MspInit+0x154>)
 80012f4:	f001 fb98 	bl	8002a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012fc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800130c:	230c      	movs	r3, #12
 800130e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001312:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001316:	4619      	mov	r1, r3
 8001318:	4813      	ldr	r0, [pc, #76]	; (8001368 <HAL_SD_MspInit+0x158>)
 800131a:	f001 fb85 	bl	8002a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800131e:	2304      	movs	r3, #4
 8001320:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001330:	230c      	movs	r3, #12
 8001332:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001336:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800133a:	4619      	mov	r1, r3
 800133c:	480b      	ldr	r0, [pc, #44]	; (800136c <HAL_SD_MspInit+0x15c>)
 800133e:	f001 fb73 	bl	8002a28 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2100      	movs	r1, #0
 8001346:	2031      	movs	r0, #49	; 0x31
 8001348:	f000 ff35 	bl	80021b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800134c:	2031      	movs	r0, #49	; 0x31
 800134e:	f000 ff4e 	bl	80021ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001352:	bf00      	nop
 8001354:	3788      	adds	r7, #136	; 0x88
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40012c00 	.word	0x40012c00
 8001360:	40023800 	.word	0x40023800
 8001364:	40020400 	.word	0x40020400
 8001368:	40020800 	.word	0x40020800
 800136c:	40020c00 	.word	0x40020c00

08001370 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a19      	ldr	r2, [pc, #100]	; (80013f4 <HAL_UART_MspInit+0x84>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d12b      	bne.n	80013ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <HAL_UART_MspInit+0x88>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	4a17      	ldr	r2, [pc, #92]	; (80013f8 <HAL_UART_MspInit+0x88>)
 800139c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a0:	6413      	str	r3, [r2, #64]	; 0x40
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <HAL_UART_MspInit+0x88>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_UART_MspInit+0x88>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <HAL_UART_MspInit+0x88>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_UART_MspInit+0x88>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013ca:	230c      	movs	r3, #12
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013da:	2307      	movs	r3, #7
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	4805      	ldr	r0, [pc, #20]	; (80013fc <HAL_UART_MspInit+0x8c>)
 80013e6:	f001 fb1f 	bl	8002a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013ea:	bf00      	nop
 80013ec:	3728      	adds	r7, #40	; 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40004400 	.word	0x40004400
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020000 	.word	0x40020000

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <NMI_Handler+0x4>

08001406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <MemManage_Handler+0x4>

08001412 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <UsageFault_Handler+0x4>

0800141e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144c:	f000 f92c 	bl	80016a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}

08001454 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <SDIO_IRQHandler+0x10>)
 800145a:	f003 fc57 	bl	8004d0c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000158 	.word	0x20000158

08001468 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <DMA2_Stream0_IRQHandler+0x10>)
 800146e:	f001 f871 	bl	8002554 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200000d8 	.word	0x200000d8

0800147c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	e00a      	b.n	80014a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800148e:	f3af 8000 	nop.w
 8001492:	4601      	mov	r1, r0
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	1c5a      	adds	r2, r3, #1
 8001498:	60ba      	str	r2, [r7, #8]
 800149a:	b2ca      	uxtb	r2, r1
 800149c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	3301      	adds	r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	dbf0      	blt.n	800148e <_read+0x12>
  }

  return len;
 80014ac:	687b      	ldr	r3, [r7, #4]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014de:	605a      	str	r2, [r3, #4]
  return 0;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <_isatty>:

int _isatty(int file)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001528:	4a14      	ldr	r2, [pc, #80]	; (800157c <_sbrk+0x5c>)
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <_sbrk+0x60>)
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001534:	4b13      	ldr	r3, [pc, #76]	; (8001584 <_sbrk+0x64>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d102      	bne.n	8001542 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <_sbrk+0x64>)
 800153e:	4a12      	ldr	r2, [pc, #72]	; (8001588 <_sbrk+0x68>)
 8001540:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <_sbrk+0x64>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	429a      	cmp	r2, r3
 800154e:	d207      	bcs.n	8001560 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001550:	f008 fb96 	bl	8009c80 <__errno>
 8001554:	4603      	mov	r3, r0
 8001556:	220c      	movs	r2, #12
 8001558:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	e009      	b.n	8001574 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <_sbrk+0x64>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001566:	4b07      	ldr	r3, [pc, #28]	; (8001584 <_sbrk+0x64>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <_sbrk+0x64>)
 8001570:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001572:	68fb      	ldr	r3, [r7, #12]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20020000 	.word	0x20020000
 8001580:	00000400 	.word	0x00000400
 8001584:	20002ed4 	.word	0x20002ed4
 8001588:	20002f28 	.word	0x20002f28

0800158c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <SystemInit+0x20>)
 8001592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001596:	4a05      	ldr	r2, [pc, #20]	; (80015ac <SystemInit+0x20>)
 8001598:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800159c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015b4:	480d      	ldr	r0, [pc, #52]	; (80015ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015b6:	490e      	ldr	r1, [pc, #56]	; (80015f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015b8:	4a0e      	ldr	r2, [pc, #56]	; (80015f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015bc:	e002      	b.n	80015c4 <LoopCopyDataInit>

080015be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c2:	3304      	adds	r3, #4

080015c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c8:	d3f9      	bcc.n	80015be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ca:	4a0b      	ldr	r2, [pc, #44]	; (80015f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015cc:	4c0b      	ldr	r4, [pc, #44]	; (80015fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d0:	e001      	b.n	80015d6 <LoopFillZerobss>

080015d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d4:	3204      	adds	r2, #4

080015d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d8:	d3fb      	bcc.n	80015d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015da:	f7ff ffd7 	bl	800158c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015de:	f008 fb55 	bl	8009c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015e2:	f7ff fa03 	bl	80009ec <main>
  bx  lr    
 80015e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80015f4:	0800b460 	.word	0x0800b460
  ldr r2, =_sbss
 80015f8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80015fc:	20002f28 	.word	0x20002f28

08001600 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001600:	e7fe      	b.n	8001600 <ADC_IRQHandler>
	...

08001604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001608:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <HAL_Init+0x40>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0d      	ldr	r2, [pc, #52]	; (8001644 <HAL_Init+0x40>)
 800160e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001612:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <HAL_Init+0x40>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <HAL_Init+0x40>)
 800161a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800161e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001620:	4b08      	ldr	r3, [pc, #32]	; (8001644 <HAL_Init+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a07      	ldr	r2, [pc, #28]	; (8001644 <HAL_Init+0x40>)
 8001626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162c:	2003      	movs	r0, #3
 800162e:	f000 fdb7 	bl	80021a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001632:	2000      	movs	r0, #0
 8001634:	f000 f808 	bl	8001648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001638:	f7ff fd04 	bl	8001044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023c00 	.word	0x40023c00

08001648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_InitTick+0x54>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_InitTick+0x58>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001662:	fbb2 f3f3 	udiv	r3, r2, r3
 8001666:	4618      	mov	r0, r3
 8001668:	f000 fdcf 	bl	800220a <HAL_SYSTICK_Config>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e00e      	b.n	8001694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b0f      	cmp	r3, #15
 800167a:	d80a      	bhi.n	8001692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800167c:	2200      	movs	r2, #0
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	f000 fd97 	bl	80021b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001688:	4a06      	ldr	r2, [pc, #24]	; (80016a4 <HAL_InitTick+0x5c>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	e000      	b.n	8001694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000004 	.word	0x20000004
 80016a0:	2000000c 	.word	0x2000000c
 80016a4:	20000008 	.word	0x20000008

080016a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_IncTick+0x20>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_IncTick+0x24>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	4a04      	ldr	r2, [pc, #16]	; (80016cc <HAL_IncTick+0x24>)
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	2000000c 	.word	0x2000000c
 80016cc:	20002ed8 	.word	0x20002ed8

080016d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return uwTick;
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <HAL_GetTick+0x14>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20002ed8 	.word	0x20002ed8

080016e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f0:	f7ff ffee 	bl	80016d0 <HAL_GetTick>
 80016f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001700:	d005      	beq.n	800170e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_Delay+0x44>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4413      	add	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800170e:	bf00      	nop
 8001710:	f7ff ffde 	bl	80016d0 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	429a      	cmp	r2, r3
 800171e:	d8f7      	bhi.n	8001710 <HAL_Delay+0x28>
  {
  }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	2000000c 	.word	0x2000000c

08001730 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e033      	b.n	80017ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	2b00      	cmp	r3, #0
 800174c:	d109      	bne.n	8001762 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff fca0 	bl	8001094 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	2b00      	cmp	r3, #0
 800176c:	d118      	bne.n	80017a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001776:	f023 0302 	bic.w	r3, r3, #2
 800177a:	f043 0202 	orr.w	r2, r3, #2
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 fabe 	bl	8001d04 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f023 0303 	bic.w	r3, r3, #3
 8001796:	f043 0201 	orr.w	r2, r3, #1
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	641a      	str	r2, [r3, #64]	; 0x40
 800179e:	e001      	b.n	80017a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d101      	bne.n	80017d6 <HAL_ADC_Start_DMA+0x1e>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e0e9      	b.n	80019aa <HAL_ADC_Start_DMA+0x1f2>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d018      	beq.n	800181e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0201 	orr.w	r2, r2, #1
 80017fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017fc:	4b6d      	ldr	r3, [pc, #436]	; (80019b4 <HAL_ADC_Start_DMA+0x1fc>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a6d      	ldr	r2, [pc, #436]	; (80019b8 <HAL_ADC_Start_DMA+0x200>)
 8001802:	fba2 2303 	umull	r2, r3, r2, r3
 8001806:	0c9a      	lsrs	r2, r3, #18
 8001808:	4613      	mov	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	4413      	add	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001810:	e002      	b.n	8001818 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	3b01      	subs	r3, #1
 8001816:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f9      	bne.n	8001812 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800182c:	d107      	bne.n	800183e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800183c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	2b01      	cmp	r3, #1
 800184a:	f040 80a1 	bne.w	8001990 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001856:	f023 0301 	bic.w	r3, r3, #1
 800185a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186c:	2b00      	cmp	r3, #0
 800186e:	d007      	beq.n	8001880 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001878:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800188c:	d106      	bne.n	800189c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	f023 0206 	bic.w	r2, r3, #6
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	645a      	str	r2, [r3, #68]	; 0x44
 800189a:	e002      	b.n	80018a2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018aa:	4b44      	ldr	r3, [pc, #272]	; (80019bc <HAL_ADC_Start_DMA+0x204>)
 80018ac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b2:	4a43      	ldr	r2, [pc, #268]	; (80019c0 <HAL_ADC_Start_DMA+0x208>)
 80018b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ba:	4a42      	ldr	r2, [pc, #264]	; (80019c4 <HAL_ADC_Start_DMA+0x20c>)
 80018bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c2:	4a41      	ldr	r2, [pc, #260]	; (80019c8 <HAL_ADC_Start_DMA+0x210>)
 80018c4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018ce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80018de:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018ee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	334c      	adds	r3, #76	; 0x4c
 80018fa:	4619      	mov	r1, r3
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f000 fd3e 	bl	8002380 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 031f 	and.w	r3, r3, #31
 800190c:	2b00      	cmp	r3, #0
 800190e:	d12a      	bne.n	8001966 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a2d      	ldr	r2, [pc, #180]	; (80019cc <HAL_ADC_Start_DMA+0x214>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d015      	beq.n	8001946 <HAL_ADC_Start_DMA+0x18e>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a2c      	ldr	r2, [pc, #176]	; (80019d0 <HAL_ADC_Start_DMA+0x218>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d105      	bne.n	8001930 <HAL_ADC_Start_DMA+0x178>
 8001924:	4b25      	ldr	r3, [pc, #148]	; (80019bc <HAL_ADC_Start_DMA+0x204>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 031f 	and.w	r3, r3, #31
 800192c:	2b00      	cmp	r3, #0
 800192e:	d00a      	beq.n	8001946 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a27      	ldr	r2, [pc, #156]	; (80019d4 <HAL_ADC_Start_DMA+0x21c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d136      	bne.n	80019a8 <HAL_ADC_Start_DMA+0x1f0>
 800193a:	4b20      	ldr	r3, [pc, #128]	; (80019bc <HAL_ADC_Start_DMA+0x204>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0310 	and.w	r3, r3, #16
 8001942:	2b00      	cmp	r3, #0
 8001944:	d130      	bne.n	80019a8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d129      	bne.n	80019a8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	e020      	b.n	80019a8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a18      	ldr	r2, [pc, #96]	; (80019cc <HAL_ADC_Start_DMA+0x214>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d11b      	bne.n	80019a8 <HAL_ADC_Start_DMA+0x1f0>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d114      	bne.n	80019a8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	e00b      	b.n	80019a8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	f043 0210 	orr.w	r2, r3, #16
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a0:	f043 0201 	orr.w	r2, r3, #1
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000004 	.word	0x20000004
 80019b8:	431bde83 	.word	0x431bde83
 80019bc:	40012300 	.word	0x40012300
 80019c0:	08001efd 	.word	0x08001efd
 80019c4:	08001fb7 	.word	0x08001fb7
 80019c8:	08001fd3 	.word	0x08001fd3
 80019cc:	40012000 	.word	0x40012000
 80019d0:	40012100 	.word	0x40012100
 80019d4:	40012200 	.word	0x40012200

080019d8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_ADC_Stop_DMA+0x1a>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e048      	b.n	8001a84 <HAL_ADC_Stop_DMA+0xac>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0201 	bic.w	r2, r2, #1
 8001a08:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d130      	bne.n	8001a7a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a26:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d10f      	bne.n	8001a56 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 fcf8 	bl	8002430 <HAL_DMA_Abort>
 8001a40:	4603      	mov	r3, r0
 8001a42:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d005      	beq.n	8001a56 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001a64:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a6e:	f023 0301 	bic.w	r3, r3, #1
 8001a72:	f043 0201 	orr.w	r2, r3, #1
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x1c>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e113      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x244>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b09      	cmp	r3, #9
 8001aca:	d925      	bls.n	8001b18 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68d9      	ldr	r1, [r3, #12]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4613      	mov	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4413      	add	r3, r2
 8001ae0:	3b1e      	subs	r3, #30
 8001ae2:	2207      	movs	r2, #7
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43da      	mvns	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	400a      	ands	r2, r1
 8001af0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68d9      	ldr	r1, [r3, #12]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	4618      	mov	r0, r3
 8001b04:	4603      	mov	r3, r0
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	4403      	add	r3, r0
 8001b0a:	3b1e      	subs	r3, #30
 8001b0c:	409a      	lsls	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	e022      	b.n	8001b5e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6919      	ldr	r1, [r3, #16]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	461a      	mov	r2, r3
 8001b26:	4613      	mov	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	2207      	movs	r2, #7
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43da      	mvns	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	400a      	ands	r2, r1
 8001b3a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6919      	ldr	r1, [r3, #16]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	4603      	mov	r3, r0
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4403      	add	r3, r0
 8001b54:	409a      	lsls	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d824      	bhi.n	8001bb0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	3b05      	subs	r3, #5
 8001b78:	221f      	movs	r2, #31
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	400a      	ands	r2, r1
 8001b86:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	4618      	mov	r0, r3
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3b05      	subs	r3, #5
 8001ba2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	635a      	str	r2, [r3, #52]	; 0x34
 8001bae:	e04c      	b.n	8001c4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b0c      	cmp	r3, #12
 8001bb6:	d824      	bhi.n	8001c02 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3b23      	subs	r3, #35	; 0x23
 8001bca:	221f      	movs	r2, #31
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43da      	mvns	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	400a      	ands	r2, r1
 8001bd8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3b23      	subs	r3, #35	; 0x23
 8001bf4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	631a      	str	r2, [r3, #48]	; 0x30
 8001c00:	e023      	b.n	8001c4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	3b41      	subs	r3, #65	; 0x41
 8001c14:	221f      	movs	r2, #31
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	400a      	ands	r2, r1
 8001c22:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	4618      	mov	r0, r3
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3b41      	subs	r3, #65	; 0x41
 8001c3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c4a:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <HAL_ADC_ConfigChannel+0x250>)
 8001c4c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a28      	ldr	r2, [pc, #160]	; (8001cf4 <HAL_ADC_ConfigChannel+0x254>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d10f      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x1d8>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b12      	cmp	r3, #18
 8001c5e:	d10b      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a1d      	ldr	r2, [pc, #116]	; (8001cf4 <HAL_ADC_ConfigChannel+0x254>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d12b      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x23a>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a1c      	ldr	r2, [pc, #112]	; (8001cf8 <HAL_ADC_ConfigChannel+0x258>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d003      	beq.n	8001c94 <HAL_ADC_ConfigChannel+0x1f4>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b11      	cmp	r3, #17
 8001c92:	d122      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a11      	ldr	r2, [pc, #68]	; (8001cf8 <HAL_ADC_ConfigChannel+0x258>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d111      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <HAL_ADC_ConfigChannel+0x25c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a11      	ldr	r2, [pc, #68]	; (8001d00 <HAL_ADC_ConfigChannel+0x260>)
 8001cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc0:	0c9a      	lsrs	r2, r3, #18
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ccc:	e002      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f9      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	40012300 	.word	0x40012300
 8001cf4:	40012000 	.word	0x40012000
 8001cf8:	10000012 	.word	0x10000012
 8001cfc:	20000004 	.word	0x20000004
 8001d00:	431bde83 	.word	0x431bde83

08001d04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d0c:	4b79      	ldr	r3, [pc, #484]	; (8001ef4 <ADC_Init+0x1f0>)
 8001d0e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	431a      	orrs	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6859      	ldr	r1, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	021a      	lsls	r2, r3, #8
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6859      	ldr	r1, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6899      	ldr	r1, [r3, #8]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d96:	4a58      	ldr	r2, [pc, #352]	; (8001ef8 <ADC_Init+0x1f4>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d022      	beq.n	8001de2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001daa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6899      	ldr	r1, [r3, #8]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6899      	ldr	r1, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	e00f      	b.n	8001e02 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001df0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0202 	bic.w	r2, r2, #2
 8001e10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6899      	ldr	r1, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7e1b      	ldrb	r3, [r3, #24]
 8001e1c:	005a      	lsls	r2, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d01b      	beq.n	8001e68 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e3e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6859      	ldr	r1, [r3, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	035a      	lsls	r2, r3, #13
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	e007      	b.n	8001e78 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e76:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	051a      	lsls	r2, r3, #20
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001eac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6899      	ldr	r1, [r3, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001eba:	025a      	lsls	r2, r3, #9
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ed2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6899      	ldr	r1, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	029a      	lsls	r2, r3, #10
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	609a      	str	r2, [r3, #8]
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	40012300 	.word	0x40012300
 8001ef8:	0f000001 	.word	0x0f000001

08001efc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f08:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d13c      	bne.n	8001f90 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d12b      	bne.n	8001f88 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d127      	bne.n	8001f88 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d006      	beq.n	8001f54 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d119      	bne.n	8001f88 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0220 	bic.w	r2, r2, #32
 8001f62:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d105      	bne.n	8001f88 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	f043 0201 	orr.w	r2, r3, #1
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f7fe fbb5 	bl	80006f8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f8e:	e00e      	b.n	8001fae <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f7ff fd75 	bl	8001a8c <HAL_ADC_ErrorCallback>
}
 8001fa2:	e004      	b.n	8001fae <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	4798      	blx	r3
}
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f7fe fb79 	bl	80006bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fde:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2240      	movs	r2, #64	; 0x40
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	f043 0204 	orr.w	r2, r3, #4
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f7ff fd4a 	bl	8001a8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ff8:	bf00      	nop
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <__NVIC_SetPriorityGrouping>:
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <__NVIC_SetPriorityGrouping+0x44>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800201c:	4013      	ands	r3, r2
 800201e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002028:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800202c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002032:	4a04      	ldr	r2, [pc, #16]	; (8002044 <__NVIC_SetPriorityGrouping+0x44>)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	60d3      	str	r3, [r2, #12]
}
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_GetPriorityGrouping>:
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800204c:	4b04      	ldr	r3, [pc, #16]	; (8002060 <__NVIC_GetPriorityGrouping+0x18>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	f003 0307 	and.w	r3, r3, #7
}
 8002056:	4618      	mov	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <__NVIC_EnableIRQ>:
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	2b00      	cmp	r3, #0
 8002074:	db0b      	blt.n	800208e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	f003 021f 	and.w	r2, r3, #31
 800207c:	4907      	ldr	r1, [pc, #28]	; (800209c <__NVIC_EnableIRQ+0x38>)
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	095b      	lsrs	r3, r3, #5
 8002084:	2001      	movs	r0, #1
 8002086:	fa00 f202 	lsl.w	r2, r0, r2
 800208a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	e000e100 	.word	0xe000e100

080020a0 <__NVIC_SetPriority>:
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	6039      	str	r1, [r7, #0]
 80020aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	db0a      	blt.n	80020ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	490c      	ldr	r1, [pc, #48]	; (80020ec <__NVIC_SetPriority+0x4c>)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	0112      	lsls	r2, r2, #4
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	440b      	add	r3, r1
 80020c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80020c8:	e00a      	b.n	80020e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	4908      	ldr	r1, [pc, #32]	; (80020f0 <__NVIC_SetPriority+0x50>)
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	3b04      	subs	r3, #4
 80020d8:	0112      	lsls	r2, r2, #4
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	440b      	add	r3, r1
 80020de:	761a      	strb	r2, [r3, #24]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000e100 	.word	0xe000e100
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <NVIC_EncodePriority>:
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	; 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f1c3 0307 	rsb	r3, r3, #7
 800210e:	2b04      	cmp	r3, #4
 8002110:	bf28      	it	cs
 8002112:	2304      	movcs	r3, #4
 8002114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3304      	adds	r3, #4
 800211a:	2b06      	cmp	r3, #6
 800211c:	d902      	bls.n	8002124 <NVIC_EncodePriority+0x30>
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3b03      	subs	r3, #3
 8002122:	e000      	b.n	8002126 <NVIC_EncodePriority+0x32>
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	f04f 32ff 	mov.w	r2, #4294967295
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43da      	mvns	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	401a      	ands	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800213c:	f04f 31ff 	mov.w	r1, #4294967295
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	fa01 f303 	lsl.w	r3, r1, r3
 8002146:	43d9      	mvns	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	4313      	orrs	r3, r2
}
 800214e:	4618      	mov	r0, r3
 8002150:	3724      	adds	r7, #36	; 0x24
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <SysTick_Config>:
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3b01      	subs	r3, #1
 8002168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800216c:	d301      	bcc.n	8002172 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800216e:	2301      	movs	r3, #1
 8002170:	e00f      	b.n	8002192 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002172:	4a0a      	ldr	r2, [pc, #40]	; (800219c <SysTick_Config+0x40>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3b01      	subs	r3, #1
 8002178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800217a:	210f      	movs	r1, #15
 800217c:	f04f 30ff 	mov.w	r0, #4294967295
 8002180:	f7ff ff8e 	bl	80020a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <SysTick_Config+0x40>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218a:	4b04      	ldr	r3, [pc, #16]	; (800219c <SysTick_Config+0x40>)
 800218c:	2207      	movs	r2, #7
 800218e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	e000e010 	.word	0xe000e010

080021a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff ff29 	bl	8002000 <__NVIC_SetPriorityGrouping>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b086      	sub	sp, #24
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c8:	f7ff ff3e 	bl	8002048 <__NVIC_GetPriorityGrouping>
 80021cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	68b9      	ldr	r1, [r7, #8]
 80021d2:	6978      	ldr	r0, [r7, #20]
 80021d4:	f7ff ff8e 	bl	80020f4 <NVIC_EncodePriority>
 80021d8:	4602      	mov	r2, r0
 80021da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021de:	4611      	mov	r1, r2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff5d 	bl	80020a0 <__NVIC_SetPriority>
}
 80021e6:	bf00      	nop
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	4603      	mov	r3, r0
 80021f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff31 	bl	8002064 <__NVIC_EnableIRQ>
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff ffa2 	bl	800215c <SysTick_Config>
 8002218:	4603      	mov	r3, r0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002230:	f7ff fa4e 	bl	80016d0 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e099      	b.n	8002374 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0201 	bic.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002260:	e00f      	b.n	8002282 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002262:	f7ff fa35 	bl	80016d0 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b05      	cmp	r3, #5
 800226e:	d908      	bls.n	8002282 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2220      	movs	r2, #32
 8002274:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2203      	movs	r2, #3
 800227a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e078      	b.n	8002374 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1e8      	bne.n	8002262 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	4b38      	ldr	r3, [pc, #224]	; (800237c <HAL_DMA_Init+0x158>)
 800229c:	4013      	ands	r3, r2
 800229e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d107      	bne.n	80022ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	4313      	orrs	r3, r2
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f023 0307 	bic.w	r3, r3, #7
 8002302:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	4313      	orrs	r3, r2
 800230c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	2b04      	cmp	r3, #4
 8002314:	d117      	bne.n	8002346 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	4313      	orrs	r3, r2
 800231e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00e      	beq.n	8002346 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 fb01 	bl	8002930 <DMA_CheckFifoParam>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2240      	movs	r2, #64	; 0x40
 8002338:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002342:	2301      	movs	r3, #1
 8002344:	e016      	b.n	8002374 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 fab8 	bl	80028c4 <DMA_CalcBaseAndBitshift>
 8002354:	4603      	mov	r3, r0
 8002356:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235c:	223f      	movs	r2, #63	; 0x3f
 800235e:	409a      	lsls	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	f010803f 	.word	0xf010803f

08002380 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002396:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_DMA_Start_IT+0x26>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e040      	b.n	8002428 <HAL_DMA_Start_IT+0xa8>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d12f      	bne.n	800241a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2202      	movs	r2, #2
 80023be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 fa4a 	bl	8002868 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d8:	223f      	movs	r2, #63	; 0x3f
 80023da:	409a      	lsls	r2, r3
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0216 	orr.w	r2, r2, #22
 80023ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d007      	beq.n	8002408 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0208 	orr.w	r2, r2, #8
 8002406:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0201 	orr.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	e005      	b.n	8002426 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002422:	2302      	movs	r3, #2
 8002424:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002426:	7dfb      	ldrb	r3, [r7, #23]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800243e:	f7ff f947 	bl	80016d0 <HAL_GetTick>
 8002442:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d008      	beq.n	8002462 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2280      	movs	r2, #128	; 0x80
 8002454:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e052      	b.n	8002508 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0216 	bic.w	r2, r2, #22
 8002470:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695a      	ldr	r2, [r3, #20]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002480:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	2b00      	cmp	r3, #0
 8002488:	d103      	bne.n	8002492 <HAL_DMA_Abort+0x62>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800248e:	2b00      	cmp	r3, #0
 8002490:	d007      	beq.n	80024a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0208 	bic.w	r2, r2, #8
 80024a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0201 	bic.w	r2, r2, #1
 80024b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024b2:	e013      	b.n	80024dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024b4:	f7ff f90c 	bl	80016d0 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b05      	cmp	r3, #5
 80024c0:	d90c      	bls.n	80024dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2220      	movs	r2, #32
 80024c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2203      	movs	r2, #3
 80024cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e015      	b.n	8002508 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1e4      	bne.n	80024b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ee:	223f      	movs	r2, #63	; 0x3f
 80024f0:	409a      	lsls	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d004      	beq.n	800252e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2280      	movs	r2, #128	; 0x80
 8002528:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e00c      	b.n	8002548 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2205      	movs	r2, #5
 8002532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0201 	bic.w	r2, r2, #1
 8002544:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800255c:	2300      	movs	r3, #0
 800255e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002560:	4b8e      	ldr	r3, [pc, #568]	; (800279c <HAL_DMA_IRQHandler+0x248>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a8e      	ldr	r2, [pc, #568]	; (80027a0 <HAL_DMA_IRQHandler+0x24c>)
 8002566:	fba2 2303 	umull	r2, r3, r2, r3
 800256a:	0a9b      	lsrs	r3, r3, #10
 800256c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002572:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257e:	2208      	movs	r2, #8
 8002580:	409a      	lsls	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4013      	ands	r3, r2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d01a      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	d013      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0204 	bic.w	r2, r2, #4
 80025a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ac:	2208      	movs	r2, #8
 80025ae:	409a      	lsls	r2, r3
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b8:	f043 0201 	orr.w	r2, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c4:	2201      	movs	r2, #1
 80025c6:	409a      	lsls	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d012      	beq.n	80025f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00b      	beq.n	80025f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e2:	2201      	movs	r2, #1
 80025e4:	409a      	lsls	r2, r3
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ee:	f043 0202 	orr.w	r2, r3, #2
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fa:	2204      	movs	r2, #4
 80025fc:	409a      	lsls	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4013      	ands	r3, r2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d012      	beq.n	800262c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00b      	beq.n	800262c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002618:	2204      	movs	r2, #4
 800261a:	409a      	lsls	r2, r3
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002624:	f043 0204 	orr.w	r2, r3, #4
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002630:	2210      	movs	r2, #16
 8002632:	409a      	lsls	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4013      	ands	r3, r2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d043      	beq.n	80026c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d03c      	beq.n	80026c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264e:	2210      	movs	r2, #16
 8002650:	409a      	lsls	r2, r3
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d018      	beq.n	8002696 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d108      	bne.n	8002684 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	2b00      	cmp	r3, #0
 8002678:	d024      	beq.n	80026c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	4798      	blx	r3
 8002682:	e01f      	b.n	80026c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002688:	2b00      	cmp	r3, #0
 800268a:	d01b      	beq.n	80026c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	4798      	blx	r3
 8002694:	e016      	b.n	80026c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d107      	bne.n	80026b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0208 	bic.w	r2, r2, #8
 80026b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c8:	2220      	movs	r2, #32
 80026ca:	409a      	lsls	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 808f 	beq.w	80027f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0310 	and.w	r3, r3, #16
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8087 	beq.w	80027f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ea:	2220      	movs	r2, #32
 80026ec:	409a      	lsls	r2, r3
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b05      	cmp	r3, #5
 80026fc:	d136      	bne.n	800276c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0216 	bic.w	r2, r2, #22
 800270c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695a      	ldr	r2, [r3, #20]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800271c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	2b00      	cmp	r3, #0
 8002724:	d103      	bne.n	800272e <HAL_DMA_IRQHandler+0x1da>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800272a:	2b00      	cmp	r3, #0
 800272c:	d007      	beq.n	800273e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0208 	bic.w	r2, r2, #8
 800273c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002742:	223f      	movs	r2, #63	; 0x3f
 8002744:	409a      	lsls	r2, r3
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800275e:	2b00      	cmp	r3, #0
 8002760:	d07e      	beq.n	8002860 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	4798      	blx	r3
        }
        return;
 800276a:	e079      	b.n	8002860 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d01d      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10d      	bne.n	80027a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278c:	2b00      	cmp	r3, #0
 800278e:	d031      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	4798      	blx	r3
 8002798:	e02c      	b.n	80027f4 <HAL_DMA_IRQHandler+0x2a0>
 800279a:	bf00      	nop
 800279c:	20000004 	.word	0x20000004
 80027a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d023      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	4798      	blx	r3
 80027b4:	e01e      	b.n	80027f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10f      	bne.n	80027e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0210 	bic.w	r2, r2, #16
 80027d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d032      	beq.n	8002862 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d022      	beq.n	800284e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2205      	movs	r2, #5
 800280c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0201 	bic.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	3301      	adds	r3, #1
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	429a      	cmp	r2, r3
 800282a:	d307      	bcc.n	800283c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f2      	bne.n	8002820 <HAL_DMA_IRQHandler+0x2cc>
 800283a:	e000      	b.n	800283e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800283c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002852:	2b00      	cmp	r3, #0
 8002854:	d005      	beq.n	8002862 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	4798      	blx	r3
 800285e:	e000      	b.n	8002862 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002860:	bf00      	nop
    }
  }
}
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002884:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b40      	cmp	r3, #64	; 0x40
 8002894:	d108      	bne.n	80028a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028a6:	e007      	b.n	80028b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	60da      	str	r2, [r3, #12]
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	3b10      	subs	r3, #16
 80028d4:	4a14      	ldr	r2, [pc, #80]	; (8002928 <DMA_CalcBaseAndBitshift+0x64>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	091b      	lsrs	r3, r3, #4
 80028dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028de:	4a13      	ldr	r2, [pc, #76]	; (800292c <DMA_CalcBaseAndBitshift+0x68>)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4413      	add	r3, r2
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	d909      	bls.n	8002906 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028fa:	f023 0303 	bic.w	r3, r3, #3
 80028fe:	1d1a      	adds	r2, r3, #4
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	659a      	str	r2, [r3, #88]	; 0x58
 8002904:	e007      	b.n	8002916 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800290e:	f023 0303 	bic.w	r3, r3, #3
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800291a:	4618      	mov	r0, r3
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	aaaaaaab 	.word	0xaaaaaaab
 800292c:	0800b31c 	.word	0x0800b31c

08002930 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002940:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d11f      	bne.n	800298a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b03      	cmp	r3, #3
 800294e:	d856      	bhi.n	80029fe <DMA_CheckFifoParam+0xce>
 8002950:	a201      	add	r2, pc, #4	; (adr r2, 8002958 <DMA_CheckFifoParam+0x28>)
 8002952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002956:	bf00      	nop
 8002958:	08002969 	.word	0x08002969
 800295c:	0800297b 	.word	0x0800297b
 8002960:	08002969 	.word	0x08002969
 8002964:	080029ff 	.word	0x080029ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d046      	beq.n	8002a02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002978:	e043      	b.n	8002a02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002982:	d140      	bne.n	8002a06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002988:	e03d      	b.n	8002a06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002992:	d121      	bne.n	80029d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b03      	cmp	r3, #3
 8002998:	d837      	bhi.n	8002a0a <DMA_CheckFifoParam+0xda>
 800299a:	a201      	add	r2, pc, #4	; (adr r2, 80029a0 <DMA_CheckFifoParam+0x70>)
 800299c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a0:	080029b1 	.word	0x080029b1
 80029a4:	080029b7 	.word	0x080029b7
 80029a8:	080029b1 	.word	0x080029b1
 80029ac:	080029c9 	.word	0x080029c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
      break;
 80029b4:	e030      	b.n	8002a18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d025      	beq.n	8002a0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c6:	e022      	b.n	8002a0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029d0:	d11f      	bne.n	8002a12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029d6:	e01c      	b.n	8002a12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d903      	bls.n	80029e6 <DMA_CheckFifoParam+0xb6>
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d003      	beq.n	80029ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029e4:	e018      	b.n	8002a18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	73fb      	strb	r3, [r7, #15]
      break;
 80029ea:	e015      	b.n	8002a18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00e      	beq.n	8002a16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
      break;
 80029fc:	e00b      	b.n	8002a16 <DMA_CheckFifoParam+0xe6>
      break;
 80029fe:	bf00      	nop
 8002a00:	e00a      	b.n	8002a18 <DMA_CheckFifoParam+0xe8>
      break;
 8002a02:	bf00      	nop
 8002a04:	e008      	b.n	8002a18 <DMA_CheckFifoParam+0xe8>
      break;
 8002a06:	bf00      	nop
 8002a08:	e006      	b.n	8002a18 <DMA_CheckFifoParam+0xe8>
      break;
 8002a0a:	bf00      	nop
 8002a0c:	e004      	b.n	8002a18 <DMA_CheckFifoParam+0xe8>
      break;
 8002a0e:	bf00      	nop
 8002a10:	e002      	b.n	8002a18 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a12:	bf00      	nop
 8002a14:	e000      	b.n	8002a18 <DMA_CheckFifoParam+0xe8>
      break;
 8002a16:	bf00      	nop
    }
  } 
  
  return status; 
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop

08002a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b089      	sub	sp, #36	; 0x24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]
 8002a42:	e165      	b.n	8002d10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a44:	2201      	movs	r2, #1
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	4013      	ands	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	f040 8154 	bne.w	8002d0a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d005      	beq.n	8002a7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d130      	bne.n	8002adc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	2203      	movs	r2, #3
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	091b      	lsrs	r3, r3, #4
 8002ac6:	f003 0201 	and.w	r2, r3, #1
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d017      	beq.n	8002b18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	2203      	movs	r2, #3
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 0303 	and.w	r3, r3, #3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d123      	bne.n	8002b6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	08da      	lsrs	r2, r3, #3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3208      	adds	r2, #8
 8002b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	220f      	movs	r2, #15
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	08da      	lsrs	r2, r3, #3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3208      	adds	r2, #8
 8002b66:	69b9      	ldr	r1, [r7, #24]
 8002b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	2203      	movs	r2, #3
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0203 	and.w	r2, r3, #3
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 80ae 	beq.w	8002d0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	4b5d      	ldr	r3, [pc, #372]	; (8002d28 <HAL_GPIO_Init+0x300>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	4a5c      	ldr	r2, [pc, #368]	; (8002d28 <HAL_GPIO_Init+0x300>)
 8002bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8002bbe:	4b5a      	ldr	r3, [pc, #360]	; (8002d28 <HAL_GPIO_Init+0x300>)
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bca:	4a58      	ldr	r2, [pc, #352]	; (8002d2c <HAL_GPIO_Init+0x304>)
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	089b      	lsrs	r3, r3, #2
 8002bd0:	3302      	adds	r3, #2
 8002bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	220f      	movs	r2, #15
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4013      	ands	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a4f      	ldr	r2, [pc, #316]	; (8002d30 <HAL_GPIO_Init+0x308>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d025      	beq.n	8002c42 <HAL_GPIO_Init+0x21a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a4e      	ldr	r2, [pc, #312]	; (8002d34 <HAL_GPIO_Init+0x30c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d01f      	beq.n	8002c3e <HAL_GPIO_Init+0x216>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a4d      	ldr	r2, [pc, #308]	; (8002d38 <HAL_GPIO_Init+0x310>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d019      	beq.n	8002c3a <HAL_GPIO_Init+0x212>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a4c      	ldr	r2, [pc, #304]	; (8002d3c <HAL_GPIO_Init+0x314>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d013      	beq.n	8002c36 <HAL_GPIO_Init+0x20e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a4b      	ldr	r2, [pc, #300]	; (8002d40 <HAL_GPIO_Init+0x318>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d00d      	beq.n	8002c32 <HAL_GPIO_Init+0x20a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a4a      	ldr	r2, [pc, #296]	; (8002d44 <HAL_GPIO_Init+0x31c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d007      	beq.n	8002c2e <HAL_GPIO_Init+0x206>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a49      	ldr	r2, [pc, #292]	; (8002d48 <HAL_GPIO_Init+0x320>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d101      	bne.n	8002c2a <HAL_GPIO_Init+0x202>
 8002c26:	2306      	movs	r3, #6
 8002c28:	e00c      	b.n	8002c44 <HAL_GPIO_Init+0x21c>
 8002c2a:	2307      	movs	r3, #7
 8002c2c:	e00a      	b.n	8002c44 <HAL_GPIO_Init+0x21c>
 8002c2e:	2305      	movs	r3, #5
 8002c30:	e008      	b.n	8002c44 <HAL_GPIO_Init+0x21c>
 8002c32:	2304      	movs	r3, #4
 8002c34:	e006      	b.n	8002c44 <HAL_GPIO_Init+0x21c>
 8002c36:	2303      	movs	r3, #3
 8002c38:	e004      	b.n	8002c44 <HAL_GPIO_Init+0x21c>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e002      	b.n	8002c44 <HAL_GPIO_Init+0x21c>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <HAL_GPIO_Init+0x21c>
 8002c42:	2300      	movs	r3, #0
 8002c44:	69fa      	ldr	r2, [r7, #28]
 8002c46:	f002 0203 	and.w	r2, r2, #3
 8002c4a:	0092      	lsls	r2, r2, #2
 8002c4c:	4093      	lsls	r3, r2
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c54:	4935      	ldr	r1, [pc, #212]	; (8002d2c <HAL_GPIO_Init+0x304>)
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	089b      	lsrs	r3, r3, #2
 8002c5a:	3302      	adds	r3, #2
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c62:	4b3a      	ldr	r3, [pc, #232]	; (8002d4c <HAL_GPIO_Init+0x324>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c86:	4a31      	ldr	r2, [pc, #196]	; (8002d4c <HAL_GPIO_Init+0x324>)
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c8c:	4b2f      	ldr	r3, [pc, #188]	; (8002d4c <HAL_GPIO_Init+0x324>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cb0:	4a26      	ldr	r2, [pc, #152]	; (8002d4c <HAL_GPIO_Init+0x324>)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cb6:	4b25      	ldr	r3, [pc, #148]	; (8002d4c <HAL_GPIO_Init+0x324>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cda:	4a1c      	ldr	r2, [pc, #112]	; (8002d4c <HAL_GPIO_Init+0x324>)
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ce0:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <HAL_GPIO_Init+0x324>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4013      	ands	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d04:	4a11      	ldr	r2, [pc, #68]	; (8002d4c <HAL_GPIO_Init+0x324>)
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	61fb      	str	r3, [r7, #28]
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	2b0f      	cmp	r3, #15
 8002d14:	f67f ae96 	bls.w	8002a44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d18:	bf00      	nop
 8002d1a:	bf00      	nop
 8002d1c:	3724      	adds	r7, #36	; 0x24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	40013800 	.word	0x40013800
 8002d30:	40020000 	.word	0x40020000
 8002d34:	40020400 	.word	0x40020400
 8002d38:	40020800 	.word	0x40020800
 8002d3c:	40020c00 	.word	0x40020c00
 8002d40:	40021000 	.word	0x40021000
 8002d44:	40021400 	.word	0x40021400
 8002d48:	40021800 	.word	0x40021800
 8002d4c:	40013c00 	.word	0x40013c00

08002d50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	887b      	ldrh	r3, [r7, #2]
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	73fb      	strb	r3, [r7, #15]
 8002d6c:	e001      	b.n	8002d72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	807b      	strh	r3, [r7, #2]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d90:	787b      	ldrb	r3, [r7, #1]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d96:	887a      	ldrh	r2, [r7, #2]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d9c:	e003      	b.n	8002da6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d9e:	887b      	ldrh	r3, [r7, #2]
 8002da0:	041a      	lsls	r2, r3, #16
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	619a      	str	r2, [r3, #24]
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	603b      	str	r3, [r7, #0]
 8002dc2:	4b20      	ldr	r3, [pc, #128]	; (8002e44 <HAL_PWREx_EnableOverDrive+0x90>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	4a1f      	ldr	r2, [pc, #124]	; (8002e44 <HAL_PWREx_EnableOverDrive+0x90>)
 8002dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dce:	4b1d      	ldr	r3, [pc, #116]	; (8002e44 <HAL_PWREx_EnableOverDrive+0x90>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002dda:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <HAL_PWREx_EnableOverDrive+0x94>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002de0:	f7fe fc76 	bl	80016d0 <HAL_GetTick>
 8002de4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002de6:	e009      	b.n	8002dfc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002de8:	f7fe fc72 	bl	80016d0 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002df6:	d901      	bls.n	8002dfc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e01f      	b.n	8002e3c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002dfc:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <HAL_PWREx_EnableOverDrive+0x98>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e08:	d1ee      	bne.n	8002de8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e0a:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e10:	f7fe fc5e 	bl	80016d0 <HAL_GetTick>
 8002e14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e16:	e009      	b.n	8002e2c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e18:	f7fe fc5a 	bl	80016d0 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e26:	d901      	bls.n	8002e2c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e007      	b.n	8002e3c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e2c:	4b07      	ldr	r3, [pc, #28]	; (8002e4c <HAL_PWREx_EnableOverDrive+0x98>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e38:	d1ee      	bne.n	8002e18 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40023800 	.word	0x40023800
 8002e48:	420e0040 	.word	0x420e0040
 8002e4c:	40007000 	.word	0x40007000
 8002e50:	420e0044 	.word	0x420e0044

08002e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0cc      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e68:	4b68      	ldr	r3, [pc, #416]	; (800300c <HAL_RCC_ClockConfig+0x1b8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d90c      	bls.n	8002e90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e76:	4b65      	ldr	r3, [pc, #404]	; (800300c <HAL_RCC_ClockConfig+0x1b8>)
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7e:	4b63      	ldr	r3, [pc, #396]	; (800300c <HAL_RCC_ClockConfig+0x1b8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d001      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0b8      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d020      	beq.n	8002ede <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ea8:	4b59      	ldr	r3, [pc, #356]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	4a58      	ldr	r2, [pc, #352]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ec0:	4b53      	ldr	r3, [pc, #332]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	4a52      	ldr	r2, [pc, #328]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ecc:	4b50      	ldr	r3, [pc, #320]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	494d      	ldr	r1, [pc, #308]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d044      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d107      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef2:	4b47      	ldr	r3, [pc, #284]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d119      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e07f      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d003      	beq.n	8002f12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	d107      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f12:	4b3f      	ldr	r3, [pc, #252]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e06f      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f22:	4b3b      	ldr	r3, [pc, #236]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e067      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f32:	4b37      	ldr	r3, [pc, #220]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f023 0203 	bic.w	r2, r3, #3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4934      	ldr	r1, [pc, #208]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f44:	f7fe fbc4 	bl	80016d0 <HAL_GetTick>
 8002f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f4c:	f7fe fbc0 	bl	80016d0 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e04f      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f62:	4b2b      	ldr	r3, [pc, #172]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 020c 	and.w	r2, r3, #12
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d1eb      	bne.n	8002f4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f74:	4b25      	ldr	r3, [pc, #148]	; (800300c <HAL_RCC_ClockConfig+0x1b8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d20c      	bcs.n	8002f9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f82:	4b22      	ldr	r3, [pc, #136]	; (800300c <HAL_RCC_ClockConfig+0x1b8>)
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8a:	4b20      	ldr	r3, [pc, #128]	; (800300c <HAL_RCC_ClockConfig+0x1b8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d001      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e032      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa8:	4b19      	ldr	r3, [pc, #100]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4916      	ldr	r1, [pc, #88]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d009      	beq.n	8002fda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fc6:	4b12      	ldr	r3, [pc, #72]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	490e      	ldr	r1, [pc, #56]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fda:	f000 fb7f 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	091b      	lsrs	r3, r3, #4
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	490a      	ldr	r1, [pc, #40]	; (8003014 <HAL_RCC_ClockConfig+0x1c0>)
 8002fec:	5ccb      	ldrb	r3, [r1, r3]
 8002fee:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff2:	4a09      	ldr	r2, [pc, #36]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ff6:	4b09      	ldr	r3, [pc, #36]	; (800301c <HAL_RCC_ClockConfig+0x1c8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe fb24 	bl	8001648 <HAL_InitTick>

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40023c00 	.word	0x40023c00
 8003010:	40023800 	.word	0x40023800
 8003014:	0800b304 	.word	0x0800b304
 8003018:	20000004 	.word	0x20000004
 800301c:	20000008 	.word	0x20000008

08003020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003024:	4b03      	ldr	r3, [pc, #12]	; (8003034 <HAL_RCC_GetHCLKFreq+0x14>)
 8003026:	681b      	ldr	r3, [r3, #0]
}
 8003028:	4618      	mov	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	20000004 	.word	0x20000004

08003038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800303c:	f7ff fff0 	bl	8003020 <HAL_RCC_GetHCLKFreq>
 8003040:	4602      	mov	r2, r0
 8003042:	4b05      	ldr	r3, [pc, #20]	; (8003058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	0a9b      	lsrs	r3, r3, #10
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	4903      	ldr	r1, [pc, #12]	; (800305c <HAL_RCC_GetPCLK1Freq+0x24>)
 800304e:	5ccb      	ldrb	r3, [r1, r3]
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003054:	4618      	mov	r0, r3
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40023800 	.word	0x40023800
 800305c:	0800b314 	.word	0x0800b314

08003060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003064:	f7ff ffdc 	bl	8003020 <HAL_RCC_GetHCLKFreq>
 8003068:	4602      	mov	r2, r0
 800306a:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	0b5b      	lsrs	r3, r3, #13
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	4903      	ldr	r1, [pc, #12]	; (8003084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003076:	5ccb      	ldrb	r3, [r1, r3]
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800307c:	4618      	mov	r0, r3
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40023800 	.word	0x40023800
 8003084:	0800b314 	.word	0x0800b314

08003088 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08c      	sub	sp, #48	; 0x30
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d010      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80030c0:	4b6f      	ldr	r3, [pc, #444]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030c6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ce:	496c      	ldr	r1, [pc, #432]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80030de:	2301      	movs	r3, #1
 80030e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d010      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80030ee:	4b64      	ldr	r3, [pc, #400]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030f4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fc:	4960      	ldr	r1, [pc, #384]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800310c:	2301      	movs	r3, #1
 800310e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d017      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800311c:	4b58      	ldr	r3, [pc, #352]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800311e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003122:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	4955      	ldr	r1, [pc, #340]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800312c:	4313      	orrs	r3, r2
 800312e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800313a:	d101      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800313c:	2301      	movs	r3, #1
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003148:	2301      	movs	r3, #1
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d017      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003158:	4b49      	ldr	r3, [pc, #292]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800315a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800315e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003166:	4946      	ldr	r1, [pc, #280]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003172:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003176:	d101      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003178:	2301      	movs	r3, #1
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003184:	2301      	movs	r3, #1
 8003186:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0320 	and.w	r3, r3, #32
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 808a 	beq.w	80032aa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003196:	2300      	movs	r3, #0
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	4b39      	ldr	r3, [pc, #228]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	4a38      	ldr	r2, [pc, #224]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a4:	6413      	str	r3, [r2, #64]	; 0x40
 80031a6:	4b36      	ldr	r3, [pc, #216]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ae:	60bb      	str	r3, [r7, #8]
 80031b0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80031b2:	4b34      	ldr	r3, [pc, #208]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a33      	ldr	r2, [pc, #204]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80031b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031be:	f7fe fa87 	bl	80016d0 <HAL_GetTick>
 80031c2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80031c4:	e008      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80031c6:	f7fe fa83 	bl	80016d0 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e278      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80031d8:	4b2a      	ldr	r3, [pc, #168]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031e4:	4b26      	ldr	r3, [pc, #152]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ec:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d02f      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fc:	6a3a      	ldr	r2, [r7, #32]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d028      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003202:	4b1f      	ldr	r3, [pc, #124]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800320a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800320c:	4b1e      	ldr	r3, [pc, #120]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800320e:	2201      	movs	r2, #1
 8003210:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003212:	4b1d      	ldr	r3, [pc, #116]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003218:	4a19      	ldr	r2, [pc, #100]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800321e:	4b18      	ldr	r3, [pc, #96]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b01      	cmp	r3, #1
 8003228:	d114      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800322a:	f7fe fa51 	bl	80016d0 <HAL_GetTick>
 800322e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003230:	e00a      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003232:	f7fe fa4d 	bl	80016d0 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	d901      	bls.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e240      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003248:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800324a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0ee      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800325c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003260:	d114      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003262:	4b07      	ldr	r3, [pc, #28]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003276:	4902      	ldr	r1, [pc, #8]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003278:	4313      	orrs	r3, r2
 800327a:	608b      	str	r3, [r1, #8]
 800327c:	e00c      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800
 8003284:	40007000 	.word	0x40007000
 8003288:	42470e40 	.word	0x42470e40
 800328c:	4b4a      	ldr	r3, [pc, #296]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	4a49      	ldr	r2, [pc, #292]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003292:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003296:	6093      	str	r3, [r2, #8]
 8003298:	4b47      	ldr	r3, [pc, #284]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800329a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a4:	4944      	ldr	r1, [pc, #272]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0310 	and.w	r3, r3, #16
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d004      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80032bc:	4b3f      	ldr	r3, [pc, #252]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80032be:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00a      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80032cc:	4b3a      	ldr	r3, [pc, #232]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032da:	4937      	ldr	r1, [pc, #220]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032ee:	4b32      	ldr	r3, [pc, #200]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032f4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032fc:	492e      	ldr	r1, [pc, #184]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330c:	2b00      	cmp	r3, #0
 800330e:	d011      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003310:	4b29      	ldr	r3, [pc, #164]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003316:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331e:	4926      	ldr	r1, [pc, #152]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800332e:	d101      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003330:	2301      	movs	r3, #1
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003340:	4b1d      	ldr	r3, [pc, #116]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003346:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	491a      	ldr	r1, [pc, #104]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800335e:	2b00      	cmp	r3, #0
 8003360:	d011      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003362:	4b15      	ldr	r3, [pc, #84]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003368:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003370:	4911      	ldr	r1, [pc, #68]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800337c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003380:	d101      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003382:	2301      	movs	r3, #1
 8003384:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003388:	2b01      	cmp	r3, #1
 800338a:	d005      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003394:	f040 80ff 	bne.w	8003596 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003398:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800339e:	f7fe f997 	bl	80016d0 <HAL_GetTick>
 80033a2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033a4:	e00e      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80033a6:	f7fe f993 	bl	80016d0 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d907      	bls.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e188      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x642>
 80033b8:	40023800 	.word	0x40023800
 80033bc:	424711e0 	.word	0x424711e0
 80033c0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033c4:	4b7e      	ldr	r3, [pc, #504]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1ea      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d009      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d028      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d124      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80033f8:	4b71      	ldr	r3, [pc, #452]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033fe:	0c1b      	lsrs	r3, r3, #16
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	3301      	adds	r3, #1
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800340a:	4b6d      	ldr	r3, [pc, #436]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800340c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003410:	0e1b      	lsrs	r3, r3, #24
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	019b      	lsls	r3, r3, #6
 8003422:	431a      	orrs	r2, r3
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	085b      	lsrs	r3, r3, #1
 8003428:	3b01      	subs	r3, #1
 800342a:	041b      	lsls	r3, r3, #16
 800342c:	431a      	orrs	r2, r3
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	061b      	lsls	r3, r3, #24
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	071b      	lsls	r3, r3, #28
 800343a:	4961      	ldr	r1, [pc, #388]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b00      	cmp	r3, #0
 800344c:	d004      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003456:	d00a      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003460:	2b00      	cmp	r3, #0
 8003462:	d035      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800346c:	d130      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800346e:	4b54      	ldr	r3, [pc, #336]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003474:	0c1b      	lsrs	r3, r3, #16
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	3301      	adds	r3, #1
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003480:	4b4f      	ldr	r3, [pc, #316]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003486:	0f1b      	lsrs	r3, r3, #28
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	019b      	lsls	r3, r3, #6
 8003498:	431a      	orrs	r2, r3
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	085b      	lsrs	r3, r3, #1
 800349e:	3b01      	subs	r3, #1
 80034a0:	041b      	lsls	r3, r3, #16
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	061b      	lsls	r3, r3, #24
 80034aa:	431a      	orrs	r2, r3
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	071b      	lsls	r3, r3, #28
 80034b0:	4943      	ldr	r1, [pc, #268]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80034b8:	4b41      	ldr	r3, [pc, #260]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034be:	f023 021f 	bic.w	r2, r3, #31
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c6:	3b01      	subs	r3, #1
 80034c8:	493d      	ldr	r1, [pc, #244]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d029      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034e4:	d124      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80034e6:	4b36      	ldr	r3, [pc, #216]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034ec:	0c1b      	lsrs	r3, r3, #16
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	3301      	adds	r3, #1
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034f8:	4b31      	ldr	r3, [pc, #196]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034fe:	0f1b      	lsrs	r3, r3, #28
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	019b      	lsls	r3, r3, #6
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	085b      	lsrs	r3, r3, #1
 8003518:	3b01      	subs	r3, #1
 800351a:	041b      	lsls	r3, r3, #16
 800351c:	431a      	orrs	r2, r3
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	061b      	lsls	r3, r3, #24
 8003522:	431a      	orrs	r2, r3
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	071b      	lsls	r3, r3, #28
 8003528:	4925      	ldr	r1, [pc, #148]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003538:	2b00      	cmp	r3, #0
 800353a:	d016      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	019b      	lsls	r3, r3, #6
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	085b      	lsrs	r3, r3, #1
 800354e:	3b01      	subs	r3, #1
 8003550:	041b      	lsls	r3, r3, #16
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	061b      	lsls	r3, r3, #24
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	071b      	lsls	r3, r3, #28
 8003562:	4917      	ldr	r1, [pc, #92]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800356a:	4b16      	ldr	r3, [pc, #88]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800356c:	2201      	movs	r2, #1
 800356e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003570:	f7fe f8ae 	bl	80016d0 <HAL_GetTick>
 8003574:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003576:	e008      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003578:	f7fe f8aa 	bl	80016d0 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e09f      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800358a:	4b0d      	ldr	r3, [pc, #52]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003598:	2b01      	cmp	r3, #1
 800359a:	f040 8095 	bne.w	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800359e:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80035a4:	f7fe f894 	bl	80016d0 <HAL_GetTick>
 80035a8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035aa:	e00f      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80035ac:	f7fe f890 	bl	80016d0 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d908      	bls.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e085      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x642>
 80035be:	bf00      	nop
 80035c0:	40023800 	.word	0x40023800
 80035c4:	42470068 	.word	0x42470068
 80035c8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035cc:	4b41      	ldr	r3, [pc, #260]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035d8:	d0e8      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x566>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d009      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d02b      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d127      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003602:	4b34      	ldr	r3, [pc, #208]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003608:	0c1b      	lsrs	r3, r3, #16
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	3301      	adds	r3, #1
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	699a      	ldr	r2, [r3, #24]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	019b      	lsls	r3, r3, #6
 800361e:	431a      	orrs	r2, r3
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	085b      	lsrs	r3, r3, #1
 8003624:	3b01      	subs	r3, #1
 8003626:	041b      	lsls	r3, r3, #16
 8003628:	431a      	orrs	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	061b      	lsls	r3, r3, #24
 8003630:	4928      	ldr	r1, [pc, #160]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003638:	4b26      	ldr	r3, [pc, #152]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800363a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800363e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	3b01      	subs	r3, #1
 8003648:	021b      	lsls	r3, r3, #8
 800364a:	4922      	ldr	r1, [pc, #136]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d01d      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003662:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003666:	d118      	bne.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003668:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800366a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366e:	0e1b      	lsrs	r3, r3, #24
 8003670:	f003 030f 	and.w	r3, r3, #15
 8003674:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699a      	ldr	r2, [r3, #24]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	019b      	lsls	r3, r3, #6
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	085b      	lsrs	r3, r3, #1
 8003688:	3b01      	subs	r3, #1
 800368a:	041b      	lsls	r3, r3, #16
 800368c:	431a      	orrs	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	061b      	lsls	r3, r3, #24
 8003692:	4910      	ldr	r1, [pc, #64]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800369a:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800369c:	2201      	movs	r2, #1
 800369e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80036a0:	f7fe f816 	bl	80016d0 <HAL_GetTick>
 80036a4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80036a8:	f7fe f812 	bl	80016d0 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e007      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036ba:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036c6:	d1ef      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3730      	adds	r7, #48	; 0x30
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40023800 	.word	0x40023800
 80036d8:	42470070 	.word	0x42470070

080036dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036e0:	b0ae      	sub	sp, #184	; 0xb8
 80036e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003702:	4bcb      	ldr	r3, [pc, #812]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b0c      	cmp	r3, #12
 800370c:	f200 8206 	bhi.w	8003b1c <HAL_RCC_GetSysClockFreq+0x440>
 8003710:	a201      	add	r2, pc, #4	; (adr r2, 8003718 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003716:	bf00      	nop
 8003718:	0800374d 	.word	0x0800374d
 800371c:	08003b1d 	.word	0x08003b1d
 8003720:	08003b1d 	.word	0x08003b1d
 8003724:	08003b1d 	.word	0x08003b1d
 8003728:	08003755 	.word	0x08003755
 800372c:	08003b1d 	.word	0x08003b1d
 8003730:	08003b1d 	.word	0x08003b1d
 8003734:	08003b1d 	.word	0x08003b1d
 8003738:	0800375d 	.word	0x0800375d
 800373c:	08003b1d 	.word	0x08003b1d
 8003740:	08003b1d 	.word	0x08003b1d
 8003744:	08003b1d 	.word	0x08003b1d
 8003748:	0800394d 	.word	0x0800394d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800374c:	4bb9      	ldr	r3, [pc, #740]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x358>)
 800374e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003752:	e1e7      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003754:	4bb8      	ldr	r3, [pc, #736]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003756:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800375a:	e1e3      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800375c:	4bb4      	ldr	r3, [pc, #720]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x354>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003764:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003768:	4bb1      	ldr	r3, [pc, #708]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x354>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d071      	beq.n	8003858 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003774:	4bae      	ldr	r3, [pc, #696]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	099b      	lsrs	r3, r3, #6
 800377a:	2200      	movs	r2, #0
 800377c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003780:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003784:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800378c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003790:	2300      	movs	r3, #0
 8003792:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003796:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800379a:	4622      	mov	r2, r4
 800379c:	462b      	mov	r3, r5
 800379e:	f04f 0000 	mov.w	r0, #0
 80037a2:	f04f 0100 	mov.w	r1, #0
 80037a6:	0159      	lsls	r1, r3, #5
 80037a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037ac:	0150      	lsls	r0, r2, #5
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4621      	mov	r1, r4
 80037b4:	1a51      	subs	r1, r2, r1
 80037b6:	6439      	str	r1, [r7, #64]	; 0x40
 80037b8:	4629      	mov	r1, r5
 80037ba:	eb63 0301 	sbc.w	r3, r3, r1
 80037be:	647b      	str	r3, [r7, #68]	; 0x44
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80037cc:	4649      	mov	r1, r9
 80037ce:	018b      	lsls	r3, r1, #6
 80037d0:	4641      	mov	r1, r8
 80037d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037d6:	4641      	mov	r1, r8
 80037d8:	018a      	lsls	r2, r1, #6
 80037da:	4641      	mov	r1, r8
 80037dc:	1a51      	subs	r1, r2, r1
 80037de:	63b9      	str	r1, [r7, #56]	; 0x38
 80037e0:	4649      	mov	r1, r9
 80037e2:	eb63 0301 	sbc.w	r3, r3, r1
 80037e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80037f4:	4649      	mov	r1, r9
 80037f6:	00cb      	lsls	r3, r1, #3
 80037f8:	4641      	mov	r1, r8
 80037fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037fe:	4641      	mov	r1, r8
 8003800:	00ca      	lsls	r2, r1, #3
 8003802:	4610      	mov	r0, r2
 8003804:	4619      	mov	r1, r3
 8003806:	4603      	mov	r3, r0
 8003808:	4622      	mov	r2, r4
 800380a:	189b      	adds	r3, r3, r2
 800380c:	633b      	str	r3, [r7, #48]	; 0x30
 800380e:	462b      	mov	r3, r5
 8003810:	460a      	mov	r2, r1
 8003812:	eb42 0303 	adc.w	r3, r2, r3
 8003816:	637b      	str	r3, [r7, #52]	; 0x34
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003824:	4629      	mov	r1, r5
 8003826:	024b      	lsls	r3, r1, #9
 8003828:	4621      	mov	r1, r4
 800382a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800382e:	4621      	mov	r1, r4
 8003830:	024a      	lsls	r2, r1, #9
 8003832:	4610      	mov	r0, r2
 8003834:	4619      	mov	r1, r3
 8003836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800383a:	2200      	movs	r2, #0
 800383c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003840:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003844:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003848:	f7fc fd3a 	bl	80002c0 <__aeabi_uldivmod>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4613      	mov	r3, r2
 8003852:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003856:	e067      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003858:	4b75      	ldr	r3, [pc, #468]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x354>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	099b      	lsrs	r3, r3, #6
 800385e:	2200      	movs	r2, #0
 8003860:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003864:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003868:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800386c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003870:	67bb      	str	r3, [r7, #120]	; 0x78
 8003872:	2300      	movs	r3, #0
 8003874:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003876:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800387a:	4622      	mov	r2, r4
 800387c:	462b      	mov	r3, r5
 800387e:	f04f 0000 	mov.w	r0, #0
 8003882:	f04f 0100 	mov.w	r1, #0
 8003886:	0159      	lsls	r1, r3, #5
 8003888:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800388c:	0150      	lsls	r0, r2, #5
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4621      	mov	r1, r4
 8003894:	1a51      	subs	r1, r2, r1
 8003896:	62b9      	str	r1, [r7, #40]	; 0x28
 8003898:	4629      	mov	r1, r5
 800389a:	eb63 0301 	sbc.w	r3, r3, r1
 800389e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80038ac:	4649      	mov	r1, r9
 80038ae:	018b      	lsls	r3, r1, #6
 80038b0:	4641      	mov	r1, r8
 80038b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038b6:	4641      	mov	r1, r8
 80038b8:	018a      	lsls	r2, r1, #6
 80038ba:	4641      	mov	r1, r8
 80038bc:	ebb2 0a01 	subs.w	sl, r2, r1
 80038c0:	4649      	mov	r1, r9
 80038c2:	eb63 0b01 	sbc.w	fp, r3, r1
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	f04f 0300 	mov.w	r3, #0
 80038ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038da:	4692      	mov	sl, r2
 80038dc:	469b      	mov	fp, r3
 80038de:	4623      	mov	r3, r4
 80038e0:	eb1a 0303 	adds.w	r3, sl, r3
 80038e4:	623b      	str	r3, [r7, #32]
 80038e6:	462b      	mov	r3, r5
 80038e8:	eb4b 0303 	adc.w	r3, fp, r3
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80038fa:	4629      	mov	r1, r5
 80038fc:	028b      	lsls	r3, r1, #10
 80038fe:	4621      	mov	r1, r4
 8003900:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003904:	4621      	mov	r1, r4
 8003906:	028a      	lsls	r2, r1, #10
 8003908:	4610      	mov	r0, r2
 800390a:	4619      	mov	r1, r3
 800390c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003910:	2200      	movs	r2, #0
 8003912:	673b      	str	r3, [r7, #112]	; 0x70
 8003914:	677a      	str	r2, [r7, #116]	; 0x74
 8003916:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800391a:	f7fc fcd1 	bl	80002c0 <__aeabi_uldivmod>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	4613      	mov	r3, r2
 8003924:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003928:	4b41      	ldr	r3, [pc, #260]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x354>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	0c1b      	lsrs	r3, r3, #16
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	3301      	adds	r3, #1
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800393a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800393e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003942:	fbb2 f3f3 	udiv	r3, r2, r3
 8003946:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800394a:	e0eb      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800394c:	4b38      	ldr	r3, [pc, #224]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x354>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003954:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003958:	4b35      	ldr	r3, [pc, #212]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x354>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d06b      	beq.n	8003a3c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003964:	4b32      	ldr	r3, [pc, #200]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	099b      	lsrs	r3, r3, #6
 800396a:	2200      	movs	r2, #0
 800396c:	66bb      	str	r3, [r7, #104]	; 0x68
 800396e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003970:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003976:	663b      	str	r3, [r7, #96]	; 0x60
 8003978:	2300      	movs	r3, #0
 800397a:	667b      	str	r3, [r7, #100]	; 0x64
 800397c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003980:	4622      	mov	r2, r4
 8003982:	462b      	mov	r3, r5
 8003984:	f04f 0000 	mov.w	r0, #0
 8003988:	f04f 0100 	mov.w	r1, #0
 800398c:	0159      	lsls	r1, r3, #5
 800398e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003992:	0150      	lsls	r0, r2, #5
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4621      	mov	r1, r4
 800399a:	1a51      	subs	r1, r2, r1
 800399c:	61b9      	str	r1, [r7, #24]
 800399e:	4629      	mov	r1, r5
 80039a0:	eb63 0301 	sbc.w	r3, r3, r1
 80039a4:	61fb      	str	r3, [r7, #28]
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80039b2:	4659      	mov	r1, fp
 80039b4:	018b      	lsls	r3, r1, #6
 80039b6:	4651      	mov	r1, sl
 80039b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039bc:	4651      	mov	r1, sl
 80039be:	018a      	lsls	r2, r1, #6
 80039c0:	4651      	mov	r1, sl
 80039c2:	ebb2 0801 	subs.w	r8, r2, r1
 80039c6:	4659      	mov	r1, fp
 80039c8:	eb63 0901 	sbc.w	r9, r3, r1
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039e0:	4690      	mov	r8, r2
 80039e2:	4699      	mov	r9, r3
 80039e4:	4623      	mov	r3, r4
 80039e6:	eb18 0303 	adds.w	r3, r8, r3
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	462b      	mov	r3, r5
 80039ee:	eb49 0303 	adc.w	r3, r9, r3
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	f04f 0200 	mov.w	r2, #0
 80039f8:	f04f 0300 	mov.w	r3, #0
 80039fc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003a00:	4629      	mov	r1, r5
 8003a02:	024b      	lsls	r3, r1, #9
 8003a04:	4621      	mov	r1, r4
 8003a06:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a0a:	4621      	mov	r1, r4
 8003a0c:	024a      	lsls	r2, r1, #9
 8003a0e:	4610      	mov	r0, r2
 8003a10:	4619      	mov	r1, r3
 8003a12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a16:	2200      	movs	r2, #0
 8003a18:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a1a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003a1c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a20:	f7fc fc4e 	bl	80002c0 <__aeabi_uldivmod>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4613      	mov	r3, r2
 8003a2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a2e:	e065      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0x420>
 8003a30:	40023800 	.word	0x40023800
 8003a34:	00f42400 	.word	0x00f42400
 8003a38:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a3c:	4b3d      	ldr	r3, [pc, #244]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x458>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	099b      	lsrs	r3, r3, #6
 8003a42:	2200      	movs	r2, #0
 8003a44:	4618      	mov	r0, r3
 8003a46:	4611      	mov	r1, r2
 8003a48:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a4c:	653b      	str	r3, [r7, #80]	; 0x50
 8003a4e:	2300      	movs	r3, #0
 8003a50:	657b      	str	r3, [r7, #84]	; 0x54
 8003a52:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003a56:	4642      	mov	r2, r8
 8003a58:	464b      	mov	r3, r9
 8003a5a:	f04f 0000 	mov.w	r0, #0
 8003a5e:	f04f 0100 	mov.w	r1, #0
 8003a62:	0159      	lsls	r1, r3, #5
 8003a64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a68:	0150      	lsls	r0, r2, #5
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4641      	mov	r1, r8
 8003a70:	1a51      	subs	r1, r2, r1
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	4649      	mov	r1, r9
 8003a76:	eb63 0301 	sbc.w	r3, r3, r1
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003a88:	4659      	mov	r1, fp
 8003a8a:	018b      	lsls	r3, r1, #6
 8003a8c:	4651      	mov	r1, sl
 8003a8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a92:	4651      	mov	r1, sl
 8003a94:	018a      	lsls	r2, r1, #6
 8003a96:	4651      	mov	r1, sl
 8003a98:	1a54      	subs	r4, r2, r1
 8003a9a:	4659      	mov	r1, fp
 8003a9c:	eb63 0501 	sbc.w	r5, r3, r1
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	00eb      	lsls	r3, r5, #3
 8003aaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aae:	00e2      	lsls	r2, r4, #3
 8003ab0:	4614      	mov	r4, r2
 8003ab2:	461d      	mov	r5, r3
 8003ab4:	4643      	mov	r3, r8
 8003ab6:	18e3      	adds	r3, r4, r3
 8003ab8:	603b      	str	r3, [r7, #0]
 8003aba:	464b      	mov	r3, r9
 8003abc:	eb45 0303 	adc.w	r3, r5, r3
 8003ac0:	607b      	str	r3, [r7, #4]
 8003ac2:	f04f 0200 	mov.w	r2, #0
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ace:	4629      	mov	r1, r5
 8003ad0:	028b      	lsls	r3, r1, #10
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ad8:	4621      	mov	r1, r4
 8003ada:	028a      	lsls	r2, r1, #10
 8003adc:	4610      	mov	r0, r2
 8003ade:	4619      	mov	r1, r3
 8003ae0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ae8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003aea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003aee:	f7fc fbe7 	bl	80002c0 <__aeabi_uldivmod>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4613      	mov	r3, r2
 8003af8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003afc:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x458>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	0f1b      	lsrs	r3, r3, #28
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003b0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b1a:	e003      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b1c:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003b1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	37b8      	adds	r7, #184	; 0xb8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b32:	bf00      	nop
 8003b34:	40023800 	.word	0x40023800
 8003b38:	00f42400 	.word	0x00f42400

08003b3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e28d      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 8083 	beq.w	8003c62 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b5c:	4b94      	ldr	r3, [pc, #592]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 030c 	and.w	r3, r3, #12
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d019      	beq.n	8003b9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b68:	4b91      	ldr	r3, [pc, #580]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d106      	bne.n	8003b82 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b74:	4b8e      	ldr	r3, [pc, #568]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b80:	d00c      	beq.n	8003b9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b82:	4b8b      	ldr	r3, [pc, #556]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b8a:	2b0c      	cmp	r3, #12
 8003b8c:	d112      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b8e:	4b88      	ldr	r3, [pc, #544]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b9a:	d10b      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b9c:	4b84      	ldr	r3, [pc, #528]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d05b      	beq.n	8003c60 <HAL_RCC_OscConfig+0x124>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d157      	bne.n	8003c60 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e25a      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bbc:	d106      	bne.n	8003bcc <HAL_RCC_OscConfig+0x90>
 8003bbe:	4b7c      	ldr	r3, [pc, #496]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a7b      	ldr	r2, [pc, #492]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	e01d      	b.n	8003c08 <HAL_RCC_OscConfig+0xcc>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bd4:	d10c      	bne.n	8003bf0 <HAL_RCC_OscConfig+0xb4>
 8003bd6:	4b76      	ldr	r3, [pc, #472]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a75      	ldr	r2, [pc, #468]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	4b73      	ldr	r3, [pc, #460]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a72      	ldr	r2, [pc, #456]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	e00b      	b.n	8003c08 <HAL_RCC_OscConfig+0xcc>
 8003bf0:	4b6f      	ldr	r3, [pc, #444]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a6e      	ldr	r2, [pc, #440]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	4b6c      	ldr	r3, [pc, #432]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a6b      	ldr	r2, [pc, #428]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d013      	beq.n	8003c38 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fd fd5e 	bl	80016d0 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c18:	f7fd fd5a 	bl	80016d0 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b64      	cmp	r3, #100	; 0x64
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e21f      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2a:	4b61      	ldr	r3, [pc, #388]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0xdc>
 8003c36:	e014      	b.n	8003c62 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c38:	f7fd fd4a 	bl	80016d0 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c40:	f7fd fd46 	bl	80016d0 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b64      	cmp	r3, #100	; 0x64
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e20b      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c52:	4b57      	ldr	r3, [pc, #348]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f0      	bne.n	8003c40 <HAL_RCC_OscConfig+0x104>
 8003c5e:	e000      	b.n	8003c62 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d06f      	beq.n	8003d4e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c6e:	4b50      	ldr	r3, [pc, #320]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 030c 	and.w	r3, r3, #12
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d017      	beq.n	8003caa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c7a:	4b4d      	ldr	r3, [pc, #308]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d105      	bne.n	8003c92 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c86:	4b4a      	ldr	r3, [pc, #296]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00b      	beq.n	8003caa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c92:	4b47      	ldr	r3, [pc, #284]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c9a:	2b0c      	cmp	r3, #12
 8003c9c:	d11c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c9e:	4b44      	ldr	r3, [pc, #272]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d116      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003caa:	4b41      	ldr	r3, [pc, #260]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x186>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d001      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e1d3      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc2:	4b3b      	ldr	r3, [pc, #236]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	4937      	ldr	r1, [pc, #220]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd6:	e03a      	b.n	8003d4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d020      	beq.n	8003d22 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce0:	4b34      	ldr	r3, [pc, #208]	; (8003db4 <HAL_RCC_OscConfig+0x278>)
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce6:	f7fd fcf3 	bl	80016d0 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cec:	e008      	b.n	8003d00 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cee:	f7fd fcef 	bl	80016d0 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e1b4      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d00:	4b2b      	ldr	r3, [pc, #172]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0f0      	beq.n	8003cee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0c:	4b28      	ldr	r3, [pc, #160]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4925      	ldr	r1, [pc, #148]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	600b      	str	r3, [r1, #0]
 8003d20:	e015      	b.n	8003d4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d22:	4b24      	ldr	r3, [pc, #144]	; (8003db4 <HAL_RCC_OscConfig+0x278>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d28:	f7fd fcd2 	bl	80016d0 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d30:	f7fd fcce 	bl	80016d0 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e193      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d42:	4b1b      	ldr	r3, [pc, #108]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d036      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d016      	beq.n	8003d90 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d62:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <HAL_RCC_OscConfig+0x27c>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d68:	f7fd fcb2 	bl	80016d0 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d70:	f7fd fcae 	bl	80016d0 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e173      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d82:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0x234>
 8003d8e:	e01b      	b.n	8003dc8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d90:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <HAL_RCC_OscConfig+0x27c>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d96:	f7fd fc9b 	bl	80016d0 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d9c:	e00e      	b.n	8003dbc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d9e:	f7fd fc97 	bl	80016d0 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d907      	bls.n	8003dbc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e15c      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
 8003db0:	40023800 	.word	0x40023800
 8003db4:	42470000 	.word	0x42470000
 8003db8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dbc:	4b8a      	ldr	r3, [pc, #552]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1ea      	bne.n	8003d9e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 8097 	beq.w	8003f04 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dda:	4b83      	ldr	r3, [pc, #524]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10f      	bne.n	8003e06 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de6:	2300      	movs	r3, #0
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	4b7f      	ldr	r3, [pc, #508]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	4a7e      	ldr	r2, [pc, #504]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df4:	6413      	str	r3, [r2, #64]	; 0x40
 8003df6:	4b7c      	ldr	r3, [pc, #496]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfe:	60bb      	str	r3, [r7, #8]
 8003e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e02:	2301      	movs	r3, #1
 8003e04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e06:	4b79      	ldr	r3, [pc, #484]	; (8003fec <HAL_RCC_OscConfig+0x4b0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d118      	bne.n	8003e44 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e12:	4b76      	ldr	r3, [pc, #472]	; (8003fec <HAL_RCC_OscConfig+0x4b0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a75      	ldr	r2, [pc, #468]	; (8003fec <HAL_RCC_OscConfig+0x4b0>)
 8003e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e1e:	f7fd fc57 	bl	80016d0 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e26:	f7fd fc53 	bl	80016d0 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e118      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e38:	4b6c      	ldr	r3, [pc, #432]	; (8003fec <HAL_RCC_OscConfig+0x4b0>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d106      	bne.n	8003e5a <HAL_RCC_OscConfig+0x31e>
 8003e4c:	4b66      	ldr	r3, [pc, #408]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e50:	4a65      	ldr	r2, [pc, #404]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	6713      	str	r3, [r2, #112]	; 0x70
 8003e58:	e01c      	b.n	8003e94 <HAL_RCC_OscConfig+0x358>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	2b05      	cmp	r3, #5
 8003e60:	d10c      	bne.n	8003e7c <HAL_RCC_OscConfig+0x340>
 8003e62:	4b61      	ldr	r3, [pc, #388]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e66:	4a60      	ldr	r2, [pc, #384]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003e68:	f043 0304 	orr.w	r3, r3, #4
 8003e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e6e:	4b5e      	ldr	r3, [pc, #376]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e72:	4a5d      	ldr	r2, [pc, #372]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003e74:	f043 0301 	orr.w	r3, r3, #1
 8003e78:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7a:	e00b      	b.n	8003e94 <HAL_RCC_OscConfig+0x358>
 8003e7c:	4b5a      	ldr	r3, [pc, #360]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e80:	4a59      	ldr	r2, [pc, #356]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003e82:	f023 0301 	bic.w	r3, r3, #1
 8003e86:	6713      	str	r3, [r2, #112]	; 0x70
 8003e88:	4b57      	ldr	r3, [pc, #348]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8c:	4a56      	ldr	r2, [pc, #344]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003e8e:	f023 0304 	bic.w	r3, r3, #4
 8003e92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d015      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9c:	f7fd fc18 	bl	80016d0 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea2:	e00a      	b.n	8003eba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea4:	f7fd fc14 	bl	80016d0 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e0d7      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eba:	4b4b      	ldr	r3, [pc, #300]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0ee      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x368>
 8003ec6:	e014      	b.n	8003ef2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec8:	f7fd fc02 	bl	80016d0 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ece:	e00a      	b.n	8003ee6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed0:	f7fd fbfe 	bl	80016d0 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e0c1      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee6:	4b40      	ldr	r3, [pc, #256]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1ee      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ef2:	7dfb      	ldrb	r3, [r7, #23]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d105      	bne.n	8003f04 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef8:	4b3b      	ldr	r3, [pc, #236]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	4a3a      	ldr	r2, [pc, #232]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 80ad 	beq.w	8004068 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f0e:	4b36      	ldr	r3, [pc, #216]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 030c 	and.w	r3, r3, #12
 8003f16:	2b08      	cmp	r3, #8
 8003f18:	d060      	beq.n	8003fdc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d145      	bne.n	8003fae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f22:	4b33      	ldr	r3, [pc, #204]	; (8003ff0 <HAL_RCC_OscConfig+0x4b4>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7fd fbd2 	bl	80016d0 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f30:	f7fd fbce 	bl	80016d0 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e093      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f42:	4b29      	ldr	r3, [pc, #164]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f0      	bne.n	8003f30 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69da      	ldr	r2, [r3, #28]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	019b      	lsls	r3, r3, #6
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	085b      	lsrs	r3, r3, #1
 8003f66:	3b01      	subs	r3, #1
 8003f68:	041b      	lsls	r3, r3, #16
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	061b      	lsls	r3, r3, #24
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	071b      	lsls	r3, r3, #28
 8003f7a:	491b      	ldr	r1, [pc, #108]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f80:	4b1b      	ldr	r3, [pc, #108]	; (8003ff0 <HAL_RCC_OscConfig+0x4b4>)
 8003f82:	2201      	movs	r2, #1
 8003f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f86:	f7fd fba3 	bl	80016d0 <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8c:	e008      	b.n	8003fa0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f8e:	f7fd fb9f 	bl	80016d0 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e064      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa0:	4b11      	ldr	r3, [pc, #68]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0f0      	beq.n	8003f8e <HAL_RCC_OscConfig+0x452>
 8003fac:	e05c      	b.n	8004068 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fae:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <HAL_RCC_OscConfig+0x4b4>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb4:	f7fd fb8c 	bl	80016d0 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fbc:	f7fd fb88 	bl	80016d0 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e04d      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fce:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f0      	bne.n	8003fbc <HAL_RCC_OscConfig+0x480>
 8003fda:	e045      	b.n	8004068 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d107      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e040      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	40007000 	.word	0x40007000
 8003ff0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ff4:	4b1f      	ldr	r3, [pc, #124]	; (8004074 <HAL_RCC_OscConfig+0x538>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d030      	beq.n	8004064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800400c:	429a      	cmp	r2, r3
 800400e:	d129      	bne.n	8004064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401a:	429a      	cmp	r2, r3
 800401c:	d122      	bne.n	8004064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004024:	4013      	ands	r3, r2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800402a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800402c:	4293      	cmp	r3, r2
 800402e:	d119      	bne.n	8004064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	085b      	lsrs	r3, r3, #1
 800403c:	3b01      	subs	r3, #1
 800403e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004040:	429a      	cmp	r2, r3
 8004042:	d10f      	bne.n	8004064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004050:	429a      	cmp	r2, r3
 8004052:	d107      	bne.n	8004064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004060:	429a      	cmp	r2, r3
 8004062:	d001      	beq.n	8004068 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e000      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40023800 	.word	0x40023800

08004078 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e066      	b.n	800415c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	7f5b      	ldrb	r3, [r3, #29]
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d105      	bne.n	80040a4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7fd f88c 	bl	80011bc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	22ca      	movs	r2, #202	; 0xca
 80040b0:	625a      	str	r2, [r3, #36]	; 0x24
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2253      	movs	r2, #83	; 0x53
 80040b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f998 	bl	80043f0 <RTC_EnterInitMode>
 80040c0:	4603      	mov	r3, r0
 80040c2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d12c      	bne.n	8004124 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6812      	ldr	r2, [r2, #0]
 80040d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80040d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040dc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6899      	ldr	r1, [r3, #8]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	68d2      	ldr	r2, [r2, #12]
 8004104:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6919      	ldr	r1, [r3, #16]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	041a      	lsls	r2, r3, #16
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f99f 	bl	800445e <RTC_ExitInitMode>
 8004120:	4603      	mov	r3, r0
 8004122:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d113      	bne.n	8004152 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004138:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699a      	ldr	r2, [r3, #24]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	22ff      	movs	r2, #255	; 0xff
 8004158:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800415a:	7bfb      	ldrb	r3, [r7, #15]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004164:	b590      	push	{r4, r7, lr}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	7f1b      	ldrb	r3, [r3, #28]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_RTC_SetTime+0x1c>
 800417c:	2302      	movs	r3, #2
 800417e:	e087      	b.n	8004290 <HAL_RTC_SetTime+0x12c>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2202      	movs	r2, #2
 800418a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d126      	bne.n	80041e0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	d102      	bne.n	80041a6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2200      	movs	r2, #0
 80041a4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 f97c 	bl	80044a8 <RTC_ByteToBcd2>
 80041b0:	4603      	mov	r3, r0
 80041b2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	785b      	ldrb	r3, [r3, #1]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 f975 	bl	80044a8 <RTC_ByteToBcd2>
 80041be:	4603      	mov	r3, r0
 80041c0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80041c2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	789b      	ldrb	r3, [r3, #2]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 f96d 	bl	80044a8 <RTC_ByteToBcd2>
 80041ce:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80041d0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	78db      	ldrb	r3, [r3, #3]
 80041d8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80041da:	4313      	orrs	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	e018      	b.n	8004212 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d102      	bne.n	80041f4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2200      	movs	r2, #0
 80041f2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	785b      	ldrb	r3, [r3, #1]
 80041fe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004200:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004206:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	78db      	ldrb	r3, [r3, #3]
 800420c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800420e:	4313      	orrs	r3, r2
 8004210:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	22ca      	movs	r2, #202	; 0xca
 8004218:	625a      	str	r2, [r3, #36]	; 0x24
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2253      	movs	r2, #83	; 0x53
 8004220:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 f8e4 	bl	80043f0 <RTC_EnterInitMode>
 8004228:	4603      	mov	r3, r0
 800422a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800422c:	7cfb      	ldrb	r3, [r7, #19]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d120      	bne.n	8004274 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800423c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004240:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004250:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6899      	ldr	r1, [r3, #8]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	431a      	orrs	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 f8f7 	bl	800445e <RTC_ExitInitMode>
 8004270:	4603      	mov	r3, r0
 8004272:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004274:	7cfb      	ldrb	r3, [r7, #19]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d102      	bne.n	8004280 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2201      	movs	r2, #1
 800427e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	22ff      	movs	r2, #255	; 0xff
 8004286:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	771a      	strb	r2, [r3, #28]

  return status;
 800428e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004290:	4618      	mov	r0, r3
 8004292:	371c      	adds	r7, #28
 8004294:	46bd      	mov	sp, r7
 8004296:	bd90      	pop	{r4, r7, pc}

08004298 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004298:	b590      	push	{r4, r7, lr}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	7f1b      	ldrb	r3, [r3, #28]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <HAL_RTC_SetDate+0x1c>
 80042b0:	2302      	movs	r3, #2
 80042b2:	e071      	b.n	8004398 <HAL_RTC_SetDate+0x100>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2201      	movs	r2, #1
 80042b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2202      	movs	r2, #2
 80042be:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10e      	bne.n	80042e4 <HAL_RTC_SetDate+0x4c>
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	785b      	ldrb	r3, [r3, #1]
 80042ca:	f003 0310 	and.w	r3, r3, #16
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d008      	beq.n	80042e4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	785b      	ldrb	r3, [r3, #1]
 80042d6:	f023 0310 	bic.w	r3, r3, #16
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	330a      	adds	r3, #10
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d11c      	bne.n	8004324 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	78db      	ldrb	r3, [r3, #3]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 f8da 	bl	80044a8 <RTC_ByteToBcd2>
 80042f4:	4603      	mov	r3, r0
 80042f6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	785b      	ldrb	r3, [r3, #1]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 f8d3 	bl	80044a8 <RTC_ByteToBcd2>
 8004302:	4603      	mov	r3, r0
 8004304:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004306:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	789b      	ldrb	r3, [r3, #2]
 800430c:	4618      	mov	r0, r3
 800430e:	f000 f8cb 	bl	80044a8 <RTC_ByteToBcd2>
 8004312:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004314:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800431e:	4313      	orrs	r3, r2
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	e00e      	b.n	8004342 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	78db      	ldrb	r3, [r3, #3]
 8004328:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	785b      	ldrb	r3, [r3, #1]
 800432e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004330:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004336:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800433e:	4313      	orrs	r3, r2
 8004340:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	22ca      	movs	r2, #202	; 0xca
 8004348:	625a      	str	r2, [r3, #36]	; 0x24
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2253      	movs	r2, #83	; 0x53
 8004350:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 f84c 	bl	80043f0 <RTC_EnterInitMode>
 8004358:	4603      	mov	r3, r0
 800435a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800435c:	7cfb      	ldrb	r3, [r7, #19]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10c      	bne.n	800437c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800436c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004370:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 f873 	bl	800445e <RTC_ExitInitMode>
 8004378:	4603      	mov	r3, r0
 800437a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800437c:	7cfb      	ldrb	r3, [r7, #19]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d102      	bne.n	8004388 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2201      	movs	r2, #1
 8004386:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	22ff      	movs	r2, #255	; 0xff
 800438e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	771a      	strb	r2, [r3, #28]

  return status;
 8004396:	7cfb      	ldrb	r3, [r7, #19]
}
 8004398:	4618      	mov	r0, r3
 800439a:	371c      	adds	r7, #28
 800439c:	46bd      	mov	sp, r7
 800439e:	bd90      	pop	{r4, r7, pc}

080043a0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043ba:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043bc:	f7fd f988 	bl	80016d0 <HAL_GetTick>
 80043c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80043c2:	e009      	b.n	80043d8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80043c4:	f7fd f984 	bl	80016d0 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043d2:	d901      	bls.n	80043d8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e007      	b.n	80043e8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f003 0320 	and.w	r3, r3, #32
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0ee      	beq.n	80043c4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80043fc:	2300      	movs	r3, #0
 80043fe:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440a:	2b00      	cmp	r3, #0
 800440c:	d122      	bne.n	8004454 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800441c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800441e:	f7fd f957 	bl	80016d0 <HAL_GetTick>
 8004422:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004424:	e00c      	b.n	8004440 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004426:	f7fd f953 	bl	80016d0 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004434:	d904      	bls.n	8004440 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2204      	movs	r2, #4
 800443a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444a:	2b00      	cmp	r3, #0
 800444c:	d102      	bne.n	8004454 <RTC_EnterInitMode+0x64>
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d1e8      	bne.n	8004426 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004454:	7bfb      	ldrb	r3, [r7, #15]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b084      	sub	sp, #16
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004478:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10a      	bne.n	800449e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7ff ff89 	bl	80043a0 <HAL_RTC_WaitForSynchro>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d004      	beq.n	800449e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2204      	movs	r2, #4
 8004498:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800449e:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	4603      	mov	r3, r0
 80044b0:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80044b6:	e005      	b.n	80044c4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	3301      	adds	r3, #1
 80044bc:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	3b0a      	subs	r3, #10
 80044c2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80044c4:	79fb      	ldrb	r3, [r7, #7]
 80044c6:	2b09      	cmp	r3, #9
 80044c8:	d8f6      	bhi.n	80044b8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	79fb      	ldrb	r3, [r7, #7]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	b2db      	uxtb	r3, r3
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b082      	sub	sp, #8
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e022      	b.n	800453a <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d105      	bne.n	800450c <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7fc fe82 	bl	8001210 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2203      	movs	r2, #3
 8004510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f815 	bl	8004544 <HAL_SD_InitCard>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e00a      	b.n	800453a <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004544:	b5b0      	push	{r4, r5, r7, lr}
 8004546:	b08e      	sub	sp, #56	; 0x38
 8004548:	af04      	add	r7, sp, #16
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800454c:	2300      	movs	r3, #0
 800454e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004554:	2300      	movs	r3, #0
 8004556:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800455c:	2300      	movs	r3, #0
 800455e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004560:	2376      	movs	r3, #118	; 0x76
 8004562:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681d      	ldr	r5, [r3, #0]
 8004568:	466c      	mov	r4, sp
 800456a:	f107 0314 	add.w	r3, r7, #20
 800456e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004572:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004576:	f107 0308 	add.w	r3, r7, #8
 800457a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800457c:	4628      	mov	r0, r5
 800457e:	f001 fc8f 	bl	8005ea0 <SDIO_Init>
 8004582:	4603      	mov	r3, r0
 8004584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e04f      	b.n	8004634 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004594:	4b29      	ldr	r3, [pc, #164]	; (800463c <HAL_SD_InitCard+0xf8>)
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f001 fcc7 	bl	8005f32 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80045a4:	4b25      	ldr	r3, [pc, #148]	; (800463c <HAL_SD_InitCard+0xf8>)
 80045a6:	2201      	movs	r2, #1
 80045a8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80045aa:	2002      	movs	r0, #2
 80045ac:	f7fd f89c 	bl	80016e8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f001 f857 	bl	8005664 <SD_PowerON>
 80045b6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00b      	beq.n	80045d6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	431a      	orrs	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e02e      	b.n	8004634 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 ff76 	bl	80054c8 <SD_InitCard>
 80045dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00b      	beq.n	80045fc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e01b      	b.n	8004634 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004604:	4618      	mov	r0, r3
 8004606:	f001 fd26 	bl	8006056 <SDMMC_CmdBlockLength>
 800460a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00f      	beq.n	8004632 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a0a      	ldr	r2, [pc, #40]	; (8004640 <HAL_SD_InitCard+0xfc>)
 8004618:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	431a      	orrs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3728      	adds	r7, #40	; 0x28
 8004638:	46bd      	mov	sp, r7
 800463a:	bdb0      	pop	{r4, r5, r7, pc}
 800463c:	422580a0 	.word	0x422580a0
 8004640:	004005ff 	.word	0x004005ff

08004644 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b092      	sub	sp, #72	; 0x48
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
 8004650:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004652:	f7fd f83d 	bl	80016d0 <HAL_GetTick>
 8004656:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d107      	bne.n	8004676 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e1bd      	b.n	80049f2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b01      	cmp	r3, #1
 8004680:	f040 81b0 	bne.w	80049e4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800468a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	441a      	add	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004694:	429a      	cmp	r2, r3
 8004696:	d907      	bls.n	80046a8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e1a4      	b.n	80049f2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2203      	movs	r2, #3
 80046ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2200      	movs	r2, #0
 80046b6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d002      	beq.n	80046c6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80046c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c2:	025b      	lsls	r3, r3, #9
 80046c4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80046c6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ca:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	025b      	lsls	r3, r3, #9
 80046d0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80046d2:	2390      	movs	r3, #144	; 0x90
 80046d4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80046d6:	2302      	movs	r3, #2
 80046d8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80046da:	2300      	movs	r3, #0
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80046de:	2301      	movs	r3, #1
 80046e0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f107 0214 	add.w	r2, r7, #20
 80046ea:	4611      	mov	r1, r2
 80046ec:	4618      	mov	r0, r3
 80046ee:	f001 fc86 	bl	8005ffe <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d90a      	bls.n	800470e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2202      	movs	r2, #2
 80046fc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004704:	4618      	mov	r0, r3
 8004706:	f001 fcea 	bl	80060de <SDMMC_CmdReadMultiBlock>
 800470a:	6478      	str	r0, [r7, #68]	; 0x44
 800470c:	e009      	b.n	8004722 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2201      	movs	r2, #1
 8004712:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800471a:	4618      	mov	r0, r3
 800471c:	f001 fcbd 	bl	800609a <SDMMC_CmdReadSingleBlock>
 8004720:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004724:	2b00      	cmp	r3, #0
 8004726:	d012      	beq.n	800474e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a7a      	ldr	r2, [pc, #488]	; (8004918 <HAL_SD_ReadBlocks+0x2d4>)
 800472e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004736:	431a      	orrs	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e151      	b.n	80049f2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004752:	e061      	b.n	8004818 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d03c      	beq.n	80047dc <HAL_SD_ReadBlocks+0x198>
 8004762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004764:	2b00      	cmp	r3, #0
 8004766:	d039      	beq.n	80047dc <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004768:	2300      	movs	r3, #0
 800476a:	643b      	str	r3, [r7, #64]	; 0x40
 800476c:	e033      	b.n	80047d6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f001 fbbf 	bl	8005ef6 <SDIO_ReadFIFO>
 8004778:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800477a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477c:	b2da      	uxtb	r2, r3
 800477e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004780:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004784:	3301      	adds	r3, #1
 8004786:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478a:	3b01      	subs	r3, #1
 800478c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800478e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004790:	0a1b      	lsrs	r3, r3, #8
 8004792:	b2da      	uxtb	r2, r3
 8004794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004796:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479a:	3301      	adds	r3, #1
 800479c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800479e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a0:	3b01      	subs	r3, #1
 80047a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80047a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a6:	0c1b      	lsrs	r3, r3, #16
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ac:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80047ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b0:	3301      	adds	r3, #1
 80047b2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80047b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b6:	3b01      	subs	r3, #1
 80047b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80047ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047bc:	0e1b      	lsrs	r3, r3, #24
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80047c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c6:	3301      	adds	r3, #1
 80047c8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80047ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047cc:	3b01      	subs	r3, #1
 80047ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80047d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d2:	3301      	adds	r3, #1
 80047d4:	643b      	str	r3, [r7, #64]	; 0x40
 80047d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d8:	2b07      	cmp	r3, #7
 80047da:	d9c8      	bls.n	800476e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80047dc:	f7fc ff78 	bl	80016d0 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d902      	bls.n	80047f2 <HAL_SD_ReadBlocks+0x1ae>
 80047ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d112      	bne.n	8004818 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a48      	ldr	r2, [pc, #288]	; (8004918 <HAL_SD_ReadBlocks+0x2d4>)
 80047f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e0ec      	b.n	80049f2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8004822:	2b00      	cmp	r3, #0
 8004824:	d096      	beq.n	8004754 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004830:	2b00      	cmp	r3, #0
 8004832:	d022      	beq.n	800487a <HAL_SD_ReadBlocks+0x236>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d91f      	bls.n	800487a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483e:	2b03      	cmp	r3, #3
 8004840:	d01b      	beq.n	800487a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4618      	mov	r0, r3
 8004848:	f001 fcb0 	bl	80061ac <SDMMC_CmdStopTransfer>
 800484c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800484e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004850:	2b00      	cmp	r3, #0
 8004852:	d012      	beq.n	800487a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a2f      	ldr	r2, [pc, #188]	; (8004918 <HAL_SD_ReadBlocks+0x2d4>)
 800485a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004862:	431a      	orrs	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e0bb      	b.n	80049f2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004880:	f003 0308 	and.w	r3, r3, #8
 8004884:	2b00      	cmp	r3, #0
 8004886:	d012      	beq.n	80048ae <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a22      	ldr	r2, [pc, #136]	; (8004918 <HAL_SD_ReadBlocks+0x2d4>)
 800488e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	f043 0208 	orr.w	r2, r3, #8
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e0a1      	b.n	80049f2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d012      	beq.n	80048e2 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a15      	ldr	r2, [pc, #84]	; (8004918 <HAL_SD_ReadBlocks+0x2d4>)
 80048c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c8:	f043 0202 	orr.w	r2, r3, #2
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e087      	b.n	80049f2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e8:	f003 0320 	and.w	r3, r3, #32
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d064      	beq.n	80049ba <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a08      	ldr	r2, [pc, #32]	; (8004918 <HAL_SD_ReadBlocks+0x2d4>)
 80048f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	f043 0220 	orr.w	r2, r3, #32
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e06d      	b.n	80049f2 <HAL_SD_ReadBlocks+0x3ae>
 8004916:	bf00      	nop
 8004918:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f001 fae8 	bl	8005ef6 <SDIO_ReadFIFO>
 8004926:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8004928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492a:	b2da      	uxtb	r2, r3
 800492c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800492e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004932:	3301      	adds	r3, #1
 8004934:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004938:	3b01      	subs	r3, #1
 800493a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800493c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493e:	0a1b      	lsrs	r3, r3, #8
 8004940:	b2da      	uxtb	r2, r3
 8004942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004944:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004948:	3301      	adds	r3, #1
 800494a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800494c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800494e:	3b01      	subs	r3, #1
 8004950:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004954:	0c1b      	lsrs	r3, r3, #16
 8004956:	b2da      	uxtb	r2, r3
 8004958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800495c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495e:	3301      	adds	r3, #1
 8004960:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004964:	3b01      	subs	r3, #1
 8004966:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496a:	0e1b      	lsrs	r3, r3, #24
 800496c:	b2da      	uxtb	r2, r3
 800496e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004970:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004974:	3301      	adds	r3, #1
 8004976:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800497a:	3b01      	subs	r3, #1
 800497c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800497e:	f7fc fea7 	bl	80016d0 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800498a:	429a      	cmp	r2, r3
 800498c:	d902      	bls.n	8004994 <HAL_SD_ReadBlocks+0x350>
 800498e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004990:	2b00      	cmp	r3, #0
 8004992:	d112      	bne.n	80049ba <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a18      	ldr	r2, [pc, #96]	; (80049fc <HAL_SD_ReadBlocks+0x3b8>)
 800499a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e01b      	b.n	80049f2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <HAL_SD_ReadBlocks+0x38a>
 80049c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1a6      	bne.n	800491c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f240 523a 	movw	r2, #1338	; 0x53a
 80049d6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80049e0:	2300      	movs	r3, #0
 80049e2:	e006      	b.n	80049f2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
  }
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3748      	adds	r7, #72	; 0x48
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	004005ff 	.word	0x004005ff

08004a00 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b092      	sub	sp, #72	; 0x48
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004a0e:	f7fc fe5f 	bl	80016d0 <HAL_GetTick>
 8004a12:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d107      	bne.n	8004a32 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a26:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e165      	b.n	8004cfe <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	f040 8158 	bne.w	8004cf0 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004a46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	441a      	add	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d907      	bls.n	8004a64 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a58:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e14c      	b.n	8004cfe <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2203      	movs	r2, #3
 8004a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2200      	movs	r2, #0
 8004a72:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d002      	beq.n	8004a82 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8004a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7e:	025b      	lsls	r3, r3, #9
 8004a80:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004a82:	f04f 33ff 	mov.w	r3, #4294967295
 8004a86:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	025b      	lsls	r3, r3, #9
 8004a8c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004a8e:	2390      	movs	r3, #144	; 0x90
 8004a90:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004a92:	2300      	movs	r3, #0
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f107 0218 	add.w	r2, r7, #24
 8004aa6:	4611      	mov	r1, r2
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f001 faa8 	bl	8005ffe <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d90a      	bls.n	8004aca <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f001 fb50 	bl	8006166 <SDMMC_CmdWriteMultiBlock>
 8004ac6:	6478      	str	r0, [r7, #68]	; 0x44
 8004ac8:	e009      	b.n	8004ade <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2210      	movs	r2, #16
 8004ace:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f001 fb23 	bl	8006122 <SDMMC_CmdWriteSingleBlock>
 8004adc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d012      	beq.n	8004b0a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a87      	ldr	r2, [pc, #540]	; (8004d08 <HAL_SD_WriteBlocks+0x308>)
 8004aea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004af2:	431a      	orrs	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e0f9      	b.n	8004cfe <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004b0e:	e065      	b.n	8004bdc <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d040      	beq.n	8004ba0 <HAL_SD_WriteBlocks+0x1a0>
 8004b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d03d      	beq.n	8004ba0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004b24:	2300      	movs	r3, #0
 8004b26:	643b      	str	r3, [r7, #64]	; 0x40
 8004b28:	e037      	b.n	8004b9a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8004b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b32:	3301      	adds	r3, #1
 8004b34:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8004b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	021a      	lsls	r2, r3, #8
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b50:	3b01      	subs	r3, #1
 8004b52:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	041a      	lsls	r2, r3, #16
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b62:	3301      	adds	r3, #1
 8004b64:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	061a      	lsls	r2, r3, #24
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b80:	3b01      	subs	r3, #1
 8004b82:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f107 0214 	add.w	r2, r7, #20
 8004b8c:	4611      	mov	r1, r2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f001 f9be 	bl	8005f10 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b96:	3301      	adds	r3, #1
 8004b98:	643b      	str	r3, [r7, #64]	; 0x40
 8004b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b9c:	2b07      	cmp	r3, #7
 8004b9e:	d9c4      	bls.n	8004b2a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004ba0:	f7fc fd96 	bl	80016d0 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d902      	bls.n	8004bb6 <HAL_SD_WriteBlocks+0x1b6>
 8004bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d112      	bne.n	8004bdc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a53      	ldr	r2, [pc, #332]	; (8004d08 <HAL_SD_WriteBlocks+0x308>)
 8004bbc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e090      	b.n	8004cfe <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be2:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d092      	beq.n	8004b10 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d022      	beq.n	8004c3e <HAL_SD_WriteBlocks+0x23e>
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d91f      	bls.n	8004c3e <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	d01b      	beq.n	8004c3e <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f001 face 	bl	80061ac <SDMMC_CmdStopTransfer>
 8004c10:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004c12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d012      	beq.n	8004c3e <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a3a      	ldr	r2, [pc, #232]	; (8004d08 <HAL_SD_WriteBlocks+0x308>)
 8004c1e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c26:	431a      	orrs	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e05f      	b.n	8004cfe <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c44:	f003 0308 	and.w	r3, r3, #8
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d012      	beq.n	8004c72 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a2d      	ldr	r2, [pc, #180]	; (8004d08 <HAL_SD_WriteBlocks+0x308>)
 8004c52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	f043 0208 	orr.w	r2, r3, #8
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e045      	b.n	8004cfe <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d012      	beq.n	8004ca6 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a20      	ldr	r2, [pc, #128]	; (8004d08 <HAL_SD_WriteBlocks+0x308>)
 8004c86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	f043 0202 	orr.w	r2, r3, #2
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e02b      	b.n	8004cfe <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cac:	f003 0310 	and.w	r3, r3, #16
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d012      	beq.n	8004cda <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a13      	ldr	r2, [pc, #76]	; (8004d08 <HAL_SD_WriteBlocks+0x308>)
 8004cba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc0:	f043 0210 	orr.w	r2, r3, #16
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e011      	b.n	8004cfe <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f240 523a 	movw	r2, #1338	; 0x53a
 8004ce2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004cec:	2300      	movs	r3, #0
 8004cee:	e006      	b.n	8004cfe <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
  }
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3748      	adds	r7, #72	; 0x48
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	004005ff 	.word	0x004005ff

08004d0c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d18:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d008      	beq.n	8004d3a <HAL_SD_IRQHandler+0x2e>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fd4c 	bl	80057d0 <SD_Read_IT>
 8004d38:	e155      	b.n	8004fe6 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 808f 	beq.w	8004e68 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d52:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6812      	ldr	r2, [r2, #0]
 8004d5e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8004d62:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004d66:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0201 	bic.w	r2, r2, #1
 8004d76:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d039      	beq.n	8004df6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d104      	bne.n	8004d96 <HAL_SD_IRQHandler+0x8a>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d011      	beq.n	8004dba <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f001 fa06 	bl	80061ac <SDMMC_CmdStopTransfer>
 8004da0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d008      	beq.n	8004dba <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f91f 	bl	8004ff8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f240 523a 	movw	r2, #1338	; 0x53a
 8004dc2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d104      	bne.n	8004de6 <HAL_SD_IRQHandler+0xda>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f001 fe2c 	bl	8006a44 <HAL_SD_RxCpltCallback>
 8004dec:	e0fb      	b.n	8004fe6 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f001 fe1e 	bl	8006a30 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004df4:	e0f7      	b.n	8004fe6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 80f2 	beq.w	8004fe6 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f003 0320 	and.w	r3, r3, #32
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d011      	beq.n	8004e30 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f001 f9cb 	bl	80061ac <SDMMC_CmdStopTransfer>
 8004e16:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d008      	beq.n	8004e30 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	431a      	orrs	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f8e4 	bl	8004ff8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f040 80d5 	bne.w	8004fe6 <HAL_SD_IRQHandler+0x2da>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f040 80cf 	bne.w	8004fe6 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0208 	bic.w	r2, r2, #8
 8004e56:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f001 fde5 	bl	8006a30 <HAL_SD_TxCpltCallback>
}
 8004e66:	e0be      	b.n	8004fe6 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d008      	beq.n	8004e88 <HAL_SD_IRQHandler+0x17c>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f003 0308 	and.w	r3, r3, #8
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 fcf6 	bl	8005872 <SD_Write_IT>
 8004e86:	e0ae      	b.n	8004fe6 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 80a7 	beq.w	8004fe6 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d005      	beq.n	8004eb2 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eaa:	f043 0202 	orr.w	r2, r3, #2
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb8:	f003 0308 	and.w	r3, r3, #8
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d005      	beq.n	8004ecc <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec4:	f043 0208 	orr.w	r2, r3, #8
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed2:	f003 0320 	and.w	r3, r3, #32
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d005      	beq.n	8004ee6 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ede:	f043 0220 	orr.w	r2, r3, #32
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d005      	beq.n	8004f00 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef8:	f043 0210 	orr.w	r2, r3, #16
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f240 523a 	movw	r2, #1338	; 0x53a
 8004f08:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004f18:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f001 f944 	bl	80061ac <SDMMC_CmdStopTransfer>
 8004f24:	4602      	mov	r2, r0
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f003 0308 	and.w	r3, r3, #8
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f855 	bl	8004ff8 <HAL_SD_ErrorCallback>
}
 8004f4e:	e04a      	b.n	8004fe6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d045      	beq.n	8004fe6 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f003 0310 	and.w	r3, r3, #16
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d104      	bne.n	8004f6e <HAL_SD_IRQHandler+0x262>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f003 0320 	and.w	r3, r3, #32
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d011      	beq.n	8004f92 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f72:	4a1f      	ldr	r2, [pc, #124]	; (8004ff0 <HAL_SD_IRQHandler+0x2e4>)
 8004f74:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7fd fac8 	bl	8002510 <HAL_DMA_Abort_IT>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d02f      	beq.n	8004fe6 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fa2e 	bl	80053ec <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004f90:	e029      	b.n	8004fe6 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d104      	bne.n	8004fa6 <HAL_SD_IRQHandler+0x29a>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d011      	beq.n	8004fca <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	4a12      	ldr	r2, [pc, #72]	; (8004ff4 <HAL_SD_IRQHandler+0x2e8>)
 8004fac:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fd faac 	bl	8002510 <HAL_DMA_Abort_IT>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d013      	beq.n	8004fe6 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 fa49 	bl	800545a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004fc8:	e00d      	b.n	8004fe6 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f001 fd1c 	bl	8006a1c <HAL_SD_AbortCallback>
}
 8004fe4:	e7ff      	b.n	8004fe6 <HAL_SD_IRQHandler+0x2da>
 8004fe6:	bf00      	nop
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	080053ed 	.word	0x080053ed
 8004ff4:	0800545b 	.word	0x0800545b

08004ff8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800501a:	0f9b      	lsrs	r3, r3, #30
 800501c:	b2da      	uxtb	r2, r3
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005026:	0e9b      	lsrs	r3, r3, #26
 8005028:	b2db      	uxtb	r3, r3
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	b2da      	uxtb	r2, r3
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005038:	0e1b      	lsrs	r3, r3, #24
 800503a:	b2db      	uxtb	r3, r3
 800503c:	f003 0303 	and.w	r3, r3, #3
 8005040:	b2da      	uxtb	r2, r3
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800504a:	0c1b      	lsrs	r3, r3, #16
 800504c:	b2da      	uxtb	r2, r3
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005056:	0a1b      	lsrs	r3, r3, #8
 8005058:	b2da      	uxtb	r2, r3
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005062:	b2da      	uxtb	r2, r3
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800506c:	0d1b      	lsrs	r3, r3, #20
 800506e:	b29a      	uxth	r2, r3
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005078:	0c1b      	lsrs	r3, r3, #16
 800507a:	b2db      	uxtb	r3, r3
 800507c:	f003 030f 	and.w	r3, r3, #15
 8005080:	b2da      	uxtb	r2, r3
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800508a:	0bdb      	lsrs	r3, r3, #15
 800508c:	b2db      	uxtb	r3, r3
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	b2da      	uxtb	r2, r3
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800509c:	0b9b      	lsrs	r3, r3, #14
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050ae:	0b5b      	lsrs	r3, r3, #13
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050c0:	0b1b      	lsrs	r3, r3, #12
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2200      	movs	r2, #0
 80050d2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d163      	bne.n	80051a4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050e0:	009a      	lsls	r2, r3, #2
 80050e2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80050e6:	4013      	ands	r3, r2
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80050ec:	0f92      	lsrs	r2, r2, #30
 80050ee:	431a      	orrs	r2, r3
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050f8:	0edb      	lsrs	r3, r3, #27
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	b2da      	uxtb	r2, r3
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800510a:	0e1b      	lsrs	r3, r3, #24
 800510c:	b2db      	uxtb	r3, r3
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	b2da      	uxtb	r2, r3
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800511c:	0d5b      	lsrs	r3, r3, #21
 800511e:	b2db      	uxtb	r3, r3
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	b2da      	uxtb	r2, r3
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800512e:	0c9b      	lsrs	r3, r3, #18
 8005130:	b2db      	uxtb	r3, r3
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	b2da      	uxtb	r2, r3
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005140:	0bdb      	lsrs	r3, r3, #15
 8005142:	b2db      	uxtb	r3, r3
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	b2da      	uxtb	r2, r3
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	1c5a      	adds	r2, r3, #1
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	7e1b      	ldrb	r3, [r3, #24]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	f003 0307 	and.w	r3, r3, #7
 8005162:	3302      	adds	r3, #2
 8005164:	2201      	movs	r2, #1
 8005166:	fa02 f303 	lsl.w	r3, r2, r3
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800516e:	fb03 f202 	mul.w	r2, r3, r2
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	7a1b      	ldrb	r3, [r3, #8]
 800517a:	b2db      	uxtb	r3, r3
 800517c:	f003 030f 	and.w	r3, r3, #15
 8005180:	2201      	movs	r2, #1
 8005182:	409a      	lsls	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005190:	0a52      	lsrs	r2, r2, #9
 8005192:	fb03 f202 	mul.w	r2, r3, r2
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051a0:	661a      	str	r2, [r3, #96]	; 0x60
 80051a2:	e031      	b.n	8005208 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d11d      	bne.n	80051e8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051b0:	041b      	lsls	r3, r3, #16
 80051b2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ba:	0c1b      	lsrs	r3, r3, #16
 80051bc:	431a      	orrs	r2, r3
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	3301      	adds	r3, #1
 80051c8:	029a      	lsls	r2, r3, #10
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051dc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	661a      	str	r2, [r3, #96]	; 0x60
 80051e6:	e00f      	b.n	8005208 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a58      	ldr	r2, [pc, #352]	; (8005350 <HAL_SD_GetCardCSD+0x344>)
 80051ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e09d      	b.n	8005344 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800520c:	0b9b      	lsrs	r3, r3, #14
 800520e:	b2db      	uxtb	r3, r3
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	b2da      	uxtb	r2, r3
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800521e:	09db      	lsrs	r3, r3, #7
 8005220:	b2db      	uxtb	r3, r3
 8005222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005226:	b2da      	uxtb	r2, r3
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005230:	b2db      	uxtb	r3, r3
 8005232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005236:	b2da      	uxtb	r2, r3
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005240:	0fdb      	lsrs	r3, r3, #31
 8005242:	b2da      	uxtb	r2, r3
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524c:	0f5b      	lsrs	r3, r3, #29
 800524e:	b2db      	uxtb	r3, r3
 8005250:	f003 0303 	and.w	r3, r3, #3
 8005254:	b2da      	uxtb	r2, r3
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525e:	0e9b      	lsrs	r3, r3, #26
 8005260:	b2db      	uxtb	r3, r3
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	b2da      	uxtb	r2, r3
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005270:	0d9b      	lsrs	r3, r3, #22
 8005272:	b2db      	uxtb	r3, r3
 8005274:	f003 030f 	and.w	r3, r3, #15
 8005278:	b2da      	uxtb	r2, r3
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005282:	0d5b      	lsrs	r3, r3, #21
 8005284:	b2db      	uxtb	r3, r3
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	b2da      	uxtb	r2, r3
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529e:	0c1b      	lsrs	r3, r3, #16
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b2:	0bdb      	lsrs	r3, r3, #15
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c6:	0b9b      	lsrs	r3, r3, #14
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052da:	0b5b      	lsrs	r3, r3, #13
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ee:	0b1b      	lsrs	r3, r3, #12
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005302:	0a9b      	lsrs	r3, r3, #10
 8005304:	b2db      	uxtb	r3, r3
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	b2da      	uxtb	r2, r3
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005316:	0a1b      	lsrs	r3, r3, #8
 8005318:	b2db      	uxtb	r3, r3
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	b2da      	uxtb	r2, r3
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532a:	085b      	lsrs	r3, r3, #1
 800532c:	b2db      	uxtb	r3, r3
 800532e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005332:	b2da      	uxtb	r2, r3
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	004005ff 	.word	0x004005ff

08005354 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80053b8:	f107 030c 	add.w	r3, r7, #12
 80053bc:	4619      	mov	r1, r3
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f9de 	bl	8005780 <SD_SendStatus>
 80053c4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d005      	beq.n	80053d8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	0a5b      	lsrs	r3, r3, #9
 80053dc:	f003 030f 	and.w	r3, r3, #15
 80053e0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80053e2:	693b      	ldr	r3, [r7, #16]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3718      	adds	r7, #24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f240 523a 	movw	r2, #1338	; 0x53a
 8005402:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f7ff ffd1 	bl	80053ac <HAL_SD_GetCardState>
 800540a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2b06      	cmp	r3, #6
 800541e:	d002      	beq.n	8005426 <SD_DMATxAbort+0x3a>
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b05      	cmp	r3, #5
 8005424:	d10a      	bne.n	800543c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4618      	mov	r0, r3
 800542c:	f000 febe 	bl	80061ac <SDMMC_CmdStopTransfer>
 8005430:	4602      	mov	r2, r0
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005436:	431a      	orrs	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005440:	2b00      	cmp	r3, #0
 8005442:	d103      	bne.n	800544c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f001 fae9 	bl	8006a1c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800544a:	e002      	b.n	8005452 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f7ff fdd3 	bl	8004ff8 <HAL_SD_ErrorCallback>
}
 8005452:	bf00      	nop
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005466:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f240 523a 	movw	r2, #1338	; 0x53a
 8005470:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f7ff ff9a 	bl	80053ac <HAL_SD_GetCardState>
 8005478:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b06      	cmp	r3, #6
 800548c:	d002      	beq.n	8005494 <SD_DMARxAbort+0x3a>
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b05      	cmp	r3, #5
 8005492:	d10a      	bne.n	80054aa <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4618      	mov	r0, r3
 800549a:	f000 fe87 	bl	80061ac <SDMMC_CmdStopTransfer>
 800549e:	4602      	mov	r2, r0
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a4:	431a      	orrs	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d103      	bne.n	80054ba <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f001 fab2 	bl	8006a1c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80054b8:	e002      	b.n	80054c0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f7ff fd9c 	bl	8004ff8 <HAL_SD_ErrorCallback>
}
 80054c0:	bf00      	nop
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80054c8:	b5b0      	push	{r4, r5, r7, lr}
 80054ca:	b094      	sub	sp, #80	; 0x50
 80054cc:	af04      	add	r7, sp, #16
 80054ce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80054d0:	2301      	movs	r3, #1
 80054d2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 fd38 	bl	8005f4e <SDIO_GetPowerState>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d102      	bne.n	80054ea <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80054e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80054e8:	e0b8      	b.n	800565c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d02f      	beq.n	8005552 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 ff1f 	bl	800633a <SDMMC_CmdSendCID>
 80054fc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80054fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <SD_InitCard+0x40>
    {
      return errorstate;
 8005504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005506:	e0a9      	b.n	800565c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2100      	movs	r1, #0
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fd62 	bl	8005fd8 <SDIO_GetResponse>
 8005514:	4602      	mov	r2, r0
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2104      	movs	r1, #4
 8005520:	4618      	mov	r0, r3
 8005522:	f000 fd59 	bl	8005fd8 <SDIO_GetResponse>
 8005526:	4602      	mov	r2, r0
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2108      	movs	r1, #8
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fd50 	bl	8005fd8 <SDIO_GetResponse>
 8005538:	4602      	mov	r2, r0
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	210c      	movs	r1, #12
 8005544:	4618      	mov	r0, r3
 8005546:	f000 fd47 	bl	8005fd8 <SDIO_GetResponse>
 800554a:	4602      	mov	r2, r0
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005556:	2b03      	cmp	r3, #3
 8005558:	d00d      	beq.n	8005576 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f107 020e 	add.w	r2, r7, #14
 8005562:	4611      	mov	r1, r2
 8005564:	4618      	mov	r0, r3
 8005566:	f000 ff25 	bl	80063b4 <SDMMC_CmdSetRelAdd>
 800556a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800556c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <SD_InitCard+0xae>
    {
      return errorstate;
 8005572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005574:	e072      	b.n	800565c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557a:	2b03      	cmp	r3, #3
 800557c:	d036      	beq.n	80055ec <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800557e:	89fb      	ldrh	r3, [r7, #14]
 8005580:	461a      	mov	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800558e:	041b      	lsls	r3, r3, #16
 8005590:	4619      	mov	r1, r3
 8005592:	4610      	mov	r0, r2
 8005594:	f000 feef 	bl	8006376 <SDMMC_CmdSendCSD>
 8005598:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800559a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80055a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a2:	e05b      	b.n	800565c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2100      	movs	r1, #0
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fd14 	bl	8005fd8 <SDIO_GetResponse>
 80055b0:	4602      	mov	r2, r0
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2104      	movs	r1, #4
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 fd0b 	bl	8005fd8 <SDIO_GetResponse>
 80055c2:	4602      	mov	r2, r0
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2108      	movs	r1, #8
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 fd02 	bl	8005fd8 <SDIO_GetResponse>
 80055d4:	4602      	mov	r2, r0
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	210c      	movs	r1, #12
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 fcf9 	bl	8005fd8 <SDIO_GetResponse>
 80055e6:	4602      	mov	r2, r0
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2104      	movs	r1, #4
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 fcf0 	bl	8005fd8 <SDIO_GetResponse>
 80055f8:	4603      	mov	r3, r0
 80055fa:	0d1a      	lsrs	r2, r3, #20
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005600:	f107 0310 	add.w	r3, r7, #16
 8005604:	4619      	mov	r1, r3
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7ff fd00 	bl	800500c <HAL_SD_GetCardCSD>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005612:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005616:	e021      	b.n	800565c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6819      	ldr	r1, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005620:	041b      	lsls	r3, r3, #16
 8005622:	2200      	movs	r2, #0
 8005624:	461c      	mov	r4, r3
 8005626:	4615      	mov	r5, r2
 8005628:	4622      	mov	r2, r4
 800562a:	462b      	mov	r3, r5
 800562c:	4608      	mov	r0, r1
 800562e:	f000 fddf 	bl	80061f0 <SDMMC_CmdSelDesel>
 8005632:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <SD_InitCard+0x176>
  {
    return errorstate;
 800563a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800563c:	e00e      	b.n	800565c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681d      	ldr	r5, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	466c      	mov	r4, sp
 8005646:	f103 0210 	add.w	r2, r3, #16
 800564a:	ca07      	ldmia	r2, {r0, r1, r2}
 800564c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005650:	3304      	adds	r3, #4
 8005652:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005654:	4628      	mov	r0, r5
 8005656:	f000 fc23 	bl	8005ea0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3740      	adds	r7, #64	; 0x40
 8005660:	46bd      	mov	sp, r7
 8005662:	bdb0      	pop	{r4, r5, r7, pc}

08005664 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	617b      	str	r3, [r7, #20]
 8005674:	2300      	movs	r3, #0
 8005676:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4618      	mov	r0, r3
 800567e:	f000 fdda 	bl	8006236 <SDMMC_CmdGoIdleState>
 8005682:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <SD_PowerON+0x2a>
  {
    return errorstate;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	e072      	b.n	8005774 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fded 	bl	8006272 <SDMMC_CmdOperCond>
 8005698:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00d      	beq.n	80056bc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 fdc3 	bl	8006236 <SDMMC_CmdGoIdleState>
 80056b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d004      	beq.n	80056c2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	e05b      	b.n	8005774 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d137      	bne.n	800573a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2100      	movs	r1, #0
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 fded 	bl	80062b0 <SDMMC_CmdAppCommand>
 80056d6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d02d      	beq.n	800573a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80056de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80056e2:	e047      	b.n	8005774 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2100      	movs	r1, #0
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fde0 	bl	80062b0 <SDMMC_CmdAppCommand>
 80056f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <SD_PowerON+0x98>
    {
      return errorstate;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	e03b      	b.n	8005774 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	491e      	ldr	r1, [pc, #120]	; (800577c <SD_PowerON+0x118>)
 8005702:	4618      	mov	r0, r3
 8005704:	f000 fdf6 	bl	80062f4 <SDMMC_CmdAppOperCommand>
 8005708:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005710:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005714:	e02e      	b.n	8005774 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2100      	movs	r1, #0
 800571c:	4618      	mov	r0, r3
 800571e:	f000 fc5b 	bl	8005fd8 <SDIO_GetResponse>
 8005722:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	0fdb      	lsrs	r3, r3, #31
 8005728:	2b01      	cmp	r3, #1
 800572a:	d101      	bne.n	8005730 <SD_PowerON+0xcc>
 800572c:	2301      	movs	r3, #1
 800572e:	e000      	b.n	8005732 <SD_PowerON+0xce>
 8005730:	2300      	movs	r3, #0
 8005732:	613b      	str	r3, [r7, #16]

    count++;
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	3301      	adds	r3, #1
 8005738:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005740:	4293      	cmp	r3, r2
 8005742:	d802      	bhi.n	800574a <SD_PowerON+0xe6>
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0cc      	beq.n	80056e4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005750:	4293      	cmp	r3, r2
 8005752:	d902      	bls.n	800575a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005754:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005758:	e00c      	b.n	8005774 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d003      	beq.n	800576c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	645a      	str	r2, [r3, #68]	; 0x44
 800576a:	e002      	b.n	8005772 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3718      	adds	r7, #24
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	c1100000 	.word	0xc1100000

08005780 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d102      	bne.n	8005796 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005790:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005794:	e018      	b.n	80057c8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800579e:	041b      	lsls	r3, r3, #16
 80057a0:	4619      	mov	r1, r3
 80057a2:	4610      	mov	r0, r2
 80057a4:	f000 fe27 	bl	80063f6 <SDMMC_CmdSendStatus>
 80057a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	e009      	b.n	80057c8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2100      	movs	r1, #0
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 fc0c 	bl	8005fd8 <SDIO_GetResponse>
 80057c0:	4602      	mov	r2, r0
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057dc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d03f      	beq.n	800586a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80057ea:	2300      	movs	r3, #0
 80057ec:	617b      	str	r3, [r7, #20]
 80057ee:	e033      	b.n	8005858 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 fb7e 	bl	8005ef6 <SDIO_ReadFIFO>
 80057fa:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	3301      	adds	r3, #1
 8005808:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	3b01      	subs	r3, #1
 800580e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	0a1b      	lsrs	r3, r3, #8
 8005814:	b2da      	uxtb	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	701a      	strb	r2, [r3, #0]
      tmp++;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	3301      	adds	r3, #1
 800581e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	3b01      	subs	r3, #1
 8005824:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	0c1b      	lsrs	r3, r3, #16
 800582a:	b2da      	uxtb	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	3301      	adds	r3, #1
 8005834:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	3b01      	subs	r3, #1
 800583a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	0e1b      	lsrs	r3, r3, #24
 8005840:	b2da      	uxtb	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3301      	adds	r3, #1
 800584a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	3b01      	subs	r3, #1
 8005850:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	3301      	adds	r3, #1
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	2b07      	cmp	r3, #7
 800585c:	d9c8      	bls.n	80057f0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800586a:	bf00      	nop
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b086      	sub	sp, #24
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d043      	beq.n	8005914 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800588c:	2300      	movs	r3, #0
 800588e:	617b      	str	r3, [r7, #20]
 8005890:	e037      	b.n	8005902 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	3301      	adds	r3, #1
 800589c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	3b01      	subs	r3, #1
 80058a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	021a      	lsls	r2, r3, #8
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	3301      	adds	r3, #1
 80058b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	3b01      	subs	r3, #1
 80058ba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	041a      	lsls	r2, r3, #16
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	3301      	adds	r3, #1
 80058cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	3b01      	subs	r3, #1
 80058d2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	061a      	lsls	r2, r3, #24
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	4313      	orrs	r3, r2
 80058de:	60bb      	str	r3, [r7, #8]
      tmp++;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	3301      	adds	r3, #1
 80058e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	3b01      	subs	r3, #1
 80058ea:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f107 0208 	add.w	r2, r7, #8
 80058f4:	4611      	mov	r1, r2
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fb0a 	bl	8005f10 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	3301      	adds	r3, #1
 8005900:	617b      	str	r3, [r7, #20]
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b07      	cmp	r3, #7
 8005906:	d9c4      	bls.n	8005892 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005914:	bf00      	nop
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e03f      	b.n	80059ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d106      	bne.n	8005948 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7fb fd14 	bl	8001370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2224      	movs	r2, #36	; 0x24
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800595e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f829 	bl	80059b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	691a      	ldr	r2, [r3, #16]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005974:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	695a      	ldr	r2, [r3, #20]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005984:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005994:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2220      	movs	r2, #32
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2220      	movs	r2, #32
 80059a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
	...

080059b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059bc:	b0c0      	sub	sp, #256	; 0x100
 80059be:	af00      	add	r7, sp, #0
 80059c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d4:	68d9      	ldr	r1, [r3, #12]
 80059d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	ea40 0301 	orr.w	r3, r0, r1
 80059e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	431a      	orrs	r2, r3
 80059f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	431a      	orrs	r2, r3
 80059f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a10:	f021 010c 	bic.w	r1, r1, #12
 8005a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a1e:	430b      	orrs	r3, r1
 8005a20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a32:	6999      	ldr	r1, [r3, #24]
 8005a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	ea40 0301 	orr.w	r3, r0, r1
 8005a3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	4b8f      	ldr	r3, [pc, #572]	; (8005c84 <UART_SetConfig+0x2cc>)
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d005      	beq.n	8005a58 <UART_SetConfig+0xa0>
 8005a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	4b8d      	ldr	r3, [pc, #564]	; (8005c88 <UART_SetConfig+0x2d0>)
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d104      	bne.n	8005a62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a58:	f7fd fb02 	bl	8003060 <HAL_RCC_GetPCLK2Freq>
 8005a5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a60:	e003      	b.n	8005a6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a62:	f7fd fae9 	bl	8003038 <HAL_RCC_GetPCLK1Freq>
 8005a66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a74:	f040 810c 	bne.w	8005c90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005a86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005a8a:	4622      	mov	r2, r4
 8005a8c:	462b      	mov	r3, r5
 8005a8e:	1891      	adds	r1, r2, r2
 8005a90:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a92:	415b      	adcs	r3, r3
 8005a94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	eb12 0801 	adds.w	r8, r2, r1
 8005aa0:	4629      	mov	r1, r5
 8005aa2:	eb43 0901 	adc.w	r9, r3, r1
 8005aa6:	f04f 0200 	mov.w	r2, #0
 8005aaa:	f04f 0300 	mov.w	r3, #0
 8005aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005aba:	4690      	mov	r8, r2
 8005abc:	4699      	mov	r9, r3
 8005abe:	4623      	mov	r3, r4
 8005ac0:	eb18 0303 	adds.w	r3, r8, r3
 8005ac4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ac8:	462b      	mov	r3, r5
 8005aca:	eb49 0303 	adc.w	r3, r9, r3
 8005ace:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ade:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ae2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	18db      	adds	r3, r3, r3
 8005aea:	653b      	str	r3, [r7, #80]	; 0x50
 8005aec:	4613      	mov	r3, r2
 8005aee:	eb42 0303 	adc.w	r3, r2, r3
 8005af2:	657b      	str	r3, [r7, #84]	; 0x54
 8005af4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005af8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005afc:	f7fa fbe0 	bl	80002c0 <__aeabi_uldivmod>
 8005b00:	4602      	mov	r2, r0
 8005b02:	460b      	mov	r3, r1
 8005b04:	4b61      	ldr	r3, [pc, #388]	; (8005c8c <UART_SetConfig+0x2d4>)
 8005b06:	fba3 2302 	umull	r2, r3, r3, r2
 8005b0a:	095b      	lsrs	r3, r3, #5
 8005b0c:	011c      	lsls	r4, r3, #4
 8005b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b12:	2200      	movs	r2, #0
 8005b14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b20:	4642      	mov	r2, r8
 8005b22:	464b      	mov	r3, r9
 8005b24:	1891      	adds	r1, r2, r2
 8005b26:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b28:	415b      	adcs	r3, r3
 8005b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b30:	4641      	mov	r1, r8
 8005b32:	eb12 0a01 	adds.w	sl, r2, r1
 8005b36:	4649      	mov	r1, r9
 8005b38:	eb43 0b01 	adc.w	fp, r3, r1
 8005b3c:	f04f 0200 	mov.w	r2, #0
 8005b40:	f04f 0300 	mov.w	r3, #0
 8005b44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b50:	4692      	mov	sl, r2
 8005b52:	469b      	mov	fp, r3
 8005b54:	4643      	mov	r3, r8
 8005b56:	eb1a 0303 	adds.w	r3, sl, r3
 8005b5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b5e:	464b      	mov	r3, r9
 8005b60:	eb4b 0303 	adc.w	r3, fp, r3
 8005b64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	18db      	adds	r3, r3, r3
 8005b80:	643b      	str	r3, [r7, #64]	; 0x40
 8005b82:	4613      	mov	r3, r2
 8005b84:	eb42 0303 	adc.w	r3, r2, r3
 8005b88:	647b      	str	r3, [r7, #68]	; 0x44
 8005b8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005b92:	f7fa fb95 	bl	80002c0 <__aeabi_uldivmod>
 8005b96:	4602      	mov	r2, r0
 8005b98:	460b      	mov	r3, r1
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	4b3b      	ldr	r3, [pc, #236]	; (8005c8c <UART_SetConfig+0x2d4>)
 8005b9e:	fba3 2301 	umull	r2, r3, r3, r1
 8005ba2:	095b      	lsrs	r3, r3, #5
 8005ba4:	2264      	movs	r2, #100	; 0x64
 8005ba6:	fb02 f303 	mul.w	r3, r2, r3
 8005baa:	1acb      	subs	r3, r1, r3
 8005bac:	00db      	lsls	r3, r3, #3
 8005bae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005bb2:	4b36      	ldr	r3, [pc, #216]	; (8005c8c <UART_SetConfig+0x2d4>)
 8005bb4:	fba3 2302 	umull	r2, r3, r3, r2
 8005bb8:	095b      	lsrs	r3, r3, #5
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005bc0:	441c      	add	r4, r3
 8005bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bcc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005bd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005bd4:	4642      	mov	r2, r8
 8005bd6:	464b      	mov	r3, r9
 8005bd8:	1891      	adds	r1, r2, r2
 8005bda:	63b9      	str	r1, [r7, #56]	; 0x38
 8005bdc:	415b      	adcs	r3, r3
 8005bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005be0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005be4:	4641      	mov	r1, r8
 8005be6:	1851      	adds	r1, r2, r1
 8005be8:	6339      	str	r1, [r7, #48]	; 0x30
 8005bea:	4649      	mov	r1, r9
 8005bec:	414b      	adcs	r3, r1
 8005bee:	637b      	str	r3, [r7, #52]	; 0x34
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	f04f 0300 	mov.w	r3, #0
 8005bf8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005bfc:	4659      	mov	r1, fp
 8005bfe:	00cb      	lsls	r3, r1, #3
 8005c00:	4651      	mov	r1, sl
 8005c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c06:	4651      	mov	r1, sl
 8005c08:	00ca      	lsls	r2, r1, #3
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4603      	mov	r3, r0
 8005c10:	4642      	mov	r2, r8
 8005c12:	189b      	adds	r3, r3, r2
 8005c14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c18:	464b      	mov	r3, r9
 8005c1a:	460a      	mov	r2, r1
 8005c1c:	eb42 0303 	adc.w	r3, r2, r3
 8005c20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c38:	460b      	mov	r3, r1
 8005c3a:	18db      	adds	r3, r3, r3
 8005c3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c3e:	4613      	mov	r3, r2
 8005c40:	eb42 0303 	adc.w	r3, r2, r3
 8005c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c4e:	f7fa fb37 	bl	80002c0 <__aeabi_uldivmod>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	4b0d      	ldr	r3, [pc, #52]	; (8005c8c <UART_SetConfig+0x2d4>)
 8005c58:	fba3 1302 	umull	r1, r3, r3, r2
 8005c5c:	095b      	lsrs	r3, r3, #5
 8005c5e:	2164      	movs	r1, #100	; 0x64
 8005c60:	fb01 f303 	mul.w	r3, r1, r3
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	3332      	adds	r3, #50	; 0x32
 8005c6a:	4a08      	ldr	r2, [pc, #32]	; (8005c8c <UART_SetConfig+0x2d4>)
 8005c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c70:	095b      	lsrs	r3, r3, #5
 8005c72:	f003 0207 	and.w	r2, r3, #7
 8005c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4422      	add	r2, r4
 8005c7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c80:	e105      	b.n	8005e8e <UART_SetConfig+0x4d6>
 8005c82:	bf00      	nop
 8005c84:	40011000 	.word	0x40011000
 8005c88:	40011400 	.word	0x40011400
 8005c8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c94:	2200      	movs	r2, #0
 8005c96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005c9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ca2:	4642      	mov	r2, r8
 8005ca4:	464b      	mov	r3, r9
 8005ca6:	1891      	adds	r1, r2, r2
 8005ca8:	6239      	str	r1, [r7, #32]
 8005caa:	415b      	adcs	r3, r3
 8005cac:	627b      	str	r3, [r7, #36]	; 0x24
 8005cae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cb2:	4641      	mov	r1, r8
 8005cb4:	1854      	adds	r4, r2, r1
 8005cb6:	4649      	mov	r1, r9
 8005cb8:	eb43 0501 	adc.w	r5, r3, r1
 8005cbc:	f04f 0200 	mov.w	r2, #0
 8005cc0:	f04f 0300 	mov.w	r3, #0
 8005cc4:	00eb      	lsls	r3, r5, #3
 8005cc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cca:	00e2      	lsls	r2, r4, #3
 8005ccc:	4614      	mov	r4, r2
 8005cce:	461d      	mov	r5, r3
 8005cd0:	4643      	mov	r3, r8
 8005cd2:	18e3      	adds	r3, r4, r3
 8005cd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cd8:	464b      	mov	r3, r9
 8005cda:	eb45 0303 	adc.w	r3, r5, r3
 8005cde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005cf2:	f04f 0200 	mov.w	r2, #0
 8005cf6:	f04f 0300 	mov.w	r3, #0
 8005cfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005cfe:	4629      	mov	r1, r5
 8005d00:	008b      	lsls	r3, r1, #2
 8005d02:	4621      	mov	r1, r4
 8005d04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d08:	4621      	mov	r1, r4
 8005d0a:	008a      	lsls	r2, r1, #2
 8005d0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d10:	f7fa fad6 	bl	80002c0 <__aeabi_uldivmod>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4b60      	ldr	r3, [pc, #384]	; (8005e9c <UART_SetConfig+0x4e4>)
 8005d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	011c      	lsls	r4, r3, #4
 8005d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d26:	2200      	movs	r2, #0
 8005d28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d34:	4642      	mov	r2, r8
 8005d36:	464b      	mov	r3, r9
 8005d38:	1891      	adds	r1, r2, r2
 8005d3a:	61b9      	str	r1, [r7, #24]
 8005d3c:	415b      	adcs	r3, r3
 8005d3e:	61fb      	str	r3, [r7, #28]
 8005d40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d44:	4641      	mov	r1, r8
 8005d46:	1851      	adds	r1, r2, r1
 8005d48:	6139      	str	r1, [r7, #16]
 8005d4a:	4649      	mov	r1, r9
 8005d4c:	414b      	adcs	r3, r1
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	f04f 0200 	mov.w	r2, #0
 8005d54:	f04f 0300 	mov.w	r3, #0
 8005d58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d5c:	4659      	mov	r1, fp
 8005d5e:	00cb      	lsls	r3, r1, #3
 8005d60:	4651      	mov	r1, sl
 8005d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d66:	4651      	mov	r1, sl
 8005d68:	00ca      	lsls	r2, r1, #3
 8005d6a:	4610      	mov	r0, r2
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4603      	mov	r3, r0
 8005d70:	4642      	mov	r2, r8
 8005d72:	189b      	adds	r3, r3, r2
 8005d74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d78:	464b      	mov	r3, r9
 8005d7a:	460a      	mov	r2, r1
 8005d7c:	eb42 0303 	adc.w	r3, r2, r3
 8005d80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d90:	f04f 0200 	mov.w	r2, #0
 8005d94:	f04f 0300 	mov.w	r3, #0
 8005d98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005d9c:	4649      	mov	r1, r9
 8005d9e:	008b      	lsls	r3, r1, #2
 8005da0:	4641      	mov	r1, r8
 8005da2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005da6:	4641      	mov	r1, r8
 8005da8:	008a      	lsls	r2, r1, #2
 8005daa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005dae:	f7fa fa87 	bl	80002c0 <__aeabi_uldivmod>
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	4b39      	ldr	r3, [pc, #228]	; (8005e9c <UART_SetConfig+0x4e4>)
 8005db8:	fba3 1302 	umull	r1, r3, r3, r2
 8005dbc:	095b      	lsrs	r3, r3, #5
 8005dbe:	2164      	movs	r1, #100	; 0x64
 8005dc0:	fb01 f303 	mul.w	r3, r1, r3
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	3332      	adds	r3, #50	; 0x32
 8005dca:	4a34      	ldr	r2, [pc, #208]	; (8005e9c <UART_SetConfig+0x4e4>)
 8005dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd0:	095b      	lsrs	r3, r3, #5
 8005dd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dd6:	441c      	add	r4, r3
 8005dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ddc:	2200      	movs	r2, #0
 8005dde:	673b      	str	r3, [r7, #112]	; 0x70
 8005de0:	677a      	str	r2, [r7, #116]	; 0x74
 8005de2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005de6:	4642      	mov	r2, r8
 8005de8:	464b      	mov	r3, r9
 8005dea:	1891      	adds	r1, r2, r2
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	415b      	adcs	r3, r3
 8005df0:	60fb      	str	r3, [r7, #12]
 8005df2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005df6:	4641      	mov	r1, r8
 8005df8:	1851      	adds	r1, r2, r1
 8005dfa:	6039      	str	r1, [r7, #0]
 8005dfc:	4649      	mov	r1, r9
 8005dfe:	414b      	adcs	r3, r1
 8005e00:	607b      	str	r3, [r7, #4]
 8005e02:	f04f 0200 	mov.w	r2, #0
 8005e06:	f04f 0300 	mov.w	r3, #0
 8005e0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e0e:	4659      	mov	r1, fp
 8005e10:	00cb      	lsls	r3, r1, #3
 8005e12:	4651      	mov	r1, sl
 8005e14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e18:	4651      	mov	r1, sl
 8005e1a:	00ca      	lsls	r2, r1, #3
 8005e1c:	4610      	mov	r0, r2
 8005e1e:	4619      	mov	r1, r3
 8005e20:	4603      	mov	r3, r0
 8005e22:	4642      	mov	r2, r8
 8005e24:	189b      	adds	r3, r3, r2
 8005e26:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e28:	464b      	mov	r3, r9
 8005e2a:	460a      	mov	r2, r1
 8005e2c:	eb42 0303 	adc.w	r3, r2, r3
 8005e30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	663b      	str	r3, [r7, #96]	; 0x60
 8005e3c:	667a      	str	r2, [r7, #100]	; 0x64
 8005e3e:	f04f 0200 	mov.w	r2, #0
 8005e42:	f04f 0300 	mov.w	r3, #0
 8005e46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e4a:	4649      	mov	r1, r9
 8005e4c:	008b      	lsls	r3, r1, #2
 8005e4e:	4641      	mov	r1, r8
 8005e50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e54:	4641      	mov	r1, r8
 8005e56:	008a      	lsls	r2, r1, #2
 8005e58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e5c:	f7fa fa30 	bl	80002c0 <__aeabi_uldivmod>
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	4b0d      	ldr	r3, [pc, #52]	; (8005e9c <UART_SetConfig+0x4e4>)
 8005e66:	fba3 1302 	umull	r1, r3, r3, r2
 8005e6a:	095b      	lsrs	r3, r3, #5
 8005e6c:	2164      	movs	r1, #100	; 0x64
 8005e6e:	fb01 f303 	mul.w	r3, r1, r3
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	011b      	lsls	r3, r3, #4
 8005e76:	3332      	adds	r3, #50	; 0x32
 8005e78:	4a08      	ldr	r2, [pc, #32]	; (8005e9c <UART_SetConfig+0x4e4>)
 8005e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7e:	095b      	lsrs	r3, r3, #5
 8005e80:	f003 020f 	and.w	r2, r3, #15
 8005e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4422      	add	r2, r4
 8005e8c:	609a      	str	r2, [r3, #8]
}
 8005e8e:	bf00      	nop
 8005e90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005e94:	46bd      	mov	sp, r7
 8005e96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e9a:	bf00      	nop
 8005e9c:	51eb851f 	.word	0x51eb851f

08005ea0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005ea0:	b084      	sub	sp, #16
 8005ea2:	b480      	push	{r7}
 8005ea4:	b085      	sub	sp, #20
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
 8005eaa:	f107 001c 	add.w	r0, r7, #28
 8005eae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005eb6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005eba:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005ebe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005ec2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005ec6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005eca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005eda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	b004      	add	sp, #16
 8005ef4:	4770      	bx	lr

08005ef6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005f32:	b480      	push	{r7}
 8005f34:	b083      	sub	sp, #12
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2203      	movs	r2, #3
 8005f3e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0303 	and.w	r3, r3, #3
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b085      	sub	sp, #20
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005f74:	2300      	movs	r3, #0
 8005f76:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005f88:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005f8e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005f94:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005fa4:	f023 030f 	bic.w	r3, r3, #15
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b083      	sub	sp, #12
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	b2db      	uxtb	r3, r3
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	3314      	adds	r3, #20
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	4413      	add	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
}  
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b085      	sub	sp, #20
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006008:	2300      	movs	r3, #0
 800600a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006024:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800602a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006030:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	4313      	orrs	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	431a      	orrs	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006048:	2300      	movs	r3, #0

}
 800604a:	4618      	mov	r0, r3
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b088      	sub	sp, #32
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006064:	2310      	movs	r3, #16
 8006066:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006068:	2340      	movs	r3, #64	; 0x40
 800606a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800606c:	2300      	movs	r3, #0
 800606e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006074:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006076:	f107 0308 	add.w	r3, r7, #8
 800607a:	4619      	mov	r1, r3
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7ff ff74 	bl	8005f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006082:	f241 3288 	movw	r2, #5000	; 0x1388
 8006086:	2110      	movs	r1, #16
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f9d7 	bl	800643c <SDMMC_GetCmdResp1>
 800608e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006090:	69fb      	ldr	r3, [r7, #28]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3720      	adds	r7, #32
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b088      	sub	sp, #32
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
 80060a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80060a8:	2311      	movs	r3, #17
 80060aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060ac:	2340      	movs	r3, #64	; 0x40
 80060ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060b0:	2300      	movs	r3, #0
 80060b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060ba:	f107 0308 	add.w	r3, r7, #8
 80060be:	4619      	mov	r1, r3
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f7ff ff52 	bl	8005f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80060c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ca:	2111      	movs	r1, #17
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f9b5 	bl	800643c <SDMMC_GetCmdResp1>
 80060d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060d4:	69fb      	ldr	r3, [r7, #28]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3720      	adds	r7, #32
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b088      	sub	sp, #32
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80060ec:	2312      	movs	r3, #18
 80060ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060f0:	2340      	movs	r3, #64	; 0x40
 80060f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060f4:	2300      	movs	r3, #0
 80060f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060fe:	f107 0308 	add.w	r3, r7, #8
 8006102:	4619      	mov	r1, r3
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f7ff ff30 	bl	8005f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800610a:	f241 3288 	movw	r2, #5000	; 0x1388
 800610e:	2112      	movs	r1, #18
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f993 	bl	800643c <SDMMC_GetCmdResp1>
 8006116:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006118:	69fb      	ldr	r3, [r7, #28]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3720      	adds	r7, #32
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b088      	sub	sp, #32
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006130:	2318      	movs	r3, #24
 8006132:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006134:	2340      	movs	r3, #64	; 0x40
 8006136:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006138:	2300      	movs	r3, #0
 800613a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800613c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006140:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006142:	f107 0308 	add.w	r3, r7, #8
 8006146:	4619      	mov	r1, r3
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7ff ff0e 	bl	8005f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800614e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006152:	2118      	movs	r1, #24
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f971 	bl	800643c <SDMMC_GetCmdResp1>
 800615a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800615c:	69fb      	ldr	r3, [r7, #28]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3720      	adds	r7, #32
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b088      	sub	sp, #32
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006174:	2319      	movs	r3, #25
 8006176:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006178:	2340      	movs	r3, #64	; 0x40
 800617a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800617c:	2300      	movs	r3, #0
 800617e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006184:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006186:	f107 0308 	add.w	r3, r7, #8
 800618a:	4619      	mov	r1, r3
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7ff feec 	bl	8005f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006192:	f241 3288 	movw	r2, #5000	; 0x1388
 8006196:	2119      	movs	r1, #25
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f94f 	bl	800643c <SDMMC_GetCmdResp1>
 800619e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061a0:	69fb      	ldr	r3, [r7, #28]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3720      	adds	r7, #32
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
	...

080061ac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80061b4:	2300      	movs	r3, #0
 80061b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80061b8:	230c      	movs	r3, #12
 80061ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061bc:	2340      	movs	r3, #64	; 0x40
 80061be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061c0:	2300      	movs	r3, #0
 80061c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061ca:	f107 0308 	add.w	r3, r7, #8
 80061ce:	4619      	mov	r1, r3
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff feca 	bl	8005f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80061d6:	4a05      	ldr	r2, [pc, #20]	; (80061ec <SDMMC_CmdStopTransfer+0x40>)
 80061d8:	210c      	movs	r1, #12
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f92e 	bl	800643c <SDMMC_GetCmdResp1>
 80061e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061e2:	69fb      	ldr	r3, [r7, #28]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3720      	adds	r7, #32
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	05f5e100 	.word	0x05f5e100

080061f0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08a      	sub	sp, #40	; 0x28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006200:	2307      	movs	r3, #7
 8006202:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006204:	2340      	movs	r3, #64	; 0x40
 8006206:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006208:	2300      	movs	r3, #0
 800620a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800620c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006210:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006212:	f107 0310 	add.w	r3, r7, #16
 8006216:	4619      	mov	r1, r3
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f7ff fea6 	bl	8005f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800621e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006222:	2107      	movs	r1, #7
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 f909 	bl	800643c <SDMMC_GetCmdResp1>
 800622a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800622e:	4618      	mov	r0, r3
 8006230:	3728      	adds	r7, #40	; 0x28
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b088      	sub	sp, #32
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800623e:	2300      	movs	r3, #0
 8006240:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006242:	2300      	movs	r3, #0
 8006244:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006246:	2300      	movs	r3, #0
 8006248:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800624a:	2300      	movs	r3, #0
 800624c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800624e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006252:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006254:	f107 0308 	add.w	r3, r7, #8
 8006258:	4619      	mov	r1, r3
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7ff fe85 	bl	8005f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fb23 	bl	80068ac <SDMMC_GetCmdError>
 8006266:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006268:	69fb      	ldr	r3, [r7, #28]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3720      	adds	r7, #32
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b088      	sub	sp, #32
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800627a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800627e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006280:	2308      	movs	r3, #8
 8006282:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006284:	2340      	movs	r3, #64	; 0x40
 8006286:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006288:	2300      	movs	r3, #0
 800628a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800628c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006290:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006292:	f107 0308 	add.w	r3, r7, #8
 8006296:	4619      	mov	r1, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f7ff fe66 	bl	8005f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fab6 	bl	8006810 <SDMMC_GetCmdResp7>
 80062a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062a6:	69fb      	ldr	r3, [r7, #28]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3720      	adds	r7, #32
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b088      	sub	sp, #32
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80062be:	2337      	movs	r3, #55	; 0x37
 80062c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062c2:	2340      	movs	r3, #64	; 0x40
 80062c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062c6:	2300      	movs	r3, #0
 80062c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062d0:	f107 0308 	add.w	r3, r7, #8
 80062d4:	4619      	mov	r1, r3
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7ff fe47 	bl	8005f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80062dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e0:	2137      	movs	r1, #55	; 0x37
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f8aa 	bl	800643c <SDMMC_GetCmdResp1>
 80062e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062ea:	69fb      	ldr	r3, [r7, #28]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3720      	adds	r7, #32
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b088      	sub	sp, #32
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006304:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006308:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800630a:	2329      	movs	r3, #41	; 0x29
 800630c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800630e:	2340      	movs	r3, #64	; 0x40
 8006310:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006312:	2300      	movs	r3, #0
 8006314:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800631a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800631c:	f107 0308 	add.w	r3, r7, #8
 8006320:	4619      	mov	r1, r3
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7ff fe21 	bl	8005f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f9bd 	bl	80066a8 <SDMMC_GetCmdResp3>
 800632e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006330:	69fb      	ldr	r3, [r7, #28]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3720      	adds	r7, #32
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b088      	sub	sp, #32
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006346:	2302      	movs	r3, #2
 8006348:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800634a:	23c0      	movs	r3, #192	; 0xc0
 800634c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800634e:	2300      	movs	r3, #0
 8006350:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006356:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006358:	f107 0308 	add.w	r3, r7, #8
 800635c:	4619      	mov	r1, r3
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff fe03 	bl	8005f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f957 	bl	8006618 <SDMMC_GetCmdResp2>
 800636a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800636c:	69fb      	ldr	r3, [r7, #28]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3720      	adds	r7, #32
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b088      	sub	sp, #32
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006384:	2309      	movs	r3, #9
 8006386:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006388:	23c0      	movs	r3, #192	; 0xc0
 800638a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800638c:	2300      	movs	r3, #0
 800638e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006394:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006396:	f107 0308 	add.w	r3, r7, #8
 800639a:	4619      	mov	r1, r3
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f7ff fde4 	bl	8005f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f938 	bl	8006618 <SDMMC_GetCmdResp2>
 80063a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063aa:	69fb      	ldr	r3, [r7, #28]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3720      	adds	r7, #32
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b088      	sub	sp, #32
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80063be:	2300      	movs	r3, #0
 80063c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80063c2:	2303      	movs	r3, #3
 80063c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80063c6:	2340      	movs	r3, #64	; 0x40
 80063c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063ca:	2300      	movs	r3, #0
 80063cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063d4:	f107 0308 	add.w	r3, r7, #8
 80063d8:	4619      	mov	r1, r3
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7ff fdc5 	bl	8005f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	2103      	movs	r1, #3
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f99d 	bl	8006724 <SDMMC_GetCmdResp6>
 80063ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063ec:	69fb      	ldr	r3, [r7, #28]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3720      	adds	r7, #32
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b088      	sub	sp, #32
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006404:	230d      	movs	r3, #13
 8006406:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006408:	2340      	movs	r3, #64	; 0x40
 800640a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800640c:	2300      	movs	r3, #0
 800640e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006414:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006416:	f107 0308 	add.w	r3, r7, #8
 800641a:	4619      	mov	r1, r3
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7ff fda4 	bl	8005f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006422:	f241 3288 	movw	r2, #5000	; 0x1388
 8006426:	210d      	movs	r1, #13
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f807 	bl	800643c <SDMMC_GetCmdResp1>
 800642e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006430:	69fb      	ldr	r3, [r7, #28]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3720      	adds	r7, #32
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
	...

0800643c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b088      	sub	sp, #32
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	460b      	mov	r3, r1
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800644a:	4b70      	ldr	r3, [pc, #448]	; (800660c <SDMMC_GetCmdResp1+0x1d0>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a70      	ldr	r2, [pc, #448]	; (8006610 <SDMMC_GetCmdResp1+0x1d4>)
 8006450:	fba2 2303 	umull	r2, r3, r2, r3
 8006454:	0a5a      	lsrs	r2, r3, #9
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	fb02 f303 	mul.w	r3, r2, r3
 800645c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	1e5a      	subs	r2, r3, #1
 8006462:	61fa      	str	r2, [r7, #28]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d102      	bne.n	800646e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006468:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800646c:	e0c9      	b.n	8006602 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006472:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0ef      	beq.n	800645e <SDMMC_GetCmdResp1+0x22>
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1ea      	bne.n	800645e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648c:	f003 0304 	and.w	r3, r3, #4
 8006490:	2b00      	cmp	r3, #0
 8006492:	d004      	beq.n	800649e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2204      	movs	r2, #4
 8006498:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800649a:	2304      	movs	r3, #4
 800649c:	e0b1      	b.n	8006602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d004      	beq.n	80064b4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2201      	movs	r2, #1
 80064ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e0a6      	b.n	8006602 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	22c5      	movs	r2, #197	; 0xc5
 80064b8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f7ff fd7f 	bl	8005fbe <SDIO_GetCommandResponse>
 80064c0:	4603      	mov	r3, r0
 80064c2:	461a      	mov	r2, r3
 80064c4:	7afb      	ldrb	r3, [r7, #11]
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d001      	beq.n	80064ce <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e099      	b.n	8006602 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80064ce:	2100      	movs	r1, #0
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f7ff fd81 	bl	8005fd8 <SDIO_GetResponse>
 80064d6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	4b4e      	ldr	r3, [pc, #312]	; (8006614 <SDMMC_GetCmdResp1+0x1d8>)
 80064dc:	4013      	ands	r3, r2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80064e2:	2300      	movs	r3, #0
 80064e4:	e08d      	b.n	8006602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	da02      	bge.n	80064f2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80064ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064f0:	e087      	b.n	8006602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80064fc:	2340      	movs	r3, #64	; 0x40
 80064fe:	e080      	b.n	8006602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800650a:	2380      	movs	r3, #128	; 0x80
 800650c:	e079      	b.n	8006602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006518:	f44f 7380 	mov.w	r3, #256	; 0x100
 800651c:	e071      	b.n	8006602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006528:	f44f 7300 	mov.w	r3, #512	; 0x200
 800652c:	e069      	b.n	8006602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800653c:	e061      	b.n	8006602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d002      	beq.n	800654e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006548:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800654c:	e059      	b.n	8006602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800655c:	e051      	b.n	8006602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800656c:	e049      	b.n	8006602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d002      	beq.n	800657e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006578:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800657c:	e041      	b.n	8006602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800658c:	e039      	b.n	8006602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006598:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800659c:	e031      	b.n	8006602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d002      	beq.n	80065ae <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80065a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80065ac:	e029      	b.n	8006602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80065b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80065bc:	e021      	b.n	8006602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d002      	beq.n	80065ce <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80065c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80065cc:	e019      	b.n	8006602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80065d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80065dc:	e011      	b.n	8006602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d002      	beq.n	80065ee <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80065e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80065ec:	e009      	b.n	8006602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f003 0308 	and.w	r3, r3, #8
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80065f8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80065fc:	e001      	b.n	8006602 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80065fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006602:	4618      	mov	r0, r3
 8006604:	3720      	adds	r7, #32
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	20000004 	.word	0x20000004
 8006610:	10624dd3 	.word	0x10624dd3
 8006614:	fdffe008 	.word	0xfdffe008

08006618 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006620:	4b1f      	ldr	r3, [pc, #124]	; (80066a0 <SDMMC_GetCmdResp2+0x88>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a1f      	ldr	r2, [pc, #124]	; (80066a4 <SDMMC_GetCmdResp2+0x8c>)
 8006626:	fba2 2303 	umull	r2, r3, r2, r3
 800662a:	0a5b      	lsrs	r3, r3, #9
 800662c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006630:	fb02 f303 	mul.w	r3, r2, r3
 8006634:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	1e5a      	subs	r2, r3, #1
 800663a:	60fa      	str	r2, [r7, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d102      	bne.n	8006646 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006640:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006644:	e026      	b.n	8006694 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800664a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006652:	2b00      	cmp	r3, #0
 8006654:	d0ef      	beq.n	8006636 <SDMMC_GetCmdResp2+0x1e>
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1ea      	bne.n	8006636 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b00      	cmp	r3, #0
 800666a:	d004      	beq.n	8006676 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2204      	movs	r2, #4
 8006670:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006672:	2304      	movs	r3, #4
 8006674:	e00e      	b.n	8006694 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	2b00      	cmp	r3, #0
 8006680:	d004      	beq.n	800668c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006688:	2301      	movs	r3, #1
 800668a:	e003      	b.n	8006694 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	22c5      	movs	r2, #197	; 0xc5
 8006690:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	20000004 	.word	0x20000004
 80066a4:	10624dd3 	.word	0x10624dd3

080066a8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80066b0:	4b1a      	ldr	r3, [pc, #104]	; (800671c <SDMMC_GetCmdResp3+0x74>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a1a      	ldr	r2, [pc, #104]	; (8006720 <SDMMC_GetCmdResp3+0x78>)
 80066b6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ba:	0a5b      	lsrs	r3, r3, #9
 80066bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c0:	fb02 f303 	mul.w	r3, r2, r3
 80066c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	1e5a      	subs	r2, r3, #1
 80066ca:	60fa      	str	r2, [r7, #12]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d102      	bne.n	80066d6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80066d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066d4:	e01b      	b.n	800670e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d0ef      	beq.n	80066c6 <SDMMC_GetCmdResp3+0x1e>
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1ea      	bne.n	80066c6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f4:	f003 0304 	and.w	r3, r3, #4
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d004      	beq.n	8006706 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2204      	movs	r2, #4
 8006700:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006702:	2304      	movs	r3, #4
 8006704:	e003      	b.n	800670e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	22c5      	movs	r2, #197	; 0xc5
 800670a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	20000004 	.word	0x20000004
 8006720:	10624dd3 	.word	0x10624dd3

08006724 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b088      	sub	sp, #32
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	460b      	mov	r3, r1
 800672e:	607a      	str	r2, [r7, #4]
 8006730:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006732:	4b35      	ldr	r3, [pc, #212]	; (8006808 <SDMMC_GetCmdResp6+0xe4>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a35      	ldr	r2, [pc, #212]	; (800680c <SDMMC_GetCmdResp6+0xe8>)
 8006738:	fba2 2303 	umull	r2, r3, r2, r3
 800673c:	0a5b      	lsrs	r3, r3, #9
 800673e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006742:	fb02 f303 	mul.w	r3, r2, r3
 8006746:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	1e5a      	subs	r2, r3, #1
 800674c:	61fa      	str	r2, [r7, #28]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d102      	bne.n	8006758 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006752:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006756:	e052      	b.n	80067fe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006764:	2b00      	cmp	r3, #0
 8006766:	d0ef      	beq.n	8006748 <SDMMC_GetCmdResp6+0x24>
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1ea      	bne.n	8006748 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006776:	f003 0304 	and.w	r3, r3, #4
 800677a:	2b00      	cmp	r3, #0
 800677c:	d004      	beq.n	8006788 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2204      	movs	r2, #4
 8006782:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006784:	2304      	movs	r3, #4
 8006786:	e03a      	b.n	80067fe <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b00      	cmp	r3, #0
 8006792:	d004      	beq.n	800679e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2201      	movs	r2, #1
 8006798:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800679a:	2301      	movs	r3, #1
 800679c:	e02f      	b.n	80067fe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f7ff fc0d 	bl	8005fbe <SDIO_GetCommandResponse>
 80067a4:	4603      	mov	r3, r0
 80067a6:	461a      	mov	r2, r3
 80067a8:	7afb      	ldrb	r3, [r7, #11]
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d001      	beq.n	80067b2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e025      	b.n	80067fe <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	22c5      	movs	r2, #197	; 0xc5
 80067b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80067b8:	2100      	movs	r1, #0
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f7ff fc0c 	bl	8005fd8 <SDIO_GetResponse>
 80067c0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d106      	bne.n	80067da <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	0c1b      	lsrs	r3, r3, #16
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80067d6:	2300      	movs	r3, #0
 80067d8:	e011      	b.n	80067fe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80067e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80067e8:	e009      	b.n	80067fe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d002      	beq.n	80067fa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80067f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067f8:	e001      	b.n	80067fe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80067fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3720      	adds	r7, #32
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	20000004 	.word	0x20000004
 800680c:	10624dd3 	.word	0x10624dd3

08006810 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006818:	4b22      	ldr	r3, [pc, #136]	; (80068a4 <SDMMC_GetCmdResp7+0x94>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a22      	ldr	r2, [pc, #136]	; (80068a8 <SDMMC_GetCmdResp7+0x98>)
 800681e:	fba2 2303 	umull	r2, r3, r2, r3
 8006822:	0a5b      	lsrs	r3, r3, #9
 8006824:	f241 3288 	movw	r2, #5000	; 0x1388
 8006828:	fb02 f303 	mul.w	r3, r2, r3
 800682c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	1e5a      	subs	r2, r3, #1
 8006832:	60fa      	str	r2, [r7, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d102      	bne.n	800683e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006838:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800683c:	e02c      	b.n	8006898 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006842:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800684a:	2b00      	cmp	r3, #0
 800684c:	d0ef      	beq.n	800682e <SDMMC_GetCmdResp7+0x1e>
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1ea      	bne.n	800682e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	2b00      	cmp	r3, #0
 8006862:	d004      	beq.n	800686e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2204      	movs	r2, #4
 8006868:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800686a:	2304      	movs	r3, #4
 800686c:	e014      	b.n	8006898 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	2b00      	cmp	r3, #0
 8006878:	d004      	beq.n	8006884 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006880:	2301      	movs	r3, #1
 8006882:	e009      	b.n	8006898 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800688c:	2b00      	cmp	r3, #0
 800688e:	d002      	beq.n	8006896 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2240      	movs	r2, #64	; 0x40
 8006894:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006896:	2300      	movs	r3, #0
  
}
 8006898:	4618      	mov	r0, r3
 800689a:	3714      	adds	r7, #20
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr
 80068a4:	20000004 	.word	0x20000004
 80068a8:	10624dd3 	.word	0x10624dd3

080068ac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80068b4:	4b11      	ldr	r3, [pc, #68]	; (80068fc <SDMMC_GetCmdError+0x50>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a11      	ldr	r2, [pc, #68]	; (8006900 <SDMMC_GetCmdError+0x54>)
 80068ba:	fba2 2303 	umull	r2, r3, r2, r3
 80068be:	0a5b      	lsrs	r3, r3, #9
 80068c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80068c4:	fb02 f303 	mul.w	r3, r2, r3
 80068c8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	1e5a      	subs	r2, r3, #1
 80068ce:	60fa      	str	r2, [r7, #12]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d102      	bne.n	80068da <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80068d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80068d8:	e009      	b.n	80068ee <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d0f1      	beq.n	80068ca <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	22c5      	movs	r2, #197	; 0xc5
 80068ea:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	20000004 	.word	0x20000004
 8006900:	10624dd3 	.word	0x10624dd3

08006904 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006908:	4904      	ldr	r1, [pc, #16]	; (800691c <MX_FATFS_Init+0x18>)
 800690a:	4805      	ldr	r0, [pc, #20]	; (8006920 <MX_FATFS_Init+0x1c>)
 800690c:	f003 f9a8 	bl	8009c60 <FATFS_LinkDriver>
 8006910:	4603      	mov	r3, r0
 8006912:	461a      	mov	r2, r3
 8006914:	4b03      	ldr	r3, [pc, #12]	; (8006924 <MX_FATFS_Init+0x20>)
 8006916:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006918:	bf00      	nop
 800691a:	bd80      	pop	{r7, pc}
 800691c:	20002ee0 	.word	0x20002ee0
 8006920:	0800b324 	.word	0x0800b324
 8006924:	20002edc 	.word	0x20002edc

08006928 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006928:	b480      	push	{r7}
 800692a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800692c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800692e:	4618      	mov	r0, r3
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800693e:	2300      	movs	r3, #0
 8006940:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006942:	f000 f89e 	bl	8006a82 <BSP_SD_IsDetected>
 8006946:	4603      	mov	r3, r0
 8006948:	2b01      	cmp	r3, #1
 800694a:	d001      	beq.n	8006950 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e005      	b.n	800695c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006950:	4804      	ldr	r0, [pc, #16]	; (8006964 <BSP_SD_Init+0x2c>)
 8006952:	f7fd fdc6 	bl	80044e2 <HAL_SD_Init>
 8006956:	4603      	mov	r3, r0
 8006958:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800695a:	79fb      	ldrb	r3, [r7, #7]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	20000158 	.word	0x20000158

08006968 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b088      	sub	sp, #32
 800696c:	af02      	add	r7, sp, #8
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68ba      	ldr	r2, [r7, #8]
 8006982:	68f9      	ldr	r1, [r7, #12]
 8006984:	4806      	ldr	r0, [pc, #24]	; (80069a0 <BSP_SD_ReadBlocks+0x38>)
 8006986:	f7fd fe5d 	bl	8004644 <HAL_SD_ReadBlocks>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d001      	beq.n	8006994 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006994:	7dfb      	ldrb	r3, [r7, #23]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3718      	adds	r7, #24
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	20000158 	.word	0x20000158

080069a4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b088      	sub	sp, #32
 80069a8:	af02      	add	r7, sp, #8
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	68f9      	ldr	r1, [r7, #12]
 80069c0:	4806      	ldr	r0, [pc, #24]	; (80069dc <BSP_SD_WriteBlocks+0x38>)
 80069c2:	f7fe f81d 	bl	8004a00 <HAL_SD_WriteBlocks>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80069d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3718      	adds	r7, #24
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	20000158 	.word	0x20000158

080069e0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80069e4:	4805      	ldr	r0, [pc, #20]	; (80069fc <BSP_SD_GetCardState+0x1c>)
 80069e6:	f7fe fce1 	bl	80053ac <HAL_SD_GetCardState>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	bf14      	ite	ne
 80069f0:	2301      	movne	r3, #1
 80069f2:	2300      	moveq	r3, #0
 80069f4:	b2db      	uxtb	r3, r3
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	20000158 	.word	0x20000158

08006a00 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006a08:	6879      	ldr	r1, [r7, #4]
 8006a0a:	4803      	ldr	r0, [pc, #12]	; (8006a18 <BSP_SD_GetCardInfo+0x18>)
 8006a0c:	f7fe fca2 	bl	8005354 <HAL_SD_GetCardInfo>
}
 8006a10:	bf00      	nop
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	20000158 	.word	0x20000158

08006a1c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006a24:	f000 f818 	bl	8006a58 <BSP_SD_AbortCallback>
}
 8006a28:	bf00      	nop
 8006a2a:	3708      	adds	r7, #8
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006a38:	f000 f815 	bl	8006a66 <BSP_SD_WriteCpltCallback>
}
 8006a3c:	bf00      	nop
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006a4c:	f000 f812 	bl	8006a74 <BSP_SD_ReadCpltCallback>
}
 8006a50:	bf00      	nop
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	af00      	add	r7, sp, #0

}
 8006a5c:	bf00      	nop
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8006a66:	b480      	push	{r7}
 8006a68:	af00      	add	r7, sp, #0

}
 8006a6a:	bf00      	nop
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8006a74:	b480      	push	{r7}
 8006a76:	af00      	add	r7, sp, #0

}
 8006a78:	bf00      	nop
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b082      	sub	sp, #8
 8006a86:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8006a8c:	f000 f80c 	bl	8006aa8 <BSP_PlatformIsDetected>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d101      	bne.n	8006a9a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006a96:	2300      	movs	r3, #0
 8006a98:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006a9a:	79fb      	ldrb	r3, [r7, #7]
 8006a9c:	b2db      	uxtb	r3, r3
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3708      	adds	r7, #8
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006ab2:	2102      	movs	r1, #2
 8006ab4:	4806      	ldr	r0, [pc, #24]	; (8006ad0 <BSP_PlatformIsDetected+0x28>)
 8006ab6:	f7fc f94b 	bl	8002d50 <HAL_GPIO_ReadPin>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8006ac4:	79fb      	ldrb	r3, [r7, #7]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3708      	adds	r7, #8
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	40020800 	.word	0x40020800

08006ad4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	4603      	mov	r3, r0
 8006adc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006ade:	4b0b      	ldr	r3, [pc, #44]	; (8006b0c <SD_CheckStatus+0x38>)
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006ae4:	f7ff ff7c 	bl	80069e0 <BSP_SD_GetCardState>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d107      	bne.n	8006afe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006aee:	4b07      	ldr	r3, [pc, #28]	; (8006b0c <SD_CheckStatus+0x38>)
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	f023 0301 	bic.w	r3, r3, #1
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	4b04      	ldr	r3, [pc, #16]	; (8006b0c <SD_CheckStatus+0x38>)
 8006afc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006afe:	4b03      	ldr	r3, [pc, #12]	; (8006b0c <SD_CheckStatus+0x38>)
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	b2db      	uxtb	r3, r3
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	2000000d 	.word	0x2000000d

08006b10 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	4603      	mov	r3, r0
 8006b18:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8006b1a:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <SD_initialize+0x38>)
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006b20:	f7ff ff0a 	bl	8006938 <BSP_SD_Init>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d107      	bne.n	8006b3a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8006b2a:	79fb      	ldrb	r3, [r7, #7]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7ff ffd1 	bl	8006ad4 <SD_CheckStatus>
 8006b32:	4603      	mov	r3, r0
 8006b34:	461a      	mov	r2, r3
 8006b36:	4b04      	ldr	r3, [pc, #16]	; (8006b48 <SD_initialize+0x38>)
 8006b38:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006b3a:	4b03      	ldr	r3, [pc, #12]	; (8006b48 <SD_initialize+0x38>)
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	b2db      	uxtb	r3, r3
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	2000000d 	.word	0x2000000d

08006b4c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	4603      	mov	r3, r0
 8006b54:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006b56:	79fb      	ldrb	r3, [r7, #7]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7ff ffbb 	bl	8006ad4 <SD_CheckStatus>
 8006b5e:	4603      	mov	r3, r0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3708      	adds	r7, #8
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60b9      	str	r1, [r7, #8]
 8006b70:	607a      	str	r2, [r7, #4]
 8006b72:	603b      	str	r3, [r7, #0]
 8006b74:	4603      	mov	r3, r0
 8006b76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8006b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	6879      	ldr	r1, [r7, #4]
 8006b84:	68b8      	ldr	r0, [r7, #8]
 8006b86:	f7ff feef 	bl	8006968 <BSP_SD_ReadBlocks>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d107      	bne.n	8006ba0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8006b90:	bf00      	nop
 8006b92:	f7ff ff25 	bl	80069e0 <BSP_SD_GetCardState>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1fa      	bne.n	8006b92 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b086      	sub	sp, #24
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
 8006bb4:	603b      	str	r3, [r7, #0]
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8006bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	6879      	ldr	r1, [r7, #4]
 8006bc6:	68b8      	ldr	r0, [r7, #8]
 8006bc8:	f7ff feec 	bl	80069a4 <BSP_SD_WriteBlocks>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d107      	bne.n	8006be2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8006bd2:	bf00      	nop
 8006bd4:	f7ff ff04 	bl	80069e0 <BSP_SD_GetCardState>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1fa      	bne.n	8006bd4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3718      	adds	r7, #24
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b08c      	sub	sp, #48	; 0x30
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	603a      	str	r2, [r7, #0]
 8006bf6:	71fb      	strb	r3, [r7, #7]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006c02:	4b25      	ldr	r3, [pc, #148]	; (8006c98 <SD_ioctl+0xac>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <SD_ioctl+0x28>
 8006c10:	2303      	movs	r3, #3
 8006c12:	e03c      	b.n	8006c8e <SD_ioctl+0xa2>

  switch (cmd)
 8006c14:	79bb      	ldrb	r3, [r7, #6]
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d834      	bhi.n	8006c84 <SD_ioctl+0x98>
 8006c1a:	a201      	add	r2, pc, #4	; (adr r2, 8006c20 <SD_ioctl+0x34>)
 8006c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c20:	08006c31 	.word	0x08006c31
 8006c24:	08006c39 	.word	0x08006c39
 8006c28:	08006c51 	.word	0x08006c51
 8006c2c:	08006c6b 	.word	0x08006c6b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006c36:	e028      	b.n	8006c8a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006c38:	f107 030c 	add.w	r3, r7, #12
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7ff fedf 	bl	8006a00 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006c4e:	e01c      	b.n	8006c8a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006c50:	f107 030c 	add.w	r3, r7, #12
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7ff fed3 	bl	8006a00 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006c68:	e00f      	b.n	8006c8a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006c6a:	f107 030c 	add.w	r3, r7, #12
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7ff fec6 	bl	8006a00 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c76:	0a5a      	lsrs	r2, r3, #9
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006c82:	e002      	b.n	8006c8a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006c84:	2304      	movs	r3, #4
 8006c86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006c8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3730      	adds	r7, #48	; 0x30
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	2000000d 	.word	0x2000000d

08006c9c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006ca6:	79fb      	ldrb	r3, [r7, #7]
 8006ca8:	4a08      	ldr	r2, [pc, #32]	; (8006ccc <disk_status+0x30>)
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	79fa      	ldrb	r2, [r7, #7]
 8006cb4:	4905      	ldr	r1, [pc, #20]	; (8006ccc <disk_status+0x30>)
 8006cb6:	440a      	add	r2, r1
 8006cb8:	7a12      	ldrb	r2, [r2, #8]
 8006cba:	4610      	mov	r0, r2
 8006cbc:	4798      	blx	r3
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	20002f0c 	.word	0x20002f0c

08006cd0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006cde:	79fb      	ldrb	r3, [r7, #7]
 8006ce0:	4a0d      	ldr	r2, [pc, #52]	; (8006d18 <disk_initialize+0x48>)
 8006ce2:	5cd3      	ldrb	r3, [r2, r3]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d111      	bne.n	8006d0c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006ce8:	79fb      	ldrb	r3, [r7, #7]
 8006cea:	4a0b      	ldr	r2, [pc, #44]	; (8006d18 <disk_initialize+0x48>)
 8006cec:	2101      	movs	r1, #1
 8006cee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006cf0:	79fb      	ldrb	r3, [r7, #7]
 8006cf2:	4a09      	ldr	r2, [pc, #36]	; (8006d18 <disk_initialize+0x48>)
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	79fa      	ldrb	r2, [r7, #7]
 8006cfe:	4906      	ldr	r1, [pc, #24]	; (8006d18 <disk_initialize+0x48>)
 8006d00:	440a      	add	r2, r1
 8006d02:	7a12      	ldrb	r2, [r2, #8]
 8006d04:	4610      	mov	r0, r2
 8006d06:	4798      	blx	r3
 8006d08:	4603      	mov	r3, r0
 8006d0a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	20002f0c 	.word	0x20002f0c

08006d1c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006d1c:	b590      	push	{r4, r7, lr}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60b9      	str	r1, [r7, #8]
 8006d24:	607a      	str	r2, [r7, #4]
 8006d26:	603b      	str	r3, [r7, #0]
 8006d28:	4603      	mov	r3, r0
 8006d2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
 8006d2e:	4a0a      	ldr	r2, [pc, #40]	; (8006d58 <disk_read+0x3c>)
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	689c      	ldr	r4, [r3, #8]
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	4a07      	ldr	r2, [pc, #28]	; (8006d58 <disk_read+0x3c>)
 8006d3c:	4413      	add	r3, r2
 8006d3e:	7a18      	ldrb	r0, [r3, #8]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	68b9      	ldr	r1, [r7, #8]
 8006d46:	47a0      	blx	r4
 8006d48:	4603      	mov	r3, r0
 8006d4a:	75fb      	strb	r3, [r7, #23]
  return res;
 8006d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	371c      	adds	r7, #28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd90      	pop	{r4, r7, pc}
 8006d56:	bf00      	nop
 8006d58:	20002f0c 	.word	0x20002f0c

08006d5c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006d5c:	b590      	push	{r4, r7, lr}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60b9      	str	r1, [r7, #8]
 8006d64:	607a      	str	r2, [r7, #4]
 8006d66:	603b      	str	r3, [r7, #0]
 8006d68:	4603      	mov	r3, r0
 8006d6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
 8006d6e:	4a0a      	ldr	r2, [pc, #40]	; (8006d98 <disk_write+0x3c>)
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	68dc      	ldr	r4, [r3, #12]
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
 8006d7a:	4a07      	ldr	r2, [pc, #28]	; (8006d98 <disk_write+0x3c>)
 8006d7c:	4413      	add	r3, r2
 8006d7e:	7a18      	ldrb	r0, [r3, #8]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	68b9      	ldr	r1, [r7, #8]
 8006d86:	47a0      	blx	r4
 8006d88:	4603      	mov	r3, r0
 8006d8a:	75fb      	strb	r3, [r7, #23]
  return res;
 8006d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd90      	pop	{r4, r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20002f0c 	.word	0x20002f0c

08006d9c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	4603      	mov	r3, r0
 8006da4:	603a      	str	r2, [r7, #0]
 8006da6:	71fb      	strb	r3, [r7, #7]
 8006da8:	460b      	mov	r3, r1
 8006daa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006dac:	79fb      	ldrb	r3, [r7, #7]
 8006dae:	4a09      	ldr	r2, [pc, #36]	; (8006dd4 <disk_ioctl+0x38>)
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	79fa      	ldrb	r2, [r7, #7]
 8006dba:	4906      	ldr	r1, [pc, #24]	; (8006dd4 <disk_ioctl+0x38>)
 8006dbc:	440a      	add	r2, r1
 8006dbe:	7a10      	ldrb	r0, [r2, #8]
 8006dc0:	79b9      	ldrb	r1, [r7, #6]
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	4798      	blx	r3
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	73fb      	strb	r3, [r7, #15]
  return res;
 8006dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	20002f0c 	.word	0x20002f0c

08006dd8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	3301      	adds	r3, #1
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006de8:	89fb      	ldrh	r3, [r7, #14]
 8006dea:	021b      	lsls	r3, r3, #8
 8006dec:	b21a      	sxth	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	b21b      	sxth	r3, r3
 8006df4:	4313      	orrs	r3, r2
 8006df6:	b21b      	sxth	r3, r3
 8006df8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006dfa:	89fb      	ldrh	r3, [r7, #14]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	3303      	adds	r3, #3
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	021b      	lsls	r3, r3, #8
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	3202      	adds	r2, #2
 8006e20:	7812      	ldrb	r2, [r2, #0]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	021b      	lsls	r3, r3, #8
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	3201      	adds	r2, #1
 8006e2e:	7812      	ldrb	r2, [r2, #0]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	021b      	lsls	r3, r3, #8
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	7812      	ldrb	r2, [r2, #0]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	60fb      	str	r3, [r7, #12]
	return rv;
 8006e40:	68fb      	ldr	r3, [r7, #12]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	460b      	mov	r3, r1
 8006e58:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	1c5a      	adds	r2, r3, #1
 8006e5e:	607a      	str	r2, [r7, #4]
 8006e60:	887a      	ldrh	r2, [r7, #2]
 8006e62:	b2d2      	uxtb	r2, r2
 8006e64:	701a      	strb	r2, [r3, #0]
 8006e66:	887b      	ldrh	r3, [r7, #2]
 8006e68:	0a1b      	lsrs	r3, r3, #8
 8006e6a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	1c5a      	adds	r2, r3, #1
 8006e70:	607a      	str	r2, [r7, #4]
 8006e72:	887a      	ldrh	r2, [r7, #2]
 8006e74:	b2d2      	uxtb	r2, r2
 8006e76:	701a      	strb	r2, [r3, #0]
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	683a      	ldr	r2, [r7, #0]
 8006e96:	b2d2      	uxtb	r2, r2
 8006e98:	701a      	strb	r2, [r3, #0]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	0a1b      	lsrs	r3, r3, #8
 8006e9e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	607a      	str	r2, [r7, #4]
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	b2d2      	uxtb	r2, r2
 8006eaa:	701a      	strb	r2, [r3, #0]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	0a1b      	lsrs	r3, r3, #8
 8006eb0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	1c5a      	adds	r2, r3, #1
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	701a      	strb	r2, [r3, #0]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	0a1b      	lsrs	r3, r3, #8
 8006ec2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	607a      	str	r2, [r7, #4]
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	701a      	strb	r2, [r3, #0]
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006edc:	b480      	push	{r7}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00d      	beq.n	8006f12 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	1c53      	adds	r3, r2, #1
 8006efa:	613b      	str	r3, [r7, #16]
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	1c59      	adds	r1, r3, #1
 8006f00:	6179      	str	r1, [r7, #20]
 8006f02:	7812      	ldrb	r2, [r2, #0]
 8006f04:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	607b      	str	r3, [r7, #4]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1f1      	bne.n	8006ef6 <mem_cpy+0x1a>
	}
}
 8006f12:	bf00      	nop
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006f1e:	b480      	push	{r7}
 8006f20:	b087      	sub	sp, #28
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	617a      	str	r2, [r7, #20]
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	b2d2      	uxtb	r2, r2
 8006f38:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	607b      	str	r3, [r7, #4]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1f3      	bne.n	8006f2e <mem_set+0x10>
}
 8006f46:	bf00      	nop
 8006f48:	bf00      	nop
 8006f4a:	371c      	adds	r7, #28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006f54:	b480      	push	{r7}
 8006f56:	b089      	sub	sp, #36	; 0x24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	61fb      	str	r3, [r7, #28]
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	61fa      	str	r2, [r7, #28]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	4619      	mov	r1, r3
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	1c5a      	adds	r2, r3, #1
 8006f7a:	61ba      	str	r2, [r7, #24]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	1acb      	subs	r3, r1, r3
 8006f80:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	3b01      	subs	r3, #1
 8006f86:	607b      	str	r3, [r7, #4]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d002      	beq.n	8006f94 <mem_cmp+0x40>
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d0eb      	beq.n	8006f6c <mem_cmp+0x18>

	return r;
 8006f94:	697b      	ldr	r3, [r7, #20]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3724      	adds	r7, #36	; 0x24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006fac:	e002      	b.n	8006fb4 <chk_chr+0x12>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	607b      	str	r3, [r7, #4]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d005      	beq.n	8006fc8 <chk_chr+0x26>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d1f2      	bne.n	8006fae <chk_chr+0xc>
	return *str;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	781b      	ldrb	r3, [r3, #0]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60bb      	str	r3, [r7, #8]
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	60fb      	str	r3, [r7, #12]
 8006fea:	e029      	b.n	8007040 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006fec:	4a27      	ldr	r2, [pc, #156]	; (800708c <chk_lock+0xb4>)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	011b      	lsls	r3, r3, #4
 8006ff2:	4413      	add	r3, r2
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d01d      	beq.n	8007036 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006ffa:	4a24      	ldr	r2, [pc, #144]	; (800708c <chk_lock+0xb4>)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	011b      	lsls	r3, r3, #4
 8007000:	4413      	add	r3, r2
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	429a      	cmp	r2, r3
 800700a:	d116      	bne.n	800703a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800700c:	4a1f      	ldr	r2, [pc, #124]	; (800708c <chk_lock+0xb4>)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	011b      	lsls	r3, r3, #4
 8007012:	4413      	add	r3, r2
 8007014:	3304      	adds	r3, #4
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800701c:	429a      	cmp	r2, r3
 800701e:	d10c      	bne.n	800703a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007020:	4a1a      	ldr	r2, [pc, #104]	; (800708c <chk_lock+0xb4>)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	011b      	lsls	r3, r3, #4
 8007026:	4413      	add	r3, r2
 8007028:	3308      	adds	r3, #8
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007030:	429a      	cmp	r2, r3
 8007032:	d102      	bne.n	800703a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007034:	e007      	b.n	8007046 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007036:	2301      	movs	r3, #1
 8007038:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	3301      	adds	r3, #1
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d9d2      	bls.n	8006fec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2b02      	cmp	r3, #2
 800704a:	d109      	bne.n	8007060 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d102      	bne.n	8007058 <chk_lock+0x80>
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b02      	cmp	r3, #2
 8007056:	d101      	bne.n	800705c <chk_lock+0x84>
 8007058:	2300      	movs	r3, #0
 800705a:	e010      	b.n	800707e <chk_lock+0xa6>
 800705c:	2312      	movs	r3, #18
 800705e:	e00e      	b.n	800707e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d108      	bne.n	8007078 <chk_lock+0xa0>
 8007066:	4a09      	ldr	r2, [pc, #36]	; (800708c <chk_lock+0xb4>)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	011b      	lsls	r3, r3, #4
 800706c:	4413      	add	r3, r2
 800706e:	330c      	adds	r3, #12
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007076:	d101      	bne.n	800707c <chk_lock+0xa4>
 8007078:	2310      	movs	r3, #16
 800707a:	e000      	b.n	800707e <chk_lock+0xa6>
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3714      	adds	r7, #20
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	20002eec 	.word	0x20002eec

08007090 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007096:	2300      	movs	r3, #0
 8007098:	607b      	str	r3, [r7, #4]
 800709a:	e002      	b.n	80070a2 <enq_lock+0x12>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3301      	adds	r3, #1
 80070a0:	607b      	str	r3, [r7, #4]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d806      	bhi.n	80070b6 <enq_lock+0x26>
 80070a8:	4a09      	ldr	r2, [pc, #36]	; (80070d0 <enq_lock+0x40>)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	011b      	lsls	r3, r3, #4
 80070ae:	4413      	add	r3, r2
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1f2      	bne.n	800709c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	bf14      	ite	ne
 80070bc:	2301      	movne	r3, #1
 80070be:	2300      	moveq	r3, #0
 80070c0:	b2db      	uxtb	r3, r3
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	20002eec 	.word	0x20002eec

080070d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	e01f      	b.n	8007124 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80070e4:	4a41      	ldr	r2, [pc, #260]	; (80071ec <inc_lock+0x118>)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	011b      	lsls	r3, r3, #4
 80070ea:	4413      	add	r3, r2
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d113      	bne.n	800711e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80070f6:	4a3d      	ldr	r2, [pc, #244]	; (80071ec <inc_lock+0x118>)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	011b      	lsls	r3, r3, #4
 80070fc:	4413      	add	r3, r2
 80070fe:	3304      	adds	r3, #4
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007106:	429a      	cmp	r2, r3
 8007108:	d109      	bne.n	800711e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800710a:	4a38      	ldr	r2, [pc, #224]	; (80071ec <inc_lock+0x118>)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	011b      	lsls	r3, r3, #4
 8007110:	4413      	add	r3, r2
 8007112:	3308      	adds	r3, #8
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800711a:	429a      	cmp	r2, r3
 800711c:	d006      	beq.n	800712c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3301      	adds	r3, #1
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d9dc      	bls.n	80070e4 <inc_lock+0x10>
 800712a:	e000      	b.n	800712e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800712c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2b02      	cmp	r3, #2
 8007132:	d132      	bne.n	800719a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007134:	2300      	movs	r3, #0
 8007136:	60fb      	str	r3, [r7, #12]
 8007138:	e002      	b.n	8007140 <inc_lock+0x6c>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	3301      	adds	r3, #1
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d806      	bhi.n	8007154 <inc_lock+0x80>
 8007146:	4a29      	ldr	r2, [pc, #164]	; (80071ec <inc_lock+0x118>)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	011b      	lsls	r3, r3, #4
 800714c:	4413      	add	r3, r2
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1f2      	bne.n	800713a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b02      	cmp	r3, #2
 8007158:	d101      	bne.n	800715e <inc_lock+0x8a>
 800715a:	2300      	movs	r3, #0
 800715c:	e040      	b.n	80071e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	4922      	ldr	r1, [pc, #136]	; (80071ec <inc_lock+0x118>)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	011b      	lsls	r3, r3, #4
 8007168:	440b      	add	r3, r1
 800716a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	491e      	ldr	r1, [pc, #120]	; (80071ec <inc_lock+0x118>)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	011b      	lsls	r3, r3, #4
 8007176:	440b      	add	r3, r1
 8007178:	3304      	adds	r3, #4
 800717a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	695a      	ldr	r2, [r3, #20]
 8007180:	491a      	ldr	r1, [pc, #104]	; (80071ec <inc_lock+0x118>)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	011b      	lsls	r3, r3, #4
 8007186:	440b      	add	r3, r1
 8007188:	3308      	adds	r3, #8
 800718a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800718c:	4a17      	ldr	r2, [pc, #92]	; (80071ec <inc_lock+0x118>)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	011b      	lsls	r3, r3, #4
 8007192:	4413      	add	r3, r2
 8007194:	330c      	adds	r3, #12
 8007196:	2200      	movs	r2, #0
 8007198:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d009      	beq.n	80071b4 <inc_lock+0xe0>
 80071a0:	4a12      	ldr	r2, [pc, #72]	; (80071ec <inc_lock+0x118>)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	011b      	lsls	r3, r3, #4
 80071a6:	4413      	add	r3, r2
 80071a8:	330c      	adds	r3, #12
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <inc_lock+0xe0>
 80071b0:	2300      	movs	r3, #0
 80071b2:	e015      	b.n	80071e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d108      	bne.n	80071cc <inc_lock+0xf8>
 80071ba:	4a0c      	ldr	r2, [pc, #48]	; (80071ec <inc_lock+0x118>)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	011b      	lsls	r3, r3, #4
 80071c0:	4413      	add	r3, r2
 80071c2:	330c      	adds	r3, #12
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	3301      	adds	r3, #1
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	e001      	b.n	80071d0 <inc_lock+0xfc>
 80071cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071d0:	4906      	ldr	r1, [pc, #24]	; (80071ec <inc_lock+0x118>)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	011b      	lsls	r3, r3, #4
 80071d6:	440b      	add	r3, r1
 80071d8:	330c      	adds	r3, #12
 80071da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	3301      	adds	r3, #1
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	20002eec 	.word	0x20002eec

080071f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	3b01      	subs	r3, #1
 80071fc:	607b      	str	r3, [r7, #4]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d825      	bhi.n	8007250 <dec_lock+0x60>
		n = Files[i].ctr;
 8007204:	4a17      	ldr	r2, [pc, #92]	; (8007264 <dec_lock+0x74>)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	011b      	lsls	r3, r3, #4
 800720a:	4413      	add	r3, r2
 800720c:	330c      	adds	r3, #12
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007212:	89fb      	ldrh	r3, [r7, #14]
 8007214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007218:	d101      	bne.n	800721e <dec_lock+0x2e>
 800721a:	2300      	movs	r3, #0
 800721c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800721e:	89fb      	ldrh	r3, [r7, #14]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <dec_lock+0x3a>
 8007224:	89fb      	ldrh	r3, [r7, #14]
 8007226:	3b01      	subs	r3, #1
 8007228:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800722a:	4a0e      	ldr	r2, [pc, #56]	; (8007264 <dec_lock+0x74>)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	011b      	lsls	r3, r3, #4
 8007230:	4413      	add	r3, r2
 8007232:	330c      	adds	r3, #12
 8007234:	89fa      	ldrh	r2, [r7, #14]
 8007236:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007238:	89fb      	ldrh	r3, [r7, #14]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d105      	bne.n	800724a <dec_lock+0x5a>
 800723e:	4a09      	ldr	r2, [pc, #36]	; (8007264 <dec_lock+0x74>)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	011b      	lsls	r3, r3, #4
 8007244:	4413      	add	r3, r2
 8007246:	2200      	movs	r2, #0
 8007248:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	737b      	strb	r3, [r7, #13]
 800724e:	e001      	b.n	8007254 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007250:	2302      	movs	r3, #2
 8007252:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007254:	7b7b      	ldrb	r3, [r7, #13]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	20002eec 	.word	0x20002eec

08007268 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007270:	2300      	movs	r3, #0
 8007272:	60fb      	str	r3, [r7, #12]
 8007274:	e010      	b.n	8007298 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007276:	4a0d      	ldr	r2, [pc, #52]	; (80072ac <clear_lock+0x44>)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	011b      	lsls	r3, r3, #4
 800727c:	4413      	add	r3, r2
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	429a      	cmp	r2, r3
 8007284:	d105      	bne.n	8007292 <clear_lock+0x2a>
 8007286:	4a09      	ldr	r2, [pc, #36]	; (80072ac <clear_lock+0x44>)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	011b      	lsls	r3, r3, #4
 800728c:	4413      	add	r3, r2
 800728e:	2200      	movs	r2, #0
 8007290:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3301      	adds	r3, #1
 8007296:	60fb      	str	r3, [r7, #12]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d9eb      	bls.n	8007276 <clear_lock+0xe>
	}
}
 800729e:	bf00      	nop
 80072a0:	bf00      	nop
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	20002eec 	.word	0x20002eec

080072b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	78db      	ldrb	r3, [r3, #3]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d034      	beq.n	800732e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	7858      	ldrb	r0, [r3, #1]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80072d4:	2301      	movs	r3, #1
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	f7ff fd40 	bl	8006d5c <disk_write>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d002      	beq.n	80072e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	73fb      	strb	r3, [r7, #15]
 80072e6:	e022      	b.n	800732e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	1ad2      	subs	r2, r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d217      	bcs.n	800732e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	789b      	ldrb	r3, [r3, #2]
 8007302:	613b      	str	r3, [r7, #16]
 8007304:	e010      	b.n	8007328 <sync_window+0x78>
					wsect += fs->fsize;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	4413      	add	r3, r2
 800730e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	7858      	ldrb	r0, [r3, #1]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800731a:	2301      	movs	r3, #1
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	f7ff fd1d 	bl	8006d5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	3b01      	subs	r3, #1
 8007326:	613b      	str	r3, [r7, #16]
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d8eb      	bhi.n	8007306 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800732e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3718      	adds	r7, #24
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	429a      	cmp	r2, r3
 800734e:	d01b      	beq.n	8007388 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f7ff ffad 	bl	80072b0 <sync_window>
 8007356:	4603      	mov	r3, r0
 8007358:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800735a:	7bfb      	ldrb	r3, [r7, #15]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d113      	bne.n	8007388 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	7858      	ldrb	r0, [r3, #1]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800736a:	2301      	movs	r3, #1
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	f7ff fcd5 	bl	8006d1c <disk_read>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d004      	beq.n	8007382 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007378:	f04f 33ff 	mov.w	r3, #4294967295
 800737c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800737e:	2301      	movs	r3, #1
 8007380:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8007388:	7bfb      	ldrb	r3, [r7, #15]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
	...

08007394 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f7ff ff87 	bl	80072b0 <sync_window>
 80073a2:	4603      	mov	r3, r0
 80073a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d159      	bne.n	8007460 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2b03      	cmp	r3, #3
 80073b2:	d149      	bne.n	8007448 <sync_fs+0xb4>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	791b      	ldrb	r3, [r3, #4]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d145      	bne.n	8007448 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	899b      	ldrh	r3, [r3, #12]
 80073c6:	461a      	mov	r2, r3
 80073c8:	2100      	movs	r1, #0
 80073ca:	f7ff fda8 	bl	8006f1e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	3334      	adds	r3, #52	; 0x34
 80073d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80073d6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80073da:	4618      	mov	r0, r3
 80073dc:	f7ff fd37 	bl	8006e4e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	3334      	adds	r3, #52	; 0x34
 80073e4:	4921      	ldr	r1, [pc, #132]	; (800746c <sync_fs+0xd8>)
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7ff fd4c 	bl	8006e84 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	3334      	adds	r3, #52	; 0x34
 80073f0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80073f4:	491e      	ldr	r1, [pc, #120]	; (8007470 <sync_fs+0xdc>)
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7ff fd44 	bl	8006e84 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	3334      	adds	r3, #52	; 0x34
 8007400:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	695b      	ldr	r3, [r3, #20]
 8007408:	4619      	mov	r1, r3
 800740a:	4610      	mov	r0, r2
 800740c:	f7ff fd3a 	bl	8006e84 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3334      	adds	r3, #52	; 0x34
 8007414:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	4619      	mov	r1, r3
 800741e:	4610      	mov	r0, r2
 8007420:	f7ff fd30 	bl	8006e84 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a1b      	ldr	r3, [r3, #32]
 8007428:	1c5a      	adds	r2, r3, #1
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	7858      	ldrb	r0, [r3, #1]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800743c:	2301      	movs	r3, #1
 800743e:	f7ff fc8d 	bl	8006d5c <disk_write>
			fs->fsi_flag = 0;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	785b      	ldrb	r3, [r3, #1]
 800744c:	2200      	movs	r2, #0
 800744e:	2100      	movs	r1, #0
 8007450:	4618      	mov	r0, r3
 8007452:	f7ff fca3 	bl	8006d9c <disk_ioctl>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d001      	beq.n	8007460 <sync_fs+0xcc>
 800745c:	2301      	movs	r3, #1
 800745e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007460:	7bfb      	ldrb	r3, [r7, #15]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	41615252 	.word	0x41615252
 8007470:	61417272 	.word	0x61417272

08007474 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	3b02      	subs	r3, #2
 8007482:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	3b02      	subs	r3, #2
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	429a      	cmp	r2, r3
 800748e:	d301      	bcc.n	8007494 <clust2sect+0x20>
 8007490:	2300      	movs	r3, #0
 8007492:	e008      	b.n	80074a6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	895b      	ldrh	r3, [r3, #10]
 8007498:	461a      	mov	r2, r3
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	fb03 f202 	mul.w	r2, r3, r2
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a4:	4413      	add	r3, r2
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b086      	sub	sp, #24
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d904      	bls.n	80074d2 <get_fat+0x20>
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	683a      	ldr	r2, [r7, #0]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d302      	bcc.n	80074d8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80074d2:	2301      	movs	r3, #1
 80074d4:	617b      	str	r3, [r7, #20]
 80074d6:	e0bb      	b.n	8007650 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80074d8:	f04f 33ff 	mov.w	r3, #4294967295
 80074dc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	f000 8083 	beq.w	80075ee <get_fat+0x13c>
 80074e8:	2b03      	cmp	r3, #3
 80074ea:	f300 80a7 	bgt.w	800763c <get_fat+0x18a>
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d002      	beq.n	80074f8 <get_fat+0x46>
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d056      	beq.n	80075a4 <get_fat+0xf2>
 80074f6:	e0a1      	b.n	800763c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	60fb      	str	r3, [r7, #12]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	085b      	lsrs	r3, r3, #1
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	4413      	add	r3, r2
 8007504:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	899b      	ldrh	r3, [r3, #12]
 800750e:	4619      	mov	r1, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	fbb3 f3f1 	udiv	r3, r3, r1
 8007516:	4413      	add	r3, r2
 8007518:	4619      	mov	r1, r3
 800751a:	6938      	ldr	r0, [r7, #16]
 800751c:	f7ff ff0c 	bl	8007338 <move_window>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	f040 808d 	bne.w	8007642 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	60fa      	str	r2, [r7, #12]
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	8992      	ldrh	r2, [r2, #12]
 8007532:	fbb3 f1f2 	udiv	r1, r3, r2
 8007536:	fb01 f202 	mul.w	r2, r1, r2
 800753a:	1a9b      	subs	r3, r3, r2
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	4413      	add	r3, r2
 8007540:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007544:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	899b      	ldrh	r3, [r3, #12]
 800754e:	4619      	mov	r1, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	fbb3 f3f1 	udiv	r3, r3, r1
 8007556:	4413      	add	r3, r2
 8007558:	4619      	mov	r1, r3
 800755a:	6938      	ldr	r0, [r7, #16]
 800755c:	f7ff feec 	bl	8007338 <move_window>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d16f      	bne.n	8007646 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	899b      	ldrh	r3, [r3, #12]
 800756a:	461a      	mov	r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007572:	fb01 f202 	mul.w	r2, r1, r2
 8007576:	1a9b      	subs	r3, r3, r2
 8007578:	693a      	ldr	r2, [r7, #16]
 800757a:	4413      	add	r3, r2
 800757c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007580:	021b      	lsls	r3, r3, #8
 8007582:	461a      	mov	r2, r3
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	4313      	orrs	r3, r2
 8007588:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	f003 0301 	and.w	r3, r3, #1
 8007590:	2b00      	cmp	r3, #0
 8007592:	d002      	beq.n	800759a <get_fat+0xe8>
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	091b      	lsrs	r3, r3, #4
 8007598:	e002      	b.n	80075a0 <get_fat+0xee>
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075a0:	617b      	str	r3, [r7, #20]
			break;
 80075a2:	e055      	b.n	8007650 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	899b      	ldrh	r3, [r3, #12]
 80075ac:	085b      	lsrs	r3, r3, #1
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	4619      	mov	r1, r3
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80075b8:	4413      	add	r3, r2
 80075ba:	4619      	mov	r1, r3
 80075bc:	6938      	ldr	r0, [r7, #16]
 80075be:	f7ff febb 	bl	8007338 <move_window>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d140      	bne.n	800764a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	005b      	lsls	r3, r3, #1
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	8992      	ldrh	r2, [r2, #12]
 80075d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80075da:	fb00 f202 	mul.w	r2, r0, r2
 80075de:	1a9b      	subs	r3, r3, r2
 80075e0:	440b      	add	r3, r1
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7ff fbf8 	bl	8006dd8 <ld_word>
 80075e8:	4603      	mov	r3, r0
 80075ea:	617b      	str	r3, [r7, #20]
			break;
 80075ec:	e030      	b.n	8007650 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	899b      	ldrh	r3, [r3, #12]
 80075f6:	089b      	lsrs	r3, r3, #2
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	4619      	mov	r1, r3
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8007602:	4413      	add	r3, r2
 8007604:	4619      	mov	r1, r3
 8007606:	6938      	ldr	r0, [r7, #16]
 8007608:	f7ff fe96 	bl	8007338 <move_window>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d11d      	bne.n	800764e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	8992      	ldrh	r2, [r2, #12]
 8007620:	fbb3 f0f2 	udiv	r0, r3, r2
 8007624:	fb00 f202 	mul.w	r2, r0, r2
 8007628:	1a9b      	subs	r3, r3, r2
 800762a:	440b      	add	r3, r1
 800762c:	4618      	mov	r0, r3
 800762e:	f7ff fbeb 	bl	8006e08 <ld_dword>
 8007632:	4603      	mov	r3, r0
 8007634:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007638:	617b      	str	r3, [r7, #20]
			break;
 800763a:	e009      	b.n	8007650 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800763c:	2301      	movs	r3, #1
 800763e:	617b      	str	r3, [r7, #20]
 8007640:	e006      	b.n	8007650 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007642:	bf00      	nop
 8007644:	e004      	b.n	8007650 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007646:	bf00      	nop
 8007648:	e002      	b.n	8007650 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800764a:	bf00      	nop
 800764c:	e000      	b.n	8007650 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800764e:	bf00      	nop
		}
	}

	return val;
 8007650:	697b      	ldr	r3, [r7, #20]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800765a:	b590      	push	{r4, r7, lr}
 800765c:	b089      	sub	sp, #36	; 0x24
 800765e:	af00      	add	r7, sp, #0
 8007660:	60f8      	str	r0, [r7, #12]
 8007662:	60b9      	str	r1, [r7, #8]
 8007664:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007666:	2302      	movs	r3, #2
 8007668:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	2b01      	cmp	r3, #1
 800766e:	f240 8102 	bls.w	8007876 <put_fat+0x21c>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	429a      	cmp	r2, r3
 800767a:	f080 80fc 	bcs.w	8007876 <put_fat+0x21c>
		switch (fs->fs_type) {
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b03      	cmp	r3, #3
 8007684:	f000 80b6 	beq.w	80077f4 <put_fat+0x19a>
 8007688:	2b03      	cmp	r3, #3
 800768a:	f300 80fd 	bgt.w	8007888 <put_fat+0x22e>
 800768e:	2b01      	cmp	r3, #1
 8007690:	d003      	beq.n	800769a <put_fat+0x40>
 8007692:	2b02      	cmp	r3, #2
 8007694:	f000 8083 	beq.w	800779e <put_fat+0x144>
 8007698:	e0f6      	b.n	8007888 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	61bb      	str	r3, [r7, #24]
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	085b      	lsrs	r3, r3, #1
 80076a2:	69ba      	ldr	r2, [r7, #24]
 80076a4:	4413      	add	r3, r2
 80076a6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	899b      	ldrh	r3, [r3, #12]
 80076b0:	4619      	mov	r1, r3
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80076b8:	4413      	add	r3, r2
 80076ba:	4619      	mov	r1, r3
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f7ff fe3b 	bl	8007338 <move_window>
 80076c2:	4603      	mov	r3, r0
 80076c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80076c6:	7ffb      	ldrb	r3, [r7, #31]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f040 80d6 	bne.w	800787a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	61ba      	str	r2, [r7, #24]
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	8992      	ldrh	r2, [r2, #12]
 80076de:	fbb3 f0f2 	udiv	r0, r3, r2
 80076e2:	fb00 f202 	mul.w	r2, r0, r2
 80076e6:	1a9b      	subs	r3, r3, r2
 80076e8:	440b      	add	r3, r1
 80076ea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00d      	beq.n	8007712 <put_fat+0xb8>
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	b25b      	sxtb	r3, r3
 80076fc:	f003 030f 	and.w	r3, r3, #15
 8007700:	b25a      	sxtb	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	b2db      	uxtb	r3, r3
 8007706:	011b      	lsls	r3, r3, #4
 8007708:	b25b      	sxtb	r3, r3
 800770a:	4313      	orrs	r3, r2
 800770c:	b25b      	sxtb	r3, r3
 800770e:	b2db      	uxtb	r3, r3
 8007710:	e001      	b.n	8007716 <put_fat+0xbc>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	b2db      	uxtb	r3, r3
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2201      	movs	r2, #1
 800771e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	899b      	ldrh	r3, [r3, #12]
 8007728:	4619      	mov	r1, r3
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007730:	4413      	add	r3, r2
 8007732:	4619      	mov	r1, r3
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f7ff fdff 	bl	8007338 <move_window>
 800773a:	4603      	mov	r3, r0
 800773c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800773e:	7ffb      	ldrb	r3, [r7, #31]
 8007740:	2b00      	cmp	r3, #0
 8007742:	f040 809c 	bne.w	800787e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	899b      	ldrh	r3, [r3, #12]
 8007750:	461a      	mov	r2, r3
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	fbb3 f0f2 	udiv	r0, r3, r2
 8007758:	fb00 f202 	mul.w	r2, r0, r2
 800775c:	1a9b      	subs	r3, r3, r2
 800775e:	440b      	add	r3, r1
 8007760:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	2b00      	cmp	r3, #0
 800776a:	d003      	beq.n	8007774 <put_fat+0x11a>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	091b      	lsrs	r3, r3, #4
 8007770:	b2db      	uxtb	r3, r3
 8007772:	e00e      	b.n	8007792 <put_fat+0x138>
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	b25b      	sxtb	r3, r3
 800777a:	f023 030f 	bic.w	r3, r3, #15
 800777e:	b25a      	sxtb	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	0a1b      	lsrs	r3, r3, #8
 8007784:	b25b      	sxtb	r3, r3
 8007786:	f003 030f 	and.w	r3, r3, #15
 800778a:	b25b      	sxtb	r3, r3
 800778c:	4313      	orrs	r3, r2
 800778e:	b25b      	sxtb	r3, r3
 8007790:	b2db      	uxtb	r3, r3
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2201      	movs	r2, #1
 800779a:	70da      	strb	r2, [r3, #3]
			break;
 800779c:	e074      	b.n	8007888 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	899b      	ldrh	r3, [r3, #12]
 80077a6:	085b      	lsrs	r3, r3, #1
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	4619      	mov	r1, r3
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80077b2:	4413      	add	r3, r2
 80077b4:	4619      	mov	r1, r3
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f7ff fdbe 	bl	8007338 <move_window>
 80077bc:	4603      	mov	r3, r0
 80077be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80077c0:	7ffb      	ldrb	r3, [r7, #31]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d15d      	bne.n	8007882 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	005b      	lsls	r3, r3, #1
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	8992      	ldrh	r2, [r2, #12]
 80077d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80077d8:	fb00 f202 	mul.w	r2, r0, r2
 80077dc:	1a9b      	subs	r3, r3, r2
 80077de:	440b      	add	r3, r1
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	b292      	uxth	r2, r2
 80077e4:	4611      	mov	r1, r2
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7ff fb31 	bl	8006e4e <st_word>
			fs->wflag = 1;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2201      	movs	r2, #1
 80077f0:	70da      	strb	r2, [r3, #3]
			break;
 80077f2:	e049      	b.n	8007888 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	899b      	ldrh	r3, [r3, #12]
 80077fc:	089b      	lsrs	r3, r3, #2
 80077fe:	b29b      	uxth	r3, r3
 8007800:	4619      	mov	r1, r3
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	fbb3 f3f1 	udiv	r3, r3, r1
 8007808:	4413      	add	r3, r2
 800780a:	4619      	mov	r1, r3
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f7ff fd93 	bl	8007338 <move_window>
 8007812:	4603      	mov	r3, r0
 8007814:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007816:	7ffb      	ldrb	r3, [r7, #31]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d134      	bne.n	8007886 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	8992      	ldrh	r2, [r2, #12]
 8007830:	fbb3 f0f2 	udiv	r0, r3, r2
 8007834:	fb00 f202 	mul.w	r2, r0, r2
 8007838:	1a9b      	subs	r3, r3, r2
 800783a:	440b      	add	r3, r1
 800783c:	4618      	mov	r0, r3
 800783e:	f7ff fae3 	bl	8006e08 <ld_dword>
 8007842:	4603      	mov	r3, r0
 8007844:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007848:	4323      	orrs	r3, r4
 800784a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	8992      	ldrh	r2, [r2, #12]
 800785a:	fbb3 f0f2 	udiv	r0, r3, r2
 800785e:	fb00 f202 	mul.w	r2, r0, r2
 8007862:	1a9b      	subs	r3, r3, r2
 8007864:	440b      	add	r3, r1
 8007866:	6879      	ldr	r1, [r7, #4]
 8007868:	4618      	mov	r0, r3
 800786a:	f7ff fb0b 	bl	8006e84 <st_dword>
			fs->wflag = 1;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2201      	movs	r2, #1
 8007872:	70da      	strb	r2, [r3, #3]
			break;
 8007874:	e008      	b.n	8007888 <put_fat+0x22e>
		}
	}
 8007876:	bf00      	nop
 8007878:	e006      	b.n	8007888 <put_fat+0x22e>
			if (res != FR_OK) break;
 800787a:	bf00      	nop
 800787c:	e004      	b.n	8007888 <put_fat+0x22e>
			if (res != FR_OK) break;
 800787e:	bf00      	nop
 8007880:	e002      	b.n	8007888 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007882:	bf00      	nop
 8007884:	e000      	b.n	8007888 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007886:	bf00      	nop
	return res;
 8007888:	7ffb      	ldrb	r3, [r7, #31]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3724      	adds	r7, #36	; 0x24
 800788e:	46bd      	mov	sp, r7
 8007890:	bd90      	pop	{r4, r7, pc}

08007892 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b088      	sub	sp, #32
 8007896:	af00      	add	r7, sp, #0
 8007898:	60f8      	str	r0, [r7, #12]
 800789a:	60b9      	str	r1, [r7, #8]
 800789c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800789e:	2300      	movs	r3, #0
 80078a0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d904      	bls.n	80078b8 <remove_chain+0x26>
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d301      	bcc.n	80078bc <remove_chain+0x2a>
 80078b8:	2302      	movs	r3, #2
 80078ba:	e04b      	b.n	8007954 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00c      	beq.n	80078dc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80078c2:	f04f 32ff 	mov.w	r2, #4294967295
 80078c6:	6879      	ldr	r1, [r7, #4]
 80078c8:	69b8      	ldr	r0, [r7, #24]
 80078ca:	f7ff fec6 	bl	800765a <put_fat>
 80078ce:	4603      	mov	r3, r0
 80078d0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80078d2:	7ffb      	ldrb	r3, [r7, #31]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d001      	beq.n	80078dc <remove_chain+0x4a>
 80078d8:	7ffb      	ldrb	r3, [r7, #31]
 80078da:	e03b      	b.n	8007954 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80078dc:	68b9      	ldr	r1, [r7, #8]
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f7ff fde7 	bl	80074b2 <get_fat>
 80078e4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d031      	beq.n	8007950 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d101      	bne.n	80078f6 <remove_chain+0x64>
 80078f2:	2302      	movs	r3, #2
 80078f4:	e02e      	b.n	8007954 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078fc:	d101      	bne.n	8007902 <remove_chain+0x70>
 80078fe:	2301      	movs	r3, #1
 8007900:	e028      	b.n	8007954 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007902:	2200      	movs	r2, #0
 8007904:	68b9      	ldr	r1, [r7, #8]
 8007906:	69b8      	ldr	r0, [r7, #24]
 8007908:	f7ff fea7 	bl	800765a <put_fat>
 800790c:	4603      	mov	r3, r0
 800790e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007910:	7ffb      	ldrb	r3, [r7, #31]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d001      	beq.n	800791a <remove_chain+0x88>
 8007916:	7ffb      	ldrb	r3, [r7, #31]
 8007918:	e01c      	b.n	8007954 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	695a      	ldr	r2, [r3, #20]
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	3b02      	subs	r3, #2
 8007924:	429a      	cmp	r2, r3
 8007926:	d20b      	bcs.n	8007940 <remove_chain+0xae>
			fs->free_clst++;
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	1c5a      	adds	r2, r3, #1
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	791b      	ldrb	r3, [r3, #4]
 8007936:	f043 0301 	orr.w	r3, r3, #1
 800793a:	b2da      	uxtb	r2, r3
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	68ba      	ldr	r2, [r7, #8]
 800794a:	429a      	cmp	r2, r3
 800794c:	d3c6      	bcc.n	80078dc <remove_chain+0x4a>
 800794e:	e000      	b.n	8007952 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007950:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3720      	adds	r7, #32
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b088      	sub	sp, #32
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10d      	bne.n	800798e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d004      	beq.n	8007988 <create_chain+0x2c>
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	429a      	cmp	r2, r3
 8007986:	d31b      	bcc.n	80079c0 <create_chain+0x64>
 8007988:	2301      	movs	r3, #1
 800798a:	61bb      	str	r3, [r7, #24]
 800798c:	e018      	b.n	80079c0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800798e:	6839      	ldr	r1, [r7, #0]
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f7ff fd8e 	bl	80074b2 <get_fat>
 8007996:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d801      	bhi.n	80079a2 <create_chain+0x46>
 800799e:	2301      	movs	r3, #1
 80079a0:	e070      	b.n	8007a84 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a8:	d101      	bne.n	80079ae <create_chain+0x52>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	e06a      	b.n	8007a84 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d201      	bcs.n	80079bc <create_chain+0x60>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	e063      	b.n	8007a84 <create_chain+0x128>
		scl = clst;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	3301      	adds	r3, #1
 80079c8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	69fa      	ldr	r2, [r7, #28]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d307      	bcc.n	80079e4 <create_chain+0x88>
				ncl = 2;
 80079d4:	2302      	movs	r3, #2
 80079d6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80079d8:	69fa      	ldr	r2, [r7, #28]
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d901      	bls.n	80079e4 <create_chain+0x88>
 80079e0:	2300      	movs	r3, #0
 80079e2:	e04f      	b.n	8007a84 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80079e4:	69f9      	ldr	r1, [r7, #28]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7ff fd63 	bl	80074b2 <get_fat>
 80079ec:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00e      	beq.n	8007a12 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d003      	beq.n	8007a02 <create_chain+0xa6>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a00:	d101      	bne.n	8007a06 <create_chain+0xaa>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	e03e      	b.n	8007a84 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007a06:	69fa      	ldr	r2, [r7, #28]
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d1da      	bne.n	80079c4 <create_chain+0x68>
 8007a0e:	2300      	movs	r3, #0
 8007a10:	e038      	b.n	8007a84 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007a12:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007a14:	f04f 32ff 	mov.w	r2, #4294967295
 8007a18:	69f9      	ldr	r1, [r7, #28]
 8007a1a:	6938      	ldr	r0, [r7, #16]
 8007a1c:	f7ff fe1d 	bl	800765a <put_fat>
 8007a20:	4603      	mov	r3, r0
 8007a22:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007a24:	7dfb      	ldrb	r3, [r7, #23]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d109      	bne.n	8007a3e <create_chain+0xe2>
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d006      	beq.n	8007a3e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007a30:	69fa      	ldr	r2, [r7, #28]
 8007a32:	6839      	ldr	r1, [r7, #0]
 8007a34:	6938      	ldr	r0, [r7, #16]
 8007a36:	f7ff fe10 	bl	800765a <put_fat>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007a3e:	7dfb      	ldrb	r3, [r7, #23]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d116      	bne.n	8007a72 <create_chain+0x116>
		fs->last_clst = ncl;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	69fa      	ldr	r2, [r7, #28]
 8007a48:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	695a      	ldr	r2, [r3, #20]
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	3b02      	subs	r3, #2
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d804      	bhi.n	8007a62 <create_chain+0x106>
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	695b      	ldr	r3, [r3, #20]
 8007a5c:	1e5a      	subs	r2, r3, #1
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	791b      	ldrb	r3, [r3, #4]
 8007a66:	f043 0301 	orr.w	r3, r3, #1
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	711a      	strb	r2, [r3, #4]
 8007a70:	e007      	b.n	8007a82 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007a72:	7dfb      	ldrb	r3, [r7, #23]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d102      	bne.n	8007a7e <create_chain+0x122>
 8007a78:	f04f 33ff 	mov.w	r3, #4294967295
 8007a7c:	e000      	b.n	8007a80 <create_chain+0x124>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007a82:	69fb      	ldr	r3, [r7, #28]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3720      	adds	r7, #32
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	899b      	ldrh	r3, [r3, #12]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	8952      	ldrh	r2, [r2, #10]
 8007ab4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ab8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	1d1a      	adds	r2, r3, #4
 8007abe:	613a      	str	r2, [r7, #16]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d101      	bne.n	8007ace <clmt_clust+0x42>
 8007aca:	2300      	movs	r3, #0
 8007acc:	e010      	b.n	8007af0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d307      	bcc.n	8007ae6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	617b      	str	r3, [r7, #20]
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	3304      	adds	r3, #4
 8007ae2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007ae4:	e7e9      	b.n	8007aba <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007ae6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	4413      	add	r3, r2
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	371c      	adds	r7, #28
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b12:	d204      	bcs.n	8007b1e <dir_sdi+0x22>
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	f003 031f 	and.w	r3, r3, #31
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d001      	beq.n	8007b22 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007b1e:	2302      	movs	r3, #2
 8007b20:	e071      	b.n	8007c06 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d106      	bne.n	8007b42 <dir_sdi+0x46>
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d902      	bls.n	8007b42 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b40:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10c      	bne.n	8007b62 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	095b      	lsrs	r3, r3, #5
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	8912      	ldrh	r2, [r2, #8]
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d301      	bcc.n	8007b58 <dir_sdi+0x5c>
 8007b54:	2302      	movs	r3, #2
 8007b56:	e056      	b.n	8007c06 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	61da      	str	r2, [r3, #28]
 8007b60:	e02d      	b.n	8007bbe <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	895b      	ldrh	r3, [r3, #10]
 8007b66:	461a      	mov	r2, r3
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	899b      	ldrh	r3, [r3, #12]
 8007b6c:	fb02 f303 	mul.w	r3, r2, r3
 8007b70:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007b72:	e019      	b.n	8007ba8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6979      	ldr	r1, [r7, #20]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7ff fc9a 	bl	80074b2 <get_fat>
 8007b7e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b86:	d101      	bne.n	8007b8c <dir_sdi+0x90>
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e03c      	b.n	8007c06 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d904      	bls.n	8007b9c <dir_sdi+0xa0>
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d301      	bcc.n	8007ba0 <dir_sdi+0xa4>
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	e032      	b.n	8007c06 <dir_sdi+0x10a>
			ofs -= csz;
 8007ba0:	683a      	ldr	r2, [r7, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007ba8:	683a      	ldr	r2, [r7, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d2e1      	bcs.n	8007b74 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007bb0:	6979      	ldr	r1, [r7, #20]
 8007bb2:	6938      	ldr	r0, [r7, #16]
 8007bb4:	f7ff fc5e 	bl	8007474 <clust2sect>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	697a      	ldr	r2, [r7, #20]
 8007bc2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d101      	bne.n	8007bd0 <dir_sdi+0xd4>
 8007bcc:	2302      	movs	r3, #2
 8007bce:	e01a      	b.n	8007c06 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	69da      	ldr	r2, [r3, #28]
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	899b      	ldrh	r3, [r3, #12]
 8007bd8:	4619      	mov	r1, r3
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	fbb3 f3f1 	udiv	r3, r3, r1
 8007be0:	441a      	add	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	899b      	ldrh	r3, [r3, #12]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	fbb3 f0f2 	udiv	r0, r3, r2
 8007bf8:	fb00 f202 	mul.w	r2, r0, r2
 8007bfc:	1a9b      	subs	r3, r3, r2
 8007bfe:	18ca      	adds	r2, r1, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3718      	adds	r7, #24
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b086      	sub	sp, #24
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
 8007c16:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	695b      	ldr	r3, [r3, #20]
 8007c22:	3320      	adds	r3, #32
 8007c24:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	69db      	ldr	r3, [r3, #28]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d003      	beq.n	8007c36 <dir_next+0x28>
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c34:	d301      	bcc.n	8007c3a <dir_next+0x2c>
 8007c36:	2304      	movs	r3, #4
 8007c38:	e0bb      	b.n	8007db2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	899b      	ldrh	r3, [r3, #12]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c46:	fb01 f202 	mul.w	r2, r1, r2
 8007c4a:	1a9b      	subs	r3, r3, r2
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f040 809d 	bne.w	8007d8c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	1c5a      	adds	r2, r3, #1
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10b      	bne.n	8007c7c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	095b      	lsrs	r3, r3, #5
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	8912      	ldrh	r2, [r2, #8]
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	f0c0 808d 	bcc.w	8007d8c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	61da      	str	r2, [r3, #28]
 8007c78:	2304      	movs	r3, #4
 8007c7a:	e09a      	b.n	8007db2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	899b      	ldrh	r3, [r3, #12]
 8007c80:	461a      	mov	r2, r3
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	8952      	ldrh	r2, [r2, #10]
 8007c8c:	3a01      	subs	r2, #1
 8007c8e:	4013      	ands	r3, r2
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d17b      	bne.n	8007d8c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	f7ff fc08 	bl	80074b2 <get_fat>
 8007ca2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d801      	bhi.n	8007cae <dir_next+0xa0>
 8007caa:	2302      	movs	r3, #2
 8007cac:	e081      	b.n	8007db2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb4:	d101      	bne.n	8007cba <dir_next+0xac>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e07b      	b.n	8007db2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d359      	bcc.n	8007d78 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d104      	bne.n	8007cd4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	61da      	str	r2, [r3, #28]
 8007cd0:	2304      	movs	r3, #4
 8007cd2:	e06e      	b.n	8007db2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	699b      	ldr	r3, [r3, #24]
 8007cda:	4619      	mov	r1, r3
 8007cdc:	4610      	mov	r0, r2
 8007cde:	f7ff fe3d 	bl	800795c <create_chain>
 8007ce2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d101      	bne.n	8007cee <dir_next+0xe0>
 8007cea:	2307      	movs	r3, #7
 8007cec:	e061      	b.n	8007db2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d101      	bne.n	8007cf8 <dir_next+0xea>
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	e05c      	b.n	8007db2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfe:	d101      	bne.n	8007d04 <dir_next+0xf6>
 8007d00:	2301      	movs	r3, #1
 8007d02:	e056      	b.n	8007db2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f7ff fad3 	bl	80072b0 <sync_window>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <dir_next+0x106>
 8007d10:	2301      	movs	r3, #1
 8007d12:	e04e      	b.n	8007db2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	899b      	ldrh	r3, [r3, #12]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	2100      	movs	r1, #0
 8007d22:	f7ff f8fc 	bl	8006f1e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007d26:	2300      	movs	r3, #0
 8007d28:	613b      	str	r3, [r7, #16]
 8007d2a:	6979      	ldr	r1, [r7, #20]
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f7ff fba1 	bl	8007474 <clust2sect>
 8007d32:	4602      	mov	r2, r0
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	631a      	str	r2, [r3, #48]	; 0x30
 8007d38:	e012      	b.n	8007d60 <dir_next+0x152>
						fs->wflag = 1;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f7ff fab5 	bl	80072b0 <sync_window>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d001      	beq.n	8007d50 <dir_next+0x142>
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e030      	b.n	8007db2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	3301      	adds	r3, #1
 8007d54:	613b      	str	r3, [r7, #16]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5a:	1c5a      	adds	r2, r3, #1
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	631a      	str	r2, [r3, #48]	; 0x30
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	895b      	ldrh	r3, [r3, #10]
 8007d64:	461a      	mov	r2, r3
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d3e6      	bcc.n	8007d3a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	1ad2      	subs	r2, r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007d7e:	6979      	ldr	r1, [r7, #20]
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f7ff fb77 	bl	8007474 <clust2sect>
 8007d86:	4602      	mov	r2, r0
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	899b      	ldrh	r3, [r3, #12]
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	fbb3 f0f2 	udiv	r0, r3, r2
 8007da4:	fb00 f202 	mul.w	r2, r0, r2
 8007da8:	1a9b      	subs	r3, r3, r2
 8007daa:	18ca      	adds	r2, r1, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3718      	adds	r7, #24
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b086      	sub	sp, #24
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007dca:	2100      	movs	r1, #0
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f7ff fe95 	bl	8007afc <dir_sdi>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007dd6:	7dfb      	ldrb	r3, [r7, #23]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d12b      	bne.n	8007e34 <dir_alloc+0x7a>
		n = 0;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	69db      	ldr	r3, [r3, #28]
 8007de4:	4619      	mov	r1, r3
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f7ff faa6 	bl	8007338 <move_window>
 8007dec:	4603      	mov	r3, r0
 8007dee:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007df0:	7dfb      	ldrb	r3, [r7, #23]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d11d      	bne.n	8007e32 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	2be5      	cmp	r3, #229	; 0xe5
 8007dfe:	d004      	beq.n	8007e0a <dir_alloc+0x50>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a1b      	ldr	r3, [r3, #32]
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d107      	bne.n	8007e1a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	613b      	str	r3, [r7, #16]
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d102      	bne.n	8007e1e <dir_alloc+0x64>
 8007e18:	e00c      	b.n	8007e34 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007e1e:	2101      	movs	r1, #1
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f7ff fef4 	bl	8007c0e <dir_next>
 8007e26:	4603      	mov	r3, r0
 8007e28:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007e2a:	7dfb      	ldrb	r3, [r7, #23]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d0d7      	beq.n	8007de0 <dir_alloc+0x26>
 8007e30:	e000      	b.n	8007e34 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007e32:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007e34:	7dfb      	ldrb	r3, [r7, #23]
 8007e36:	2b04      	cmp	r3, #4
 8007e38:	d101      	bne.n	8007e3e <dir_alloc+0x84>
 8007e3a:	2307      	movs	r3, #7
 8007e3c:	75fb      	strb	r3, [r7, #23]
	return res;
 8007e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3718      	adds	r7, #24
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	331a      	adds	r3, #26
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fe ffbe 	bl	8006dd8 <ld_word>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	2b03      	cmp	r3, #3
 8007e66:	d109      	bne.n	8007e7c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	3314      	adds	r3, #20
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7fe ffb3 	bl	8006dd8 <ld_word>
 8007e72:	4603      	mov	r3, r0
 8007e74:	041b      	lsls	r3, r3, #16
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b084      	sub	sp, #16
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	60f8      	str	r0, [r7, #12]
 8007e8e:	60b9      	str	r1, [r7, #8]
 8007e90:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	331a      	adds	r3, #26
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	b292      	uxth	r2, r2
 8007e9a:	4611      	mov	r1, r2
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fe ffd6 	bl	8006e4e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	2b03      	cmp	r3, #3
 8007ea8:	d109      	bne.n	8007ebe <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	f103 0214 	add.w	r2, r3, #20
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	0c1b      	lsrs	r3, r3, #16
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	4610      	mov	r0, r2
 8007eba:	f7fe ffc8 	bl	8006e4e <st_word>
	}
}
 8007ebe:	bf00      	nop
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b086      	sub	sp, #24
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7ff fe10 	bl	8007afc <dir_sdi>
 8007edc:	4603      	mov	r3, r0
 8007ede:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007ee0:	7dfb      	ldrb	r3, [r7, #23]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <dir_find+0x24>
 8007ee6:	7dfb      	ldrb	r3, [r7, #23]
 8007ee8:	e03e      	b.n	8007f68 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	4619      	mov	r1, r3
 8007ef0:	6938      	ldr	r0, [r7, #16]
 8007ef2:	f7ff fa21 	bl	8007338 <move_window>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007efa:	7dfb      	ldrb	r3, [r7, #23]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d12f      	bne.n	8007f60 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a1b      	ldr	r3, [r3, #32]
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d102      	bne.n	8007f14 <dir_find+0x4e>
 8007f0e:	2304      	movs	r3, #4
 8007f10:	75fb      	strb	r3, [r7, #23]
 8007f12:	e028      	b.n	8007f66 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a1b      	ldr	r3, [r3, #32]
 8007f18:	330b      	adds	r3, #11
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a1b      	ldr	r3, [r3, #32]
 8007f2a:	330b      	adds	r3, #11
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	f003 0308 	and.w	r3, r3, #8
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10a      	bne.n	8007f4c <dir_find+0x86>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a18      	ldr	r0, [r3, #32]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	3324      	adds	r3, #36	; 0x24
 8007f3e:	220b      	movs	r2, #11
 8007f40:	4619      	mov	r1, r3
 8007f42:	f7ff f807 	bl	8006f54 <mem_cmp>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00b      	beq.n	8007f64 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7ff fe5d 	bl	8007c0e <dir_next>
 8007f54:	4603      	mov	r3, r0
 8007f56:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d0c5      	beq.n	8007eea <dir_find+0x24>
 8007f5e:	e002      	b.n	8007f66 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007f60:	bf00      	nop
 8007f62:	e000      	b.n	8007f66 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007f64:	bf00      	nop

	return res;
 8007f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3718      	adds	r7, #24
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007f7e:	2101      	movs	r1, #1
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7ff ff1a 	bl	8007dba <dir_alloc>
 8007f86:	4603      	mov	r3, r0
 8007f88:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d11c      	bne.n	8007fca <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	69db      	ldr	r3, [r3, #28]
 8007f94:	4619      	mov	r1, r3
 8007f96:	68b8      	ldr	r0, [r7, #8]
 8007f98:	f7ff f9ce 	bl	8007338 <move_window>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007fa0:	7bfb      	ldrb	r3, [r7, #15]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d111      	bne.n	8007fca <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	2220      	movs	r2, #32
 8007fac:	2100      	movs	r1, #0
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7fe ffb5 	bl	8006f1e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a18      	ldr	r0, [r3, #32]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	3324      	adds	r3, #36	; 0x24
 8007fbc:	220b      	movs	r2, #11
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	f7fe ff8c 	bl	8006edc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b086      	sub	sp, #24
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	69db      	ldr	r3, [r3, #28]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d04e      	beq.n	800808a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8007fec:	2300      	movs	r3, #0
 8007fee:	613b      	str	r3, [r7, #16]
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8007ff4:	e021      	b.n	800803a <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a1a      	ldr	r2, [r3, #32]
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	1c59      	adds	r1, r3, #1
 8007ffe:	6179      	str	r1, [r7, #20]
 8008000:	4413      	add	r3, r2
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8008006:	7bfb      	ldrb	r3, [r7, #15]
 8008008:	2b20      	cmp	r3, #32
 800800a:	d100      	bne.n	800800e <get_fileinfo+0x3a>
 800800c:	e015      	b.n	800803a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800800e:	7bfb      	ldrb	r3, [r7, #15]
 8008010:	2b05      	cmp	r3, #5
 8008012:	d101      	bne.n	8008018 <get_fileinfo+0x44>
 8008014:	23e5      	movs	r3, #229	; 0xe5
 8008016:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	2b09      	cmp	r3, #9
 800801c:	d106      	bne.n	800802c <get_fileinfo+0x58>
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	1c5a      	adds	r2, r3, #1
 8008022:	613a      	str	r2, [r7, #16]
 8008024:	683a      	ldr	r2, [r7, #0]
 8008026:	4413      	add	r3, r2
 8008028:	222e      	movs	r2, #46	; 0x2e
 800802a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	1c5a      	adds	r2, r3, #1
 8008030:	613a      	str	r2, [r7, #16]
 8008032:	683a      	ldr	r2, [r7, #0]
 8008034:	4413      	add	r3, r2
 8008036:	7bfa      	ldrb	r2, [r7, #15]
 8008038:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	2b0a      	cmp	r3, #10
 800803e:	d9da      	bls.n	8007ff6 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	4413      	add	r3, r2
 8008046:	3309      	adds	r3, #9
 8008048:	2200      	movs	r2, #0
 800804a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a1b      	ldr	r3, [r3, #32]
 8008050:	7ada      	ldrb	r2, [r3, #11]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a1b      	ldr	r3, [r3, #32]
 800805a:	331c      	adds	r3, #28
 800805c:	4618      	mov	r0, r3
 800805e:	f7fe fed3 	bl	8006e08 <ld_dword>
 8008062:	4602      	mov	r2, r0
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a1b      	ldr	r3, [r3, #32]
 800806c:	3316      	adds	r3, #22
 800806e:	4618      	mov	r0, r3
 8008070:	f7fe feca 	bl	8006e08 <ld_dword>
 8008074:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	b29a      	uxth	r2, r3
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	80da      	strh	r2, [r3, #6]
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	0c1b      	lsrs	r3, r3, #16
 8008082:	b29a      	uxth	r2, r3
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	809a      	strh	r2, [r3, #4]
 8008088:	e000      	b.n	800808c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800808a:	bf00      	nop
}
 800808c:	3718      	adds	r7, #24
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
	...

08008094 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b088      	sub	sp, #32
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	60fb      	str	r3, [r7, #12]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	3324      	adds	r3, #36	; 0x24
 80080a8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80080aa:	220b      	movs	r2, #11
 80080ac:	2120      	movs	r1, #32
 80080ae:	68b8      	ldr	r0, [r7, #8]
 80080b0:	f7fe ff35 	bl	8006f1e <mem_set>
	si = i = 0; ni = 8;
 80080b4:	2300      	movs	r3, #0
 80080b6:	613b      	str	r3, [r7, #16]
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	61fb      	str	r3, [r7, #28]
 80080bc:	2308      	movs	r3, #8
 80080be:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	1c5a      	adds	r2, r3, #1
 80080c4:	61fa      	str	r2, [r7, #28]
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	4413      	add	r3, r2
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80080ce:	7efb      	ldrb	r3, [r7, #27]
 80080d0:	2b20      	cmp	r3, #32
 80080d2:	d94e      	bls.n	8008172 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80080d4:	7efb      	ldrb	r3, [r7, #27]
 80080d6:	2b2f      	cmp	r3, #47	; 0x2f
 80080d8:	d006      	beq.n	80080e8 <create_name+0x54>
 80080da:	7efb      	ldrb	r3, [r7, #27]
 80080dc:	2b5c      	cmp	r3, #92	; 0x5c
 80080de:	d110      	bne.n	8008102 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80080e0:	e002      	b.n	80080e8 <create_name+0x54>
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	3301      	adds	r3, #1
 80080e6:	61fb      	str	r3, [r7, #28]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	4413      	add	r3, r2
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	2b2f      	cmp	r3, #47	; 0x2f
 80080f2:	d0f6      	beq.n	80080e2 <create_name+0x4e>
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	4413      	add	r3, r2
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	2b5c      	cmp	r3, #92	; 0x5c
 80080fe:	d0f0      	beq.n	80080e2 <create_name+0x4e>
			break;
 8008100:	e038      	b.n	8008174 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008102:	7efb      	ldrb	r3, [r7, #27]
 8008104:	2b2e      	cmp	r3, #46	; 0x2e
 8008106:	d003      	beq.n	8008110 <create_name+0x7c>
 8008108:	693a      	ldr	r2, [r7, #16]
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	429a      	cmp	r2, r3
 800810e:	d30c      	bcc.n	800812a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	2b0b      	cmp	r3, #11
 8008114:	d002      	beq.n	800811c <create_name+0x88>
 8008116:	7efb      	ldrb	r3, [r7, #27]
 8008118:	2b2e      	cmp	r3, #46	; 0x2e
 800811a:	d001      	beq.n	8008120 <create_name+0x8c>
 800811c:	2306      	movs	r3, #6
 800811e:	e044      	b.n	80081aa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008120:	2308      	movs	r3, #8
 8008122:	613b      	str	r3, [r7, #16]
 8008124:	230b      	movs	r3, #11
 8008126:	617b      	str	r3, [r7, #20]
			continue;
 8008128:	e022      	b.n	8008170 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800812a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800812e:	2b00      	cmp	r3, #0
 8008130:	da04      	bge.n	800813c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008132:	7efb      	ldrb	r3, [r7, #27]
 8008134:	3b80      	subs	r3, #128	; 0x80
 8008136:	4a1f      	ldr	r2, [pc, #124]	; (80081b4 <create_name+0x120>)
 8008138:	5cd3      	ldrb	r3, [r2, r3]
 800813a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800813c:	7efb      	ldrb	r3, [r7, #27]
 800813e:	4619      	mov	r1, r3
 8008140:	481d      	ldr	r0, [pc, #116]	; (80081b8 <create_name+0x124>)
 8008142:	f7fe ff2e 	bl	8006fa2 <chk_chr>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d001      	beq.n	8008150 <create_name+0xbc>
 800814c:	2306      	movs	r3, #6
 800814e:	e02c      	b.n	80081aa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008150:	7efb      	ldrb	r3, [r7, #27]
 8008152:	2b60      	cmp	r3, #96	; 0x60
 8008154:	d905      	bls.n	8008162 <create_name+0xce>
 8008156:	7efb      	ldrb	r3, [r7, #27]
 8008158:	2b7a      	cmp	r3, #122	; 0x7a
 800815a:	d802      	bhi.n	8008162 <create_name+0xce>
 800815c:	7efb      	ldrb	r3, [r7, #27]
 800815e:	3b20      	subs	r3, #32
 8008160:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	1c5a      	adds	r2, r3, #1
 8008166:	613a      	str	r2, [r7, #16]
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	4413      	add	r3, r2
 800816c:	7efa      	ldrb	r2, [r7, #27]
 800816e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008170:	e7a6      	b.n	80080c0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008172:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	441a      	add	r2, r3
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <create_name+0xf4>
 8008184:	2306      	movs	r3, #6
 8008186:	e010      	b.n	80081aa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	2be5      	cmp	r3, #229	; 0xe5
 800818e:	d102      	bne.n	8008196 <create_name+0x102>
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	2205      	movs	r2, #5
 8008194:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008196:	7efb      	ldrb	r3, [r7, #27]
 8008198:	2b20      	cmp	r3, #32
 800819a:	d801      	bhi.n	80081a0 <create_name+0x10c>
 800819c:	2204      	movs	r2, #4
 800819e:	e000      	b.n	80081a2 <create_name+0x10e>
 80081a0:	2200      	movs	r2, #0
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	330b      	adds	r3, #11
 80081a6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80081a8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3720      	adds	r7, #32
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	0800b338 	.word	0x0800b338
 80081b8:	0800b2c0 	.word	0x0800b2c0

080081bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80081d0:	e002      	b.n	80081d8 <follow_path+0x1c>
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	3301      	adds	r3, #1
 80081d6:	603b      	str	r3, [r7, #0]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	2b2f      	cmp	r3, #47	; 0x2f
 80081de:	d0f8      	beq.n	80081d2 <follow_path+0x16>
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	2b5c      	cmp	r3, #92	; 0x5c
 80081e6:	d0f4      	beq.n	80081d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	2200      	movs	r2, #0
 80081ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	2b1f      	cmp	r3, #31
 80081f4:	d80a      	bhi.n	800820c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2280      	movs	r2, #128	; 0x80
 80081fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80081fe:	2100      	movs	r1, #0
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7ff fc7b 	bl	8007afc <dir_sdi>
 8008206:	4603      	mov	r3, r0
 8008208:	75fb      	strb	r3, [r7, #23]
 800820a:	e048      	b.n	800829e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800820c:	463b      	mov	r3, r7
 800820e:	4619      	mov	r1, r3
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7ff ff3f 	bl	8008094 <create_name>
 8008216:	4603      	mov	r3, r0
 8008218:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800821a:	7dfb      	ldrb	r3, [r7, #23]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d139      	bne.n	8008294 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f7ff fe50 	bl	8007ec6 <dir_find>
 8008226:	4603      	mov	r3, r0
 8008228:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008230:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008232:	7dfb      	ldrb	r3, [r7, #23]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00a      	beq.n	800824e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008238:	7dfb      	ldrb	r3, [r7, #23]
 800823a:	2b04      	cmp	r3, #4
 800823c:	d12c      	bne.n	8008298 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800823e:	7afb      	ldrb	r3, [r7, #11]
 8008240:	f003 0304 	and.w	r3, r3, #4
 8008244:	2b00      	cmp	r3, #0
 8008246:	d127      	bne.n	8008298 <follow_path+0xdc>
 8008248:	2305      	movs	r3, #5
 800824a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800824c:	e024      	b.n	8008298 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800824e:	7afb      	ldrb	r3, [r7, #11]
 8008250:	f003 0304 	and.w	r3, r3, #4
 8008254:	2b00      	cmp	r3, #0
 8008256:	d121      	bne.n	800829c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	799b      	ldrb	r3, [r3, #6]
 800825c:	f003 0310 	and.w	r3, r3, #16
 8008260:	2b00      	cmp	r3, #0
 8008262:	d102      	bne.n	800826a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008264:	2305      	movs	r3, #5
 8008266:	75fb      	strb	r3, [r7, #23]
 8008268:	e019      	b.n	800829e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	695b      	ldr	r3, [r3, #20]
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	8992      	ldrh	r2, [r2, #12]
 8008278:	fbb3 f0f2 	udiv	r0, r3, r2
 800827c:	fb00 f202 	mul.w	r2, r0, r2
 8008280:	1a9b      	subs	r3, r3, r2
 8008282:	440b      	add	r3, r1
 8008284:	4619      	mov	r1, r3
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	f7ff fdde 	bl	8007e48 <ld_clust>
 800828c:	4602      	mov	r2, r0
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008292:	e7bb      	b.n	800820c <follow_path+0x50>
			if (res != FR_OK) break;
 8008294:	bf00      	nop
 8008296:	e002      	b.n	800829e <follow_path+0xe2>
				break;
 8008298:	bf00      	nop
 800829a:	e000      	b.n	800829e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800829c:	bf00      	nop
			}
		}
	}

	return res;
 800829e:	7dfb      	ldrb	r3, [r7, #23]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3718      	adds	r7, #24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b087      	sub	sp, #28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80082b0:	f04f 33ff 	mov.w	r3, #4294967295
 80082b4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d031      	beq.n	8008322 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	617b      	str	r3, [r7, #20]
 80082c4:	e002      	b.n	80082cc <get_ldnumber+0x24>
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	3301      	adds	r3, #1
 80082ca:	617b      	str	r3, [r7, #20]
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	2b20      	cmp	r3, #32
 80082d2:	d903      	bls.n	80082dc <get_ldnumber+0x34>
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	2b3a      	cmp	r3, #58	; 0x3a
 80082da:	d1f4      	bne.n	80082c6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	2b3a      	cmp	r3, #58	; 0x3a
 80082e2:	d11c      	bne.n	800831e <get_ldnumber+0x76>
			tp = *path;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	1c5a      	adds	r2, r3, #1
 80082ee:	60fa      	str	r2, [r7, #12]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	3b30      	subs	r3, #48	; 0x30
 80082f4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	2b09      	cmp	r3, #9
 80082fa:	d80e      	bhi.n	800831a <get_ldnumber+0x72>
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	429a      	cmp	r2, r3
 8008302:	d10a      	bne.n	800831a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d107      	bne.n	800831a <get_ldnumber+0x72>
					vol = (int)i;
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	3301      	adds	r3, #1
 8008312:	617b      	str	r3, [r7, #20]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	697a      	ldr	r2, [r7, #20]
 8008318:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	e002      	b.n	8008324 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800831e:	2300      	movs	r3, #0
 8008320:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008322:	693b      	ldr	r3, [r7, #16]
}
 8008324:	4618      	mov	r0, r3
 8008326:	371c      	adds	r7, #28
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	70da      	strb	r2, [r3, #3]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f04f 32ff 	mov.w	r2, #4294967295
 8008346:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008348:	6839      	ldr	r1, [r7, #0]
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7fe fff4 	bl	8007338 <move_window>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d001      	beq.n	800835a <check_fs+0x2a>
 8008356:	2304      	movs	r3, #4
 8008358:	e038      	b.n	80083cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	3334      	adds	r3, #52	; 0x34
 800835e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008362:	4618      	mov	r0, r3
 8008364:	f7fe fd38 	bl	8006dd8 <ld_word>
 8008368:	4603      	mov	r3, r0
 800836a:	461a      	mov	r2, r3
 800836c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008370:	429a      	cmp	r2, r3
 8008372:	d001      	beq.n	8008378 <check_fs+0x48>
 8008374:	2303      	movs	r3, #3
 8008376:	e029      	b.n	80083cc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800837e:	2be9      	cmp	r3, #233	; 0xe9
 8008380:	d009      	beq.n	8008396 <check_fs+0x66>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008388:	2beb      	cmp	r3, #235	; 0xeb
 800838a:	d11e      	bne.n	80083ca <check_fs+0x9a>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008392:	2b90      	cmp	r3, #144	; 0x90
 8008394:	d119      	bne.n	80083ca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	3334      	adds	r3, #52	; 0x34
 800839a:	3336      	adds	r3, #54	; 0x36
 800839c:	4618      	mov	r0, r3
 800839e:	f7fe fd33 	bl	8006e08 <ld_dword>
 80083a2:	4603      	mov	r3, r0
 80083a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80083a8:	4a0a      	ldr	r2, [pc, #40]	; (80083d4 <check_fs+0xa4>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d101      	bne.n	80083b2 <check_fs+0x82>
 80083ae:	2300      	movs	r3, #0
 80083b0:	e00c      	b.n	80083cc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	3334      	adds	r3, #52	; 0x34
 80083b6:	3352      	adds	r3, #82	; 0x52
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7fe fd25 	bl	8006e08 <ld_dword>
 80083be:	4603      	mov	r3, r0
 80083c0:	4a05      	ldr	r2, [pc, #20]	; (80083d8 <check_fs+0xa8>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d101      	bne.n	80083ca <check_fs+0x9a>
 80083c6:	2300      	movs	r3, #0
 80083c8:	e000      	b.n	80083cc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80083ca:	2302      	movs	r3, #2
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	00544146 	.word	0x00544146
 80083d8:	33544146 	.word	0x33544146

080083dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b096      	sub	sp, #88	; 0x58
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	4613      	mov	r3, r2
 80083e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	2200      	movs	r2, #0
 80083ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f7ff ff59 	bl	80082a8 <get_ldnumber>
 80083f6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80083f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	da01      	bge.n	8008402 <find_volume+0x26>
 80083fe:	230b      	movs	r3, #11
 8008400:	e262      	b.n	80088c8 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008402:	4a9f      	ldr	r2, [pc, #636]	; (8008680 <find_volume+0x2a4>)
 8008404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800840a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840e:	2b00      	cmp	r3, #0
 8008410:	d101      	bne.n	8008416 <find_volume+0x3a>
 8008412:	230c      	movs	r3, #12
 8008414:	e258      	b.n	80088c8 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800841a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800841c:	79fb      	ldrb	r3, [r7, #7]
 800841e:	f023 0301 	bic.w	r3, r3, #1
 8008422:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d01a      	beq.n	8008462 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800842c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842e:	785b      	ldrb	r3, [r3, #1]
 8008430:	4618      	mov	r0, r3
 8008432:	f7fe fc33 	bl	8006c9c <disk_status>
 8008436:	4603      	mov	r3, r0
 8008438:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800843c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008440:	f003 0301 	and.w	r3, r3, #1
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10c      	bne.n	8008462 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008448:	79fb      	ldrb	r3, [r7, #7]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d007      	beq.n	800845e <find_volume+0x82>
 800844e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008452:	f003 0304 	and.w	r3, r3, #4
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800845a:	230a      	movs	r3, #10
 800845c:	e234      	b.n	80088c8 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800845e:	2300      	movs	r3, #0
 8008460:	e232      	b.n	80088c8 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008464:	2200      	movs	r2, #0
 8008466:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800846a:	b2da      	uxtb	r2, r3
 800846c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008472:	785b      	ldrb	r3, [r3, #1]
 8008474:	4618      	mov	r0, r3
 8008476:	f7fe fc2b 	bl	8006cd0 <disk_initialize>
 800847a:	4603      	mov	r3, r0
 800847c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008480:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008484:	f003 0301 	and.w	r3, r3, #1
 8008488:	2b00      	cmp	r3, #0
 800848a:	d001      	beq.n	8008490 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800848c:	2303      	movs	r3, #3
 800848e:	e21b      	b.n	80088c8 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008490:	79fb      	ldrb	r3, [r7, #7]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d007      	beq.n	80084a6 <find_volume+0xca>
 8008496:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800849a:	f003 0304 	and.w	r3, r3, #4
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d001      	beq.n	80084a6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80084a2:	230a      	movs	r3, #10
 80084a4:	e210      	b.n	80088c8 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80084a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a8:	7858      	ldrb	r0, [r3, #1]
 80084aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ac:	330c      	adds	r3, #12
 80084ae:	461a      	mov	r2, r3
 80084b0:	2102      	movs	r1, #2
 80084b2:	f7fe fc73 	bl	8006d9c <disk_ioctl>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d001      	beq.n	80084c0 <find_volume+0xe4>
 80084bc:	2301      	movs	r3, #1
 80084be:	e203      	b.n	80088c8 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80084c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c2:	899b      	ldrh	r3, [r3, #12]
 80084c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084c8:	d80d      	bhi.n	80084e6 <find_volume+0x10a>
 80084ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084cc:	899b      	ldrh	r3, [r3, #12]
 80084ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084d2:	d308      	bcc.n	80084e6 <find_volume+0x10a>
 80084d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d6:	899b      	ldrh	r3, [r3, #12]
 80084d8:	461a      	mov	r2, r3
 80084da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084dc:	899b      	ldrh	r3, [r3, #12]
 80084de:	3b01      	subs	r3, #1
 80084e0:	4013      	ands	r3, r2
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d001      	beq.n	80084ea <find_volume+0x10e>
 80084e6:	2301      	movs	r3, #1
 80084e8:	e1ee      	b.n	80088c8 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80084ea:	2300      	movs	r3, #0
 80084ec:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80084ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80084f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80084f2:	f7ff ff1d 	bl	8008330 <check_fs>
 80084f6:	4603      	mov	r3, r0
 80084f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80084fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008500:	2b02      	cmp	r3, #2
 8008502:	d149      	bne.n	8008598 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008504:	2300      	movs	r3, #0
 8008506:	643b      	str	r3, [r7, #64]	; 0x40
 8008508:	e01e      	b.n	8008548 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800850a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008512:	011b      	lsls	r3, r3, #4
 8008514:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008518:	4413      	add	r3, r2
 800851a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800851c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851e:	3304      	adds	r3, #4
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d006      	beq.n	8008534 <find_volume+0x158>
 8008526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008528:	3308      	adds	r3, #8
 800852a:	4618      	mov	r0, r3
 800852c:	f7fe fc6c 	bl	8006e08 <ld_dword>
 8008530:	4602      	mov	r2, r0
 8008532:	e000      	b.n	8008536 <find_volume+0x15a>
 8008534:	2200      	movs	r2, #0
 8008536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	3358      	adds	r3, #88	; 0x58
 800853c:	443b      	add	r3, r7
 800853e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008544:	3301      	adds	r3, #1
 8008546:	643b      	str	r3, [r7, #64]	; 0x40
 8008548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800854a:	2b03      	cmp	r3, #3
 800854c:	d9dd      	bls.n	800850a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800854e:	2300      	movs	r3, #0
 8008550:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008554:	2b00      	cmp	r3, #0
 8008556:	d002      	beq.n	800855e <find_volume+0x182>
 8008558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800855a:	3b01      	subs	r3, #1
 800855c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800855e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	3358      	adds	r3, #88	; 0x58
 8008564:	443b      	add	r3, r7
 8008566:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800856a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800856c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800856e:	2b00      	cmp	r3, #0
 8008570:	d005      	beq.n	800857e <find_volume+0x1a2>
 8008572:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008574:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008576:	f7ff fedb 	bl	8008330 <check_fs>
 800857a:	4603      	mov	r3, r0
 800857c:	e000      	b.n	8008580 <find_volume+0x1a4>
 800857e:	2303      	movs	r3, #3
 8008580:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008584:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008588:	2b01      	cmp	r3, #1
 800858a:	d905      	bls.n	8008598 <find_volume+0x1bc>
 800858c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800858e:	3301      	adds	r3, #1
 8008590:	643b      	str	r3, [r7, #64]	; 0x40
 8008592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008594:	2b03      	cmp	r3, #3
 8008596:	d9e2      	bls.n	800855e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008598:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800859c:	2b04      	cmp	r3, #4
 800859e:	d101      	bne.n	80085a4 <find_volume+0x1c8>
 80085a0:	2301      	movs	r3, #1
 80085a2:	e191      	b.n	80088c8 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80085a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d901      	bls.n	80085b0 <find_volume+0x1d4>
 80085ac:	230d      	movs	r3, #13
 80085ae:	e18b      	b.n	80088c8 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80085b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b2:	3334      	adds	r3, #52	; 0x34
 80085b4:	330b      	adds	r3, #11
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fe fc0e 	bl	8006dd8 <ld_word>
 80085bc:	4603      	mov	r3, r0
 80085be:	461a      	mov	r2, r3
 80085c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c2:	899b      	ldrh	r3, [r3, #12]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d001      	beq.n	80085cc <find_volume+0x1f0>
 80085c8:	230d      	movs	r3, #13
 80085ca:	e17d      	b.n	80088c8 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80085cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ce:	3334      	adds	r3, #52	; 0x34
 80085d0:	3316      	adds	r3, #22
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fe fc00 	bl	8006dd8 <ld_word>
 80085d8:	4603      	mov	r3, r0
 80085da:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80085dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d106      	bne.n	80085f0 <find_volume+0x214>
 80085e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e4:	3334      	adds	r3, #52	; 0x34
 80085e6:	3324      	adds	r3, #36	; 0x24
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fe fc0d 	bl	8006e08 <ld_dword>
 80085ee:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80085f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085f4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80085f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80085fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008602:	789b      	ldrb	r3, [r3, #2]
 8008604:	2b01      	cmp	r3, #1
 8008606:	d005      	beq.n	8008614 <find_volume+0x238>
 8008608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860a:	789b      	ldrb	r3, [r3, #2]
 800860c:	2b02      	cmp	r3, #2
 800860e:	d001      	beq.n	8008614 <find_volume+0x238>
 8008610:	230d      	movs	r3, #13
 8008612:	e159      	b.n	80088c8 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008616:	789b      	ldrb	r3, [r3, #2]
 8008618:	461a      	mov	r2, r3
 800861a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800861c:	fb02 f303 	mul.w	r3, r2, r3
 8008620:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008628:	b29a      	uxth	r2, r3
 800862a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800862e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008630:	895b      	ldrh	r3, [r3, #10]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d008      	beq.n	8008648 <find_volume+0x26c>
 8008636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008638:	895b      	ldrh	r3, [r3, #10]
 800863a:	461a      	mov	r2, r3
 800863c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863e:	895b      	ldrh	r3, [r3, #10]
 8008640:	3b01      	subs	r3, #1
 8008642:	4013      	ands	r3, r2
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <find_volume+0x270>
 8008648:	230d      	movs	r3, #13
 800864a:	e13d      	b.n	80088c8 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800864c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864e:	3334      	adds	r3, #52	; 0x34
 8008650:	3311      	adds	r3, #17
 8008652:	4618      	mov	r0, r3
 8008654:	f7fe fbc0 	bl	8006dd8 <ld_word>
 8008658:	4603      	mov	r3, r0
 800865a:	461a      	mov	r2, r3
 800865c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008662:	891b      	ldrh	r3, [r3, #8]
 8008664:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008666:	8992      	ldrh	r2, [r2, #12]
 8008668:	0952      	lsrs	r2, r2, #5
 800866a:	b292      	uxth	r2, r2
 800866c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008670:	fb01 f202 	mul.w	r2, r1, r2
 8008674:	1a9b      	subs	r3, r3, r2
 8008676:	b29b      	uxth	r3, r3
 8008678:	2b00      	cmp	r3, #0
 800867a:	d003      	beq.n	8008684 <find_volume+0x2a8>
 800867c:	230d      	movs	r3, #13
 800867e:	e123      	b.n	80088c8 <find_volume+0x4ec>
 8008680:	20002ee4 	.word	0x20002ee4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008686:	3334      	adds	r3, #52	; 0x34
 8008688:	3313      	adds	r3, #19
 800868a:	4618      	mov	r0, r3
 800868c:	f7fe fba4 	bl	8006dd8 <ld_word>
 8008690:	4603      	mov	r3, r0
 8008692:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008696:	2b00      	cmp	r3, #0
 8008698:	d106      	bne.n	80086a8 <find_volume+0x2cc>
 800869a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869c:	3334      	adds	r3, #52	; 0x34
 800869e:	3320      	adds	r3, #32
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7fe fbb1 	bl	8006e08 <ld_dword>
 80086a6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80086a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086aa:	3334      	adds	r3, #52	; 0x34
 80086ac:	330e      	adds	r3, #14
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7fe fb92 	bl	8006dd8 <ld_word>
 80086b4:	4603      	mov	r3, r0
 80086b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80086b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d101      	bne.n	80086c2 <find_volume+0x2e6>
 80086be:	230d      	movs	r3, #13
 80086c0:	e102      	b.n	80088c8 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80086c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80086c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086c6:	4413      	add	r3, r2
 80086c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086ca:	8911      	ldrh	r1, [r2, #8]
 80086cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086ce:	8992      	ldrh	r2, [r2, #12]
 80086d0:	0952      	lsrs	r2, r2, #5
 80086d2:	b292      	uxth	r2, r2
 80086d4:	fbb1 f2f2 	udiv	r2, r1, r2
 80086d8:	b292      	uxth	r2, r2
 80086da:	4413      	add	r3, r2
 80086dc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80086de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d201      	bcs.n	80086ea <find_volume+0x30e>
 80086e6:	230d      	movs	r3, #13
 80086e8:	e0ee      	b.n	80088c8 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80086ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ee:	1ad3      	subs	r3, r2, r3
 80086f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086f2:	8952      	ldrh	r2, [r2, #10]
 80086f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80086f8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80086fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d101      	bne.n	8008704 <find_volume+0x328>
 8008700:	230d      	movs	r3, #13
 8008702:	e0e1      	b.n	80088c8 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8008704:	2303      	movs	r3, #3
 8008706:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800870a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008710:	4293      	cmp	r3, r2
 8008712:	d802      	bhi.n	800871a <find_volume+0x33e>
 8008714:	2302      	movs	r3, #2
 8008716:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800871a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008720:	4293      	cmp	r3, r2
 8008722:	d802      	bhi.n	800872a <find_volume+0x34e>
 8008724:	2301      	movs	r3, #1
 8008726:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872c:	1c9a      	adds	r2, r3, #2
 800872e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008730:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008734:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008736:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008738:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800873a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800873c:	441a      	add	r2, r3
 800873e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008740:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008742:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008746:	441a      	add	r2, r3
 8008748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800874c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008750:	2b03      	cmp	r3, #3
 8008752:	d11e      	bne.n	8008792 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008756:	3334      	adds	r3, #52	; 0x34
 8008758:	332a      	adds	r3, #42	; 0x2a
 800875a:	4618      	mov	r0, r3
 800875c:	f7fe fb3c 	bl	8006dd8 <ld_word>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d001      	beq.n	800876a <find_volume+0x38e>
 8008766:	230d      	movs	r3, #13
 8008768:	e0ae      	b.n	80088c8 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800876a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876c:	891b      	ldrh	r3, [r3, #8]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d001      	beq.n	8008776 <find_volume+0x39a>
 8008772:	230d      	movs	r3, #13
 8008774:	e0a8      	b.n	80088c8 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008778:	3334      	adds	r3, #52	; 0x34
 800877a:	332c      	adds	r3, #44	; 0x2c
 800877c:	4618      	mov	r0, r3
 800877e:	f7fe fb43 	bl	8006e08 <ld_dword>
 8008782:	4602      	mov	r2, r0
 8008784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008786:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	647b      	str	r3, [r7, #68]	; 0x44
 8008790:	e01f      	b.n	80087d2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008794:	891b      	ldrh	r3, [r3, #8]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <find_volume+0x3c2>
 800879a:	230d      	movs	r3, #13
 800879c:	e094      	b.n	80088c8 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800879e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087a4:	441a      	add	r2, r3
 80087a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80087aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d103      	bne.n	80087ba <find_volume+0x3de>
 80087b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	005b      	lsls	r3, r3, #1
 80087b8:	e00a      	b.n	80087d0 <find_volume+0x3f4>
 80087ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087bc:	699a      	ldr	r2, [r3, #24]
 80087be:	4613      	mov	r3, r2
 80087c0:	005b      	lsls	r3, r3, #1
 80087c2:	4413      	add	r3, r2
 80087c4:	085a      	lsrs	r2, r3, #1
 80087c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80087d0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80087d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d4:	69da      	ldr	r2, [r3, #28]
 80087d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d8:	899b      	ldrh	r3, [r3, #12]
 80087da:	4619      	mov	r1, r3
 80087dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087de:	440b      	add	r3, r1
 80087e0:	3b01      	subs	r3, #1
 80087e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80087e4:	8989      	ldrh	r1, [r1, #12]
 80087e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d201      	bcs.n	80087f2 <find_volume+0x416>
 80087ee:	230d      	movs	r3, #13
 80087f0:	e06a      	b.n	80088c8 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80087f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f4:	f04f 32ff 	mov.w	r2, #4294967295
 80087f8:	615a      	str	r2, [r3, #20]
 80087fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fc:	695a      	ldr	r2, [r3, #20]
 80087fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008800:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008804:	2280      	movs	r2, #128	; 0x80
 8008806:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008808:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800880c:	2b03      	cmp	r3, #3
 800880e:	d149      	bne.n	80088a4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008812:	3334      	adds	r3, #52	; 0x34
 8008814:	3330      	adds	r3, #48	; 0x30
 8008816:	4618      	mov	r0, r3
 8008818:	f7fe fade 	bl	8006dd8 <ld_word>
 800881c:	4603      	mov	r3, r0
 800881e:	2b01      	cmp	r3, #1
 8008820:	d140      	bne.n	80088a4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008824:	3301      	adds	r3, #1
 8008826:	4619      	mov	r1, r3
 8008828:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800882a:	f7fe fd85 	bl	8007338 <move_window>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d137      	bne.n	80088a4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008836:	2200      	movs	r2, #0
 8008838:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800883a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883c:	3334      	adds	r3, #52	; 0x34
 800883e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008842:	4618      	mov	r0, r3
 8008844:	f7fe fac8 	bl	8006dd8 <ld_word>
 8008848:	4603      	mov	r3, r0
 800884a:	461a      	mov	r2, r3
 800884c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008850:	429a      	cmp	r2, r3
 8008852:	d127      	bne.n	80088a4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008856:	3334      	adds	r3, #52	; 0x34
 8008858:	4618      	mov	r0, r3
 800885a:	f7fe fad5 	bl	8006e08 <ld_dword>
 800885e:	4603      	mov	r3, r0
 8008860:	4a1b      	ldr	r2, [pc, #108]	; (80088d0 <find_volume+0x4f4>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d11e      	bne.n	80088a4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008868:	3334      	adds	r3, #52	; 0x34
 800886a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800886e:	4618      	mov	r0, r3
 8008870:	f7fe faca 	bl	8006e08 <ld_dword>
 8008874:	4603      	mov	r3, r0
 8008876:	4a17      	ldr	r2, [pc, #92]	; (80088d4 <find_volume+0x4f8>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d113      	bne.n	80088a4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800887c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887e:	3334      	adds	r3, #52	; 0x34
 8008880:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008884:	4618      	mov	r0, r3
 8008886:	f7fe fabf 	bl	8006e08 <ld_dword>
 800888a:	4602      	mov	r2, r0
 800888c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008892:	3334      	adds	r3, #52	; 0x34
 8008894:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008898:	4618      	mov	r0, r3
 800889a:	f7fe fab5 	bl	8006e08 <ld_dword>
 800889e:	4602      	mov	r2, r0
 80088a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a2:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80088a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80088aa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80088ac:	4b0a      	ldr	r3, [pc, #40]	; (80088d8 <find_volume+0x4fc>)
 80088ae:	881b      	ldrh	r3, [r3, #0]
 80088b0:	3301      	adds	r3, #1
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	4b08      	ldr	r3, [pc, #32]	; (80088d8 <find_volume+0x4fc>)
 80088b6:	801a      	strh	r2, [r3, #0]
 80088b8:	4b07      	ldr	r3, [pc, #28]	; (80088d8 <find_volume+0x4fc>)
 80088ba:	881a      	ldrh	r2, [r3, #0]
 80088bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088be:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80088c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80088c2:	f7fe fcd1 	bl	8007268 <clear_lock>
#endif
	return FR_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3758      	adds	r7, #88	; 0x58
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	41615252 	.word	0x41615252
 80088d4:	61417272 	.word	0x61417272
 80088d8:	20002ee8 	.word	0x20002ee8

080088dc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80088e6:	2309      	movs	r3, #9
 80088e8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d01c      	beq.n	800892a <validate+0x4e>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d018      	beq.n	800892a <validate+0x4e>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d013      	beq.n	800892a <validate+0x4e>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	889a      	ldrh	r2, [r3, #4]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	88db      	ldrh	r3, [r3, #6]
 800890c:	429a      	cmp	r2, r3
 800890e:	d10c      	bne.n	800892a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	785b      	ldrb	r3, [r3, #1]
 8008916:	4618      	mov	r0, r3
 8008918:	f7fe f9c0 	bl	8006c9c <disk_status>
 800891c:	4603      	mov	r3, r0
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	2b00      	cmp	r3, #0
 8008924:	d101      	bne.n	800892a <validate+0x4e>
			res = FR_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800892a:	7bfb      	ldrb	r3, [r7, #15]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d102      	bne.n	8008936 <validate+0x5a>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	e000      	b.n	8008938 <validate+0x5c>
 8008936:	2300      	movs	r3, #0
 8008938:	683a      	ldr	r2, [r7, #0]
 800893a:	6013      	str	r3, [r2, #0]
	return res;
 800893c:	7bfb      	ldrb	r3, [r7, #15]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
	...

08008948 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b088      	sub	sp, #32
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	4613      	mov	r3, r2
 8008954:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800895a:	f107 0310 	add.w	r3, r7, #16
 800895e:	4618      	mov	r0, r3
 8008960:	f7ff fca2 	bl	80082a8 <get_ldnumber>
 8008964:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	2b00      	cmp	r3, #0
 800896a:	da01      	bge.n	8008970 <f_mount+0x28>
 800896c:	230b      	movs	r3, #11
 800896e:	e02b      	b.n	80089c8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008970:	4a17      	ldr	r2, [pc, #92]	; (80089d0 <f_mount+0x88>)
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008978:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d005      	beq.n	800898c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008980:	69b8      	ldr	r0, [r7, #24]
 8008982:	f7fe fc71 	bl	8007268 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	2200      	movs	r2, #0
 800898a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d002      	beq.n	8008998 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2200      	movs	r2, #0
 8008996:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	490d      	ldr	r1, [pc, #52]	; (80089d0 <f_mount+0x88>)
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d002      	beq.n	80089ae <f_mount+0x66>
 80089a8:	79fb      	ldrb	r3, [r7, #7]
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d001      	beq.n	80089b2 <f_mount+0x6a>
 80089ae:	2300      	movs	r3, #0
 80089b0:	e00a      	b.n	80089c8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80089b2:	f107 010c 	add.w	r1, r7, #12
 80089b6:	f107 0308 	add.w	r3, r7, #8
 80089ba:	2200      	movs	r2, #0
 80089bc:	4618      	mov	r0, r3
 80089be:	f7ff fd0d 	bl	80083dc <find_volume>
 80089c2:	4603      	mov	r3, r0
 80089c4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80089c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3720      	adds	r7, #32
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	20002ee4 	.word	0x20002ee4

080089d4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b098      	sub	sp, #96	; 0x60
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	4613      	mov	r3, r2
 80089e0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d101      	bne.n	80089ec <f_open+0x18>
 80089e8:	2309      	movs	r3, #9
 80089ea:	e1bb      	b.n	8008d64 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80089ec:	79fb      	ldrb	r3, [r7, #7]
 80089ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089f2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80089f4:	79fa      	ldrb	r2, [r7, #7]
 80089f6:	f107 0110 	add.w	r1, r7, #16
 80089fa:	f107 0308 	add.w	r3, r7, #8
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7ff fcec 	bl	80083dc <find_volume>
 8008a04:	4603      	mov	r3, r0
 8008a06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008a0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f040 819f 	bne.w	8008d52 <f_open+0x37e>
		dj.obj.fs = fs;
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	f107 0314 	add.w	r3, r7, #20
 8008a1e:	4611      	mov	r1, r2
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7ff fbcb 	bl	80081bc <follow_path>
 8008a26:	4603      	mov	r3, r0
 8008a28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008a2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d11a      	bne.n	8008a6a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008a34:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008a38:	b25b      	sxtb	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	da03      	bge.n	8008a46 <f_open+0x72>
				res = FR_INVALID_NAME;
 8008a3e:	2306      	movs	r3, #6
 8008a40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008a44:	e011      	b.n	8008a6a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008a46:	79fb      	ldrb	r3, [r7, #7]
 8008a48:	f023 0301 	bic.w	r3, r3, #1
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	bf14      	ite	ne
 8008a50:	2301      	movne	r3, #1
 8008a52:	2300      	moveq	r3, #0
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	461a      	mov	r2, r3
 8008a58:	f107 0314 	add.w	r3, r7, #20
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fe faba 	bl	8006fd8 <chk_lock>
 8008a64:	4603      	mov	r3, r0
 8008a66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008a6a:	79fb      	ldrb	r3, [r7, #7]
 8008a6c:	f003 031c 	and.w	r3, r3, #28
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d07f      	beq.n	8008b74 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008a74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d017      	beq.n	8008aac <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008a7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a80:	2b04      	cmp	r3, #4
 8008a82:	d10e      	bne.n	8008aa2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008a84:	f7fe fb04 	bl	8007090 <enq_lock>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d006      	beq.n	8008a9c <f_open+0xc8>
 8008a8e:	f107 0314 	add.w	r3, r7, #20
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7ff fa6c 	bl	8007f70 <dir_register>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	e000      	b.n	8008a9e <f_open+0xca>
 8008a9c:	2312      	movs	r3, #18
 8008a9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008aa2:	79fb      	ldrb	r3, [r7, #7]
 8008aa4:	f043 0308 	orr.w	r3, r3, #8
 8008aa8:	71fb      	strb	r3, [r7, #7]
 8008aaa:	e010      	b.n	8008ace <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008aac:	7ebb      	ldrb	r3, [r7, #26]
 8008aae:	f003 0311 	and.w	r3, r3, #17
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d003      	beq.n	8008abe <f_open+0xea>
					res = FR_DENIED;
 8008ab6:	2307      	movs	r3, #7
 8008ab8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008abc:	e007      	b.n	8008ace <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008abe:	79fb      	ldrb	r3, [r7, #7]
 8008ac0:	f003 0304 	and.w	r3, r3, #4
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d002      	beq.n	8008ace <f_open+0xfa>
 8008ac8:	2308      	movs	r3, #8
 8008aca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008ace:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d168      	bne.n	8008ba8 <f_open+0x1d4>
 8008ad6:	79fb      	ldrb	r3, [r7, #7]
 8008ad8:	f003 0308 	and.w	r3, r3, #8
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d063      	beq.n	8008ba8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008ae0:	f7fd ff22 	bl	8006928 <get_fattime>
 8008ae4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae8:	330e      	adds	r3, #14
 8008aea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7fe f9c9 	bl	8006e84 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af4:	3316      	adds	r3, #22
 8008af6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7fe f9c3 	bl	8006e84 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b00:	330b      	adds	r3, #11
 8008b02:	2220      	movs	r2, #32
 8008b04:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b0a:	4611      	mov	r1, r2
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7ff f99b 	bl	8007e48 <ld_clust>
 8008b12:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008b18:	2200      	movs	r2, #0
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7ff f9b3 	bl	8007e86 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b22:	331c      	adds	r3, #28
 8008b24:	2100      	movs	r1, #0
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7fe f9ac 	bl	8006e84 <st_dword>
					fs->wflag = 1;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d037      	beq.n	8008ba8 <f_open+0x1d4>
						dw = fs->winsect;
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008b3e:	f107 0314 	add.w	r3, r7, #20
 8008b42:	2200      	movs	r2, #0
 8008b44:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fe fea3 	bl	8007892 <remove_chain>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008b52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d126      	bne.n	8008ba8 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fe fbea 	bl	8007338 <move_window>
 8008b64:	4603      	mov	r3, r0
 8008b66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b6e:	3a01      	subs	r2, #1
 8008b70:	611a      	str	r2, [r3, #16]
 8008b72:	e019      	b.n	8008ba8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008b74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d115      	bne.n	8008ba8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008b7c:	7ebb      	ldrb	r3, [r7, #26]
 8008b7e:	f003 0310 	and.w	r3, r3, #16
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d003      	beq.n	8008b8e <f_open+0x1ba>
					res = FR_NO_FILE;
 8008b86:	2304      	movs	r3, #4
 8008b88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008b8c:	e00c      	b.n	8008ba8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008b8e:	79fb      	ldrb	r3, [r7, #7]
 8008b90:	f003 0302 	and.w	r3, r3, #2
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d007      	beq.n	8008ba8 <f_open+0x1d4>
 8008b98:	7ebb      	ldrb	r3, [r7, #26]
 8008b9a:	f003 0301 	and.w	r3, r3, #1
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d002      	beq.n	8008ba8 <f_open+0x1d4>
						res = FR_DENIED;
 8008ba2:	2307      	movs	r3, #7
 8008ba4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008ba8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d128      	bne.n	8008c02 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008bb0:	79fb      	ldrb	r3, [r7, #7]
 8008bb2:	f003 0308 	and.w	r3, r3, #8
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d003      	beq.n	8008bc2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008bba:	79fb      	ldrb	r3, [r7, #7]
 8008bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bc0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008bca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008bd0:	79fb      	ldrb	r3, [r7, #7]
 8008bd2:	f023 0301 	bic.w	r3, r3, #1
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	bf14      	ite	ne
 8008bda:	2301      	movne	r3, #1
 8008bdc:	2300      	moveq	r3, #0
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	461a      	mov	r2, r3
 8008be2:	f107 0314 	add.w	r3, r7, #20
 8008be6:	4611      	mov	r1, r2
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7fe fa73 	bl	80070d4 <inc_lock>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d102      	bne.n	8008c02 <f_open+0x22e>
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008c02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f040 80a3 	bne.w	8008d52 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c10:	4611      	mov	r1, r2
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7ff f918 	bl	8007e48 <ld_clust>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c20:	331c      	adds	r3, #28
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fe f8f0 	bl	8006e08 <ld_dword>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008c34:	693a      	ldr	r2, [r7, #16]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	88da      	ldrh	r2, [r3, #6]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	79fa      	ldrb	r2, [r7, #7]
 8008c46:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2200      	movs	r2, #0
 8008c52:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2200      	movs	r2, #0
 8008c58:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	3330      	adds	r3, #48	; 0x30
 8008c5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008c62:	2100      	movs	r1, #0
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7fe f95a 	bl	8006f1e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008c6a:	79fb      	ldrb	r3, [r7, #7]
 8008c6c:	f003 0320 	and.w	r3, r3, #32
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d06e      	beq.n	8008d52 <f_open+0x37e>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d06a      	beq.n	8008d52 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	68da      	ldr	r2, [r3, #12]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	895b      	ldrh	r3, [r3, #10]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	899b      	ldrh	r3, [r3, #12]
 8008c8e:	fb02 f303 	mul.w	r3, r2, r3
 8008c92:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	657b      	str	r3, [r7, #84]	; 0x54
 8008ca0:	e016      	b.n	8008cd0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7fe fc03 	bl	80074b2 <get_fat>
 8008cac:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008cae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d802      	bhi.n	8008cba <f_open+0x2e6>
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008cba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc0:	d102      	bne.n	8008cc8 <f_open+0x2f4>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008cc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	657b      	str	r3, [r7, #84]	; 0x54
 8008cd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d103      	bne.n	8008ce0 <f_open+0x30c>
 8008cd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d8e0      	bhi.n	8008ca2 <f_open+0x2ce>
				}
				fp->clust = clst;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ce4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008ce6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d131      	bne.n	8008d52 <f_open+0x37e>
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	899b      	ldrh	r3, [r3, #12]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cf6:	fbb3 f1f2 	udiv	r1, r3, r2
 8008cfa:	fb01 f202 	mul.w	r2, r1, r2
 8008cfe:	1a9b      	subs	r3, r3, r2
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d026      	beq.n	8008d52 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7fe fbb3 	bl	8007474 <clust2sect>
 8008d0e:	6478      	str	r0, [r7, #68]	; 0x44
 8008d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d103      	bne.n	8008d1e <f_open+0x34a>
						res = FR_INT_ERR;
 8008d16:	2302      	movs	r3, #2
 8008d18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008d1c:	e019      	b.n	8008d52 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	899b      	ldrh	r3, [r3, #12]
 8008d22:	461a      	mov	r2, r3
 8008d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d26:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d2c:	441a      	add	r2, r3
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	7858      	ldrb	r0, [r3, #1]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6a1a      	ldr	r2, [r3, #32]
 8008d40:	2301      	movs	r3, #1
 8008d42:	f7fd ffeb 	bl	8006d1c <disk_read>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d002      	beq.n	8008d52 <f_open+0x37e>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008d52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d002      	beq.n	8008d60 <f_open+0x38c>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008d60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3760      	adds	r7, #96	; 0x60
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b08c      	sub	sp, #48	; 0x30
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
 8008d78:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	2200      	movs	r2, #0
 8008d82:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f107 0210 	add.w	r2, r7, #16
 8008d8a:	4611      	mov	r1, r2
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7ff fda5 	bl	80088dc <validate>
 8008d92:	4603      	mov	r3, r0
 8008d94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008d98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d107      	bne.n	8008db0 <f_write+0x44>
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	7d5b      	ldrb	r3, [r3, #21]
 8008da4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008da8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <f_write+0x4a>
 8008db0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008db4:	e16a      	b.n	800908c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	7d1b      	ldrb	r3, [r3, #20]
 8008dba:	f003 0302 	and.w	r3, r3, #2
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d101      	bne.n	8008dc6 <f_write+0x5a>
 8008dc2:	2307      	movs	r3, #7
 8008dc4:	e162      	b.n	800908c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	699a      	ldr	r2, [r3, #24]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	441a      	add	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	699b      	ldr	r3, [r3, #24]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	f080 814c 	bcs.w	8009070 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	43db      	mvns	r3, r3
 8008dde:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008de0:	e146      	b.n	8009070 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	699b      	ldr	r3, [r3, #24]
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	8992      	ldrh	r2, [r2, #12]
 8008dea:	fbb3 f1f2 	udiv	r1, r3, r2
 8008dee:	fb01 f202 	mul.w	r2, r1, r2
 8008df2:	1a9b      	subs	r3, r3, r2
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f040 80f1 	bne.w	8008fdc <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	693a      	ldr	r2, [r7, #16]
 8008e00:	8992      	ldrh	r2, [r2, #12]
 8008e02:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e06:	693a      	ldr	r2, [r7, #16]
 8008e08:	8952      	ldrh	r2, [r2, #10]
 8008e0a:	3a01      	subs	r2, #1
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d143      	bne.n	8008e9e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	699b      	ldr	r3, [r3, #24]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d10c      	bne.n	8008e38 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d11a      	bne.n	8008e60 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7fe fd94 	bl	800795c <create_chain>
 8008e34:	62b8      	str	r0, [r7, #40]	; 0x28
 8008e36:	e013      	b.n	8008e60 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d007      	beq.n	8008e50 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	4619      	mov	r1, r3
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f7fe fe20 	bl	8007a8c <clmt_clust>
 8008e4c:	62b8      	str	r0, [r7, #40]	; 0x28
 8008e4e:	e007      	b.n	8008e60 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	69db      	ldr	r3, [r3, #28]
 8008e56:	4619      	mov	r1, r3
 8008e58:	4610      	mov	r0, r2
 8008e5a:	f7fe fd7f 	bl	800795c <create_chain>
 8008e5e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f000 8109 	beq.w	800907a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d104      	bne.n	8008e78 <f_write+0x10c>
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2202      	movs	r2, #2
 8008e72:	755a      	strb	r2, [r3, #21]
 8008e74:	2302      	movs	r3, #2
 8008e76:	e109      	b.n	800908c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7e:	d104      	bne.n	8008e8a <f_write+0x11e>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2201      	movs	r2, #1
 8008e84:	755a      	strb	r2, [r3, #21]
 8008e86:	2301      	movs	r3, #1
 8008e88:	e100      	b.n	800908c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e8e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d102      	bne.n	8008e9e <f_write+0x132>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e9c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	7d1b      	ldrb	r3, [r3, #20]
 8008ea2:	b25b      	sxtb	r3, r3
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	da18      	bge.n	8008eda <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	7858      	ldrb	r0, [r3, #1]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6a1a      	ldr	r2, [r3, #32]
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	f7fd ff50 	bl	8006d5c <disk_write>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d004      	beq.n	8008ecc <f_write+0x160>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	755a      	strb	r2, [r3, #21]
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e0df      	b.n	800908c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	7d1b      	ldrb	r3, [r3, #20]
 8008ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ed4:	b2da      	uxtb	r2, r3
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008eda:	693a      	ldr	r2, [r7, #16]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	69db      	ldr	r3, [r3, #28]
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	4610      	mov	r0, r2
 8008ee4:	f7fe fac6 	bl	8007474 <clust2sect>
 8008ee8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d104      	bne.n	8008efa <f_write+0x18e>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2202      	movs	r2, #2
 8008ef4:	755a      	strb	r2, [r3, #21]
 8008ef6:	2302      	movs	r3, #2
 8008ef8:	e0c8      	b.n	800908c <f_write+0x320>
			sect += csect;
 8008efa:	697a      	ldr	r2, [r7, #20]
 8008efc:	69bb      	ldr	r3, [r7, #24]
 8008efe:	4413      	add	r3, r2
 8008f00:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	899b      	ldrh	r3, [r3, #12]
 8008f06:	461a      	mov	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f0e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008f10:	6a3b      	ldr	r3, [r7, #32]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d043      	beq.n	8008f9e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008f16:	69ba      	ldr	r2, [r7, #24]
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	693a      	ldr	r2, [r7, #16]
 8008f1e:	8952      	ldrh	r2, [r2, #10]
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d905      	bls.n	8008f30 <f_write+0x1c4>
					cc = fs->csize - csect;
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	895b      	ldrh	r3, [r3, #10]
 8008f28:	461a      	mov	r2, r3
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	1ad3      	subs	r3, r2, r3
 8008f2e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	7858      	ldrb	r0, [r3, #1]
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	69f9      	ldr	r1, [r7, #28]
 8008f3a:	f7fd ff0f 	bl	8006d5c <disk_write>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d004      	beq.n	8008f4e <f_write+0x1e2>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2201      	movs	r2, #1
 8008f48:	755a      	strb	r2, [r3, #21]
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e09e      	b.n	800908c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6a1a      	ldr	r2, [r3, #32]
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	6a3a      	ldr	r2, [r7, #32]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d918      	bls.n	8008f8e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6a1a      	ldr	r2, [r3, #32]
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	8992      	ldrh	r2, [r2, #12]
 8008f6e:	fb02 f303 	mul.w	r3, r2, r3
 8008f72:	69fa      	ldr	r2, [r7, #28]
 8008f74:	18d1      	adds	r1, r2, r3
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	899b      	ldrh	r3, [r3, #12]
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	f7fd ffae 	bl	8006edc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	7d1b      	ldrb	r3, [r3, #20]
 8008f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	899b      	ldrh	r3, [r3, #12]
 8008f92:	461a      	mov	r2, r3
 8008f94:	6a3b      	ldr	r3, [r7, #32]
 8008f96:	fb02 f303 	mul.w	r3, r2, r3
 8008f9a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008f9c:	e04b      	b.n	8009036 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6a1b      	ldr	r3, [r3, #32]
 8008fa2:	697a      	ldr	r2, [r7, #20]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d016      	beq.n	8008fd6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	699a      	ldr	r2, [r3, #24]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d210      	bcs.n	8008fd6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	7858      	ldrb	r0, [r3, #1]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	697a      	ldr	r2, [r7, #20]
 8008fc2:	f7fd feab 	bl	8006d1c <disk_read>
 8008fc6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d004      	beq.n	8008fd6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	755a      	strb	r2, [r3, #21]
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e05a      	b.n	800908c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	697a      	ldr	r2, [r7, #20]
 8008fda:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	899b      	ldrh	r3, [r3, #12]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	699b      	ldr	r3, [r3, #24]
 8008fe6:	693a      	ldr	r2, [r7, #16]
 8008fe8:	8992      	ldrh	r2, [r2, #12]
 8008fea:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fee:	fb01 f202 	mul.w	r2, r1, r2
 8008ff2:	1a9b      	subs	r3, r3, r2
 8008ff4:	1ac3      	subs	r3, r0, r3
 8008ff6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d901      	bls.n	8009004 <f_write+0x298>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	693a      	ldr	r2, [r7, #16]
 8009010:	8992      	ldrh	r2, [r2, #12]
 8009012:	fbb3 f0f2 	udiv	r0, r3, r2
 8009016:	fb00 f202 	mul.w	r2, r0, r2
 800901a:	1a9b      	subs	r3, r3, r2
 800901c:	440b      	add	r3, r1
 800901e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009020:	69f9      	ldr	r1, [r7, #28]
 8009022:	4618      	mov	r0, r3
 8009024:	f7fd ff5a 	bl	8006edc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	7d1b      	ldrb	r3, [r3, #20]
 800902c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009030:	b2da      	uxtb	r2, r3
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009036:	69fa      	ldr	r2, [r7, #28]
 8009038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903a:	4413      	add	r3, r2
 800903c:	61fb      	str	r3, [r7, #28]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	699a      	ldr	r2, [r3, #24]
 8009042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009044:	441a      	add	r2, r3
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	619a      	str	r2, [r3, #24]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	68da      	ldr	r2, [r3, #12]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	699b      	ldr	r3, [r3, #24]
 8009052:	429a      	cmp	r2, r3
 8009054:	bf38      	it	cc
 8009056:	461a      	movcc	r2, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	60da      	str	r2, [r3, #12]
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	441a      	add	r2, r3
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	601a      	str	r2, [r3, #0]
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2b00      	cmp	r3, #0
 8009074:	f47f aeb5 	bne.w	8008de2 <f_write+0x76>
 8009078:	e000      	b.n	800907c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800907a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	7d1b      	ldrb	r3, [r3, #20]
 8009080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009084:	b2da      	uxtb	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3730      	adds	r7, #48	; 0x30
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b086      	sub	sp, #24
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f107 0208 	add.w	r2, r7, #8
 80090a2:	4611      	mov	r1, r2
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7ff fc19 	bl	80088dc <validate>
 80090aa:	4603      	mov	r3, r0
 80090ac:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80090ae:	7dfb      	ldrb	r3, [r7, #23]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d168      	bne.n	8009186 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	7d1b      	ldrb	r3, [r3, #20]
 80090b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d062      	beq.n	8009186 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	7d1b      	ldrb	r3, [r3, #20]
 80090c4:	b25b      	sxtb	r3, r3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	da15      	bge.n	80090f6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	7858      	ldrb	r0, [r3, #1]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a1a      	ldr	r2, [r3, #32]
 80090d8:	2301      	movs	r3, #1
 80090da:	f7fd fe3f 	bl	8006d5c <disk_write>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d001      	beq.n	80090e8 <f_sync+0x54>
 80090e4:	2301      	movs	r3, #1
 80090e6:	e04f      	b.n	8009188 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	7d1b      	ldrb	r3, [r3, #20]
 80090ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090f0:	b2da      	uxtb	r2, r3
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80090f6:	f7fd fc17 	bl	8006928 <get_fattime>
 80090fa:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80090fc:	68ba      	ldr	r2, [r7, #8]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009102:	4619      	mov	r1, r3
 8009104:	4610      	mov	r0, r2
 8009106:	f7fe f917 	bl	8007338 <move_window>
 800910a:	4603      	mov	r3, r0
 800910c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800910e:	7dfb      	ldrb	r3, [r7, #23]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d138      	bne.n	8009186 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009118:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	330b      	adds	r3, #11
 800911e:	781a      	ldrb	r2, [r3, #0]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	330b      	adds	r3, #11
 8009124:	f042 0220 	orr.w	r2, r2, #32
 8009128:	b2d2      	uxtb	r2, r2
 800912a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6818      	ldr	r0, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	461a      	mov	r2, r3
 8009136:	68f9      	ldr	r1, [r7, #12]
 8009138:	f7fe fea5 	bl	8007e86 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f103 021c 	add.w	r2, r3, #28
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	4619      	mov	r1, r3
 8009148:	4610      	mov	r0, r2
 800914a:	f7fd fe9b 	bl	8006e84 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	3316      	adds	r3, #22
 8009152:	6939      	ldr	r1, [r7, #16]
 8009154:	4618      	mov	r0, r3
 8009156:	f7fd fe95 	bl	8006e84 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	3312      	adds	r3, #18
 800915e:	2100      	movs	r1, #0
 8009160:	4618      	mov	r0, r3
 8009162:	f7fd fe74 	bl	8006e4e <st_word>
					fs->wflag = 1;
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	2201      	movs	r2, #1
 800916a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	4618      	mov	r0, r3
 8009170:	f7fe f910 	bl	8007394 <sync_fs>
 8009174:	4603      	mov	r3, r0
 8009176:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	7d1b      	ldrb	r3, [r3, #20]
 800917c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009180:	b2da      	uxtb	r2, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009186:	7dfb      	ldrb	r3, [r7, #23]
}
 8009188:	4618      	mov	r0, r3
 800918a:	3718      	adds	r7, #24
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f7ff ff7b 	bl	8009094 <f_sync>
 800919e:	4603      	mov	r3, r0
 80091a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80091a2:	7bfb      	ldrb	r3, [r7, #15]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d118      	bne.n	80091da <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f107 0208 	add.w	r2, r7, #8
 80091ae:	4611      	mov	r1, r2
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7ff fb93 	bl	80088dc <validate>
 80091b6:	4603      	mov	r3, r0
 80091b8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d10c      	bne.n	80091da <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7fe f813 	bl	80071f0 <dec_lock>
 80091ca:	4603      	mov	r3, r0
 80091cc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80091ce:	7bfb      	ldrb	r3, [r7, #15]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d102      	bne.n	80091da <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80091da:	7bfb      	ldrb	r3, [r7, #15]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b090      	sub	sp, #64	; 0x40
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f107 0208 	add.w	r2, r7, #8
 80091f4:	4611      	mov	r1, r2
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7ff fb70 	bl	80088dc <validate>
 80091fc:	4603      	mov	r3, r0
 80091fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009202:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009206:	2b00      	cmp	r3, #0
 8009208:	d103      	bne.n	8009212 <f_lseek+0x2e>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	7d5b      	ldrb	r3, [r3, #21]
 800920e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009212:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009216:	2b00      	cmp	r3, #0
 8009218:	d002      	beq.n	8009220 <f_lseek+0x3c>
 800921a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800921e:	e201      	b.n	8009624 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009224:	2b00      	cmp	r3, #0
 8009226:	f000 80d9 	beq.w	80093dc <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009230:	d15a      	bne.n	80092e8 <f_lseek+0x104>
			tbl = fp->cltbl;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009236:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	1d1a      	adds	r2, r3, #4
 800923c:	627a      	str	r2, [r7, #36]	; 0x24
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	617b      	str	r3, [r7, #20]
 8009242:	2302      	movs	r3, #2
 8009244:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800924c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924e:	2b00      	cmp	r3, #0
 8009250:	d03a      	beq.n	80092c8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009254:	613b      	str	r3, [r7, #16]
 8009256:	2300      	movs	r3, #0
 8009258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800925a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925c:	3302      	adds	r3, #2
 800925e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009262:	60fb      	str	r3, [r7, #12]
 8009264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009266:	3301      	adds	r3, #1
 8009268:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800926e:	4618      	mov	r0, r3
 8009270:	f7fe f91f 	bl	80074b2 <get_fat>
 8009274:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009278:	2b01      	cmp	r3, #1
 800927a:	d804      	bhi.n	8009286 <f_lseek+0xa2>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2202      	movs	r2, #2
 8009280:	755a      	strb	r2, [r3, #21]
 8009282:	2302      	movs	r3, #2
 8009284:	e1ce      	b.n	8009624 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800928c:	d104      	bne.n	8009298 <f_lseek+0xb4>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2201      	movs	r2, #1
 8009292:	755a      	strb	r2, [r3, #21]
 8009294:	2301      	movs	r3, #1
 8009296:	e1c5      	b.n	8009624 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	3301      	adds	r3, #1
 800929c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800929e:	429a      	cmp	r2, r3
 80092a0:	d0de      	beq.n	8009260 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80092a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d809      	bhi.n	80092be <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80092aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ac:	1d1a      	adds	r2, r3, #4
 80092ae:	627a      	str	r2, [r7, #36]	; 0x24
 80092b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092b2:	601a      	str	r2, [r3, #0]
 80092b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b6:	1d1a      	adds	r2, r3, #4
 80092b8:	627a      	str	r2, [r7, #36]	; 0x24
 80092ba:	693a      	ldr	r2, [r7, #16]
 80092bc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	699b      	ldr	r3, [r3, #24]
 80092c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d3c4      	bcc.n	8009252 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092ce:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80092d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d803      	bhi.n	80092e0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80092d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092da:	2200      	movs	r2, #0
 80092dc:	601a      	str	r2, [r3, #0]
 80092de:	e19f      	b.n	8009620 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80092e0:	2311      	movs	r3, #17
 80092e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80092e6:	e19b      	b.n	8009620 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	683a      	ldr	r2, [r7, #0]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d902      	bls.n	80092f8 <f_lseek+0x114>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	683a      	ldr	r2, [r7, #0]
 80092fc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	f000 818d 	beq.w	8009620 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	3b01      	subs	r3, #1
 800930a:	4619      	mov	r1, r3
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f7fe fbbd 	bl	8007a8c <clmt_clust>
 8009312:	4602      	mov	r2, r0
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	69db      	ldr	r3, [r3, #28]
 800931e:	4619      	mov	r1, r3
 8009320:	4610      	mov	r0, r2
 8009322:	f7fe f8a7 	bl	8007474 <clust2sect>
 8009326:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d104      	bne.n	8009338 <f_lseek+0x154>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2202      	movs	r2, #2
 8009332:	755a      	strb	r2, [r3, #21]
 8009334:	2302      	movs	r3, #2
 8009336:	e175      	b.n	8009624 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	3b01      	subs	r3, #1
 800933c:	68ba      	ldr	r2, [r7, #8]
 800933e:	8992      	ldrh	r2, [r2, #12]
 8009340:	fbb3 f3f2 	udiv	r3, r3, r2
 8009344:	68ba      	ldr	r2, [r7, #8]
 8009346:	8952      	ldrh	r2, [r2, #10]
 8009348:	3a01      	subs	r2, #1
 800934a:	4013      	ands	r3, r2
 800934c:	69ba      	ldr	r2, [r7, #24]
 800934e:	4413      	add	r3, r2
 8009350:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	68ba      	ldr	r2, [r7, #8]
 8009358:	8992      	ldrh	r2, [r2, #12]
 800935a:	fbb3 f1f2 	udiv	r1, r3, r2
 800935e:	fb01 f202 	mul.w	r2, r1, r2
 8009362:	1a9b      	subs	r3, r3, r2
 8009364:	2b00      	cmp	r3, #0
 8009366:	f000 815b 	beq.w	8009620 <f_lseek+0x43c>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a1b      	ldr	r3, [r3, #32]
 800936e:	69ba      	ldr	r2, [r7, #24]
 8009370:	429a      	cmp	r2, r3
 8009372:	f000 8155 	beq.w	8009620 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	7d1b      	ldrb	r3, [r3, #20]
 800937a:	b25b      	sxtb	r3, r3
 800937c:	2b00      	cmp	r3, #0
 800937e:	da18      	bge.n	80093b2 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	7858      	ldrb	r0, [r3, #1]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6a1a      	ldr	r2, [r3, #32]
 800938e:	2301      	movs	r3, #1
 8009390:	f7fd fce4 	bl	8006d5c <disk_write>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d004      	beq.n	80093a4 <f_lseek+0x1c0>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2201      	movs	r2, #1
 800939e:	755a      	strb	r2, [r3, #21]
 80093a0:	2301      	movs	r3, #1
 80093a2:	e13f      	b.n	8009624 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	7d1b      	ldrb	r3, [r3, #20]
 80093a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093ac:	b2da      	uxtb	r2, r3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	7858      	ldrb	r0, [r3, #1]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093bc:	2301      	movs	r3, #1
 80093be:	69ba      	ldr	r2, [r7, #24]
 80093c0:	f7fd fcac 	bl	8006d1c <disk_read>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d004      	beq.n	80093d4 <f_lseek+0x1f0>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2201      	movs	r2, #1
 80093ce:	755a      	strb	r2, [r3, #21]
 80093d0:	2301      	movs	r3, #1
 80093d2:	e127      	b.n	8009624 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	69ba      	ldr	r2, [r7, #24]
 80093d8:	621a      	str	r2, [r3, #32]
 80093da:	e121      	b.n	8009620 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	683a      	ldr	r2, [r7, #0]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d908      	bls.n	80093f8 <f_lseek+0x214>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	7d1b      	ldrb	r3, [r3, #20]
 80093ea:	f003 0302 	and.w	r3, r3, #2
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d102      	bne.n	80093f8 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	699b      	ldr	r3, [r3, #24]
 80093fc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80093fe:	2300      	movs	r3, #0
 8009400:	637b      	str	r3, [r7, #52]	; 0x34
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009406:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	f000 80b5 	beq.w	800957a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	895b      	ldrh	r3, [r3, #10]
 8009414:	461a      	mov	r2, r3
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	899b      	ldrh	r3, [r3, #12]
 800941a:	fb02 f303 	mul.w	r3, r2, r3
 800941e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009420:	6a3b      	ldr	r3, [r7, #32]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d01b      	beq.n	800945e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	1e5a      	subs	r2, r3, #1
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009430:	6a3b      	ldr	r3, [r7, #32]
 8009432:	1e59      	subs	r1, r3, #1
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800943a:	429a      	cmp	r2, r3
 800943c:	d30f      	bcc.n	800945e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800943e:	6a3b      	ldr	r3, [r7, #32]
 8009440:	1e5a      	subs	r2, r3, #1
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	425b      	negs	r3, r3
 8009446:	401a      	ands	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	683a      	ldr	r2, [r7, #0]
 8009452:	1ad3      	subs	r3, r2, r3
 8009454:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	69db      	ldr	r3, [r3, #28]
 800945a:	63bb      	str	r3, [r7, #56]	; 0x38
 800945c:	e022      	b.n	80094a4 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009466:	2b00      	cmp	r3, #0
 8009468:	d119      	bne.n	800949e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2100      	movs	r1, #0
 800946e:	4618      	mov	r0, r3
 8009470:	f7fe fa74 	bl	800795c <create_chain>
 8009474:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009478:	2b01      	cmp	r3, #1
 800947a:	d104      	bne.n	8009486 <f_lseek+0x2a2>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2202      	movs	r2, #2
 8009480:	755a      	strb	r2, [r3, #21]
 8009482:	2302      	movs	r3, #2
 8009484:	e0ce      	b.n	8009624 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800948c:	d104      	bne.n	8009498 <f_lseek+0x2b4>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2201      	movs	r2, #1
 8009492:	755a      	strb	r2, [r3, #21]
 8009494:	2301      	movs	r3, #1
 8009496:	e0c5      	b.n	8009624 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800949c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094a2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80094a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d067      	beq.n	800957a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80094aa:	e03a      	b.n	8009522 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80094ac:	683a      	ldr	r2, [r7, #0]
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	603b      	str	r3, [r7, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	699a      	ldr	r2, [r3, #24]
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	441a      	add	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	7d1b      	ldrb	r3, [r3, #20]
 80094c4:	f003 0302 	and.w	r3, r3, #2
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00b      	beq.n	80094e4 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7fe fa43 	bl	800795c <create_chain>
 80094d6:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80094d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d108      	bne.n	80094f0 <f_lseek+0x30c>
							ofs = 0; break;
 80094de:	2300      	movs	r3, #0
 80094e0:	603b      	str	r3, [r7, #0]
 80094e2:	e022      	b.n	800952a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7fd ffe2 	bl	80074b2 <get_fat>
 80094ee:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80094f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f6:	d104      	bne.n	8009502 <f_lseek+0x31e>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	755a      	strb	r2, [r3, #21]
 80094fe:	2301      	movs	r3, #1
 8009500:	e090      	b.n	8009624 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8009502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009504:	2b01      	cmp	r3, #1
 8009506:	d904      	bls.n	8009512 <f_lseek+0x32e>
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800950e:	429a      	cmp	r2, r3
 8009510:	d304      	bcc.n	800951c <f_lseek+0x338>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2202      	movs	r2, #2
 8009516:	755a      	strb	r2, [r3, #21]
 8009518:	2302      	movs	r3, #2
 800951a:	e083      	b.n	8009624 <f_lseek+0x440>
					fp->clust = clst;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009520:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	429a      	cmp	r2, r3
 8009528:	d8c0      	bhi.n	80094ac <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	699a      	ldr	r2, [r3, #24]
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	441a      	add	r2, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	899b      	ldrh	r3, [r3, #12]
 800953a:	461a      	mov	r2, r3
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009542:	fb01 f202 	mul.w	r2, r1, r2
 8009546:	1a9b      	subs	r3, r3, r2
 8009548:	2b00      	cmp	r3, #0
 800954a:	d016      	beq.n	800957a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009550:	4618      	mov	r0, r3
 8009552:	f7fd ff8f 	bl	8007474 <clust2sect>
 8009556:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800955a:	2b00      	cmp	r3, #0
 800955c:	d104      	bne.n	8009568 <f_lseek+0x384>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2202      	movs	r2, #2
 8009562:	755a      	strb	r2, [r3, #21]
 8009564:	2302      	movs	r3, #2
 8009566:	e05d      	b.n	8009624 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	899b      	ldrh	r3, [r3, #12]
 800956c:	461a      	mov	r2, r3
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	fbb3 f3f2 	udiv	r3, r3, r2
 8009574:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009576:	4413      	add	r3, r2
 8009578:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	699a      	ldr	r2, [r3, #24]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	429a      	cmp	r2, r3
 8009584:	d90a      	bls.n	800959c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	699a      	ldr	r2, [r3, #24]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	7d1b      	ldrb	r3, [r3, #20]
 8009592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009596:	b2da      	uxtb	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	68ba      	ldr	r2, [r7, #8]
 80095a2:	8992      	ldrh	r2, [r2, #12]
 80095a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80095a8:	fb01 f202 	mul.w	r2, r1, r2
 80095ac:	1a9b      	subs	r3, r3, r2
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d036      	beq.n	8009620 <f_lseek+0x43c>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6a1b      	ldr	r3, [r3, #32]
 80095b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d031      	beq.n	8009620 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	7d1b      	ldrb	r3, [r3, #20]
 80095c0:	b25b      	sxtb	r3, r3
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	da18      	bge.n	80095f8 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	7858      	ldrb	r0, [r3, #1]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a1a      	ldr	r2, [r3, #32]
 80095d4:	2301      	movs	r3, #1
 80095d6:	f7fd fbc1 	bl	8006d5c <disk_write>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d004      	beq.n	80095ea <f_lseek+0x406>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	755a      	strb	r2, [r3, #21]
 80095e6:	2301      	movs	r3, #1
 80095e8:	e01c      	b.n	8009624 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	7d1b      	ldrb	r3, [r3, #20]
 80095ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	7858      	ldrb	r0, [r3, #1]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009602:	2301      	movs	r3, #1
 8009604:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009606:	f7fd fb89 	bl	8006d1c <disk_read>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d004      	beq.n	800961a <f_lseek+0x436>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	755a      	strb	r2, [r3, #21]
 8009616:	2301      	movs	r3, #1
 8009618:	e004      	b.n	8009624 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800961e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009620:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009624:	4618      	mov	r0, r3
 8009626:	3740      	adds	r7, #64	; 0x40
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b090      	sub	sp, #64	; 0x40
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8009636:	f107 010c 	add.w	r1, r7, #12
 800963a:	1d3b      	adds	r3, r7, #4
 800963c:	2200      	movs	r2, #0
 800963e:	4618      	mov	r0, r3
 8009640:	f7fe fecc 	bl	80083dc <find_volume>
 8009644:	4603      	mov	r3, r0
 8009646:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800964a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800964e:	2b00      	cmp	r3, #0
 8009650:	d11f      	bne.n	8009692 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	f107 030c 	add.w	r3, r7, #12
 8009658:	4611      	mov	r1, r2
 800965a:	4618      	mov	r0, r3
 800965c:	f7fe fdae 	bl	80081bc <follow_path>
 8009660:	4603      	mov	r3, r0
 8009662:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8009666:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800966a:	2b00      	cmp	r3, #0
 800966c:	d111      	bne.n	8009692 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800966e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009672:	b25b      	sxtb	r3, r3
 8009674:	2b00      	cmp	r3, #0
 8009676:	da03      	bge.n	8009680 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8009678:	2306      	movs	r3, #6
 800967a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800967e:	e008      	b.n	8009692 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d005      	beq.n	8009692 <f_stat+0x66>
 8009686:	f107 030c 	add.w	r3, r7, #12
 800968a:	6839      	ldr	r1, [r7, #0]
 800968c:	4618      	mov	r0, r3
 800968e:	f7fe fca1 	bl	8007fd4 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8009692:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009696:	4618      	mov	r0, r3
 8009698:	3740      	adds	r7, #64	; 0x40
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b084      	sub	sp, #16
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
 80096a6:	460b      	mov	r3, r1
 80096a8:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80096aa:	78fb      	ldrb	r3, [r7, #3]
 80096ac:	2b0a      	cmp	r3, #10
 80096ae:	d103      	bne.n	80096b8 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80096b0:	210d      	movs	r1, #13
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7ff fff3 	bl	800969e <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	db25      	blt.n	8009710 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	1c5a      	adds	r2, r3, #1
 80096c8:	60fa      	str	r2, [r7, #12]
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	4413      	add	r3, r2
 80096ce:	78fa      	ldrb	r2, [r7, #3]
 80096d0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2b3c      	cmp	r3, #60	; 0x3c
 80096d6:	dd12      	ble.n	80096fe <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6818      	ldr	r0, [r3, #0]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f103 010c 	add.w	r1, r3, #12
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	f107 0308 	add.w	r3, r7, #8
 80096e8:	f7ff fb40 	bl	8008d6c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d101      	bne.n	80096f8 <putc_bfd+0x5a>
 80096f4:	2300      	movs	r3, #0
 80096f6:	e001      	b.n	80096fc <putc_bfd+0x5e>
 80096f8:	f04f 33ff 	mov.w	r3, #4294967295
 80096fc:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	1c5a      	adds	r2, r3, #1
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	609a      	str	r2, [r3, #8]
 800970e:	e000      	b.n	8009712 <putc_bfd+0x74>
	if (i < 0) return;
 8009710:	bf00      	nop
}
 8009712:	3710      	adds	r7, #16
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	2b00      	cmp	r3, #0
 8009726:	db16      	blt.n	8009756 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6818      	ldr	r0, [r3, #0]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f103 010c 	add.w	r1, r3, #12
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	461a      	mov	r2, r3
 8009738:	f107 030c 	add.w	r3, r7, #12
 800973c:	f7ff fb16 	bl	8008d6c <f_write>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d107      	bne.n	8009756 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	4293      	cmp	r3, r2
 800974e:	d102      	bne.n	8009756 <putc_flush+0x3e>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	e001      	b.n	800975a <putc_flush+0x42>
	return EOF;
 8009756:	f04f 33ff 	mov.w	r3, #4294967295
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8009762:	b480      	push	{r7}
 8009764:	b083      	sub	sp, #12
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	605a      	str	r2, [r3, #4]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	685a      	ldr	r2, [r3, #4]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	609a      	str	r2, [r3, #8]
}
 8009780:	bf00      	nop
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800978c:	b40e      	push	{r1, r2, r3}
 800978e:	b580      	push	{r7, lr}
 8009790:	b0a7      	sub	sp, #156	; 0x9c
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8009796:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800979a:	6879      	ldr	r1, [r7, #4]
 800979c:	4618      	mov	r0, r3
 800979e:	f7ff ffe0 	bl	8009762 <putc_init>

	va_start(arp, fmt);
 80097a2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80097a6:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 80097a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80097ac:	1c5a      	adds	r2, r3, #1
 80097ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 80097b8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f000 81f2 	beq.w	8009ba6 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 80097c2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80097c6:	2b25      	cmp	r3, #37	; 0x25
 80097c8:	d008      	beq.n	80097dc <f_printf+0x50>
			putc_bfd(&pb, c);
 80097ca:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80097ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097d2:	4611      	mov	r1, r2
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7ff ff62 	bl	800969e <putc_bfd>
			continue;
 80097da:	e1e3      	b.n	8009ba4 <f_printf+0x418>
		}
		w = f = 0;
 80097dc:	2300      	movs	r3, #0
 80097de:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80097e2:	2300      	movs	r3, #0
 80097e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 80097e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80097ec:	1c5a      	adds	r2, r3, #1
 80097ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 80097f8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80097fc:	2b30      	cmp	r3, #48	; 0x30
 80097fe:	d10b      	bne.n	8009818 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8009800:	2301      	movs	r3, #1
 8009802:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009806:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800980a:	1c5a      	adds	r2, r3, #1
 800980c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8009816:	e024      	b.n	8009862 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8009818:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800981c:	2b2d      	cmp	r3, #45	; 0x2d
 800981e:	d120      	bne.n	8009862 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8009820:	2302      	movs	r3, #2
 8009822:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009826:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800982a:	1c5a      	adds	r2, r3, #1
 800982c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8009836:	e014      	b.n	8009862 <f_printf+0xd6>
			w = w * 10 + c - '0';
 8009838:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800983c:	4613      	mov	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4413      	add	r3, r2
 8009842:	005b      	lsls	r3, r3, #1
 8009844:	461a      	mov	r2, r3
 8009846:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800984a:	4413      	add	r3, r2
 800984c:	3b30      	subs	r3, #48	; 0x30
 800984e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8009852:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009856:	1c5a      	adds	r2, r3, #1
 8009858:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8009862:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009866:	2b2f      	cmp	r3, #47	; 0x2f
 8009868:	d903      	bls.n	8009872 <f_printf+0xe6>
 800986a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800986e:	2b39      	cmp	r3, #57	; 0x39
 8009870:	d9e2      	bls.n	8009838 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8009872:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009876:	2b6c      	cmp	r3, #108	; 0x6c
 8009878:	d003      	beq.n	8009882 <f_printf+0xf6>
 800987a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800987e:	2b4c      	cmp	r3, #76	; 0x4c
 8009880:	d10d      	bne.n	800989e <f_printf+0x112>
			f |= 4; c = *fmt++;
 8009882:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009886:	f043 0304 	orr.w	r3, r3, #4
 800988a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800988e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009892:	1c5a      	adds	r2, r3, #1
 8009894:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800989e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f000 8181 	beq.w	8009baa <f_printf+0x41e>
		d = c;
 80098a8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80098ac:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 80098b0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80098b4:	2b60      	cmp	r3, #96	; 0x60
 80098b6:	d908      	bls.n	80098ca <f_printf+0x13e>
 80098b8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80098bc:	2b7a      	cmp	r3, #122	; 0x7a
 80098be:	d804      	bhi.n	80098ca <f_printf+0x13e>
 80098c0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80098c4:	3b20      	subs	r3, #32
 80098c6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 80098ca:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80098ce:	3b42      	subs	r3, #66	; 0x42
 80098d0:	2b16      	cmp	r3, #22
 80098d2:	f200 8098 	bhi.w	8009a06 <f_printf+0x27a>
 80098d6:	a201      	add	r2, pc, #4	; (adr r2, 80098dc <f_printf+0x150>)
 80098d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098dc:	080099e7 	.word	0x080099e7
 80098e0:	080099cf 	.word	0x080099cf
 80098e4:	080099f7 	.word	0x080099f7
 80098e8:	08009a07 	.word	0x08009a07
 80098ec:	08009a07 	.word	0x08009a07
 80098f0:	08009a07 	.word	0x08009a07
 80098f4:	08009a07 	.word	0x08009a07
 80098f8:	08009a07 	.word	0x08009a07
 80098fc:	08009a07 	.word	0x08009a07
 8009900:	08009a07 	.word	0x08009a07
 8009904:	08009a07 	.word	0x08009a07
 8009908:	08009a07 	.word	0x08009a07
 800990c:	08009a07 	.word	0x08009a07
 8009910:	080099ef 	.word	0x080099ef
 8009914:	08009a07 	.word	0x08009a07
 8009918:	08009a07 	.word	0x08009a07
 800991c:	08009a07 	.word	0x08009a07
 8009920:	08009939 	.word	0x08009939
 8009924:	08009a07 	.word	0x08009a07
 8009928:	080099f7 	.word	0x080099f7
 800992c:	08009a07 	.word	0x08009a07
 8009930:	08009a07 	.word	0x08009a07
 8009934:	080099ff 	.word	0x080099ff
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8009938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800993a:	1d1a      	adds	r2, r3, #4
 800993c:	67ba      	str	r2, [r7, #120]	; 0x78
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8009942:	2300      	movs	r3, #0
 8009944:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009948:	e004      	b.n	8009954 <f_printf+0x1c8>
 800994a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800994e:	3301      	adds	r3, #1
 8009950:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009954:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009956:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800995a:	4413      	add	r3, r2
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d1f3      	bne.n	800994a <f_printf+0x1be>
			if (!(f & 2)) {
 8009962:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009966:	f003 0302 	and.w	r3, r3, #2
 800996a:	2b00      	cmp	r3, #0
 800996c:	d11a      	bne.n	80099a4 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800996e:	e005      	b.n	800997c <f_printf+0x1f0>
 8009970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009974:	2120      	movs	r1, #32
 8009976:	4618      	mov	r0, r3
 8009978:	f7ff fe91 	bl	800969e <putc_bfd>
 800997c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009980:	1c5a      	adds	r2, r3, #1
 8009982:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009986:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800998a:	429a      	cmp	r2, r3
 800998c:	d8f0      	bhi.n	8009970 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800998e:	e009      	b.n	80099a4 <f_printf+0x218>
 8009990:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009992:	1c5a      	adds	r2, r3, #1
 8009994:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009996:	781a      	ldrb	r2, [r3, #0]
 8009998:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800999c:	4611      	mov	r1, r2
 800999e:	4618      	mov	r0, r3
 80099a0:	f7ff fe7d 	bl	800969e <putc_bfd>
 80099a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1f1      	bne.n	8009990 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 80099ac:	e005      	b.n	80099ba <f_printf+0x22e>
 80099ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80099b2:	2120      	movs	r1, #32
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7ff fe72 	bl	800969e <putc_bfd>
 80099ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099be:	1c5a      	adds	r2, r3, #1
 80099c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80099c4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d8f0      	bhi.n	80099ae <f_printf+0x222>
			continue;
 80099cc:	e0ea      	b.n	8009ba4 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80099ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099d0:	1d1a      	adds	r2, r3, #4
 80099d2:	67ba      	str	r2, [r7, #120]	; 0x78
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	b2da      	uxtb	r2, r3
 80099d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80099dc:	4611      	mov	r1, r2
 80099de:	4618      	mov	r0, r3
 80099e0:	f7ff fe5d 	bl	800969e <putc_bfd>
 80099e4:	e0de      	b.n	8009ba4 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 80099e6:	2302      	movs	r3, #2
 80099e8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80099ec:	e014      	b.n	8009a18 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 80099ee:	2308      	movs	r3, #8
 80099f0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80099f4:	e010      	b.n	8009a18 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80099f6:	230a      	movs	r3, #10
 80099f8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80099fc:	e00c      	b.n	8009a18 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 80099fe:	2310      	movs	r3, #16
 8009a00:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009a04:	e008      	b.n	8009a18 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8009a06:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8009a0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a0e:	4611      	mov	r1, r2
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7ff fe44 	bl	800969e <putc_bfd>
 8009a16:	e0c5      	b.n	8009ba4 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8009a18:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009a1c:	f003 0304 	and.w	r3, r3, #4
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d004      	beq.n	8009a2e <f_printf+0x2a2>
 8009a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a26:	1d1a      	adds	r2, r3, #4
 8009a28:	67ba      	str	r2, [r7, #120]	; 0x78
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	e00c      	b.n	8009a48 <f_printf+0x2bc>
 8009a2e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009a32:	2b44      	cmp	r3, #68	; 0x44
 8009a34:	d104      	bne.n	8009a40 <f_printf+0x2b4>
 8009a36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a38:	1d1a      	adds	r2, r3, #4
 8009a3a:	67ba      	str	r2, [r7, #120]	; 0x78
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	e003      	b.n	8009a48 <f_printf+0x2bc>
 8009a40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a42:	1d1a      	adds	r2, r3, #4
 8009a44:	67ba      	str	r2, [r7, #120]	; 0x78
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8009a4c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009a50:	2b44      	cmp	r3, #68	; 0x44
 8009a52:	d10e      	bne.n	8009a72 <f_printf+0x2e6>
 8009a54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	da0a      	bge.n	8009a72 <f_printf+0x2e6>
			v = 0 - v;
 8009a5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a60:	425b      	negs	r3, r3
 8009a62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8009a66:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009a6a:	f043 0308 	orr.w	r3, r3, #8
 8009a6e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8009a72:	2300      	movs	r3, #0
 8009a74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8009a78:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8009a7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a80:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a84:	fb01 f202 	mul.w	r2, r1, r2
 8009a88:	1a9b      	subs	r3, r3, r2
 8009a8a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8009a8e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8009a92:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8009a9e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009aa2:	2b09      	cmp	r3, #9
 8009aa4:	d90b      	bls.n	8009abe <f_printf+0x332>
 8009aa6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009aaa:	2b78      	cmp	r3, #120	; 0x78
 8009aac:	d101      	bne.n	8009ab2 <f_printf+0x326>
 8009aae:	2227      	movs	r2, #39	; 0x27
 8009ab0:	e000      	b.n	8009ab4 <f_printf+0x328>
 8009ab2:	2207      	movs	r2, #7
 8009ab4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009ab8:	4413      	add	r3, r2
 8009aba:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8009abe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ac2:	1c5a      	adds	r2, r3, #1
 8009ac4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009ac8:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8009acc:	3230      	adds	r2, #48	; 0x30
 8009ace:	b2d2      	uxtb	r2, r2
 8009ad0:	3398      	adds	r3, #152	; 0x98
 8009ad2:	443b      	add	r3, r7
 8009ad4:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8009ad8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d003      	beq.n	8009ae8 <f_printf+0x35c>
 8009ae0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ae4:	2b1f      	cmp	r3, #31
 8009ae6:	d9c7      	bls.n	8009a78 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8009ae8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009aec:	f003 0308 	and.w	r3, r3, #8
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d009      	beq.n	8009b08 <f_printf+0x37c>
 8009af4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009af8:	1c5a      	adds	r2, r3, #1
 8009afa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009afe:	3398      	adds	r3, #152	; 0x98
 8009b00:	443b      	add	r3, r7
 8009b02:	222d      	movs	r2, #45	; 0x2d
 8009b04:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8009b08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009b10:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009b14:	f003 0301 	and.w	r3, r3, #1
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d001      	beq.n	8009b20 <f_printf+0x394>
 8009b1c:	2330      	movs	r3, #48	; 0x30
 8009b1e:	e000      	b.n	8009b22 <f_printf+0x396>
 8009b20:	2320      	movs	r3, #32
 8009b22:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8009b26:	e007      	b.n	8009b38 <f_printf+0x3ac>
 8009b28:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8009b2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b30:	4611      	mov	r1, r2
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7ff fdb3 	bl	800969e <putc_bfd>
 8009b38:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009b3c:	f003 0302 	and.w	r3, r3, #2
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d108      	bne.n	8009b56 <f_printf+0x3ca>
 8009b44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b48:	1c5a      	adds	r2, r3, #1
 8009b4a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009b4e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d8e8      	bhi.n	8009b28 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8009b56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b60:	f107 020c 	add.w	r2, r7, #12
 8009b64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b68:	4413      	add	r3, r2
 8009b6a:	781a      	ldrb	r2, [r3, #0]
 8009b6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b70:	4611      	mov	r1, r2
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7ff fd93 	bl	800969e <putc_bfd>
		} while (i);
 8009b78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d1ea      	bne.n	8009b56 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8009b80:	e007      	b.n	8009b92 <f_printf+0x406>
 8009b82:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8009b86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b8a:	4611      	mov	r1, r2
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7ff fd86 	bl	800969e <putc_bfd>
 8009b92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b96:	1c5a      	adds	r2, r3, #1
 8009b98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009b9c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d8ee      	bhi.n	8009b82 <f_printf+0x3f6>
		c = *fmt++;
 8009ba4:	e600      	b.n	80097a8 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8009ba6:	bf00      	nop
 8009ba8:	e000      	b.n	8009bac <f_printf+0x420>
		if (!c) break;
 8009baa:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8009bac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7ff fdb1 	bl	8009718 <putc_flush>
 8009bb6:	4603      	mov	r3, r0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	379c      	adds	r7, #156	; 0x9c
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009bc2:	b003      	add	sp, #12
 8009bc4:	4770      	bx	lr
 8009bc6:	bf00      	nop

08009bc8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b087      	sub	sp, #28
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	4613      	mov	r3, r2
 8009bd4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009bde:	4b1f      	ldr	r3, [pc, #124]	; (8009c5c <FATFS_LinkDriverEx+0x94>)
 8009be0:	7a5b      	ldrb	r3, [r3, #9]
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d131      	bne.n	8009c4c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009be8:	4b1c      	ldr	r3, [pc, #112]	; (8009c5c <FATFS_LinkDriverEx+0x94>)
 8009bea:	7a5b      	ldrb	r3, [r3, #9]
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	461a      	mov	r2, r3
 8009bf0:	4b1a      	ldr	r3, [pc, #104]	; (8009c5c <FATFS_LinkDriverEx+0x94>)
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009bf6:	4b19      	ldr	r3, [pc, #100]	; (8009c5c <FATFS_LinkDriverEx+0x94>)
 8009bf8:	7a5b      	ldrb	r3, [r3, #9]
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	4a17      	ldr	r2, [pc, #92]	; (8009c5c <FATFS_LinkDriverEx+0x94>)
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	4413      	add	r3, r2
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009c06:	4b15      	ldr	r3, [pc, #84]	; (8009c5c <FATFS_LinkDriverEx+0x94>)
 8009c08:	7a5b      	ldrb	r3, [r3, #9]
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	4b13      	ldr	r3, [pc, #76]	; (8009c5c <FATFS_LinkDriverEx+0x94>)
 8009c10:	4413      	add	r3, r2
 8009c12:	79fa      	ldrb	r2, [r7, #7]
 8009c14:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009c16:	4b11      	ldr	r3, [pc, #68]	; (8009c5c <FATFS_LinkDriverEx+0x94>)
 8009c18:	7a5b      	ldrb	r3, [r3, #9]
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	1c5a      	adds	r2, r3, #1
 8009c1e:	b2d1      	uxtb	r1, r2
 8009c20:	4a0e      	ldr	r2, [pc, #56]	; (8009c5c <FATFS_LinkDriverEx+0x94>)
 8009c22:	7251      	strb	r1, [r2, #9]
 8009c24:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009c26:	7dbb      	ldrb	r3, [r7, #22]
 8009c28:	3330      	adds	r3, #48	; 0x30
 8009c2a:	b2da      	uxtb	r2, r3
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	3301      	adds	r3, #1
 8009c34:	223a      	movs	r2, #58	; 0x3a
 8009c36:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	3302      	adds	r3, #2
 8009c3c:	222f      	movs	r2, #47	; 0x2f
 8009c3e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	3303      	adds	r3, #3
 8009c44:	2200      	movs	r2, #0
 8009c46:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	371c      	adds	r7, #28
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop
 8009c5c:	20002f0c 	.word	0x20002f0c

08009c60 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	6839      	ldr	r1, [r7, #0]
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f7ff ffaa 	bl	8009bc8 <FATFS_LinkDriverEx>
 8009c74:	4603      	mov	r3, r0
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3708      	adds	r7, #8
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
	...

08009c80 <__errno>:
 8009c80:	4b01      	ldr	r3, [pc, #4]	; (8009c88 <__errno+0x8>)
 8009c82:	6818      	ldr	r0, [r3, #0]
 8009c84:	4770      	bx	lr
 8009c86:	bf00      	nop
 8009c88:	20000010 	.word	0x20000010

08009c8c <__libc_init_array>:
 8009c8c:	b570      	push	{r4, r5, r6, lr}
 8009c8e:	4d0d      	ldr	r5, [pc, #52]	; (8009cc4 <__libc_init_array+0x38>)
 8009c90:	4c0d      	ldr	r4, [pc, #52]	; (8009cc8 <__libc_init_array+0x3c>)
 8009c92:	1b64      	subs	r4, r4, r5
 8009c94:	10a4      	asrs	r4, r4, #2
 8009c96:	2600      	movs	r6, #0
 8009c98:	42a6      	cmp	r6, r4
 8009c9a:	d109      	bne.n	8009cb0 <__libc_init_array+0x24>
 8009c9c:	4d0b      	ldr	r5, [pc, #44]	; (8009ccc <__libc_init_array+0x40>)
 8009c9e:	4c0c      	ldr	r4, [pc, #48]	; (8009cd0 <__libc_init_array+0x44>)
 8009ca0:	f001 fa14 	bl	800b0cc <_init>
 8009ca4:	1b64      	subs	r4, r4, r5
 8009ca6:	10a4      	asrs	r4, r4, #2
 8009ca8:	2600      	movs	r6, #0
 8009caa:	42a6      	cmp	r6, r4
 8009cac:	d105      	bne.n	8009cba <__libc_init_array+0x2e>
 8009cae:	bd70      	pop	{r4, r5, r6, pc}
 8009cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cb4:	4798      	blx	r3
 8009cb6:	3601      	adds	r6, #1
 8009cb8:	e7ee      	b.n	8009c98 <__libc_init_array+0xc>
 8009cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cbe:	4798      	blx	r3
 8009cc0:	3601      	adds	r6, #1
 8009cc2:	e7f2      	b.n	8009caa <__libc_init_array+0x1e>
 8009cc4:	0800b458 	.word	0x0800b458
 8009cc8:	0800b458 	.word	0x0800b458
 8009ccc:	0800b458 	.word	0x0800b458
 8009cd0:	0800b45c 	.word	0x0800b45c

08009cd4 <memset>:
 8009cd4:	4402      	add	r2, r0
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d100      	bne.n	8009cde <memset+0xa>
 8009cdc:	4770      	bx	lr
 8009cde:	f803 1b01 	strb.w	r1, [r3], #1
 8009ce2:	e7f9      	b.n	8009cd8 <memset+0x4>

08009ce4 <iprintf>:
 8009ce4:	b40f      	push	{r0, r1, r2, r3}
 8009ce6:	4b0a      	ldr	r3, [pc, #40]	; (8009d10 <iprintf+0x2c>)
 8009ce8:	b513      	push	{r0, r1, r4, lr}
 8009cea:	681c      	ldr	r4, [r3, #0]
 8009cec:	b124      	cbz	r4, 8009cf8 <iprintf+0x14>
 8009cee:	69a3      	ldr	r3, [r4, #24]
 8009cf0:	b913      	cbnz	r3, 8009cf8 <iprintf+0x14>
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	f000 fa92 	bl	800a21c <__sinit>
 8009cf8:	ab05      	add	r3, sp, #20
 8009cfa:	9a04      	ldr	r2, [sp, #16]
 8009cfc:	68a1      	ldr	r1, [r4, #8]
 8009cfe:	9301      	str	r3, [sp, #4]
 8009d00:	4620      	mov	r0, r4
 8009d02:	f000 fdf7 	bl	800a8f4 <_vfiprintf_r>
 8009d06:	b002      	add	sp, #8
 8009d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d0c:	b004      	add	sp, #16
 8009d0e:	4770      	bx	lr
 8009d10:	20000010 	.word	0x20000010

08009d14 <_puts_r>:
 8009d14:	b570      	push	{r4, r5, r6, lr}
 8009d16:	460e      	mov	r6, r1
 8009d18:	4605      	mov	r5, r0
 8009d1a:	b118      	cbz	r0, 8009d24 <_puts_r+0x10>
 8009d1c:	6983      	ldr	r3, [r0, #24]
 8009d1e:	b90b      	cbnz	r3, 8009d24 <_puts_r+0x10>
 8009d20:	f000 fa7c 	bl	800a21c <__sinit>
 8009d24:	69ab      	ldr	r3, [r5, #24]
 8009d26:	68ac      	ldr	r4, [r5, #8]
 8009d28:	b913      	cbnz	r3, 8009d30 <_puts_r+0x1c>
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	f000 fa76 	bl	800a21c <__sinit>
 8009d30:	4b2c      	ldr	r3, [pc, #176]	; (8009de4 <_puts_r+0xd0>)
 8009d32:	429c      	cmp	r4, r3
 8009d34:	d120      	bne.n	8009d78 <_puts_r+0x64>
 8009d36:	686c      	ldr	r4, [r5, #4]
 8009d38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d3a:	07db      	lsls	r3, r3, #31
 8009d3c:	d405      	bmi.n	8009d4a <_puts_r+0x36>
 8009d3e:	89a3      	ldrh	r3, [r4, #12]
 8009d40:	0598      	lsls	r0, r3, #22
 8009d42:	d402      	bmi.n	8009d4a <_puts_r+0x36>
 8009d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d46:	f000 fb07 	bl	800a358 <__retarget_lock_acquire_recursive>
 8009d4a:	89a3      	ldrh	r3, [r4, #12]
 8009d4c:	0719      	lsls	r1, r3, #28
 8009d4e:	d51d      	bpl.n	8009d8c <_puts_r+0x78>
 8009d50:	6923      	ldr	r3, [r4, #16]
 8009d52:	b1db      	cbz	r3, 8009d8c <_puts_r+0x78>
 8009d54:	3e01      	subs	r6, #1
 8009d56:	68a3      	ldr	r3, [r4, #8]
 8009d58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	60a3      	str	r3, [r4, #8]
 8009d60:	bb39      	cbnz	r1, 8009db2 <_puts_r+0x9e>
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	da38      	bge.n	8009dd8 <_puts_r+0xc4>
 8009d66:	4622      	mov	r2, r4
 8009d68:	210a      	movs	r1, #10
 8009d6a:	4628      	mov	r0, r5
 8009d6c:	f000 f87c 	bl	8009e68 <__swbuf_r>
 8009d70:	3001      	adds	r0, #1
 8009d72:	d011      	beq.n	8009d98 <_puts_r+0x84>
 8009d74:	250a      	movs	r5, #10
 8009d76:	e011      	b.n	8009d9c <_puts_r+0x88>
 8009d78:	4b1b      	ldr	r3, [pc, #108]	; (8009de8 <_puts_r+0xd4>)
 8009d7a:	429c      	cmp	r4, r3
 8009d7c:	d101      	bne.n	8009d82 <_puts_r+0x6e>
 8009d7e:	68ac      	ldr	r4, [r5, #8]
 8009d80:	e7da      	b.n	8009d38 <_puts_r+0x24>
 8009d82:	4b1a      	ldr	r3, [pc, #104]	; (8009dec <_puts_r+0xd8>)
 8009d84:	429c      	cmp	r4, r3
 8009d86:	bf08      	it	eq
 8009d88:	68ec      	ldreq	r4, [r5, #12]
 8009d8a:	e7d5      	b.n	8009d38 <_puts_r+0x24>
 8009d8c:	4621      	mov	r1, r4
 8009d8e:	4628      	mov	r0, r5
 8009d90:	f000 f8bc 	bl	8009f0c <__swsetup_r>
 8009d94:	2800      	cmp	r0, #0
 8009d96:	d0dd      	beq.n	8009d54 <_puts_r+0x40>
 8009d98:	f04f 35ff 	mov.w	r5, #4294967295
 8009d9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d9e:	07da      	lsls	r2, r3, #31
 8009da0:	d405      	bmi.n	8009dae <_puts_r+0x9a>
 8009da2:	89a3      	ldrh	r3, [r4, #12]
 8009da4:	059b      	lsls	r3, r3, #22
 8009da6:	d402      	bmi.n	8009dae <_puts_r+0x9a>
 8009da8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009daa:	f000 fad6 	bl	800a35a <__retarget_lock_release_recursive>
 8009dae:	4628      	mov	r0, r5
 8009db0:	bd70      	pop	{r4, r5, r6, pc}
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	da04      	bge.n	8009dc0 <_puts_r+0xac>
 8009db6:	69a2      	ldr	r2, [r4, #24]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	dc06      	bgt.n	8009dca <_puts_r+0xb6>
 8009dbc:	290a      	cmp	r1, #10
 8009dbe:	d004      	beq.n	8009dca <_puts_r+0xb6>
 8009dc0:	6823      	ldr	r3, [r4, #0]
 8009dc2:	1c5a      	adds	r2, r3, #1
 8009dc4:	6022      	str	r2, [r4, #0]
 8009dc6:	7019      	strb	r1, [r3, #0]
 8009dc8:	e7c5      	b.n	8009d56 <_puts_r+0x42>
 8009dca:	4622      	mov	r2, r4
 8009dcc:	4628      	mov	r0, r5
 8009dce:	f000 f84b 	bl	8009e68 <__swbuf_r>
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	d1bf      	bne.n	8009d56 <_puts_r+0x42>
 8009dd6:	e7df      	b.n	8009d98 <_puts_r+0x84>
 8009dd8:	6823      	ldr	r3, [r4, #0]
 8009dda:	250a      	movs	r5, #10
 8009ddc:	1c5a      	adds	r2, r3, #1
 8009dde:	6022      	str	r2, [r4, #0]
 8009de0:	701d      	strb	r5, [r3, #0]
 8009de2:	e7db      	b.n	8009d9c <_puts_r+0x88>
 8009de4:	0800b3dc 	.word	0x0800b3dc
 8009de8:	0800b3fc 	.word	0x0800b3fc
 8009dec:	0800b3bc 	.word	0x0800b3bc

08009df0 <puts>:
 8009df0:	4b02      	ldr	r3, [pc, #8]	; (8009dfc <puts+0xc>)
 8009df2:	4601      	mov	r1, r0
 8009df4:	6818      	ldr	r0, [r3, #0]
 8009df6:	f7ff bf8d 	b.w	8009d14 <_puts_r>
 8009dfa:	bf00      	nop
 8009dfc:	20000010 	.word	0x20000010

08009e00 <sniprintf>:
 8009e00:	b40c      	push	{r2, r3}
 8009e02:	b530      	push	{r4, r5, lr}
 8009e04:	4b17      	ldr	r3, [pc, #92]	; (8009e64 <sniprintf+0x64>)
 8009e06:	1e0c      	subs	r4, r1, #0
 8009e08:	681d      	ldr	r5, [r3, #0]
 8009e0a:	b09d      	sub	sp, #116	; 0x74
 8009e0c:	da08      	bge.n	8009e20 <sniprintf+0x20>
 8009e0e:	238b      	movs	r3, #139	; 0x8b
 8009e10:	602b      	str	r3, [r5, #0]
 8009e12:	f04f 30ff 	mov.w	r0, #4294967295
 8009e16:	b01d      	add	sp, #116	; 0x74
 8009e18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e1c:	b002      	add	sp, #8
 8009e1e:	4770      	bx	lr
 8009e20:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009e24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009e28:	bf14      	ite	ne
 8009e2a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009e2e:	4623      	moveq	r3, r4
 8009e30:	9304      	str	r3, [sp, #16]
 8009e32:	9307      	str	r3, [sp, #28]
 8009e34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e38:	9002      	str	r0, [sp, #8]
 8009e3a:	9006      	str	r0, [sp, #24]
 8009e3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009e40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009e42:	ab21      	add	r3, sp, #132	; 0x84
 8009e44:	a902      	add	r1, sp, #8
 8009e46:	4628      	mov	r0, r5
 8009e48:	9301      	str	r3, [sp, #4]
 8009e4a:	f000 fc29 	bl	800a6a0 <_svfiprintf_r>
 8009e4e:	1c43      	adds	r3, r0, #1
 8009e50:	bfbc      	itt	lt
 8009e52:	238b      	movlt	r3, #139	; 0x8b
 8009e54:	602b      	strlt	r3, [r5, #0]
 8009e56:	2c00      	cmp	r4, #0
 8009e58:	d0dd      	beq.n	8009e16 <sniprintf+0x16>
 8009e5a:	9b02      	ldr	r3, [sp, #8]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	701a      	strb	r2, [r3, #0]
 8009e60:	e7d9      	b.n	8009e16 <sniprintf+0x16>
 8009e62:	bf00      	nop
 8009e64:	20000010 	.word	0x20000010

08009e68 <__swbuf_r>:
 8009e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6a:	460e      	mov	r6, r1
 8009e6c:	4614      	mov	r4, r2
 8009e6e:	4605      	mov	r5, r0
 8009e70:	b118      	cbz	r0, 8009e7a <__swbuf_r+0x12>
 8009e72:	6983      	ldr	r3, [r0, #24]
 8009e74:	b90b      	cbnz	r3, 8009e7a <__swbuf_r+0x12>
 8009e76:	f000 f9d1 	bl	800a21c <__sinit>
 8009e7a:	4b21      	ldr	r3, [pc, #132]	; (8009f00 <__swbuf_r+0x98>)
 8009e7c:	429c      	cmp	r4, r3
 8009e7e:	d12b      	bne.n	8009ed8 <__swbuf_r+0x70>
 8009e80:	686c      	ldr	r4, [r5, #4]
 8009e82:	69a3      	ldr	r3, [r4, #24]
 8009e84:	60a3      	str	r3, [r4, #8]
 8009e86:	89a3      	ldrh	r3, [r4, #12]
 8009e88:	071a      	lsls	r2, r3, #28
 8009e8a:	d52f      	bpl.n	8009eec <__swbuf_r+0x84>
 8009e8c:	6923      	ldr	r3, [r4, #16]
 8009e8e:	b36b      	cbz	r3, 8009eec <__swbuf_r+0x84>
 8009e90:	6923      	ldr	r3, [r4, #16]
 8009e92:	6820      	ldr	r0, [r4, #0]
 8009e94:	1ac0      	subs	r0, r0, r3
 8009e96:	6963      	ldr	r3, [r4, #20]
 8009e98:	b2f6      	uxtb	r6, r6
 8009e9a:	4283      	cmp	r3, r0
 8009e9c:	4637      	mov	r7, r6
 8009e9e:	dc04      	bgt.n	8009eaa <__swbuf_r+0x42>
 8009ea0:	4621      	mov	r1, r4
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	f000 f926 	bl	800a0f4 <_fflush_r>
 8009ea8:	bb30      	cbnz	r0, 8009ef8 <__swbuf_r+0x90>
 8009eaa:	68a3      	ldr	r3, [r4, #8]
 8009eac:	3b01      	subs	r3, #1
 8009eae:	60a3      	str	r3, [r4, #8]
 8009eb0:	6823      	ldr	r3, [r4, #0]
 8009eb2:	1c5a      	adds	r2, r3, #1
 8009eb4:	6022      	str	r2, [r4, #0]
 8009eb6:	701e      	strb	r6, [r3, #0]
 8009eb8:	6963      	ldr	r3, [r4, #20]
 8009eba:	3001      	adds	r0, #1
 8009ebc:	4283      	cmp	r3, r0
 8009ebe:	d004      	beq.n	8009eca <__swbuf_r+0x62>
 8009ec0:	89a3      	ldrh	r3, [r4, #12]
 8009ec2:	07db      	lsls	r3, r3, #31
 8009ec4:	d506      	bpl.n	8009ed4 <__swbuf_r+0x6c>
 8009ec6:	2e0a      	cmp	r6, #10
 8009ec8:	d104      	bne.n	8009ed4 <__swbuf_r+0x6c>
 8009eca:	4621      	mov	r1, r4
 8009ecc:	4628      	mov	r0, r5
 8009ece:	f000 f911 	bl	800a0f4 <_fflush_r>
 8009ed2:	b988      	cbnz	r0, 8009ef8 <__swbuf_r+0x90>
 8009ed4:	4638      	mov	r0, r7
 8009ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ed8:	4b0a      	ldr	r3, [pc, #40]	; (8009f04 <__swbuf_r+0x9c>)
 8009eda:	429c      	cmp	r4, r3
 8009edc:	d101      	bne.n	8009ee2 <__swbuf_r+0x7a>
 8009ede:	68ac      	ldr	r4, [r5, #8]
 8009ee0:	e7cf      	b.n	8009e82 <__swbuf_r+0x1a>
 8009ee2:	4b09      	ldr	r3, [pc, #36]	; (8009f08 <__swbuf_r+0xa0>)
 8009ee4:	429c      	cmp	r4, r3
 8009ee6:	bf08      	it	eq
 8009ee8:	68ec      	ldreq	r4, [r5, #12]
 8009eea:	e7ca      	b.n	8009e82 <__swbuf_r+0x1a>
 8009eec:	4621      	mov	r1, r4
 8009eee:	4628      	mov	r0, r5
 8009ef0:	f000 f80c 	bl	8009f0c <__swsetup_r>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d0cb      	beq.n	8009e90 <__swbuf_r+0x28>
 8009ef8:	f04f 37ff 	mov.w	r7, #4294967295
 8009efc:	e7ea      	b.n	8009ed4 <__swbuf_r+0x6c>
 8009efe:	bf00      	nop
 8009f00:	0800b3dc 	.word	0x0800b3dc
 8009f04:	0800b3fc 	.word	0x0800b3fc
 8009f08:	0800b3bc 	.word	0x0800b3bc

08009f0c <__swsetup_r>:
 8009f0c:	4b32      	ldr	r3, [pc, #200]	; (8009fd8 <__swsetup_r+0xcc>)
 8009f0e:	b570      	push	{r4, r5, r6, lr}
 8009f10:	681d      	ldr	r5, [r3, #0]
 8009f12:	4606      	mov	r6, r0
 8009f14:	460c      	mov	r4, r1
 8009f16:	b125      	cbz	r5, 8009f22 <__swsetup_r+0x16>
 8009f18:	69ab      	ldr	r3, [r5, #24]
 8009f1a:	b913      	cbnz	r3, 8009f22 <__swsetup_r+0x16>
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	f000 f97d 	bl	800a21c <__sinit>
 8009f22:	4b2e      	ldr	r3, [pc, #184]	; (8009fdc <__swsetup_r+0xd0>)
 8009f24:	429c      	cmp	r4, r3
 8009f26:	d10f      	bne.n	8009f48 <__swsetup_r+0x3c>
 8009f28:	686c      	ldr	r4, [r5, #4]
 8009f2a:	89a3      	ldrh	r3, [r4, #12]
 8009f2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f30:	0719      	lsls	r1, r3, #28
 8009f32:	d42c      	bmi.n	8009f8e <__swsetup_r+0x82>
 8009f34:	06dd      	lsls	r5, r3, #27
 8009f36:	d411      	bmi.n	8009f5c <__swsetup_r+0x50>
 8009f38:	2309      	movs	r3, #9
 8009f3a:	6033      	str	r3, [r6, #0]
 8009f3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f40:	81a3      	strh	r3, [r4, #12]
 8009f42:	f04f 30ff 	mov.w	r0, #4294967295
 8009f46:	e03e      	b.n	8009fc6 <__swsetup_r+0xba>
 8009f48:	4b25      	ldr	r3, [pc, #148]	; (8009fe0 <__swsetup_r+0xd4>)
 8009f4a:	429c      	cmp	r4, r3
 8009f4c:	d101      	bne.n	8009f52 <__swsetup_r+0x46>
 8009f4e:	68ac      	ldr	r4, [r5, #8]
 8009f50:	e7eb      	b.n	8009f2a <__swsetup_r+0x1e>
 8009f52:	4b24      	ldr	r3, [pc, #144]	; (8009fe4 <__swsetup_r+0xd8>)
 8009f54:	429c      	cmp	r4, r3
 8009f56:	bf08      	it	eq
 8009f58:	68ec      	ldreq	r4, [r5, #12]
 8009f5a:	e7e6      	b.n	8009f2a <__swsetup_r+0x1e>
 8009f5c:	0758      	lsls	r0, r3, #29
 8009f5e:	d512      	bpl.n	8009f86 <__swsetup_r+0x7a>
 8009f60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f62:	b141      	cbz	r1, 8009f76 <__swsetup_r+0x6a>
 8009f64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f68:	4299      	cmp	r1, r3
 8009f6a:	d002      	beq.n	8009f72 <__swsetup_r+0x66>
 8009f6c:	4630      	mov	r0, r6
 8009f6e:	f000 fa5b 	bl	800a428 <_free_r>
 8009f72:	2300      	movs	r3, #0
 8009f74:	6363      	str	r3, [r4, #52]	; 0x34
 8009f76:	89a3      	ldrh	r3, [r4, #12]
 8009f78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f7c:	81a3      	strh	r3, [r4, #12]
 8009f7e:	2300      	movs	r3, #0
 8009f80:	6063      	str	r3, [r4, #4]
 8009f82:	6923      	ldr	r3, [r4, #16]
 8009f84:	6023      	str	r3, [r4, #0]
 8009f86:	89a3      	ldrh	r3, [r4, #12]
 8009f88:	f043 0308 	orr.w	r3, r3, #8
 8009f8c:	81a3      	strh	r3, [r4, #12]
 8009f8e:	6923      	ldr	r3, [r4, #16]
 8009f90:	b94b      	cbnz	r3, 8009fa6 <__swsetup_r+0x9a>
 8009f92:	89a3      	ldrh	r3, [r4, #12]
 8009f94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f9c:	d003      	beq.n	8009fa6 <__swsetup_r+0x9a>
 8009f9e:	4621      	mov	r1, r4
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	f000 fa01 	bl	800a3a8 <__smakebuf_r>
 8009fa6:	89a0      	ldrh	r0, [r4, #12]
 8009fa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fac:	f010 0301 	ands.w	r3, r0, #1
 8009fb0:	d00a      	beq.n	8009fc8 <__swsetup_r+0xbc>
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	60a3      	str	r3, [r4, #8]
 8009fb6:	6963      	ldr	r3, [r4, #20]
 8009fb8:	425b      	negs	r3, r3
 8009fba:	61a3      	str	r3, [r4, #24]
 8009fbc:	6923      	ldr	r3, [r4, #16]
 8009fbe:	b943      	cbnz	r3, 8009fd2 <__swsetup_r+0xc6>
 8009fc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009fc4:	d1ba      	bne.n	8009f3c <__swsetup_r+0x30>
 8009fc6:	bd70      	pop	{r4, r5, r6, pc}
 8009fc8:	0781      	lsls	r1, r0, #30
 8009fca:	bf58      	it	pl
 8009fcc:	6963      	ldrpl	r3, [r4, #20]
 8009fce:	60a3      	str	r3, [r4, #8]
 8009fd0:	e7f4      	b.n	8009fbc <__swsetup_r+0xb0>
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	e7f7      	b.n	8009fc6 <__swsetup_r+0xba>
 8009fd6:	bf00      	nop
 8009fd8:	20000010 	.word	0x20000010
 8009fdc:	0800b3dc 	.word	0x0800b3dc
 8009fe0:	0800b3fc 	.word	0x0800b3fc
 8009fe4:	0800b3bc 	.word	0x0800b3bc

08009fe8 <__sflush_r>:
 8009fe8:	898a      	ldrh	r2, [r1, #12]
 8009fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fee:	4605      	mov	r5, r0
 8009ff0:	0710      	lsls	r0, r2, #28
 8009ff2:	460c      	mov	r4, r1
 8009ff4:	d458      	bmi.n	800a0a8 <__sflush_r+0xc0>
 8009ff6:	684b      	ldr	r3, [r1, #4]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	dc05      	bgt.n	800a008 <__sflush_r+0x20>
 8009ffc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	dc02      	bgt.n	800a008 <__sflush_r+0x20>
 800a002:	2000      	movs	r0, #0
 800a004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a008:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a00a:	2e00      	cmp	r6, #0
 800a00c:	d0f9      	beq.n	800a002 <__sflush_r+0x1a>
 800a00e:	2300      	movs	r3, #0
 800a010:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a014:	682f      	ldr	r7, [r5, #0]
 800a016:	602b      	str	r3, [r5, #0]
 800a018:	d032      	beq.n	800a080 <__sflush_r+0x98>
 800a01a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a01c:	89a3      	ldrh	r3, [r4, #12]
 800a01e:	075a      	lsls	r2, r3, #29
 800a020:	d505      	bpl.n	800a02e <__sflush_r+0x46>
 800a022:	6863      	ldr	r3, [r4, #4]
 800a024:	1ac0      	subs	r0, r0, r3
 800a026:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a028:	b10b      	cbz	r3, 800a02e <__sflush_r+0x46>
 800a02a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a02c:	1ac0      	subs	r0, r0, r3
 800a02e:	2300      	movs	r3, #0
 800a030:	4602      	mov	r2, r0
 800a032:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a034:	6a21      	ldr	r1, [r4, #32]
 800a036:	4628      	mov	r0, r5
 800a038:	47b0      	blx	r6
 800a03a:	1c43      	adds	r3, r0, #1
 800a03c:	89a3      	ldrh	r3, [r4, #12]
 800a03e:	d106      	bne.n	800a04e <__sflush_r+0x66>
 800a040:	6829      	ldr	r1, [r5, #0]
 800a042:	291d      	cmp	r1, #29
 800a044:	d82c      	bhi.n	800a0a0 <__sflush_r+0xb8>
 800a046:	4a2a      	ldr	r2, [pc, #168]	; (800a0f0 <__sflush_r+0x108>)
 800a048:	40ca      	lsrs	r2, r1
 800a04a:	07d6      	lsls	r6, r2, #31
 800a04c:	d528      	bpl.n	800a0a0 <__sflush_r+0xb8>
 800a04e:	2200      	movs	r2, #0
 800a050:	6062      	str	r2, [r4, #4]
 800a052:	04d9      	lsls	r1, r3, #19
 800a054:	6922      	ldr	r2, [r4, #16]
 800a056:	6022      	str	r2, [r4, #0]
 800a058:	d504      	bpl.n	800a064 <__sflush_r+0x7c>
 800a05a:	1c42      	adds	r2, r0, #1
 800a05c:	d101      	bne.n	800a062 <__sflush_r+0x7a>
 800a05e:	682b      	ldr	r3, [r5, #0]
 800a060:	b903      	cbnz	r3, 800a064 <__sflush_r+0x7c>
 800a062:	6560      	str	r0, [r4, #84]	; 0x54
 800a064:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a066:	602f      	str	r7, [r5, #0]
 800a068:	2900      	cmp	r1, #0
 800a06a:	d0ca      	beq.n	800a002 <__sflush_r+0x1a>
 800a06c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a070:	4299      	cmp	r1, r3
 800a072:	d002      	beq.n	800a07a <__sflush_r+0x92>
 800a074:	4628      	mov	r0, r5
 800a076:	f000 f9d7 	bl	800a428 <_free_r>
 800a07a:	2000      	movs	r0, #0
 800a07c:	6360      	str	r0, [r4, #52]	; 0x34
 800a07e:	e7c1      	b.n	800a004 <__sflush_r+0x1c>
 800a080:	6a21      	ldr	r1, [r4, #32]
 800a082:	2301      	movs	r3, #1
 800a084:	4628      	mov	r0, r5
 800a086:	47b0      	blx	r6
 800a088:	1c41      	adds	r1, r0, #1
 800a08a:	d1c7      	bne.n	800a01c <__sflush_r+0x34>
 800a08c:	682b      	ldr	r3, [r5, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d0c4      	beq.n	800a01c <__sflush_r+0x34>
 800a092:	2b1d      	cmp	r3, #29
 800a094:	d001      	beq.n	800a09a <__sflush_r+0xb2>
 800a096:	2b16      	cmp	r3, #22
 800a098:	d101      	bne.n	800a09e <__sflush_r+0xb6>
 800a09a:	602f      	str	r7, [r5, #0]
 800a09c:	e7b1      	b.n	800a002 <__sflush_r+0x1a>
 800a09e:	89a3      	ldrh	r3, [r4, #12]
 800a0a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0a4:	81a3      	strh	r3, [r4, #12]
 800a0a6:	e7ad      	b.n	800a004 <__sflush_r+0x1c>
 800a0a8:	690f      	ldr	r7, [r1, #16]
 800a0aa:	2f00      	cmp	r7, #0
 800a0ac:	d0a9      	beq.n	800a002 <__sflush_r+0x1a>
 800a0ae:	0793      	lsls	r3, r2, #30
 800a0b0:	680e      	ldr	r6, [r1, #0]
 800a0b2:	bf08      	it	eq
 800a0b4:	694b      	ldreq	r3, [r1, #20]
 800a0b6:	600f      	str	r7, [r1, #0]
 800a0b8:	bf18      	it	ne
 800a0ba:	2300      	movne	r3, #0
 800a0bc:	eba6 0807 	sub.w	r8, r6, r7
 800a0c0:	608b      	str	r3, [r1, #8]
 800a0c2:	f1b8 0f00 	cmp.w	r8, #0
 800a0c6:	dd9c      	ble.n	800a002 <__sflush_r+0x1a>
 800a0c8:	6a21      	ldr	r1, [r4, #32]
 800a0ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a0cc:	4643      	mov	r3, r8
 800a0ce:	463a      	mov	r2, r7
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	47b0      	blx	r6
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	dc06      	bgt.n	800a0e6 <__sflush_r+0xfe>
 800a0d8:	89a3      	ldrh	r3, [r4, #12]
 800a0da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0de:	81a3      	strh	r3, [r4, #12]
 800a0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e4:	e78e      	b.n	800a004 <__sflush_r+0x1c>
 800a0e6:	4407      	add	r7, r0
 800a0e8:	eba8 0800 	sub.w	r8, r8, r0
 800a0ec:	e7e9      	b.n	800a0c2 <__sflush_r+0xda>
 800a0ee:	bf00      	nop
 800a0f0:	20400001 	.word	0x20400001

0800a0f4 <_fflush_r>:
 800a0f4:	b538      	push	{r3, r4, r5, lr}
 800a0f6:	690b      	ldr	r3, [r1, #16]
 800a0f8:	4605      	mov	r5, r0
 800a0fa:	460c      	mov	r4, r1
 800a0fc:	b913      	cbnz	r3, 800a104 <_fflush_r+0x10>
 800a0fe:	2500      	movs	r5, #0
 800a100:	4628      	mov	r0, r5
 800a102:	bd38      	pop	{r3, r4, r5, pc}
 800a104:	b118      	cbz	r0, 800a10e <_fflush_r+0x1a>
 800a106:	6983      	ldr	r3, [r0, #24]
 800a108:	b90b      	cbnz	r3, 800a10e <_fflush_r+0x1a>
 800a10a:	f000 f887 	bl	800a21c <__sinit>
 800a10e:	4b14      	ldr	r3, [pc, #80]	; (800a160 <_fflush_r+0x6c>)
 800a110:	429c      	cmp	r4, r3
 800a112:	d11b      	bne.n	800a14c <_fflush_r+0x58>
 800a114:	686c      	ldr	r4, [r5, #4]
 800a116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d0ef      	beq.n	800a0fe <_fflush_r+0xa>
 800a11e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a120:	07d0      	lsls	r0, r2, #31
 800a122:	d404      	bmi.n	800a12e <_fflush_r+0x3a>
 800a124:	0599      	lsls	r1, r3, #22
 800a126:	d402      	bmi.n	800a12e <_fflush_r+0x3a>
 800a128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a12a:	f000 f915 	bl	800a358 <__retarget_lock_acquire_recursive>
 800a12e:	4628      	mov	r0, r5
 800a130:	4621      	mov	r1, r4
 800a132:	f7ff ff59 	bl	8009fe8 <__sflush_r>
 800a136:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a138:	07da      	lsls	r2, r3, #31
 800a13a:	4605      	mov	r5, r0
 800a13c:	d4e0      	bmi.n	800a100 <_fflush_r+0xc>
 800a13e:	89a3      	ldrh	r3, [r4, #12]
 800a140:	059b      	lsls	r3, r3, #22
 800a142:	d4dd      	bmi.n	800a100 <_fflush_r+0xc>
 800a144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a146:	f000 f908 	bl	800a35a <__retarget_lock_release_recursive>
 800a14a:	e7d9      	b.n	800a100 <_fflush_r+0xc>
 800a14c:	4b05      	ldr	r3, [pc, #20]	; (800a164 <_fflush_r+0x70>)
 800a14e:	429c      	cmp	r4, r3
 800a150:	d101      	bne.n	800a156 <_fflush_r+0x62>
 800a152:	68ac      	ldr	r4, [r5, #8]
 800a154:	e7df      	b.n	800a116 <_fflush_r+0x22>
 800a156:	4b04      	ldr	r3, [pc, #16]	; (800a168 <_fflush_r+0x74>)
 800a158:	429c      	cmp	r4, r3
 800a15a:	bf08      	it	eq
 800a15c:	68ec      	ldreq	r4, [r5, #12]
 800a15e:	e7da      	b.n	800a116 <_fflush_r+0x22>
 800a160:	0800b3dc 	.word	0x0800b3dc
 800a164:	0800b3fc 	.word	0x0800b3fc
 800a168:	0800b3bc 	.word	0x0800b3bc

0800a16c <std>:
 800a16c:	2300      	movs	r3, #0
 800a16e:	b510      	push	{r4, lr}
 800a170:	4604      	mov	r4, r0
 800a172:	e9c0 3300 	strd	r3, r3, [r0]
 800a176:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a17a:	6083      	str	r3, [r0, #8]
 800a17c:	8181      	strh	r1, [r0, #12]
 800a17e:	6643      	str	r3, [r0, #100]	; 0x64
 800a180:	81c2      	strh	r2, [r0, #14]
 800a182:	6183      	str	r3, [r0, #24]
 800a184:	4619      	mov	r1, r3
 800a186:	2208      	movs	r2, #8
 800a188:	305c      	adds	r0, #92	; 0x5c
 800a18a:	f7ff fda3 	bl	8009cd4 <memset>
 800a18e:	4b05      	ldr	r3, [pc, #20]	; (800a1a4 <std+0x38>)
 800a190:	6263      	str	r3, [r4, #36]	; 0x24
 800a192:	4b05      	ldr	r3, [pc, #20]	; (800a1a8 <std+0x3c>)
 800a194:	62a3      	str	r3, [r4, #40]	; 0x28
 800a196:	4b05      	ldr	r3, [pc, #20]	; (800a1ac <std+0x40>)
 800a198:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a19a:	4b05      	ldr	r3, [pc, #20]	; (800a1b0 <std+0x44>)
 800a19c:	6224      	str	r4, [r4, #32]
 800a19e:	6323      	str	r3, [r4, #48]	; 0x30
 800a1a0:	bd10      	pop	{r4, pc}
 800a1a2:	bf00      	nop
 800a1a4:	0800ae9d 	.word	0x0800ae9d
 800a1a8:	0800aebf 	.word	0x0800aebf
 800a1ac:	0800aef7 	.word	0x0800aef7
 800a1b0:	0800af1b 	.word	0x0800af1b

0800a1b4 <_cleanup_r>:
 800a1b4:	4901      	ldr	r1, [pc, #4]	; (800a1bc <_cleanup_r+0x8>)
 800a1b6:	f000 b8af 	b.w	800a318 <_fwalk_reent>
 800a1ba:	bf00      	nop
 800a1bc:	0800a0f5 	.word	0x0800a0f5

0800a1c0 <__sfmoreglue>:
 800a1c0:	b570      	push	{r4, r5, r6, lr}
 800a1c2:	2268      	movs	r2, #104	; 0x68
 800a1c4:	1e4d      	subs	r5, r1, #1
 800a1c6:	4355      	muls	r5, r2
 800a1c8:	460e      	mov	r6, r1
 800a1ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a1ce:	f000 f997 	bl	800a500 <_malloc_r>
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	b140      	cbz	r0, 800a1e8 <__sfmoreglue+0x28>
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	e9c0 1600 	strd	r1, r6, [r0]
 800a1dc:	300c      	adds	r0, #12
 800a1de:	60a0      	str	r0, [r4, #8]
 800a1e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a1e4:	f7ff fd76 	bl	8009cd4 <memset>
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	bd70      	pop	{r4, r5, r6, pc}

0800a1ec <__sfp_lock_acquire>:
 800a1ec:	4801      	ldr	r0, [pc, #4]	; (800a1f4 <__sfp_lock_acquire+0x8>)
 800a1ee:	f000 b8b3 	b.w	800a358 <__retarget_lock_acquire_recursive>
 800a1f2:	bf00      	nop
 800a1f4:	20002f19 	.word	0x20002f19

0800a1f8 <__sfp_lock_release>:
 800a1f8:	4801      	ldr	r0, [pc, #4]	; (800a200 <__sfp_lock_release+0x8>)
 800a1fa:	f000 b8ae 	b.w	800a35a <__retarget_lock_release_recursive>
 800a1fe:	bf00      	nop
 800a200:	20002f19 	.word	0x20002f19

0800a204 <__sinit_lock_acquire>:
 800a204:	4801      	ldr	r0, [pc, #4]	; (800a20c <__sinit_lock_acquire+0x8>)
 800a206:	f000 b8a7 	b.w	800a358 <__retarget_lock_acquire_recursive>
 800a20a:	bf00      	nop
 800a20c:	20002f1a 	.word	0x20002f1a

0800a210 <__sinit_lock_release>:
 800a210:	4801      	ldr	r0, [pc, #4]	; (800a218 <__sinit_lock_release+0x8>)
 800a212:	f000 b8a2 	b.w	800a35a <__retarget_lock_release_recursive>
 800a216:	bf00      	nop
 800a218:	20002f1a 	.word	0x20002f1a

0800a21c <__sinit>:
 800a21c:	b510      	push	{r4, lr}
 800a21e:	4604      	mov	r4, r0
 800a220:	f7ff fff0 	bl	800a204 <__sinit_lock_acquire>
 800a224:	69a3      	ldr	r3, [r4, #24]
 800a226:	b11b      	cbz	r3, 800a230 <__sinit+0x14>
 800a228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a22c:	f7ff bff0 	b.w	800a210 <__sinit_lock_release>
 800a230:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a234:	6523      	str	r3, [r4, #80]	; 0x50
 800a236:	4b13      	ldr	r3, [pc, #76]	; (800a284 <__sinit+0x68>)
 800a238:	4a13      	ldr	r2, [pc, #76]	; (800a288 <__sinit+0x6c>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a23e:	42a3      	cmp	r3, r4
 800a240:	bf04      	itt	eq
 800a242:	2301      	moveq	r3, #1
 800a244:	61a3      	streq	r3, [r4, #24]
 800a246:	4620      	mov	r0, r4
 800a248:	f000 f820 	bl	800a28c <__sfp>
 800a24c:	6060      	str	r0, [r4, #4]
 800a24e:	4620      	mov	r0, r4
 800a250:	f000 f81c 	bl	800a28c <__sfp>
 800a254:	60a0      	str	r0, [r4, #8]
 800a256:	4620      	mov	r0, r4
 800a258:	f000 f818 	bl	800a28c <__sfp>
 800a25c:	2200      	movs	r2, #0
 800a25e:	60e0      	str	r0, [r4, #12]
 800a260:	2104      	movs	r1, #4
 800a262:	6860      	ldr	r0, [r4, #4]
 800a264:	f7ff ff82 	bl	800a16c <std>
 800a268:	68a0      	ldr	r0, [r4, #8]
 800a26a:	2201      	movs	r2, #1
 800a26c:	2109      	movs	r1, #9
 800a26e:	f7ff ff7d 	bl	800a16c <std>
 800a272:	68e0      	ldr	r0, [r4, #12]
 800a274:	2202      	movs	r2, #2
 800a276:	2112      	movs	r1, #18
 800a278:	f7ff ff78 	bl	800a16c <std>
 800a27c:	2301      	movs	r3, #1
 800a27e:	61a3      	str	r3, [r4, #24]
 800a280:	e7d2      	b.n	800a228 <__sinit+0xc>
 800a282:	bf00      	nop
 800a284:	0800b3b8 	.word	0x0800b3b8
 800a288:	0800a1b5 	.word	0x0800a1b5

0800a28c <__sfp>:
 800a28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a28e:	4607      	mov	r7, r0
 800a290:	f7ff ffac 	bl	800a1ec <__sfp_lock_acquire>
 800a294:	4b1e      	ldr	r3, [pc, #120]	; (800a310 <__sfp+0x84>)
 800a296:	681e      	ldr	r6, [r3, #0]
 800a298:	69b3      	ldr	r3, [r6, #24]
 800a29a:	b913      	cbnz	r3, 800a2a2 <__sfp+0x16>
 800a29c:	4630      	mov	r0, r6
 800a29e:	f7ff ffbd 	bl	800a21c <__sinit>
 800a2a2:	3648      	adds	r6, #72	; 0x48
 800a2a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a2a8:	3b01      	subs	r3, #1
 800a2aa:	d503      	bpl.n	800a2b4 <__sfp+0x28>
 800a2ac:	6833      	ldr	r3, [r6, #0]
 800a2ae:	b30b      	cbz	r3, 800a2f4 <__sfp+0x68>
 800a2b0:	6836      	ldr	r6, [r6, #0]
 800a2b2:	e7f7      	b.n	800a2a4 <__sfp+0x18>
 800a2b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a2b8:	b9d5      	cbnz	r5, 800a2f0 <__sfp+0x64>
 800a2ba:	4b16      	ldr	r3, [pc, #88]	; (800a314 <__sfp+0x88>)
 800a2bc:	60e3      	str	r3, [r4, #12]
 800a2be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a2c2:	6665      	str	r5, [r4, #100]	; 0x64
 800a2c4:	f000 f847 	bl	800a356 <__retarget_lock_init_recursive>
 800a2c8:	f7ff ff96 	bl	800a1f8 <__sfp_lock_release>
 800a2cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a2d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a2d4:	6025      	str	r5, [r4, #0]
 800a2d6:	61a5      	str	r5, [r4, #24]
 800a2d8:	2208      	movs	r2, #8
 800a2da:	4629      	mov	r1, r5
 800a2dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a2e0:	f7ff fcf8 	bl	8009cd4 <memset>
 800a2e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a2e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2f0:	3468      	adds	r4, #104	; 0x68
 800a2f2:	e7d9      	b.n	800a2a8 <__sfp+0x1c>
 800a2f4:	2104      	movs	r1, #4
 800a2f6:	4638      	mov	r0, r7
 800a2f8:	f7ff ff62 	bl	800a1c0 <__sfmoreglue>
 800a2fc:	4604      	mov	r4, r0
 800a2fe:	6030      	str	r0, [r6, #0]
 800a300:	2800      	cmp	r0, #0
 800a302:	d1d5      	bne.n	800a2b0 <__sfp+0x24>
 800a304:	f7ff ff78 	bl	800a1f8 <__sfp_lock_release>
 800a308:	230c      	movs	r3, #12
 800a30a:	603b      	str	r3, [r7, #0]
 800a30c:	e7ee      	b.n	800a2ec <__sfp+0x60>
 800a30e:	bf00      	nop
 800a310:	0800b3b8 	.word	0x0800b3b8
 800a314:	ffff0001 	.word	0xffff0001

0800a318 <_fwalk_reent>:
 800a318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a31c:	4606      	mov	r6, r0
 800a31e:	4688      	mov	r8, r1
 800a320:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a324:	2700      	movs	r7, #0
 800a326:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a32a:	f1b9 0901 	subs.w	r9, r9, #1
 800a32e:	d505      	bpl.n	800a33c <_fwalk_reent+0x24>
 800a330:	6824      	ldr	r4, [r4, #0]
 800a332:	2c00      	cmp	r4, #0
 800a334:	d1f7      	bne.n	800a326 <_fwalk_reent+0xe>
 800a336:	4638      	mov	r0, r7
 800a338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a33c:	89ab      	ldrh	r3, [r5, #12]
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d907      	bls.n	800a352 <_fwalk_reent+0x3a>
 800a342:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a346:	3301      	adds	r3, #1
 800a348:	d003      	beq.n	800a352 <_fwalk_reent+0x3a>
 800a34a:	4629      	mov	r1, r5
 800a34c:	4630      	mov	r0, r6
 800a34e:	47c0      	blx	r8
 800a350:	4307      	orrs	r7, r0
 800a352:	3568      	adds	r5, #104	; 0x68
 800a354:	e7e9      	b.n	800a32a <_fwalk_reent+0x12>

0800a356 <__retarget_lock_init_recursive>:
 800a356:	4770      	bx	lr

0800a358 <__retarget_lock_acquire_recursive>:
 800a358:	4770      	bx	lr

0800a35a <__retarget_lock_release_recursive>:
 800a35a:	4770      	bx	lr

0800a35c <__swhatbuf_r>:
 800a35c:	b570      	push	{r4, r5, r6, lr}
 800a35e:	460e      	mov	r6, r1
 800a360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a364:	2900      	cmp	r1, #0
 800a366:	b096      	sub	sp, #88	; 0x58
 800a368:	4614      	mov	r4, r2
 800a36a:	461d      	mov	r5, r3
 800a36c:	da08      	bge.n	800a380 <__swhatbuf_r+0x24>
 800a36e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a372:	2200      	movs	r2, #0
 800a374:	602a      	str	r2, [r5, #0]
 800a376:	061a      	lsls	r2, r3, #24
 800a378:	d410      	bmi.n	800a39c <__swhatbuf_r+0x40>
 800a37a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a37e:	e00e      	b.n	800a39e <__swhatbuf_r+0x42>
 800a380:	466a      	mov	r2, sp
 800a382:	f000 fdf1 	bl	800af68 <_fstat_r>
 800a386:	2800      	cmp	r0, #0
 800a388:	dbf1      	blt.n	800a36e <__swhatbuf_r+0x12>
 800a38a:	9a01      	ldr	r2, [sp, #4]
 800a38c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a390:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a394:	425a      	negs	r2, r3
 800a396:	415a      	adcs	r2, r3
 800a398:	602a      	str	r2, [r5, #0]
 800a39a:	e7ee      	b.n	800a37a <__swhatbuf_r+0x1e>
 800a39c:	2340      	movs	r3, #64	; 0x40
 800a39e:	2000      	movs	r0, #0
 800a3a0:	6023      	str	r3, [r4, #0]
 800a3a2:	b016      	add	sp, #88	; 0x58
 800a3a4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a3a8 <__smakebuf_r>:
 800a3a8:	898b      	ldrh	r3, [r1, #12]
 800a3aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3ac:	079d      	lsls	r5, r3, #30
 800a3ae:	4606      	mov	r6, r0
 800a3b0:	460c      	mov	r4, r1
 800a3b2:	d507      	bpl.n	800a3c4 <__smakebuf_r+0x1c>
 800a3b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a3b8:	6023      	str	r3, [r4, #0]
 800a3ba:	6123      	str	r3, [r4, #16]
 800a3bc:	2301      	movs	r3, #1
 800a3be:	6163      	str	r3, [r4, #20]
 800a3c0:	b002      	add	sp, #8
 800a3c2:	bd70      	pop	{r4, r5, r6, pc}
 800a3c4:	ab01      	add	r3, sp, #4
 800a3c6:	466a      	mov	r2, sp
 800a3c8:	f7ff ffc8 	bl	800a35c <__swhatbuf_r>
 800a3cc:	9900      	ldr	r1, [sp, #0]
 800a3ce:	4605      	mov	r5, r0
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	f000 f895 	bl	800a500 <_malloc_r>
 800a3d6:	b948      	cbnz	r0, 800a3ec <__smakebuf_r+0x44>
 800a3d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3dc:	059a      	lsls	r2, r3, #22
 800a3de:	d4ef      	bmi.n	800a3c0 <__smakebuf_r+0x18>
 800a3e0:	f023 0303 	bic.w	r3, r3, #3
 800a3e4:	f043 0302 	orr.w	r3, r3, #2
 800a3e8:	81a3      	strh	r3, [r4, #12]
 800a3ea:	e7e3      	b.n	800a3b4 <__smakebuf_r+0xc>
 800a3ec:	4b0d      	ldr	r3, [pc, #52]	; (800a424 <__smakebuf_r+0x7c>)
 800a3ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800a3f0:	89a3      	ldrh	r3, [r4, #12]
 800a3f2:	6020      	str	r0, [r4, #0]
 800a3f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3f8:	81a3      	strh	r3, [r4, #12]
 800a3fa:	9b00      	ldr	r3, [sp, #0]
 800a3fc:	6163      	str	r3, [r4, #20]
 800a3fe:	9b01      	ldr	r3, [sp, #4]
 800a400:	6120      	str	r0, [r4, #16]
 800a402:	b15b      	cbz	r3, 800a41c <__smakebuf_r+0x74>
 800a404:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a408:	4630      	mov	r0, r6
 800a40a:	f000 fdbf 	bl	800af8c <_isatty_r>
 800a40e:	b128      	cbz	r0, 800a41c <__smakebuf_r+0x74>
 800a410:	89a3      	ldrh	r3, [r4, #12]
 800a412:	f023 0303 	bic.w	r3, r3, #3
 800a416:	f043 0301 	orr.w	r3, r3, #1
 800a41a:	81a3      	strh	r3, [r4, #12]
 800a41c:	89a0      	ldrh	r0, [r4, #12]
 800a41e:	4305      	orrs	r5, r0
 800a420:	81a5      	strh	r5, [r4, #12]
 800a422:	e7cd      	b.n	800a3c0 <__smakebuf_r+0x18>
 800a424:	0800a1b5 	.word	0x0800a1b5

0800a428 <_free_r>:
 800a428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a42a:	2900      	cmp	r1, #0
 800a42c:	d044      	beq.n	800a4b8 <_free_r+0x90>
 800a42e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a432:	9001      	str	r0, [sp, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	f1a1 0404 	sub.w	r4, r1, #4
 800a43a:	bfb8      	it	lt
 800a43c:	18e4      	addlt	r4, r4, r3
 800a43e:	f000 fdef 	bl	800b020 <__malloc_lock>
 800a442:	4a1e      	ldr	r2, [pc, #120]	; (800a4bc <_free_r+0x94>)
 800a444:	9801      	ldr	r0, [sp, #4]
 800a446:	6813      	ldr	r3, [r2, #0]
 800a448:	b933      	cbnz	r3, 800a458 <_free_r+0x30>
 800a44a:	6063      	str	r3, [r4, #4]
 800a44c:	6014      	str	r4, [r2, #0]
 800a44e:	b003      	add	sp, #12
 800a450:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a454:	f000 bdea 	b.w	800b02c <__malloc_unlock>
 800a458:	42a3      	cmp	r3, r4
 800a45a:	d908      	bls.n	800a46e <_free_r+0x46>
 800a45c:	6825      	ldr	r5, [r4, #0]
 800a45e:	1961      	adds	r1, r4, r5
 800a460:	428b      	cmp	r3, r1
 800a462:	bf01      	itttt	eq
 800a464:	6819      	ldreq	r1, [r3, #0]
 800a466:	685b      	ldreq	r3, [r3, #4]
 800a468:	1949      	addeq	r1, r1, r5
 800a46a:	6021      	streq	r1, [r4, #0]
 800a46c:	e7ed      	b.n	800a44a <_free_r+0x22>
 800a46e:	461a      	mov	r2, r3
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	b10b      	cbz	r3, 800a478 <_free_r+0x50>
 800a474:	42a3      	cmp	r3, r4
 800a476:	d9fa      	bls.n	800a46e <_free_r+0x46>
 800a478:	6811      	ldr	r1, [r2, #0]
 800a47a:	1855      	adds	r5, r2, r1
 800a47c:	42a5      	cmp	r5, r4
 800a47e:	d10b      	bne.n	800a498 <_free_r+0x70>
 800a480:	6824      	ldr	r4, [r4, #0]
 800a482:	4421      	add	r1, r4
 800a484:	1854      	adds	r4, r2, r1
 800a486:	42a3      	cmp	r3, r4
 800a488:	6011      	str	r1, [r2, #0]
 800a48a:	d1e0      	bne.n	800a44e <_free_r+0x26>
 800a48c:	681c      	ldr	r4, [r3, #0]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	6053      	str	r3, [r2, #4]
 800a492:	4421      	add	r1, r4
 800a494:	6011      	str	r1, [r2, #0]
 800a496:	e7da      	b.n	800a44e <_free_r+0x26>
 800a498:	d902      	bls.n	800a4a0 <_free_r+0x78>
 800a49a:	230c      	movs	r3, #12
 800a49c:	6003      	str	r3, [r0, #0]
 800a49e:	e7d6      	b.n	800a44e <_free_r+0x26>
 800a4a0:	6825      	ldr	r5, [r4, #0]
 800a4a2:	1961      	adds	r1, r4, r5
 800a4a4:	428b      	cmp	r3, r1
 800a4a6:	bf04      	itt	eq
 800a4a8:	6819      	ldreq	r1, [r3, #0]
 800a4aa:	685b      	ldreq	r3, [r3, #4]
 800a4ac:	6063      	str	r3, [r4, #4]
 800a4ae:	bf04      	itt	eq
 800a4b0:	1949      	addeq	r1, r1, r5
 800a4b2:	6021      	streq	r1, [r4, #0]
 800a4b4:	6054      	str	r4, [r2, #4]
 800a4b6:	e7ca      	b.n	800a44e <_free_r+0x26>
 800a4b8:	b003      	add	sp, #12
 800a4ba:	bd30      	pop	{r4, r5, pc}
 800a4bc:	20002f1c 	.word	0x20002f1c

0800a4c0 <sbrk_aligned>:
 800a4c0:	b570      	push	{r4, r5, r6, lr}
 800a4c2:	4e0e      	ldr	r6, [pc, #56]	; (800a4fc <sbrk_aligned+0x3c>)
 800a4c4:	460c      	mov	r4, r1
 800a4c6:	6831      	ldr	r1, [r6, #0]
 800a4c8:	4605      	mov	r5, r0
 800a4ca:	b911      	cbnz	r1, 800a4d2 <sbrk_aligned+0x12>
 800a4cc:	f000 fcd6 	bl	800ae7c <_sbrk_r>
 800a4d0:	6030      	str	r0, [r6, #0]
 800a4d2:	4621      	mov	r1, r4
 800a4d4:	4628      	mov	r0, r5
 800a4d6:	f000 fcd1 	bl	800ae7c <_sbrk_r>
 800a4da:	1c43      	adds	r3, r0, #1
 800a4dc:	d00a      	beq.n	800a4f4 <sbrk_aligned+0x34>
 800a4de:	1cc4      	adds	r4, r0, #3
 800a4e0:	f024 0403 	bic.w	r4, r4, #3
 800a4e4:	42a0      	cmp	r0, r4
 800a4e6:	d007      	beq.n	800a4f8 <sbrk_aligned+0x38>
 800a4e8:	1a21      	subs	r1, r4, r0
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	f000 fcc6 	bl	800ae7c <_sbrk_r>
 800a4f0:	3001      	adds	r0, #1
 800a4f2:	d101      	bne.n	800a4f8 <sbrk_aligned+0x38>
 800a4f4:	f04f 34ff 	mov.w	r4, #4294967295
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	bd70      	pop	{r4, r5, r6, pc}
 800a4fc:	20002f20 	.word	0x20002f20

0800a500 <_malloc_r>:
 800a500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a504:	1ccd      	adds	r5, r1, #3
 800a506:	f025 0503 	bic.w	r5, r5, #3
 800a50a:	3508      	adds	r5, #8
 800a50c:	2d0c      	cmp	r5, #12
 800a50e:	bf38      	it	cc
 800a510:	250c      	movcc	r5, #12
 800a512:	2d00      	cmp	r5, #0
 800a514:	4607      	mov	r7, r0
 800a516:	db01      	blt.n	800a51c <_malloc_r+0x1c>
 800a518:	42a9      	cmp	r1, r5
 800a51a:	d905      	bls.n	800a528 <_malloc_r+0x28>
 800a51c:	230c      	movs	r3, #12
 800a51e:	603b      	str	r3, [r7, #0]
 800a520:	2600      	movs	r6, #0
 800a522:	4630      	mov	r0, r6
 800a524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a528:	4e2e      	ldr	r6, [pc, #184]	; (800a5e4 <_malloc_r+0xe4>)
 800a52a:	f000 fd79 	bl	800b020 <__malloc_lock>
 800a52e:	6833      	ldr	r3, [r6, #0]
 800a530:	461c      	mov	r4, r3
 800a532:	bb34      	cbnz	r4, 800a582 <_malloc_r+0x82>
 800a534:	4629      	mov	r1, r5
 800a536:	4638      	mov	r0, r7
 800a538:	f7ff ffc2 	bl	800a4c0 <sbrk_aligned>
 800a53c:	1c43      	adds	r3, r0, #1
 800a53e:	4604      	mov	r4, r0
 800a540:	d14d      	bne.n	800a5de <_malloc_r+0xde>
 800a542:	6834      	ldr	r4, [r6, #0]
 800a544:	4626      	mov	r6, r4
 800a546:	2e00      	cmp	r6, #0
 800a548:	d140      	bne.n	800a5cc <_malloc_r+0xcc>
 800a54a:	6823      	ldr	r3, [r4, #0]
 800a54c:	4631      	mov	r1, r6
 800a54e:	4638      	mov	r0, r7
 800a550:	eb04 0803 	add.w	r8, r4, r3
 800a554:	f000 fc92 	bl	800ae7c <_sbrk_r>
 800a558:	4580      	cmp	r8, r0
 800a55a:	d13a      	bne.n	800a5d2 <_malloc_r+0xd2>
 800a55c:	6821      	ldr	r1, [r4, #0]
 800a55e:	3503      	adds	r5, #3
 800a560:	1a6d      	subs	r5, r5, r1
 800a562:	f025 0503 	bic.w	r5, r5, #3
 800a566:	3508      	adds	r5, #8
 800a568:	2d0c      	cmp	r5, #12
 800a56a:	bf38      	it	cc
 800a56c:	250c      	movcc	r5, #12
 800a56e:	4629      	mov	r1, r5
 800a570:	4638      	mov	r0, r7
 800a572:	f7ff ffa5 	bl	800a4c0 <sbrk_aligned>
 800a576:	3001      	adds	r0, #1
 800a578:	d02b      	beq.n	800a5d2 <_malloc_r+0xd2>
 800a57a:	6823      	ldr	r3, [r4, #0]
 800a57c:	442b      	add	r3, r5
 800a57e:	6023      	str	r3, [r4, #0]
 800a580:	e00e      	b.n	800a5a0 <_malloc_r+0xa0>
 800a582:	6822      	ldr	r2, [r4, #0]
 800a584:	1b52      	subs	r2, r2, r5
 800a586:	d41e      	bmi.n	800a5c6 <_malloc_r+0xc6>
 800a588:	2a0b      	cmp	r2, #11
 800a58a:	d916      	bls.n	800a5ba <_malloc_r+0xba>
 800a58c:	1961      	adds	r1, r4, r5
 800a58e:	42a3      	cmp	r3, r4
 800a590:	6025      	str	r5, [r4, #0]
 800a592:	bf18      	it	ne
 800a594:	6059      	strne	r1, [r3, #4]
 800a596:	6863      	ldr	r3, [r4, #4]
 800a598:	bf08      	it	eq
 800a59a:	6031      	streq	r1, [r6, #0]
 800a59c:	5162      	str	r2, [r4, r5]
 800a59e:	604b      	str	r3, [r1, #4]
 800a5a0:	4638      	mov	r0, r7
 800a5a2:	f104 060b 	add.w	r6, r4, #11
 800a5a6:	f000 fd41 	bl	800b02c <__malloc_unlock>
 800a5aa:	f026 0607 	bic.w	r6, r6, #7
 800a5ae:	1d23      	adds	r3, r4, #4
 800a5b0:	1af2      	subs	r2, r6, r3
 800a5b2:	d0b6      	beq.n	800a522 <_malloc_r+0x22>
 800a5b4:	1b9b      	subs	r3, r3, r6
 800a5b6:	50a3      	str	r3, [r4, r2]
 800a5b8:	e7b3      	b.n	800a522 <_malloc_r+0x22>
 800a5ba:	6862      	ldr	r2, [r4, #4]
 800a5bc:	42a3      	cmp	r3, r4
 800a5be:	bf0c      	ite	eq
 800a5c0:	6032      	streq	r2, [r6, #0]
 800a5c2:	605a      	strne	r2, [r3, #4]
 800a5c4:	e7ec      	b.n	800a5a0 <_malloc_r+0xa0>
 800a5c6:	4623      	mov	r3, r4
 800a5c8:	6864      	ldr	r4, [r4, #4]
 800a5ca:	e7b2      	b.n	800a532 <_malloc_r+0x32>
 800a5cc:	4634      	mov	r4, r6
 800a5ce:	6876      	ldr	r6, [r6, #4]
 800a5d0:	e7b9      	b.n	800a546 <_malloc_r+0x46>
 800a5d2:	230c      	movs	r3, #12
 800a5d4:	603b      	str	r3, [r7, #0]
 800a5d6:	4638      	mov	r0, r7
 800a5d8:	f000 fd28 	bl	800b02c <__malloc_unlock>
 800a5dc:	e7a1      	b.n	800a522 <_malloc_r+0x22>
 800a5de:	6025      	str	r5, [r4, #0]
 800a5e0:	e7de      	b.n	800a5a0 <_malloc_r+0xa0>
 800a5e2:	bf00      	nop
 800a5e4:	20002f1c 	.word	0x20002f1c

0800a5e8 <__ssputs_r>:
 800a5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5ec:	688e      	ldr	r6, [r1, #8]
 800a5ee:	429e      	cmp	r6, r3
 800a5f0:	4682      	mov	sl, r0
 800a5f2:	460c      	mov	r4, r1
 800a5f4:	4690      	mov	r8, r2
 800a5f6:	461f      	mov	r7, r3
 800a5f8:	d838      	bhi.n	800a66c <__ssputs_r+0x84>
 800a5fa:	898a      	ldrh	r2, [r1, #12]
 800a5fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a600:	d032      	beq.n	800a668 <__ssputs_r+0x80>
 800a602:	6825      	ldr	r5, [r4, #0]
 800a604:	6909      	ldr	r1, [r1, #16]
 800a606:	eba5 0901 	sub.w	r9, r5, r1
 800a60a:	6965      	ldr	r5, [r4, #20]
 800a60c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a610:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a614:	3301      	adds	r3, #1
 800a616:	444b      	add	r3, r9
 800a618:	106d      	asrs	r5, r5, #1
 800a61a:	429d      	cmp	r5, r3
 800a61c:	bf38      	it	cc
 800a61e:	461d      	movcc	r5, r3
 800a620:	0553      	lsls	r3, r2, #21
 800a622:	d531      	bpl.n	800a688 <__ssputs_r+0xa0>
 800a624:	4629      	mov	r1, r5
 800a626:	f7ff ff6b 	bl	800a500 <_malloc_r>
 800a62a:	4606      	mov	r6, r0
 800a62c:	b950      	cbnz	r0, 800a644 <__ssputs_r+0x5c>
 800a62e:	230c      	movs	r3, #12
 800a630:	f8ca 3000 	str.w	r3, [sl]
 800a634:	89a3      	ldrh	r3, [r4, #12]
 800a636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a63a:	81a3      	strh	r3, [r4, #12]
 800a63c:	f04f 30ff 	mov.w	r0, #4294967295
 800a640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a644:	6921      	ldr	r1, [r4, #16]
 800a646:	464a      	mov	r2, r9
 800a648:	f000 fcc2 	bl	800afd0 <memcpy>
 800a64c:	89a3      	ldrh	r3, [r4, #12]
 800a64e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a656:	81a3      	strh	r3, [r4, #12]
 800a658:	6126      	str	r6, [r4, #16]
 800a65a:	6165      	str	r5, [r4, #20]
 800a65c:	444e      	add	r6, r9
 800a65e:	eba5 0509 	sub.w	r5, r5, r9
 800a662:	6026      	str	r6, [r4, #0]
 800a664:	60a5      	str	r5, [r4, #8]
 800a666:	463e      	mov	r6, r7
 800a668:	42be      	cmp	r6, r7
 800a66a:	d900      	bls.n	800a66e <__ssputs_r+0x86>
 800a66c:	463e      	mov	r6, r7
 800a66e:	6820      	ldr	r0, [r4, #0]
 800a670:	4632      	mov	r2, r6
 800a672:	4641      	mov	r1, r8
 800a674:	f000 fcba 	bl	800afec <memmove>
 800a678:	68a3      	ldr	r3, [r4, #8]
 800a67a:	1b9b      	subs	r3, r3, r6
 800a67c:	60a3      	str	r3, [r4, #8]
 800a67e:	6823      	ldr	r3, [r4, #0]
 800a680:	4433      	add	r3, r6
 800a682:	6023      	str	r3, [r4, #0]
 800a684:	2000      	movs	r0, #0
 800a686:	e7db      	b.n	800a640 <__ssputs_r+0x58>
 800a688:	462a      	mov	r2, r5
 800a68a:	f000 fcd5 	bl	800b038 <_realloc_r>
 800a68e:	4606      	mov	r6, r0
 800a690:	2800      	cmp	r0, #0
 800a692:	d1e1      	bne.n	800a658 <__ssputs_r+0x70>
 800a694:	6921      	ldr	r1, [r4, #16]
 800a696:	4650      	mov	r0, sl
 800a698:	f7ff fec6 	bl	800a428 <_free_r>
 800a69c:	e7c7      	b.n	800a62e <__ssputs_r+0x46>
	...

0800a6a0 <_svfiprintf_r>:
 800a6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a4:	4698      	mov	r8, r3
 800a6a6:	898b      	ldrh	r3, [r1, #12]
 800a6a8:	061b      	lsls	r3, r3, #24
 800a6aa:	b09d      	sub	sp, #116	; 0x74
 800a6ac:	4607      	mov	r7, r0
 800a6ae:	460d      	mov	r5, r1
 800a6b0:	4614      	mov	r4, r2
 800a6b2:	d50e      	bpl.n	800a6d2 <_svfiprintf_r+0x32>
 800a6b4:	690b      	ldr	r3, [r1, #16]
 800a6b6:	b963      	cbnz	r3, 800a6d2 <_svfiprintf_r+0x32>
 800a6b8:	2140      	movs	r1, #64	; 0x40
 800a6ba:	f7ff ff21 	bl	800a500 <_malloc_r>
 800a6be:	6028      	str	r0, [r5, #0]
 800a6c0:	6128      	str	r0, [r5, #16]
 800a6c2:	b920      	cbnz	r0, 800a6ce <_svfiprintf_r+0x2e>
 800a6c4:	230c      	movs	r3, #12
 800a6c6:	603b      	str	r3, [r7, #0]
 800a6c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6cc:	e0d1      	b.n	800a872 <_svfiprintf_r+0x1d2>
 800a6ce:	2340      	movs	r3, #64	; 0x40
 800a6d0:	616b      	str	r3, [r5, #20]
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a6d6:	2320      	movs	r3, #32
 800a6d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6e0:	2330      	movs	r3, #48	; 0x30
 800a6e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a88c <_svfiprintf_r+0x1ec>
 800a6e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6ea:	f04f 0901 	mov.w	r9, #1
 800a6ee:	4623      	mov	r3, r4
 800a6f0:	469a      	mov	sl, r3
 800a6f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6f6:	b10a      	cbz	r2, 800a6fc <_svfiprintf_r+0x5c>
 800a6f8:	2a25      	cmp	r2, #37	; 0x25
 800a6fa:	d1f9      	bne.n	800a6f0 <_svfiprintf_r+0x50>
 800a6fc:	ebba 0b04 	subs.w	fp, sl, r4
 800a700:	d00b      	beq.n	800a71a <_svfiprintf_r+0x7a>
 800a702:	465b      	mov	r3, fp
 800a704:	4622      	mov	r2, r4
 800a706:	4629      	mov	r1, r5
 800a708:	4638      	mov	r0, r7
 800a70a:	f7ff ff6d 	bl	800a5e8 <__ssputs_r>
 800a70e:	3001      	adds	r0, #1
 800a710:	f000 80aa 	beq.w	800a868 <_svfiprintf_r+0x1c8>
 800a714:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a716:	445a      	add	r2, fp
 800a718:	9209      	str	r2, [sp, #36]	; 0x24
 800a71a:	f89a 3000 	ldrb.w	r3, [sl]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	f000 80a2 	beq.w	800a868 <_svfiprintf_r+0x1c8>
 800a724:	2300      	movs	r3, #0
 800a726:	f04f 32ff 	mov.w	r2, #4294967295
 800a72a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a72e:	f10a 0a01 	add.w	sl, sl, #1
 800a732:	9304      	str	r3, [sp, #16]
 800a734:	9307      	str	r3, [sp, #28]
 800a736:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a73a:	931a      	str	r3, [sp, #104]	; 0x68
 800a73c:	4654      	mov	r4, sl
 800a73e:	2205      	movs	r2, #5
 800a740:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a744:	4851      	ldr	r0, [pc, #324]	; (800a88c <_svfiprintf_r+0x1ec>)
 800a746:	f7f5 fd6b 	bl	8000220 <memchr>
 800a74a:	9a04      	ldr	r2, [sp, #16]
 800a74c:	b9d8      	cbnz	r0, 800a786 <_svfiprintf_r+0xe6>
 800a74e:	06d0      	lsls	r0, r2, #27
 800a750:	bf44      	itt	mi
 800a752:	2320      	movmi	r3, #32
 800a754:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a758:	0711      	lsls	r1, r2, #28
 800a75a:	bf44      	itt	mi
 800a75c:	232b      	movmi	r3, #43	; 0x2b
 800a75e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a762:	f89a 3000 	ldrb.w	r3, [sl]
 800a766:	2b2a      	cmp	r3, #42	; 0x2a
 800a768:	d015      	beq.n	800a796 <_svfiprintf_r+0xf6>
 800a76a:	9a07      	ldr	r2, [sp, #28]
 800a76c:	4654      	mov	r4, sl
 800a76e:	2000      	movs	r0, #0
 800a770:	f04f 0c0a 	mov.w	ip, #10
 800a774:	4621      	mov	r1, r4
 800a776:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a77a:	3b30      	subs	r3, #48	; 0x30
 800a77c:	2b09      	cmp	r3, #9
 800a77e:	d94e      	bls.n	800a81e <_svfiprintf_r+0x17e>
 800a780:	b1b0      	cbz	r0, 800a7b0 <_svfiprintf_r+0x110>
 800a782:	9207      	str	r2, [sp, #28]
 800a784:	e014      	b.n	800a7b0 <_svfiprintf_r+0x110>
 800a786:	eba0 0308 	sub.w	r3, r0, r8
 800a78a:	fa09 f303 	lsl.w	r3, r9, r3
 800a78e:	4313      	orrs	r3, r2
 800a790:	9304      	str	r3, [sp, #16]
 800a792:	46a2      	mov	sl, r4
 800a794:	e7d2      	b.n	800a73c <_svfiprintf_r+0x9c>
 800a796:	9b03      	ldr	r3, [sp, #12]
 800a798:	1d19      	adds	r1, r3, #4
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	9103      	str	r1, [sp, #12]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	bfbb      	ittet	lt
 800a7a2:	425b      	neglt	r3, r3
 800a7a4:	f042 0202 	orrlt.w	r2, r2, #2
 800a7a8:	9307      	strge	r3, [sp, #28]
 800a7aa:	9307      	strlt	r3, [sp, #28]
 800a7ac:	bfb8      	it	lt
 800a7ae:	9204      	strlt	r2, [sp, #16]
 800a7b0:	7823      	ldrb	r3, [r4, #0]
 800a7b2:	2b2e      	cmp	r3, #46	; 0x2e
 800a7b4:	d10c      	bne.n	800a7d0 <_svfiprintf_r+0x130>
 800a7b6:	7863      	ldrb	r3, [r4, #1]
 800a7b8:	2b2a      	cmp	r3, #42	; 0x2a
 800a7ba:	d135      	bne.n	800a828 <_svfiprintf_r+0x188>
 800a7bc:	9b03      	ldr	r3, [sp, #12]
 800a7be:	1d1a      	adds	r2, r3, #4
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	9203      	str	r2, [sp, #12]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	bfb8      	it	lt
 800a7c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7cc:	3402      	adds	r4, #2
 800a7ce:	9305      	str	r3, [sp, #20]
 800a7d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a89c <_svfiprintf_r+0x1fc>
 800a7d4:	7821      	ldrb	r1, [r4, #0]
 800a7d6:	2203      	movs	r2, #3
 800a7d8:	4650      	mov	r0, sl
 800a7da:	f7f5 fd21 	bl	8000220 <memchr>
 800a7de:	b140      	cbz	r0, 800a7f2 <_svfiprintf_r+0x152>
 800a7e0:	2340      	movs	r3, #64	; 0x40
 800a7e2:	eba0 000a 	sub.w	r0, r0, sl
 800a7e6:	fa03 f000 	lsl.w	r0, r3, r0
 800a7ea:	9b04      	ldr	r3, [sp, #16]
 800a7ec:	4303      	orrs	r3, r0
 800a7ee:	3401      	adds	r4, #1
 800a7f0:	9304      	str	r3, [sp, #16]
 800a7f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7f6:	4826      	ldr	r0, [pc, #152]	; (800a890 <_svfiprintf_r+0x1f0>)
 800a7f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7fc:	2206      	movs	r2, #6
 800a7fe:	f7f5 fd0f 	bl	8000220 <memchr>
 800a802:	2800      	cmp	r0, #0
 800a804:	d038      	beq.n	800a878 <_svfiprintf_r+0x1d8>
 800a806:	4b23      	ldr	r3, [pc, #140]	; (800a894 <_svfiprintf_r+0x1f4>)
 800a808:	bb1b      	cbnz	r3, 800a852 <_svfiprintf_r+0x1b2>
 800a80a:	9b03      	ldr	r3, [sp, #12]
 800a80c:	3307      	adds	r3, #7
 800a80e:	f023 0307 	bic.w	r3, r3, #7
 800a812:	3308      	adds	r3, #8
 800a814:	9303      	str	r3, [sp, #12]
 800a816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a818:	4433      	add	r3, r6
 800a81a:	9309      	str	r3, [sp, #36]	; 0x24
 800a81c:	e767      	b.n	800a6ee <_svfiprintf_r+0x4e>
 800a81e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a822:	460c      	mov	r4, r1
 800a824:	2001      	movs	r0, #1
 800a826:	e7a5      	b.n	800a774 <_svfiprintf_r+0xd4>
 800a828:	2300      	movs	r3, #0
 800a82a:	3401      	adds	r4, #1
 800a82c:	9305      	str	r3, [sp, #20]
 800a82e:	4619      	mov	r1, r3
 800a830:	f04f 0c0a 	mov.w	ip, #10
 800a834:	4620      	mov	r0, r4
 800a836:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a83a:	3a30      	subs	r2, #48	; 0x30
 800a83c:	2a09      	cmp	r2, #9
 800a83e:	d903      	bls.n	800a848 <_svfiprintf_r+0x1a8>
 800a840:	2b00      	cmp	r3, #0
 800a842:	d0c5      	beq.n	800a7d0 <_svfiprintf_r+0x130>
 800a844:	9105      	str	r1, [sp, #20]
 800a846:	e7c3      	b.n	800a7d0 <_svfiprintf_r+0x130>
 800a848:	fb0c 2101 	mla	r1, ip, r1, r2
 800a84c:	4604      	mov	r4, r0
 800a84e:	2301      	movs	r3, #1
 800a850:	e7f0      	b.n	800a834 <_svfiprintf_r+0x194>
 800a852:	ab03      	add	r3, sp, #12
 800a854:	9300      	str	r3, [sp, #0]
 800a856:	462a      	mov	r2, r5
 800a858:	4b0f      	ldr	r3, [pc, #60]	; (800a898 <_svfiprintf_r+0x1f8>)
 800a85a:	a904      	add	r1, sp, #16
 800a85c:	4638      	mov	r0, r7
 800a85e:	f3af 8000 	nop.w
 800a862:	1c42      	adds	r2, r0, #1
 800a864:	4606      	mov	r6, r0
 800a866:	d1d6      	bne.n	800a816 <_svfiprintf_r+0x176>
 800a868:	89ab      	ldrh	r3, [r5, #12]
 800a86a:	065b      	lsls	r3, r3, #25
 800a86c:	f53f af2c 	bmi.w	800a6c8 <_svfiprintf_r+0x28>
 800a870:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a872:	b01d      	add	sp, #116	; 0x74
 800a874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a878:	ab03      	add	r3, sp, #12
 800a87a:	9300      	str	r3, [sp, #0]
 800a87c:	462a      	mov	r2, r5
 800a87e:	4b06      	ldr	r3, [pc, #24]	; (800a898 <_svfiprintf_r+0x1f8>)
 800a880:	a904      	add	r1, sp, #16
 800a882:	4638      	mov	r0, r7
 800a884:	f000 f9d4 	bl	800ac30 <_printf_i>
 800a888:	e7eb      	b.n	800a862 <_svfiprintf_r+0x1c2>
 800a88a:	bf00      	nop
 800a88c:	0800b41c 	.word	0x0800b41c
 800a890:	0800b426 	.word	0x0800b426
 800a894:	00000000 	.word	0x00000000
 800a898:	0800a5e9 	.word	0x0800a5e9
 800a89c:	0800b422 	.word	0x0800b422

0800a8a0 <__sfputc_r>:
 800a8a0:	6893      	ldr	r3, [r2, #8]
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	b410      	push	{r4}
 800a8a8:	6093      	str	r3, [r2, #8]
 800a8aa:	da08      	bge.n	800a8be <__sfputc_r+0x1e>
 800a8ac:	6994      	ldr	r4, [r2, #24]
 800a8ae:	42a3      	cmp	r3, r4
 800a8b0:	db01      	blt.n	800a8b6 <__sfputc_r+0x16>
 800a8b2:	290a      	cmp	r1, #10
 800a8b4:	d103      	bne.n	800a8be <__sfputc_r+0x1e>
 800a8b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8ba:	f7ff bad5 	b.w	8009e68 <__swbuf_r>
 800a8be:	6813      	ldr	r3, [r2, #0]
 800a8c0:	1c58      	adds	r0, r3, #1
 800a8c2:	6010      	str	r0, [r2, #0]
 800a8c4:	7019      	strb	r1, [r3, #0]
 800a8c6:	4608      	mov	r0, r1
 800a8c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8cc:	4770      	bx	lr

0800a8ce <__sfputs_r>:
 800a8ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8d0:	4606      	mov	r6, r0
 800a8d2:	460f      	mov	r7, r1
 800a8d4:	4614      	mov	r4, r2
 800a8d6:	18d5      	adds	r5, r2, r3
 800a8d8:	42ac      	cmp	r4, r5
 800a8da:	d101      	bne.n	800a8e0 <__sfputs_r+0x12>
 800a8dc:	2000      	movs	r0, #0
 800a8de:	e007      	b.n	800a8f0 <__sfputs_r+0x22>
 800a8e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8e4:	463a      	mov	r2, r7
 800a8e6:	4630      	mov	r0, r6
 800a8e8:	f7ff ffda 	bl	800a8a0 <__sfputc_r>
 800a8ec:	1c43      	adds	r3, r0, #1
 800a8ee:	d1f3      	bne.n	800a8d8 <__sfputs_r+0xa>
 800a8f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8f4 <_vfiprintf_r>:
 800a8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f8:	460d      	mov	r5, r1
 800a8fa:	b09d      	sub	sp, #116	; 0x74
 800a8fc:	4614      	mov	r4, r2
 800a8fe:	4698      	mov	r8, r3
 800a900:	4606      	mov	r6, r0
 800a902:	b118      	cbz	r0, 800a90c <_vfiprintf_r+0x18>
 800a904:	6983      	ldr	r3, [r0, #24]
 800a906:	b90b      	cbnz	r3, 800a90c <_vfiprintf_r+0x18>
 800a908:	f7ff fc88 	bl	800a21c <__sinit>
 800a90c:	4b89      	ldr	r3, [pc, #548]	; (800ab34 <_vfiprintf_r+0x240>)
 800a90e:	429d      	cmp	r5, r3
 800a910:	d11b      	bne.n	800a94a <_vfiprintf_r+0x56>
 800a912:	6875      	ldr	r5, [r6, #4]
 800a914:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a916:	07d9      	lsls	r1, r3, #31
 800a918:	d405      	bmi.n	800a926 <_vfiprintf_r+0x32>
 800a91a:	89ab      	ldrh	r3, [r5, #12]
 800a91c:	059a      	lsls	r2, r3, #22
 800a91e:	d402      	bmi.n	800a926 <_vfiprintf_r+0x32>
 800a920:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a922:	f7ff fd19 	bl	800a358 <__retarget_lock_acquire_recursive>
 800a926:	89ab      	ldrh	r3, [r5, #12]
 800a928:	071b      	lsls	r3, r3, #28
 800a92a:	d501      	bpl.n	800a930 <_vfiprintf_r+0x3c>
 800a92c:	692b      	ldr	r3, [r5, #16]
 800a92e:	b9eb      	cbnz	r3, 800a96c <_vfiprintf_r+0x78>
 800a930:	4629      	mov	r1, r5
 800a932:	4630      	mov	r0, r6
 800a934:	f7ff faea 	bl	8009f0c <__swsetup_r>
 800a938:	b1c0      	cbz	r0, 800a96c <_vfiprintf_r+0x78>
 800a93a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a93c:	07dc      	lsls	r4, r3, #31
 800a93e:	d50e      	bpl.n	800a95e <_vfiprintf_r+0x6a>
 800a940:	f04f 30ff 	mov.w	r0, #4294967295
 800a944:	b01d      	add	sp, #116	; 0x74
 800a946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a94a:	4b7b      	ldr	r3, [pc, #492]	; (800ab38 <_vfiprintf_r+0x244>)
 800a94c:	429d      	cmp	r5, r3
 800a94e:	d101      	bne.n	800a954 <_vfiprintf_r+0x60>
 800a950:	68b5      	ldr	r5, [r6, #8]
 800a952:	e7df      	b.n	800a914 <_vfiprintf_r+0x20>
 800a954:	4b79      	ldr	r3, [pc, #484]	; (800ab3c <_vfiprintf_r+0x248>)
 800a956:	429d      	cmp	r5, r3
 800a958:	bf08      	it	eq
 800a95a:	68f5      	ldreq	r5, [r6, #12]
 800a95c:	e7da      	b.n	800a914 <_vfiprintf_r+0x20>
 800a95e:	89ab      	ldrh	r3, [r5, #12]
 800a960:	0598      	lsls	r0, r3, #22
 800a962:	d4ed      	bmi.n	800a940 <_vfiprintf_r+0x4c>
 800a964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a966:	f7ff fcf8 	bl	800a35a <__retarget_lock_release_recursive>
 800a96a:	e7e9      	b.n	800a940 <_vfiprintf_r+0x4c>
 800a96c:	2300      	movs	r3, #0
 800a96e:	9309      	str	r3, [sp, #36]	; 0x24
 800a970:	2320      	movs	r3, #32
 800a972:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a976:	f8cd 800c 	str.w	r8, [sp, #12]
 800a97a:	2330      	movs	r3, #48	; 0x30
 800a97c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ab40 <_vfiprintf_r+0x24c>
 800a980:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a984:	f04f 0901 	mov.w	r9, #1
 800a988:	4623      	mov	r3, r4
 800a98a:	469a      	mov	sl, r3
 800a98c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a990:	b10a      	cbz	r2, 800a996 <_vfiprintf_r+0xa2>
 800a992:	2a25      	cmp	r2, #37	; 0x25
 800a994:	d1f9      	bne.n	800a98a <_vfiprintf_r+0x96>
 800a996:	ebba 0b04 	subs.w	fp, sl, r4
 800a99a:	d00b      	beq.n	800a9b4 <_vfiprintf_r+0xc0>
 800a99c:	465b      	mov	r3, fp
 800a99e:	4622      	mov	r2, r4
 800a9a0:	4629      	mov	r1, r5
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	f7ff ff93 	bl	800a8ce <__sfputs_r>
 800a9a8:	3001      	adds	r0, #1
 800a9aa:	f000 80aa 	beq.w	800ab02 <_vfiprintf_r+0x20e>
 800a9ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9b0:	445a      	add	r2, fp
 800a9b2:	9209      	str	r2, [sp, #36]	; 0x24
 800a9b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f000 80a2 	beq.w	800ab02 <_vfiprintf_r+0x20e>
 800a9be:	2300      	movs	r3, #0
 800a9c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9c8:	f10a 0a01 	add.w	sl, sl, #1
 800a9cc:	9304      	str	r3, [sp, #16]
 800a9ce:	9307      	str	r3, [sp, #28]
 800a9d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9d4:	931a      	str	r3, [sp, #104]	; 0x68
 800a9d6:	4654      	mov	r4, sl
 800a9d8:	2205      	movs	r2, #5
 800a9da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9de:	4858      	ldr	r0, [pc, #352]	; (800ab40 <_vfiprintf_r+0x24c>)
 800a9e0:	f7f5 fc1e 	bl	8000220 <memchr>
 800a9e4:	9a04      	ldr	r2, [sp, #16]
 800a9e6:	b9d8      	cbnz	r0, 800aa20 <_vfiprintf_r+0x12c>
 800a9e8:	06d1      	lsls	r1, r2, #27
 800a9ea:	bf44      	itt	mi
 800a9ec:	2320      	movmi	r3, #32
 800a9ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9f2:	0713      	lsls	r3, r2, #28
 800a9f4:	bf44      	itt	mi
 800a9f6:	232b      	movmi	r3, #43	; 0x2b
 800a9f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9fc:	f89a 3000 	ldrb.w	r3, [sl]
 800aa00:	2b2a      	cmp	r3, #42	; 0x2a
 800aa02:	d015      	beq.n	800aa30 <_vfiprintf_r+0x13c>
 800aa04:	9a07      	ldr	r2, [sp, #28]
 800aa06:	4654      	mov	r4, sl
 800aa08:	2000      	movs	r0, #0
 800aa0a:	f04f 0c0a 	mov.w	ip, #10
 800aa0e:	4621      	mov	r1, r4
 800aa10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa14:	3b30      	subs	r3, #48	; 0x30
 800aa16:	2b09      	cmp	r3, #9
 800aa18:	d94e      	bls.n	800aab8 <_vfiprintf_r+0x1c4>
 800aa1a:	b1b0      	cbz	r0, 800aa4a <_vfiprintf_r+0x156>
 800aa1c:	9207      	str	r2, [sp, #28]
 800aa1e:	e014      	b.n	800aa4a <_vfiprintf_r+0x156>
 800aa20:	eba0 0308 	sub.w	r3, r0, r8
 800aa24:	fa09 f303 	lsl.w	r3, r9, r3
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	9304      	str	r3, [sp, #16]
 800aa2c:	46a2      	mov	sl, r4
 800aa2e:	e7d2      	b.n	800a9d6 <_vfiprintf_r+0xe2>
 800aa30:	9b03      	ldr	r3, [sp, #12]
 800aa32:	1d19      	adds	r1, r3, #4
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	9103      	str	r1, [sp, #12]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	bfbb      	ittet	lt
 800aa3c:	425b      	neglt	r3, r3
 800aa3e:	f042 0202 	orrlt.w	r2, r2, #2
 800aa42:	9307      	strge	r3, [sp, #28]
 800aa44:	9307      	strlt	r3, [sp, #28]
 800aa46:	bfb8      	it	lt
 800aa48:	9204      	strlt	r2, [sp, #16]
 800aa4a:	7823      	ldrb	r3, [r4, #0]
 800aa4c:	2b2e      	cmp	r3, #46	; 0x2e
 800aa4e:	d10c      	bne.n	800aa6a <_vfiprintf_r+0x176>
 800aa50:	7863      	ldrb	r3, [r4, #1]
 800aa52:	2b2a      	cmp	r3, #42	; 0x2a
 800aa54:	d135      	bne.n	800aac2 <_vfiprintf_r+0x1ce>
 800aa56:	9b03      	ldr	r3, [sp, #12]
 800aa58:	1d1a      	adds	r2, r3, #4
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	9203      	str	r2, [sp, #12]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	bfb8      	it	lt
 800aa62:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa66:	3402      	adds	r4, #2
 800aa68:	9305      	str	r3, [sp, #20]
 800aa6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ab50 <_vfiprintf_r+0x25c>
 800aa6e:	7821      	ldrb	r1, [r4, #0]
 800aa70:	2203      	movs	r2, #3
 800aa72:	4650      	mov	r0, sl
 800aa74:	f7f5 fbd4 	bl	8000220 <memchr>
 800aa78:	b140      	cbz	r0, 800aa8c <_vfiprintf_r+0x198>
 800aa7a:	2340      	movs	r3, #64	; 0x40
 800aa7c:	eba0 000a 	sub.w	r0, r0, sl
 800aa80:	fa03 f000 	lsl.w	r0, r3, r0
 800aa84:	9b04      	ldr	r3, [sp, #16]
 800aa86:	4303      	orrs	r3, r0
 800aa88:	3401      	adds	r4, #1
 800aa8a:	9304      	str	r3, [sp, #16]
 800aa8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa90:	482c      	ldr	r0, [pc, #176]	; (800ab44 <_vfiprintf_r+0x250>)
 800aa92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa96:	2206      	movs	r2, #6
 800aa98:	f7f5 fbc2 	bl	8000220 <memchr>
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	d03f      	beq.n	800ab20 <_vfiprintf_r+0x22c>
 800aaa0:	4b29      	ldr	r3, [pc, #164]	; (800ab48 <_vfiprintf_r+0x254>)
 800aaa2:	bb1b      	cbnz	r3, 800aaec <_vfiprintf_r+0x1f8>
 800aaa4:	9b03      	ldr	r3, [sp, #12]
 800aaa6:	3307      	adds	r3, #7
 800aaa8:	f023 0307 	bic.w	r3, r3, #7
 800aaac:	3308      	adds	r3, #8
 800aaae:	9303      	str	r3, [sp, #12]
 800aab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aab2:	443b      	add	r3, r7
 800aab4:	9309      	str	r3, [sp, #36]	; 0x24
 800aab6:	e767      	b.n	800a988 <_vfiprintf_r+0x94>
 800aab8:	fb0c 3202 	mla	r2, ip, r2, r3
 800aabc:	460c      	mov	r4, r1
 800aabe:	2001      	movs	r0, #1
 800aac0:	e7a5      	b.n	800aa0e <_vfiprintf_r+0x11a>
 800aac2:	2300      	movs	r3, #0
 800aac4:	3401      	adds	r4, #1
 800aac6:	9305      	str	r3, [sp, #20]
 800aac8:	4619      	mov	r1, r3
 800aaca:	f04f 0c0a 	mov.w	ip, #10
 800aace:	4620      	mov	r0, r4
 800aad0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aad4:	3a30      	subs	r2, #48	; 0x30
 800aad6:	2a09      	cmp	r2, #9
 800aad8:	d903      	bls.n	800aae2 <_vfiprintf_r+0x1ee>
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d0c5      	beq.n	800aa6a <_vfiprintf_r+0x176>
 800aade:	9105      	str	r1, [sp, #20]
 800aae0:	e7c3      	b.n	800aa6a <_vfiprintf_r+0x176>
 800aae2:	fb0c 2101 	mla	r1, ip, r1, r2
 800aae6:	4604      	mov	r4, r0
 800aae8:	2301      	movs	r3, #1
 800aaea:	e7f0      	b.n	800aace <_vfiprintf_r+0x1da>
 800aaec:	ab03      	add	r3, sp, #12
 800aaee:	9300      	str	r3, [sp, #0]
 800aaf0:	462a      	mov	r2, r5
 800aaf2:	4b16      	ldr	r3, [pc, #88]	; (800ab4c <_vfiprintf_r+0x258>)
 800aaf4:	a904      	add	r1, sp, #16
 800aaf6:	4630      	mov	r0, r6
 800aaf8:	f3af 8000 	nop.w
 800aafc:	4607      	mov	r7, r0
 800aafe:	1c78      	adds	r0, r7, #1
 800ab00:	d1d6      	bne.n	800aab0 <_vfiprintf_r+0x1bc>
 800ab02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab04:	07d9      	lsls	r1, r3, #31
 800ab06:	d405      	bmi.n	800ab14 <_vfiprintf_r+0x220>
 800ab08:	89ab      	ldrh	r3, [r5, #12]
 800ab0a:	059a      	lsls	r2, r3, #22
 800ab0c:	d402      	bmi.n	800ab14 <_vfiprintf_r+0x220>
 800ab0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab10:	f7ff fc23 	bl	800a35a <__retarget_lock_release_recursive>
 800ab14:	89ab      	ldrh	r3, [r5, #12]
 800ab16:	065b      	lsls	r3, r3, #25
 800ab18:	f53f af12 	bmi.w	800a940 <_vfiprintf_r+0x4c>
 800ab1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab1e:	e711      	b.n	800a944 <_vfiprintf_r+0x50>
 800ab20:	ab03      	add	r3, sp, #12
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	462a      	mov	r2, r5
 800ab26:	4b09      	ldr	r3, [pc, #36]	; (800ab4c <_vfiprintf_r+0x258>)
 800ab28:	a904      	add	r1, sp, #16
 800ab2a:	4630      	mov	r0, r6
 800ab2c:	f000 f880 	bl	800ac30 <_printf_i>
 800ab30:	e7e4      	b.n	800aafc <_vfiprintf_r+0x208>
 800ab32:	bf00      	nop
 800ab34:	0800b3dc 	.word	0x0800b3dc
 800ab38:	0800b3fc 	.word	0x0800b3fc
 800ab3c:	0800b3bc 	.word	0x0800b3bc
 800ab40:	0800b41c 	.word	0x0800b41c
 800ab44:	0800b426 	.word	0x0800b426
 800ab48:	00000000 	.word	0x00000000
 800ab4c:	0800a8cf 	.word	0x0800a8cf
 800ab50:	0800b422 	.word	0x0800b422

0800ab54 <_printf_common>:
 800ab54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab58:	4616      	mov	r6, r2
 800ab5a:	4699      	mov	r9, r3
 800ab5c:	688a      	ldr	r2, [r1, #8]
 800ab5e:	690b      	ldr	r3, [r1, #16]
 800ab60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab64:	4293      	cmp	r3, r2
 800ab66:	bfb8      	it	lt
 800ab68:	4613      	movlt	r3, r2
 800ab6a:	6033      	str	r3, [r6, #0]
 800ab6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab70:	4607      	mov	r7, r0
 800ab72:	460c      	mov	r4, r1
 800ab74:	b10a      	cbz	r2, 800ab7a <_printf_common+0x26>
 800ab76:	3301      	adds	r3, #1
 800ab78:	6033      	str	r3, [r6, #0]
 800ab7a:	6823      	ldr	r3, [r4, #0]
 800ab7c:	0699      	lsls	r1, r3, #26
 800ab7e:	bf42      	ittt	mi
 800ab80:	6833      	ldrmi	r3, [r6, #0]
 800ab82:	3302      	addmi	r3, #2
 800ab84:	6033      	strmi	r3, [r6, #0]
 800ab86:	6825      	ldr	r5, [r4, #0]
 800ab88:	f015 0506 	ands.w	r5, r5, #6
 800ab8c:	d106      	bne.n	800ab9c <_printf_common+0x48>
 800ab8e:	f104 0a19 	add.w	sl, r4, #25
 800ab92:	68e3      	ldr	r3, [r4, #12]
 800ab94:	6832      	ldr	r2, [r6, #0]
 800ab96:	1a9b      	subs	r3, r3, r2
 800ab98:	42ab      	cmp	r3, r5
 800ab9a:	dc26      	bgt.n	800abea <_printf_common+0x96>
 800ab9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aba0:	1e13      	subs	r3, r2, #0
 800aba2:	6822      	ldr	r2, [r4, #0]
 800aba4:	bf18      	it	ne
 800aba6:	2301      	movne	r3, #1
 800aba8:	0692      	lsls	r2, r2, #26
 800abaa:	d42b      	bmi.n	800ac04 <_printf_common+0xb0>
 800abac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abb0:	4649      	mov	r1, r9
 800abb2:	4638      	mov	r0, r7
 800abb4:	47c0      	blx	r8
 800abb6:	3001      	adds	r0, #1
 800abb8:	d01e      	beq.n	800abf8 <_printf_common+0xa4>
 800abba:	6823      	ldr	r3, [r4, #0]
 800abbc:	68e5      	ldr	r5, [r4, #12]
 800abbe:	6832      	ldr	r2, [r6, #0]
 800abc0:	f003 0306 	and.w	r3, r3, #6
 800abc4:	2b04      	cmp	r3, #4
 800abc6:	bf08      	it	eq
 800abc8:	1aad      	subeq	r5, r5, r2
 800abca:	68a3      	ldr	r3, [r4, #8]
 800abcc:	6922      	ldr	r2, [r4, #16]
 800abce:	bf0c      	ite	eq
 800abd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abd4:	2500      	movne	r5, #0
 800abd6:	4293      	cmp	r3, r2
 800abd8:	bfc4      	itt	gt
 800abda:	1a9b      	subgt	r3, r3, r2
 800abdc:	18ed      	addgt	r5, r5, r3
 800abde:	2600      	movs	r6, #0
 800abe0:	341a      	adds	r4, #26
 800abe2:	42b5      	cmp	r5, r6
 800abe4:	d11a      	bne.n	800ac1c <_printf_common+0xc8>
 800abe6:	2000      	movs	r0, #0
 800abe8:	e008      	b.n	800abfc <_printf_common+0xa8>
 800abea:	2301      	movs	r3, #1
 800abec:	4652      	mov	r2, sl
 800abee:	4649      	mov	r1, r9
 800abf0:	4638      	mov	r0, r7
 800abf2:	47c0      	blx	r8
 800abf4:	3001      	adds	r0, #1
 800abf6:	d103      	bne.n	800ac00 <_printf_common+0xac>
 800abf8:	f04f 30ff 	mov.w	r0, #4294967295
 800abfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac00:	3501      	adds	r5, #1
 800ac02:	e7c6      	b.n	800ab92 <_printf_common+0x3e>
 800ac04:	18e1      	adds	r1, r4, r3
 800ac06:	1c5a      	adds	r2, r3, #1
 800ac08:	2030      	movs	r0, #48	; 0x30
 800ac0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac0e:	4422      	add	r2, r4
 800ac10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac18:	3302      	adds	r3, #2
 800ac1a:	e7c7      	b.n	800abac <_printf_common+0x58>
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	4622      	mov	r2, r4
 800ac20:	4649      	mov	r1, r9
 800ac22:	4638      	mov	r0, r7
 800ac24:	47c0      	blx	r8
 800ac26:	3001      	adds	r0, #1
 800ac28:	d0e6      	beq.n	800abf8 <_printf_common+0xa4>
 800ac2a:	3601      	adds	r6, #1
 800ac2c:	e7d9      	b.n	800abe2 <_printf_common+0x8e>
	...

0800ac30 <_printf_i>:
 800ac30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac34:	7e0f      	ldrb	r7, [r1, #24]
 800ac36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac38:	2f78      	cmp	r7, #120	; 0x78
 800ac3a:	4691      	mov	r9, r2
 800ac3c:	4680      	mov	r8, r0
 800ac3e:	460c      	mov	r4, r1
 800ac40:	469a      	mov	sl, r3
 800ac42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ac46:	d807      	bhi.n	800ac58 <_printf_i+0x28>
 800ac48:	2f62      	cmp	r7, #98	; 0x62
 800ac4a:	d80a      	bhi.n	800ac62 <_printf_i+0x32>
 800ac4c:	2f00      	cmp	r7, #0
 800ac4e:	f000 80d8 	beq.w	800ae02 <_printf_i+0x1d2>
 800ac52:	2f58      	cmp	r7, #88	; 0x58
 800ac54:	f000 80a3 	beq.w	800ad9e <_printf_i+0x16e>
 800ac58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac60:	e03a      	b.n	800acd8 <_printf_i+0xa8>
 800ac62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac66:	2b15      	cmp	r3, #21
 800ac68:	d8f6      	bhi.n	800ac58 <_printf_i+0x28>
 800ac6a:	a101      	add	r1, pc, #4	; (adr r1, 800ac70 <_printf_i+0x40>)
 800ac6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac70:	0800acc9 	.word	0x0800acc9
 800ac74:	0800acdd 	.word	0x0800acdd
 800ac78:	0800ac59 	.word	0x0800ac59
 800ac7c:	0800ac59 	.word	0x0800ac59
 800ac80:	0800ac59 	.word	0x0800ac59
 800ac84:	0800ac59 	.word	0x0800ac59
 800ac88:	0800acdd 	.word	0x0800acdd
 800ac8c:	0800ac59 	.word	0x0800ac59
 800ac90:	0800ac59 	.word	0x0800ac59
 800ac94:	0800ac59 	.word	0x0800ac59
 800ac98:	0800ac59 	.word	0x0800ac59
 800ac9c:	0800ade9 	.word	0x0800ade9
 800aca0:	0800ad0d 	.word	0x0800ad0d
 800aca4:	0800adcb 	.word	0x0800adcb
 800aca8:	0800ac59 	.word	0x0800ac59
 800acac:	0800ac59 	.word	0x0800ac59
 800acb0:	0800ae0b 	.word	0x0800ae0b
 800acb4:	0800ac59 	.word	0x0800ac59
 800acb8:	0800ad0d 	.word	0x0800ad0d
 800acbc:	0800ac59 	.word	0x0800ac59
 800acc0:	0800ac59 	.word	0x0800ac59
 800acc4:	0800add3 	.word	0x0800add3
 800acc8:	682b      	ldr	r3, [r5, #0]
 800acca:	1d1a      	adds	r2, r3, #4
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	602a      	str	r2, [r5, #0]
 800acd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800acd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800acd8:	2301      	movs	r3, #1
 800acda:	e0a3      	b.n	800ae24 <_printf_i+0x1f4>
 800acdc:	6820      	ldr	r0, [r4, #0]
 800acde:	6829      	ldr	r1, [r5, #0]
 800ace0:	0606      	lsls	r6, r0, #24
 800ace2:	f101 0304 	add.w	r3, r1, #4
 800ace6:	d50a      	bpl.n	800acfe <_printf_i+0xce>
 800ace8:	680e      	ldr	r6, [r1, #0]
 800acea:	602b      	str	r3, [r5, #0]
 800acec:	2e00      	cmp	r6, #0
 800acee:	da03      	bge.n	800acf8 <_printf_i+0xc8>
 800acf0:	232d      	movs	r3, #45	; 0x2d
 800acf2:	4276      	negs	r6, r6
 800acf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acf8:	485e      	ldr	r0, [pc, #376]	; (800ae74 <_printf_i+0x244>)
 800acfa:	230a      	movs	r3, #10
 800acfc:	e019      	b.n	800ad32 <_printf_i+0x102>
 800acfe:	680e      	ldr	r6, [r1, #0]
 800ad00:	602b      	str	r3, [r5, #0]
 800ad02:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad06:	bf18      	it	ne
 800ad08:	b236      	sxthne	r6, r6
 800ad0a:	e7ef      	b.n	800acec <_printf_i+0xbc>
 800ad0c:	682b      	ldr	r3, [r5, #0]
 800ad0e:	6820      	ldr	r0, [r4, #0]
 800ad10:	1d19      	adds	r1, r3, #4
 800ad12:	6029      	str	r1, [r5, #0]
 800ad14:	0601      	lsls	r1, r0, #24
 800ad16:	d501      	bpl.n	800ad1c <_printf_i+0xec>
 800ad18:	681e      	ldr	r6, [r3, #0]
 800ad1a:	e002      	b.n	800ad22 <_printf_i+0xf2>
 800ad1c:	0646      	lsls	r6, r0, #25
 800ad1e:	d5fb      	bpl.n	800ad18 <_printf_i+0xe8>
 800ad20:	881e      	ldrh	r6, [r3, #0]
 800ad22:	4854      	ldr	r0, [pc, #336]	; (800ae74 <_printf_i+0x244>)
 800ad24:	2f6f      	cmp	r7, #111	; 0x6f
 800ad26:	bf0c      	ite	eq
 800ad28:	2308      	moveq	r3, #8
 800ad2a:	230a      	movne	r3, #10
 800ad2c:	2100      	movs	r1, #0
 800ad2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad32:	6865      	ldr	r5, [r4, #4]
 800ad34:	60a5      	str	r5, [r4, #8]
 800ad36:	2d00      	cmp	r5, #0
 800ad38:	bfa2      	ittt	ge
 800ad3a:	6821      	ldrge	r1, [r4, #0]
 800ad3c:	f021 0104 	bicge.w	r1, r1, #4
 800ad40:	6021      	strge	r1, [r4, #0]
 800ad42:	b90e      	cbnz	r6, 800ad48 <_printf_i+0x118>
 800ad44:	2d00      	cmp	r5, #0
 800ad46:	d04d      	beq.n	800ade4 <_printf_i+0x1b4>
 800ad48:	4615      	mov	r5, r2
 800ad4a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ad4e:	fb03 6711 	mls	r7, r3, r1, r6
 800ad52:	5dc7      	ldrb	r7, [r0, r7]
 800ad54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ad58:	4637      	mov	r7, r6
 800ad5a:	42bb      	cmp	r3, r7
 800ad5c:	460e      	mov	r6, r1
 800ad5e:	d9f4      	bls.n	800ad4a <_printf_i+0x11a>
 800ad60:	2b08      	cmp	r3, #8
 800ad62:	d10b      	bne.n	800ad7c <_printf_i+0x14c>
 800ad64:	6823      	ldr	r3, [r4, #0]
 800ad66:	07de      	lsls	r6, r3, #31
 800ad68:	d508      	bpl.n	800ad7c <_printf_i+0x14c>
 800ad6a:	6923      	ldr	r3, [r4, #16]
 800ad6c:	6861      	ldr	r1, [r4, #4]
 800ad6e:	4299      	cmp	r1, r3
 800ad70:	bfde      	ittt	le
 800ad72:	2330      	movle	r3, #48	; 0x30
 800ad74:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad78:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ad7c:	1b52      	subs	r2, r2, r5
 800ad7e:	6122      	str	r2, [r4, #16]
 800ad80:	f8cd a000 	str.w	sl, [sp]
 800ad84:	464b      	mov	r3, r9
 800ad86:	aa03      	add	r2, sp, #12
 800ad88:	4621      	mov	r1, r4
 800ad8a:	4640      	mov	r0, r8
 800ad8c:	f7ff fee2 	bl	800ab54 <_printf_common>
 800ad90:	3001      	adds	r0, #1
 800ad92:	d14c      	bne.n	800ae2e <_printf_i+0x1fe>
 800ad94:	f04f 30ff 	mov.w	r0, #4294967295
 800ad98:	b004      	add	sp, #16
 800ad9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad9e:	4835      	ldr	r0, [pc, #212]	; (800ae74 <_printf_i+0x244>)
 800ada0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ada4:	6829      	ldr	r1, [r5, #0]
 800ada6:	6823      	ldr	r3, [r4, #0]
 800ada8:	f851 6b04 	ldr.w	r6, [r1], #4
 800adac:	6029      	str	r1, [r5, #0]
 800adae:	061d      	lsls	r5, r3, #24
 800adb0:	d514      	bpl.n	800addc <_printf_i+0x1ac>
 800adb2:	07df      	lsls	r7, r3, #31
 800adb4:	bf44      	itt	mi
 800adb6:	f043 0320 	orrmi.w	r3, r3, #32
 800adba:	6023      	strmi	r3, [r4, #0]
 800adbc:	b91e      	cbnz	r6, 800adc6 <_printf_i+0x196>
 800adbe:	6823      	ldr	r3, [r4, #0]
 800adc0:	f023 0320 	bic.w	r3, r3, #32
 800adc4:	6023      	str	r3, [r4, #0]
 800adc6:	2310      	movs	r3, #16
 800adc8:	e7b0      	b.n	800ad2c <_printf_i+0xfc>
 800adca:	6823      	ldr	r3, [r4, #0]
 800adcc:	f043 0320 	orr.w	r3, r3, #32
 800add0:	6023      	str	r3, [r4, #0]
 800add2:	2378      	movs	r3, #120	; 0x78
 800add4:	4828      	ldr	r0, [pc, #160]	; (800ae78 <_printf_i+0x248>)
 800add6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800adda:	e7e3      	b.n	800ada4 <_printf_i+0x174>
 800addc:	0659      	lsls	r1, r3, #25
 800adde:	bf48      	it	mi
 800ade0:	b2b6      	uxthmi	r6, r6
 800ade2:	e7e6      	b.n	800adb2 <_printf_i+0x182>
 800ade4:	4615      	mov	r5, r2
 800ade6:	e7bb      	b.n	800ad60 <_printf_i+0x130>
 800ade8:	682b      	ldr	r3, [r5, #0]
 800adea:	6826      	ldr	r6, [r4, #0]
 800adec:	6961      	ldr	r1, [r4, #20]
 800adee:	1d18      	adds	r0, r3, #4
 800adf0:	6028      	str	r0, [r5, #0]
 800adf2:	0635      	lsls	r5, r6, #24
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	d501      	bpl.n	800adfc <_printf_i+0x1cc>
 800adf8:	6019      	str	r1, [r3, #0]
 800adfa:	e002      	b.n	800ae02 <_printf_i+0x1d2>
 800adfc:	0670      	lsls	r0, r6, #25
 800adfe:	d5fb      	bpl.n	800adf8 <_printf_i+0x1c8>
 800ae00:	8019      	strh	r1, [r3, #0]
 800ae02:	2300      	movs	r3, #0
 800ae04:	6123      	str	r3, [r4, #16]
 800ae06:	4615      	mov	r5, r2
 800ae08:	e7ba      	b.n	800ad80 <_printf_i+0x150>
 800ae0a:	682b      	ldr	r3, [r5, #0]
 800ae0c:	1d1a      	adds	r2, r3, #4
 800ae0e:	602a      	str	r2, [r5, #0]
 800ae10:	681d      	ldr	r5, [r3, #0]
 800ae12:	6862      	ldr	r2, [r4, #4]
 800ae14:	2100      	movs	r1, #0
 800ae16:	4628      	mov	r0, r5
 800ae18:	f7f5 fa02 	bl	8000220 <memchr>
 800ae1c:	b108      	cbz	r0, 800ae22 <_printf_i+0x1f2>
 800ae1e:	1b40      	subs	r0, r0, r5
 800ae20:	6060      	str	r0, [r4, #4]
 800ae22:	6863      	ldr	r3, [r4, #4]
 800ae24:	6123      	str	r3, [r4, #16]
 800ae26:	2300      	movs	r3, #0
 800ae28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae2c:	e7a8      	b.n	800ad80 <_printf_i+0x150>
 800ae2e:	6923      	ldr	r3, [r4, #16]
 800ae30:	462a      	mov	r2, r5
 800ae32:	4649      	mov	r1, r9
 800ae34:	4640      	mov	r0, r8
 800ae36:	47d0      	blx	sl
 800ae38:	3001      	adds	r0, #1
 800ae3a:	d0ab      	beq.n	800ad94 <_printf_i+0x164>
 800ae3c:	6823      	ldr	r3, [r4, #0]
 800ae3e:	079b      	lsls	r3, r3, #30
 800ae40:	d413      	bmi.n	800ae6a <_printf_i+0x23a>
 800ae42:	68e0      	ldr	r0, [r4, #12]
 800ae44:	9b03      	ldr	r3, [sp, #12]
 800ae46:	4298      	cmp	r0, r3
 800ae48:	bfb8      	it	lt
 800ae4a:	4618      	movlt	r0, r3
 800ae4c:	e7a4      	b.n	800ad98 <_printf_i+0x168>
 800ae4e:	2301      	movs	r3, #1
 800ae50:	4632      	mov	r2, r6
 800ae52:	4649      	mov	r1, r9
 800ae54:	4640      	mov	r0, r8
 800ae56:	47d0      	blx	sl
 800ae58:	3001      	adds	r0, #1
 800ae5a:	d09b      	beq.n	800ad94 <_printf_i+0x164>
 800ae5c:	3501      	adds	r5, #1
 800ae5e:	68e3      	ldr	r3, [r4, #12]
 800ae60:	9903      	ldr	r1, [sp, #12]
 800ae62:	1a5b      	subs	r3, r3, r1
 800ae64:	42ab      	cmp	r3, r5
 800ae66:	dcf2      	bgt.n	800ae4e <_printf_i+0x21e>
 800ae68:	e7eb      	b.n	800ae42 <_printf_i+0x212>
 800ae6a:	2500      	movs	r5, #0
 800ae6c:	f104 0619 	add.w	r6, r4, #25
 800ae70:	e7f5      	b.n	800ae5e <_printf_i+0x22e>
 800ae72:	bf00      	nop
 800ae74:	0800b42d 	.word	0x0800b42d
 800ae78:	0800b43e 	.word	0x0800b43e

0800ae7c <_sbrk_r>:
 800ae7c:	b538      	push	{r3, r4, r5, lr}
 800ae7e:	4d06      	ldr	r5, [pc, #24]	; (800ae98 <_sbrk_r+0x1c>)
 800ae80:	2300      	movs	r3, #0
 800ae82:	4604      	mov	r4, r0
 800ae84:	4608      	mov	r0, r1
 800ae86:	602b      	str	r3, [r5, #0]
 800ae88:	f7f6 fb4a 	bl	8001520 <_sbrk>
 800ae8c:	1c43      	adds	r3, r0, #1
 800ae8e:	d102      	bne.n	800ae96 <_sbrk_r+0x1a>
 800ae90:	682b      	ldr	r3, [r5, #0]
 800ae92:	b103      	cbz	r3, 800ae96 <_sbrk_r+0x1a>
 800ae94:	6023      	str	r3, [r4, #0]
 800ae96:	bd38      	pop	{r3, r4, r5, pc}
 800ae98:	20002f24 	.word	0x20002f24

0800ae9c <__sread>:
 800ae9c:	b510      	push	{r4, lr}
 800ae9e:	460c      	mov	r4, r1
 800aea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aea4:	f000 f8f8 	bl	800b098 <_read_r>
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	bfab      	itete	ge
 800aeac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aeae:	89a3      	ldrhlt	r3, [r4, #12]
 800aeb0:	181b      	addge	r3, r3, r0
 800aeb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aeb6:	bfac      	ite	ge
 800aeb8:	6563      	strge	r3, [r4, #84]	; 0x54
 800aeba:	81a3      	strhlt	r3, [r4, #12]
 800aebc:	bd10      	pop	{r4, pc}

0800aebe <__swrite>:
 800aebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aec2:	461f      	mov	r7, r3
 800aec4:	898b      	ldrh	r3, [r1, #12]
 800aec6:	05db      	lsls	r3, r3, #23
 800aec8:	4605      	mov	r5, r0
 800aeca:	460c      	mov	r4, r1
 800aecc:	4616      	mov	r6, r2
 800aece:	d505      	bpl.n	800aedc <__swrite+0x1e>
 800aed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aed4:	2302      	movs	r3, #2
 800aed6:	2200      	movs	r2, #0
 800aed8:	f000 f868 	bl	800afac <_lseek_r>
 800aedc:	89a3      	ldrh	r3, [r4, #12]
 800aede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aee2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aee6:	81a3      	strh	r3, [r4, #12]
 800aee8:	4632      	mov	r2, r6
 800aeea:	463b      	mov	r3, r7
 800aeec:	4628      	mov	r0, r5
 800aeee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aef2:	f000 b817 	b.w	800af24 <_write_r>

0800aef6 <__sseek>:
 800aef6:	b510      	push	{r4, lr}
 800aef8:	460c      	mov	r4, r1
 800aefa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aefe:	f000 f855 	bl	800afac <_lseek_r>
 800af02:	1c43      	adds	r3, r0, #1
 800af04:	89a3      	ldrh	r3, [r4, #12]
 800af06:	bf15      	itete	ne
 800af08:	6560      	strne	r0, [r4, #84]	; 0x54
 800af0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af12:	81a3      	strheq	r3, [r4, #12]
 800af14:	bf18      	it	ne
 800af16:	81a3      	strhne	r3, [r4, #12]
 800af18:	bd10      	pop	{r4, pc}

0800af1a <__sclose>:
 800af1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af1e:	f000 b813 	b.w	800af48 <_close_r>
	...

0800af24 <_write_r>:
 800af24:	b538      	push	{r3, r4, r5, lr}
 800af26:	4d07      	ldr	r5, [pc, #28]	; (800af44 <_write_r+0x20>)
 800af28:	4604      	mov	r4, r0
 800af2a:	4608      	mov	r0, r1
 800af2c:	4611      	mov	r1, r2
 800af2e:	2200      	movs	r2, #0
 800af30:	602a      	str	r2, [r5, #0]
 800af32:	461a      	mov	r2, r3
 800af34:	f7f5 fb6d 	bl	8000612 <_write>
 800af38:	1c43      	adds	r3, r0, #1
 800af3a:	d102      	bne.n	800af42 <_write_r+0x1e>
 800af3c:	682b      	ldr	r3, [r5, #0]
 800af3e:	b103      	cbz	r3, 800af42 <_write_r+0x1e>
 800af40:	6023      	str	r3, [r4, #0]
 800af42:	bd38      	pop	{r3, r4, r5, pc}
 800af44:	20002f24 	.word	0x20002f24

0800af48 <_close_r>:
 800af48:	b538      	push	{r3, r4, r5, lr}
 800af4a:	4d06      	ldr	r5, [pc, #24]	; (800af64 <_close_r+0x1c>)
 800af4c:	2300      	movs	r3, #0
 800af4e:	4604      	mov	r4, r0
 800af50:	4608      	mov	r0, r1
 800af52:	602b      	str	r3, [r5, #0]
 800af54:	f7f6 faaf 	bl	80014b6 <_close>
 800af58:	1c43      	adds	r3, r0, #1
 800af5a:	d102      	bne.n	800af62 <_close_r+0x1a>
 800af5c:	682b      	ldr	r3, [r5, #0]
 800af5e:	b103      	cbz	r3, 800af62 <_close_r+0x1a>
 800af60:	6023      	str	r3, [r4, #0]
 800af62:	bd38      	pop	{r3, r4, r5, pc}
 800af64:	20002f24 	.word	0x20002f24

0800af68 <_fstat_r>:
 800af68:	b538      	push	{r3, r4, r5, lr}
 800af6a:	4d07      	ldr	r5, [pc, #28]	; (800af88 <_fstat_r+0x20>)
 800af6c:	2300      	movs	r3, #0
 800af6e:	4604      	mov	r4, r0
 800af70:	4608      	mov	r0, r1
 800af72:	4611      	mov	r1, r2
 800af74:	602b      	str	r3, [r5, #0]
 800af76:	f7f6 faaa 	bl	80014ce <_fstat>
 800af7a:	1c43      	adds	r3, r0, #1
 800af7c:	d102      	bne.n	800af84 <_fstat_r+0x1c>
 800af7e:	682b      	ldr	r3, [r5, #0]
 800af80:	b103      	cbz	r3, 800af84 <_fstat_r+0x1c>
 800af82:	6023      	str	r3, [r4, #0]
 800af84:	bd38      	pop	{r3, r4, r5, pc}
 800af86:	bf00      	nop
 800af88:	20002f24 	.word	0x20002f24

0800af8c <_isatty_r>:
 800af8c:	b538      	push	{r3, r4, r5, lr}
 800af8e:	4d06      	ldr	r5, [pc, #24]	; (800afa8 <_isatty_r+0x1c>)
 800af90:	2300      	movs	r3, #0
 800af92:	4604      	mov	r4, r0
 800af94:	4608      	mov	r0, r1
 800af96:	602b      	str	r3, [r5, #0]
 800af98:	f7f6 faa9 	bl	80014ee <_isatty>
 800af9c:	1c43      	adds	r3, r0, #1
 800af9e:	d102      	bne.n	800afa6 <_isatty_r+0x1a>
 800afa0:	682b      	ldr	r3, [r5, #0]
 800afa2:	b103      	cbz	r3, 800afa6 <_isatty_r+0x1a>
 800afa4:	6023      	str	r3, [r4, #0]
 800afa6:	bd38      	pop	{r3, r4, r5, pc}
 800afa8:	20002f24 	.word	0x20002f24

0800afac <_lseek_r>:
 800afac:	b538      	push	{r3, r4, r5, lr}
 800afae:	4d07      	ldr	r5, [pc, #28]	; (800afcc <_lseek_r+0x20>)
 800afb0:	4604      	mov	r4, r0
 800afb2:	4608      	mov	r0, r1
 800afb4:	4611      	mov	r1, r2
 800afb6:	2200      	movs	r2, #0
 800afb8:	602a      	str	r2, [r5, #0]
 800afba:	461a      	mov	r2, r3
 800afbc:	f7f6 faa2 	bl	8001504 <_lseek>
 800afc0:	1c43      	adds	r3, r0, #1
 800afc2:	d102      	bne.n	800afca <_lseek_r+0x1e>
 800afc4:	682b      	ldr	r3, [r5, #0]
 800afc6:	b103      	cbz	r3, 800afca <_lseek_r+0x1e>
 800afc8:	6023      	str	r3, [r4, #0]
 800afca:	bd38      	pop	{r3, r4, r5, pc}
 800afcc:	20002f24 	.word	0x20002f24

0800afd0 <memcpy>:
 800afd0:	440a      	add	r2, r1
 800afd2:	4291      	cmp	r1, r2
 800afd4:	f100 33ff 	add.w	r3, r0, #4294967295
 800afd8:	d100      	bne.n	800afdc <memcpy+0xc>
 800afda:	4770      	bx	lr
 800afdc:	b510      	push	{r4, lr}
 800afde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afe2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afe6:	4291      	cmp	r1, r2
 800afe8:	d1f9      	bne.n	800afde <memcpy+0xe>
 800afea:	bd10      	pop	{r4, pc}

0800afec <memmove>:
 800afec:	4288      	cmp	r0, r1
 800afee:	b510      	push	{r4, lr}
 800aff0:	eb01 0402 	add.w	r4, r1, r2
 800aff4:	d902      	bls.n	800affc <memmove+0x10>
 800aff6:	4284      	cmp	r4, r0
 800aff8:	4623      	mov	r3, r4
 800affa:	d807      	bhi.n	800b00c <memmove+0x20>
 800affc:	1e43      	subs	r3, r0, #1
 800affe:	42a1      	cmp	r1, r4
 800b000:	d008      	beq.n	800b014 <memmove+0x28>
 800b002:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b006:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b00a:	e7f8      	b.n	800affe <memmove+0x12>
 800b00c:	4402      	add	r2, r0
 800b00e:	4601      	mov	r1, r0
 800b010:	428a      	cmp	r2, r1
 800b012:	d100      	bne.n	800b016 <memmove+0x2a>
 800b014:	bd10      	pop	{r4, pc}
 800b016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b01a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b01e:	e7f7      	b.n	800b010 <memmove+0x24>

0800b020 <__malloc_lock>:
 800b020:	4801      	ldr	r0, [pc, #4]	; (800b028 <__malloc_lock+0x8>)
 800b022:	f7ff b999 	b.w	800a358 <__retarget_lock_acquire_recursive>
 800b026:	bf00      	nop
 800b028:	20002f18 	.word	0x20002f18

0800b02c <__malloc_unlock>:
 800b02c:	4801      	ldr	r0, [pc, #4]	; (800b034 <__malloc_unlock+0x8>)
 800b02e:	f7ff b994 	b.w	800a35a <__retarget_lock_release_recursive>
 800b032:	bf00      	nop
 800b034:	20002f18 	.word	0x20002f18

0800b038 <_realloc_r>:
 800b038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b03c:	4680      	mov	r8, r0
 800b03e:	4614      	mov	r4, r2
 800b040:	460e      	mov	r6, r1
 800b042:	b921      	cbnz	r1, 800b04e <_realloc_r+0x16>
 800b044:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b048:	4611      	mov	r1, r2
 800b04a:	f7ff ba59 	b.w	800a500 <_malloc_r>
 800b04e:	b92a      	cbnz	r2, 800b05c <_realloc_r+0x24>
 800b050:	f7ff f9ea 	bl	800a428 <_free_r>
 800b054:	4625      	mov	r5, r4
 800b056:	4628      	mov	r0, r5
 800b058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b05c:	f000 f82e 	bl	800b0bc <_malloc_usable_size_r>
 800b060:	4284      	cmp	r4, r0
 800b062:	4607      	mov	r7, r0
 800b064:	d802      	bhi.n	800b06c <_realloc_r+0x34>
 800b066:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b06a:	d812      	bhi.n	800b092 <_realloc_r+0x5a>
 800b06c:	4621      	mov	r1, r4
 800b06e:	4640      	mov	r0, r8
 800b070:	f7ff fa46 	bl	800a500 <_malloc_r>
 800b074:	4605      	mov	r5, r0
 800b076:	2800      	cmp	r0, #0
 800b078:	d0ed      	beq.n	800b056 <_realloc_r+0x1e>
 800b07a:	42bc      	cmp	r4, r7
 800b07c:	4622      	mov	r2, r4
 800b07e:	4631      	mov	r1, r6
 800b080:	bf28      	it	cs
 800b082:	463a      	movcs	r2, r7
 800b084:	f7ff ffa4 	bl	800afd0 <memcpy>
 800b088:	4631      	mov	r1, r6
 800b08a:	4640      	mov	r0, r8
 800b08c:	f7ff f9cc 	bl	800a428 <_free_r>
 800b090:	e7e1      	b.n	800b056 <_realloc_r+0x1e>
 800b092:	4635      	mov	r5, r6
 800b094:	e7df      	b.n	800b056 <_realloc_r+0x1e>
	...

0800b098 <_read_r>:
 800b098:	b538      	push	{r3, r4, r5, lr}
 800b09a:	4d07      	ldr	r5, [pc, #28]	; (800b0b8 <_read_r+0x20>)
 800b09c:	4604      	mov	r4, r0
 800b09e:	4608      	mov	r0, r1
 800b0a0:	4611      	mov	r1, r2
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	602a      	str	r2, [r5, #0]
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	f7f6 f9e8 	bl	800147c <_read>
 800b0ac:	1c43      	adds	r3, r0, #1
 800b0ae:	d102      	bne.n	800b0b6 <_read_r+0x1e>
 800b0b0:	682b      	ldr	r3, [r5, #0]
 800b0b2:	b103      	cbz	r3, 800b0b6 <_read_r+0x1e>
 800b0b4:	6023      	str	r3, [r4, #0]
 800b0b6:	bd38      	pop	{r3, r4, r5, pc}
 800b0b8:	20002f24 	.word	0x20002f24

0800b0bc <_malloc_usable_size_r>:
 800b0bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0c0:	1f18      	subs	r0, r3, #4
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	bfbc      	itt	lt
 800b0c6:	580b      	ldrlt	r3, [r1, r0]
 800b0c8:	18c0      	addlt	r0, r0, r3
 800b0ca:	4770      	bx	lr

0800b0cc <_init>:
 800b0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ce:	bf00      	nop
 800b0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0d2:	bc08      	pop	{r3}
 800b0d4:	469e      	mov	lr, r3
 800b0d6:	4770      	bx	lr

0800b0d8 <_fini>:
 800b0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0da:	bf00      	nop
 800b0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0de:	bc08      	pop	{r3}
 800b0e0:	469e      	mov	lr, r3
 800b0e2:	4770      	bx	lr
